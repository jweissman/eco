{"version":3,"sources":["ecosphere/utils/where.ts","ecosphere/utils/isString.ts","collections/Map.ts","collections/List.ts","ecosphere/utils/randomInteger.ts","ecosphere/utils/times.ts","ecosphere/utils/sample.ts","ecosphere/utils/MarkovGenerator.ts","ecosphere/utils/replicate.ts","collections/Sequence.ts","ecosphere/Stocks.ts","ecosphere/Registry.ts","ecosphere/Delta.ts","ecosphere/Model/Simulation.ts","ecosphere/Collection.ts","ecosphere/types/index.ts","ecosphere/Population.ts","ecosphere/Community.ts","ecosphere/Model/Model.ts","ecosphere/Model/presentItem.tsx","ecosphere/View/Tile.tsx","ecosphere/View/presentCommunity.tsx","ecosphere/View/presentIndividual.tsx","ecosphere/utils/capitalize.ts","ecosphere/View/BoardTableView.tsx","ecosphere/View/Heightmap/Lights.tsx","ecosphere/View/Heightmap/Controls.tsx","ecosphere/View/Heightmap/Terrain.tsx","ecosphere/View/Heightmap/Effects.tsx","ecosphere/View/Heightmap/Scene.tsx","ecosphere/View/Heightmap/Canvas.tsx","ecosphere/View/BoardPresenter.tsx","ecosphere/View/ModelView.tsx","ecosphere/Model/index.ts","ModelPresenter.tsx","useModel.tsx","ModelSelector.tsx","ecosphere/Dictionary.ts","ecosphere/Languages/Khuzdul.ts","ecosphere/Languages/Sindarin.ts","ecosphere/Languages/Westron.ts","ecosphere/Languages/Common.ts","examples/Citizen.ts","ecosphere/Board.ts","ecosphere/utils/clamp.ts","ecosphere/utils/distance.ts","ecosphere/Heightmap.ts","ecosphere/utils/any.ts","ecosphere/Cartographer.ts","examples/WorldMap.ts","examples/Language.ts","examples/index.ts","App.tsx","index.tsx"],"names":["where","key","value","it","isString","String","KeyMap","idFor","nameFor","lookup","_data","k","v","this","namesAndValues","Object","entries","map","Number","fromEntries","List","items","count","length","push","filter","item","cb","forEach","fn","Error","randomInteger","min","max","Math","floor","random","times","n","results","i","sample","ts","choose","MarkovGenerator","ngrams","beginnings","text","beginning","substring","gram","next","charAt","hasOwnProperty","current","output","trim","construct","flatten","arrays","Array","apply","concat","Sequence","NameSequence","nameRoots","nameCount","array","replicate","join","StringGeneratorSequence","baseItems","generatedItems","result","generate","attempts","includes","order","generator","feed","boundMethod","StockManager","stocks","stockId","amount","add","name","remove","list","lookupById","Stocks","elements","ids","storage","attrs","attributes","has","manage","id","theEntity","setAmount","element","find","matching","create","flatMap","manageAll","Registry","popCtor","populations","species","values","x","theSpecies","population","populationList","pop","Delta","model","getStocks","changes","baseline","_store","Simulation","ticks","tracking","dynamics","e","flux","target","report","source","theDelta","manager","_delta","theFlows","flow","table","entry","t","flows","each","dynamism","changed","flowsReport","delta","updated","deltaAmount","Collection","pick","d100","animalIds","createAnimal","kind","age","guile","health","spirit","cunning","agility","strength","moietyIds","createMoiety","wealth","sophistication","power","knowledge","physical","social","mental","insight","depth","education","disposition","valor","presence","spiritual","wit","empathy","integrity","beauty","charm","resolve","temperament","judge","quality","qualityValues","matrix","attributeGroup","qualities","q","indexOf","roles","idealist","rational","artisan","guardian","personId","human","size","createPerson","moiety","inventory","traits","soul","roleOptions","role","body","mind","currency","things","meters","memory","SetHelper","set","populationIds","Population","individuals","Set","theList","individual","first","theIndividual","newborn","doomed","destroy","newborns","birth","doneFor","death","build","delete","Community","moieties","obscured","recipes","jobs","Map","worker","inventories","person","get","personAttrs","resources","recipe","produce","mayProduce","consumes","resource","produces","Model","people","machines","animals","metrics","notes","actions","policies","currentPolicy","clear","actionName","args","action","act","policyName","policy","presentItem","deltas","title","className","Tile","children","presentCommunity","community","work","itemNames","thing","meterName","measure","htmlFor","style","paddingRight","width","height","low","high","optimum","sort","a","b","display","trait","capitalize","word","replace","c","toUpperCase","titleize","str","split","BoardTableView","tiles","tileColors","tileInspect","condensed","useState","inspecting","setInspecting","message","multiline","fontSize","cursor","userSelect","row","y","cell","backgroundColor","onMouseEnter","onMouseLeave","Lights","position","intensity","color","Controls","window","innerWidth","setWidth","handleWindowSizeChange","useEffect","addEventListener","removeEventListener","OrbitControls","FlyControls","movementSpeed","rollSpeed","dragToLook","colors","bilinearInterpolator","func","x1","x2","ceil","y1","y2","makeImageData","imageSize","tileWidth","tileHeight","grayscaleData","Uint8Array","rgbData","heightAt","undefined","parseInt","hexValueAt","hex","h","round","colorAt","toLowerCase","interpolate","interpolateRed","interpolateGreen","interpolateBlue","pos","x0","y0","rgbPos","rgb","grayscale","cachedImageData","Terrain","evolving","oceanMesh","setOcean","useFrame","clock","z","sin","elapsedTime","cos","imgSize","grayscaleTexture","DataTexture","LuminanceFormat","UnsignedByteType","rgbTexture","RGBAFormat","geometry","attach","displacementMap","displacementScale","shininess","flatShading","Text","rotation","PI","font","anchorX","anchorY","ref","transparent","opacity","Effects","fxStack","Scene","scene","useThree","background","CubeTextureLoader","load","process","ViewHeightmap","isBoardEvolving","frameloop","camera","zoom","near","onCreated","rotateX","fallback","BoardPresenter","showThreeScene","showCartogram","ModelView","modelName","communities","lastChanges","board","folks","keys","overflow","maxHeight","startsWith","textAlign","replaceAll","colSpan","minWidth","view","tilesEvolving","ModelPresenter","send","step","onClick","type","checked","onChange","useModel","initialModel","setModel","setLastChanges","delay","setDelay","shouldStep","shouldSend","doSend","shouldManage","doManage","command","setCommand","setPolicy","isModel","callback","savedCallback","useRef","tick","setInterval","clearInterval","useInterval","performSend","performChoose","maybeModel","AssemblyPresenter","assembly","models","theModel","ModelSelector","options","placeholder","theConcepts","Dictionary","languageName","vocabulary","enhanceTranslation","ideas","notion","descriptors","description","form","endsWith","translation","translate","nameInverse","lastWord","concepts","reduce","acc","concept","index","space","DictionarySequence","dictionary","invertOrder","notions","console","log","significance","khuzdul","roots","vocabOverrides","replacements","man","woman","son","daughter","crown","place","tree","sleep","flower","great","small","water","safe","light","shadow","one","many","joy","sorrow","sweet","bitter","point","heat","cold","tall","deep","bell","mound","run","sing","way","no","at","eat","drink","good","bad","quick","time","air","cut","all","hard","soft","ore","wing","snake","horse","bear","dog","fear","tooth","heart","over","fight","mere","strong","basics","cove","star","daisy","poppy","dandelion","willow","cherry","spruce","pine","birch","elm","oak","holly","king","queen","sea","lake","pool","haven","forest","ice","prison","jewel","needle","candle","hill","mountain","valley","peak","land","lofty","sky","river","isle","island","wine","honey","apple","bread","elderberry","fish","harvest","night","garden","vault","white","black","green","red","blue","morning","evening","noon","fire","tin","silver","gold","bird","birds","horses","elephants","bears","snakes","wolves","hounds","large","tiny","thirst","wax","veil","fortunate","beautiful","music","abundant","teeth","battle","dark","wood","intermediate","bay","harbor","dragons","swans","eagles","nightingales","iron","dusk","gray","orange","afternoon","midnight","lily","rose","divine","princess","prince","kingdom","fortress","citadel","stronghold","tower","friend","foe","lord","slave","rain","earth","glen","stream","realm","region","peoples","road","path","shade","sun","moon","autumn","winter","spring","summer","cloud","cloudy","stars","day","starlight","spark","snow","mist","firmament","wind","rainbow","frost","dew","dread","lonely","giant","awe","ash","steam","magma","dry","food","broad","voice","war","laughter","silence","vocab","sparkling","horror","embers","soot","radiance","salt","void","gloom","narrow","wide","sharp","pale","golden","holy","dusty","fell","secret","bold","splendid","horns","claws","fangs","love","dream","fate","speech","tomorrow","tyranny","magic","thought","skill","freedom","blood","tears","ship","journey","treasure","smith","input","assembleDictionary","mantle","horn","delve","generalEndings","starEndings","sindarinDictionary","tx","ending","search","simpleEnhance","Westron","Common","generatePerson","suffices","nameElements","Sindarin","Khuzdul","reverse","nameMeaning","subject","displayAttribute","val","attr","evolve","evolution","seconds","second","minute","hour","dayOfWeek","padStart","arr","pred","Board","write","character","drawBox","char","filled","overlays","viewTiles","overlay","o","neighborPositions","eachCell","defaultValue","newTiles","currentValue","neighbors","newCell","clamp","distance","dx","abs","dy","sqrt","Heightmap","heightUnit","seaLevel","viewHeightAtPos","valueAtPosition","newValues","newValue","smooth","ns","level","localAverage","aboveWater","mu","immediate","viscosity","u","erode","eroded","adjuster","extrude","positions","raiseGround","extrudeIntensity","intrude","lowerGround","bombard","radius","impactSite","distanceToImpact","craterPositions","craterEdge","d","orogeny","mountains","geoform","hades","componentNames","regions","components","waterways","ranges","valleys","bays","erosionSlowness","smoothSlowness","bombardmentRate","operations","adapt","operate","consider","componentMap","roundedValue","existingComponentNames","component","any","firstAdjacentComponentName","Linguist","names","places","waterwayNames","regionNames","rangeNames","valleyNames","bayNames","rawWaterbodyName","_area","rawRegionName","rawRangeName","rawValleyName","rawBayName","area","Cartographer","elevation","linguist","_waterways","_regions","_ranges","_valleys","_bays","nameRegion","waterway","nameWaterway","identifyRegion","identifyWaterway","rangeName","range","nameRange","valleyName","nameValley","bayName","nameBay","aeon","identifyRange","identifyValley","identifyBay","WorldMap","mapgenTicks","terrain","mountainSpots","areaPercent","cartographer","reset","eon","li","elevationMessage","identifyRegionOrWaterway","identifyFeatures","Boolean","jitter","ax","ay","bx","by","slope","j","targetSpotCount","randomPosition","chainSpots","randomPositionAlongLine","isleSpots","volcanoes","_value","genHeightmap","worldMapMaker","Language","check","translations","idea","Citizen","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e32bc19.chunk.js","sourcesContent":["export function where(key: string, value: any) {\n  return (it: any) => it[key] === value;\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n","import { IMap } from \"./types\";\nexport class KeyMap<K, V> implements IMap<K, V> {\n  _data: { [id: number]: V; } = {};\n  constructor(\n    private idFor: (k: K) => number,\n    private nameFor: (k: K) => string,\n    private lookup: (id: number) => K,\n  ) { }\n  set(k: K, v: V) { this._data[this.idFor(k)] = v; }\n  get(k: K): V { return this._data[this.idFor(k)]; }\n  get report(): { [name: string]: V } {\n    const namesAndValues = Object.entries(this._data)\n      .map(([k, v]) => [this.nameFor(this.lookup(Number(k))), v]);\n    return Object.fromEntries(namesAndValues);\n  }\n}\n","//\n\nimport { IList } from \"./types\";\n\nexport class List<T> implements IList<T> {\n  items: T[] = [];\n  protected get it() { return this.items; }\n  get first(): T { return this.items[0]; }\n  get last(): T { return this.items[this.count - 1]; }\n  get count(): number { return this.items.length; }\n  add(it: T) { this.items.push(it); }\n  remove(it: T) { this.items = this.items.filter(item => item !== it); }\n  each(cb: (it: T) => any) { this.items.forEach(cb); }\n  clear() { this.items = []; }\n  map<U>(fn: (it: T) => any): U[] { return this.items.map(fn) }\n\n  get sample(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n","export function randomInteger(min: number, max: number) {\n  // return min + Math.floor(Math.random() * (max - min));\n  let result = Math.floor(Math.random() * (max - min + 1) + min)\n  // console.log(\"Random integer between \" + min + \" and \" + max + \": \" + result)\n  return result\n}\n","\nexport function times<T>(n: number, fn: (...args: any) => T): T[] {\n  let results: any[] = []\n  for (let i = 0; i < n; i++) { results.push(fn()) }\n  return results\n}\n","import { randomInteger } from \"./randomInteger\";\nimport { times } from \"./times\";\n\nfunction sample<T>(ts: T[]): T {\n  let i = randomInteger(0,ts.length-1)\n  return ts[i];\n}\n\nfunction choose<T>(n: number, ts: T[]): T[] {\n  return times(n, () => sample(ts))\n}\n\nexport { sample, choose }\n","import { sample } from \"./sample\";\n\n// A MarkovGenerate object\nexport class MarkovGenerator {\n  // n - Order (or length) of each ngram\n  // max - What is the maximum amount we will generate?\n  constructor(private n: number, private max: number) {}\n\n  // An object as dictionary\n  // each ngram is the key, a list of possible next elements are the values\n  private ngrams: { [key: string]: string[] } = {};\n  // A separate array of possible beginnings to generated text\n  private beginnings: string[] = [];\n\n  // A function to feed in text to the markov chain\n  feed(text: string) {\n\n    // Discard this line if it's too short\n    if (text.length < this.n) {\n      return false;\n    }\n\n    // Store the first ngram of this line\n    let beginning = text.substring(0, this.n);\n    this.beginnings.push(beginning);\n\n    // Now let's go through everything and create the dictionary\n    for (var i = 0; i < text.length - this.n; i++) {\n      let gram = text.substring(i, i + this.n);\n      let next = text.charAt(i + this.n);\n      // Is this a new one?\n      if (!this.ngrams.hasOwnProperty(gram)) {\n        this.ngrams[gram] = [];\n      }\n      // Add to the list\n      this.ngrams[gram].push(next);\n    }\n  }\n\n  // Generate a text from the information ngrams\n  generate(): string {\n\n    // Get a random  beginning\n    let current = sample(this.beginnings) //.choice();\n    let output = current;\n\n    // Generate a new token max number of times\n    for (var i = 0; i < this.max; i++) {\n      // If this is a valid ngram\n      if (this.ngrams.hasOwnProperty(current)) {\n        // What are all the possible next tokens\n        let possible_next = this.ngrams[current];\n        // Pick one randomly\n        let next = sample(possible_next) //.choice();\n        // Add to the output\n        output += next;\n        // Get the last N entries of the output; we'll use this to look up\n        // an ngram in the next iteration of the loop\n        current = output.substring(output.length - this.n, output.length);\n      } else {\n        break;\n      }\n    }\n    // Here's what we got!\n    return output.trim();\n  }\n}\n","export function construct(fn: () => any, times: number, flatten?: boolean) {\n  // Create an array of size \"n\" with undefined values\n  var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  arrays = arrays.map(fn) //() => fn()) //() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  if (flatten) {\n  return [].concat.apply([], arrays);\n  } else {\n    return arrays;\n  }\n\n}\n\nexport function replicate(array: Array<any>, times: number) {\n  return construct(() => array, times)\n  // Create an array of size \"n\" with undefined values\n  // var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  // arrays = arrays.map(() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  // return [].concat.apply([], arrays);\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { MarkovGenerator } from \"../ecosphere/utils/MarkovGenerator\";\nimport { replicate } from \"../ecosphere/utils/replicate\";\nimport { ISequence } from \"./types\";\n\nexport class Sequence implements ISequence<number> {\n  count = 0;\n  get next(): number { return this.count++; }\n}\n\n// give a infinite list of distinct string names from\n// the alphabet with trailing single-quotes ('prime')\n// giving A, B, C,..., Y, Z then A', B', C', ... A'', B'', C'' ....\nexport class NameSequence implements ISequence<String> {\n  // next: string;\n  private nameRoots = [\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\n    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z',\n    //'a', 'b', 'c', 'd', 'e'\n  ]\n  private nameCount = new Sequence()\n  get next() {\n    let n = this.nameCount.next\n    return this.nameRoots[n % this.nameRoots.length]\n         + (replicate([\"'\"], n).join(''))\n  }\n}\n\nexport abstract class StringGeneratorSequence implements ISequence<string> {\n  baseItems: string[] = []\n  generatedItems: string[] = []\n  abstract generate(): string \n  get next(): string {\n    let result = this.generate()\n    let attempts = 0\n\n    while (\n      (\n        this.baseItems.includes(result)\n        || this.generatedItems.includes(result)\n      )\n      && attempts++ < 100\n    ) {\n      result = this.generate()\n    }\n    this.generatedItems.push(result)\n    return result\n  }\n}\n\nexport class MarkovSequence\n     extends StringGeneratorSequence\n  implements ISequence<string> {\n  generator: MarkovGenerator\n  constructor(private items: string[], order = 2, max = 10) {\n    super()\n    this.generator = new MarkovGenerator(order, max)\n    this.items.forEach(this.feed)\n  }\n\n  @boundMethod\n  feed(it: string) {\n    this.baseItems.push(it);\n    this.generator.feed(it);\n  }\n\n  generate(): string { return this.generator.generate(); }\n}\n","import { BasicEntity } from \"./types/BasicEntity\";\nimport { boundMethod } from 'autobind-decorator'\nimport { where } from \"./utils/where\";\nimport { isString } from \"./utils/isString\";\nimport { ManageStock, ManageStocks } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass StockManager<T extends BasicEntity> implements ManageStock<T> {\n  constructor(private stocks: Stocks<T>, private stockId: number) {}\n  add(amount: number): void { return this.stocks.add(amount, this.name) }\n  remove(amount: number): void { return this.stocks.remove(amount, this.name) }\n  get list(): T[] { return this.stocks.list() }\n  get count(): number { return this.stocks.count(this.name) }\n  get name() { return this.item.name }\n  get item(): T { return this.stocks.lookupById(this.stockId) }\n}\n\nexport class Stocks<T extends BasicEntity> {\n  private ids: Sequence = new Sequence()\n  private storage: { [key: number]: number; } = {}\n\n  constructor(\n    public name: string,\n    private elements: T[] = []\n  ) { }\n\n  @boundMethod\n  list() { return this.elements }\n\n  get _store() { return this.storage }\n\n  public clear() { this.elements = []; this.storage = {} }\n\n  public create(name: string): ManageStock<T>\n  public create(attributes: { name: string } & Omit<T, 'id' | 'name'>): ManageStock<T>\n  /** Create a new type of element to store */\n  @boundMethod\n  public create(attrs: any) {\n    let name: string | null = null;\n    let attributes: Partial<T> = {}\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    if (isString(name) && this.has(name)) {\n      return this.manage(name);\n    }\n    if (!isString(name)) { throw new Error(\"Name must be a string\") }\n    // const elementIds: number[] = this.list().map(({ id }) => id);\n    const id = this.ids.next; //Math.max(0, ...elementIds) + 1;\n    const theEntity: T = { id, name, ...attributes } as T\n    this.list().push(theEntity);\n    const manage: ManageStock<T> = this.manage(name as string)\n    return manage\n  }\n\n  @boundMethod\n  add(amount: number, name: string) {\n    this.setAmount(name, this.count(name) + amount);\n  }\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.setAmount(name, this.count(name) - amount);\n  }\n\n  @boundMethod\n  zero(name: string): void {\n    this.setAmount(name, 0);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    const element: T = this.lookup(name);\n    const amount = this.storage[element.id] || 0;\n    return amount;\n  }\n\n  has(name: string): boolean {\n    const matching = this.elements.find(where('name', name))\n    return !!matching;\n  }\n\n  @boundMethod\n  lookupById(id: number): T {\n    const matching = this.elements.find(where('id', id))\n    if (matching) {\n      return matching as T;\n    }\n    throw new Error(`No such ${this.name} with id ${id}`);\n  }\n\n  lookup(name: string): T {\n    const matching = this.elements.find(where('name', name))\n    if (matching) {\n      return matching as T;\n    } else {\n      return this.create(name).item\n    }\n  }\n\n  get report(): (T & { amount: number })[] {\n    const items: T[] = this.list()\n    const table = items.flatMap((item: T) => {\n      const id = Number(item.id)\n      const amount = this.storage[id] || 0\n      return { ...item, amount }\n    })\n    return table\n  }\n\n  manage(name: string): ManageStock<T> {\n    return new StockManager<T>(this, this.lookup(name).id)\n  }\n\n  manageAll(): ManageStocks {\n    const { add, remove, count } = this\n    return { add, remove, count, list: () => this.elements }\n  }\n\n  get manager() { return this.manageAll() }\n\n  private setAmount(name: string, amount: number): void {\n    const element: T = this.lookup(name);\n    this.storage[element.id] = amount;\n  }\n}\n","import { Population } from \"./Population\";\nimport { BasicEntity } from \"./types/BasicEntity\";\nimport { Entity, ManageStocks } from \"./types\";\nimport { boundMethod } from \"autobind-decorator\";\n\n// eg map animal (species) names to populations of individual animals...\n\nexport class Registry<U extends BasicEntity, T extends Entity<U>, Pop extends Population<U,T>> {\n  populations: { [species: string]: Pop } = {};\n  species: { [species: string]: U } = {}\n  constructor(\n    public name: string,\n    public popCtor: new (name: string, specie: U) => Pop\n  ) {}\n\n  clear() {\n    this.populations = {}\n  }\n\n  @boundMethod\n  lookup(name: string): Pop {\n    if (this.has(name)) {\n      return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${name}'`);\n    }\n  }\n\n  @boundMethod\n  lookupById(id: number): U { //Population<U,T> {\n    const matching = Object.values(this.species).find(x => x.id === id)\n    if (matching) { //this.has(name)) {\n      return matching\n      // return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${id}'`);\n    }\n  }\n\n  has(name: string): boolean {\n    return this.populations.hasOwnProperty(name);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    return this.lookup(name).count;\n  }\n\n  @boundMethod\n  list(): U[] {\n    return Object.values(this.species)\n  }\n\n  listByName(name: string): T[] {\n    return this.lookup(name).list();\n  }\n\n  @boundMethod\n  create(name: string, species?: Omit<U, 'name' | 'id'>): Pop { //Population<U,T> {\n    if (this.has(name)) {\n      return this.lookup(name);\n    }\n    let theSpecies: U = { ...species, name, id: this.list().length+1 } as unknown as U; // species.kind points back to name...\n    let population: Pop = new this.popCtor(name, theSpecies);\n    this.populations[name] = population;\n    this.species[name] = theSpecies;\n    return population;\n  }\n\n  get populationList(): Population<U,T>[] { return Object.values(this.populations)}\n\n  get report() {\n    const pops = this.populationList.flatMap((population: Population<U,T>) => {\n      const pop = population\n      if (pop.count > 0) {\n        return { name: pop.name, amount: pop.count}\n      } else {\n        return []\n      }\n    })\n    return pops\n  };\n\n  @boundMethod\n  add(amount: number, name: string): void {\n    this.lookup(name).add(amount)\n  };\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.lookup(name).remove(amount)\n  };\n\n  manageAll(): ManageStocks {\n    const { add, remove, count, list } = this\n    return { add, remove, count, list }\n  }\n  get manager() { return this.manageAll() }\n}\n","import { Model } from \"./Model\";\nimport { Registry } from \"./Registry\";\nimport { Stocks } from \"./Stocks\";\nexport type DeltaSource = Stocks<any> | Registry<any, any, any> \n//<U extends BasicEntity, T extends Entity<U>> = Stocks<T> | Registry<U,T>\nexport type DeltaSourceManager = { add: Function, remove: Function, count: Function, list: Function }\nexport class Delta {\n  public changes: Stocks<any>;\n  constructor(public model: any, public getStocks: (model: Model) => DeltaSource) {\n    let baseline = this.getStocks(model)\n    this.changes = new Stocks(`${baseline.name} (delta)`, baseline.list());\n  }\n  get storage() { return this.changes._store }\n  // evolve(t: number): Delta {\n  //   let stocks = this.getStocks(this.model)\n  //   const flow = { [stocks.name]: stocks.manageAll() }\n  //   this.model.dynamics.each(dynamism => dynamism(flow, t));\n  //   return this;\n  // }\n}\n","import { List } from \"../../collections\";\nimport { Delta, DeltaSource } from \"../Delta\";\nimport { Entity, EvolvingStocks, TimeEvolution } from \"../types\";\nimport { ISimulation } from \"./ISimulation\";\n\nexport abstract class Simulation implements ISimulation {\n  protected ticks: number = 0;\n  protected tracking: string[] = []\n  public dynamics = new List<TimeEvolution>()\n  constructor(public name: string) { }\n  public evolve(e: TimeEvolution) { this.dynamics.add(e) }\n  public step() { return this.flux(this.ticks++) }\n\n  public get report() {\n    return Object.fromEntries(this.tracking.map(target =>\n      [target, (this as any)[target].report]\n    ))\n  }\n\n  private flow(target: string) {\n    const source = (this as any)[target]\n    const theDelta = new Delta(this, (model) => (model as any)[target])\n    const { add, remove } = theDelta.changes.manager\n    const { list, count, lookupById } = source\n    return { lookupById, _delta: theDelta, add, remove, list, count }\n  }\n  \n  private flows(): { [key: string]: { _delta: Delta, lookupById: Function, add: Function } } {\n    const theFlows: {[key: string]: any} = {}\n    this.tracking.forEach(target => theFlows[target] = this.flow(target))\n    return theFlows\n  }\n\n  private flowsReport(flow: { [s: string]: any }) {\n    const table: { [key: string]: any } = {}\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = flow._delta\n      table[name] = Object.fromEntries(\n        Object\n          .entries(theDelta.storage)\n          .map(entry => {\n            const [id, amount] = entry\n            const name = flow.lookupById(Number(id)).name\n            return [ name, amount ]\n          })\n      )\n    })\n    return table\n  }\n\n  private flux(t: number) {\n    const flow: EvolvingStocks = this.flows() as any as EvolvingStocks\n    this.dynamics.each(dynamism => dynamism(flow, t));\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = (flow as any)._delta\n      this.apply(theDelta, name)\n    })\n    return { changed: this.flowsReport(flow) }\n  }\n\n  private apply(delta: Delta, target: string) {\n    const source: DeltaSource = (this as any)[target] as DeltaSource\n    const manager = source.manager\n    const list = manager.list()\n    const { storage: updated } = delta;\n    const changed: { [elementName: string]: number; } = {};\n    list.forEach((item: Entity<any>) => {\n      if (updated[item.id]) {\n        const deltaAmount = updated[item.id];\n        manager.add(deltaAmount, item.name);\n        changed[item.name] = deltaAmount;\n      }\n    });\n    return { changed };\n  }\n}\n","import { List, Sequence } from \"../collections\";\nimport { IList } from \"../collections/types\";\nimport { BasicEntity } from \"./types/BasicEntity\";\n\nclass Collection<T extends BasicEntity> extends List<T> implements IList<T> {\n  list() { return this.items }\n  private ids = new Sequence()\n  get names(): string[] {\n    // throw new Error('Method not implemented.');\n    return this.items.map(item => item.name)\n  }\n  // private get ids() { return this.it.map(({ id }) => id) }\n  create(attributes: Partial<T>): T {\n    const id = this.ids.next;\n    const theEntity: T = { id, ...attributes } as unknown as T;\n    this.items.push(theEntity);\n    return theEntity\n  }\n\n  lookup(name: string) {\n    return this.items.find(it => it.name === name)\n  }\n}\n\nexport { Collection }\n","import { Sequence } from \"../../collections\"\nimport { Collection } from \"../Collection\"\nimport { Stocks } from \"../Stocks\"\nimport { randomInteger } from \"../utils/randomInteger\"\nimport { sample } from \"../utils/sample\"\nimport { BasicEntity } from \"./BasicEntity\"\n\nexport type Substance = BasicEntity\nexport type Entity<T> = BasicEntity & { kind: T }\n\nexport type Quality = 'terrible' | 'adequate' | 'good' | 'excellent'\ntype Size = 'fine' | 'small' | 'medium' | 'large' | 'huge'\nexport type Species = BasicEntity & {\n  name: string\n  size?: Size\n  fitness?: Quality\n}\n\nexport type Individual<T> = Entity<T> & {\n  age: number // maybe simpler to do bornAt?\n}\n\n\nexport type Creature<T> = Individual<T> & {\n  health: 'dying' | 'unwell' | 'flourishing' | 'triumphant'\n}\n\nfunction pick<T>(elements: T[]): T {\n  const d100 = randomInteger(0,100)\n  if (d100 > 98) {\n    return elements[3]\n  } else if (d100 < 2) {\n    return elements[0]\n  }\n\n  return sample([elements[1], elements[2]])\n}\n\ntype Spirit = 'languorous' | 'vigorous' | 'impetuous' | 'ferocious'\ntype Strength = 'weak' | 'robust' | 'mighty' | 'indomitable'\ntype Cunning = 'foolish' | 'sly' | 'crafty' | 'manipulative'\n//'dim' | 'attentive' | 'creative' | 'ingenious'\ntype Agility = 'clumsy' | 'nimble' | 'spry' | 'balletic'\ntype Guile = 'transparent' | 'convincing' | 'beguiling' | 'insidious'\n\ntype PhysicalQuality = Spirit | Strength | Cunning | Agility | Guile\n\nexport type Animal = Creature<Species> & {\n  spirit: Spirit\n  strength: Strength\n  cunning: Cunning\n  guile: Guile\n  agility: Agility\n}\n\n\nconst animalIds = new Sequence()\nexport const createAnimal = (name: string, species: Species): Animal => {\n  return {\n    id: animalIds.next,\n    name,\n    kind: species,\n    age: 0,\n    guile: pick([ 'transparent', 'convincing', 'beguiling', 'insidious' ]),\n    health: pick(['dying', 'unwell', 'flourishing', 'triumphant']),\n    spirit: pick(['languorous', 'vigorous', 'impetuous', 'ferocious']),\n    cunning: pick(['foolish', 'sly', 'crafty', 'manipulative']),\n    agility: pick(['clumsy', 'nimble', 'spry', 'balletic']),\n    strength: pick(['weak', 'robust', 'mighty', 'indomitable']),\n  }\n}\n\n// major demographic groupings -- moieties (maybe *this* should be called a Community??)\ntype Wealth = 'impoverished' | 'well-off' | 'luxuriant' | 'decadent'\ntype Sophistication = 'unpretentious' | 'savvy' | 'urbane' | 'sleek'\ntype Power = 'inconsequential' | 'marginal' | 'influential' | 'sovereign'\ntype Knowledge = 'clueless' | 'well-informed' | 'wise' | 'prescient'\n// type Technology = 'lost' | 'primitive' | 'archaic' | 'advanced'\n\ntype SocialQuality = Wealth | Sophistication | Power | Knowledge // | Technology\n\nexport type Moiety = BasicEntity & {\n  wealth: Wealth\n  sophistication: Sophistication\n  power: Power\n  knowledge: Knowledge\n  // tech: Technology\n}\n\nconst moietyIds = new Sequence()\nexport const createMoiety = (name: string): Moiety => {\n  const wealth: Wealth = pick([ 'impoverished', 'well-off', 'luxuriant', 'decadent' ])\n  const sophistication: Sophistication = pick([ 'unpretentious', 'savvy', 'urbane', 'sleek' ])\n  const power: Power = pick([ 'inconsequential', 'marginal', 'influential', 'sovereign' ])\n  const knowledge: Knowledge = pick([ 'clueless', 'well-informed', 'wise', 'prescient' ])\n  // const tech: Technology = pick([ 'lost', 'primitive', 'archaic', 'advanced' ])\n  return { id: moietyIds.next, name, wealth, sophistication, power, knowledge } //, tech }\n}\n\ntype Body = Animal\n\ntype Insight = 'dense' | 'intuitive' | 'incisive' | 'brilliant'\ntype Depth = 'superficial' | 'substantial' | 'profound' | 'inscrutable'\ntype Education = 'unlettered' | 'literate' | 'tutored' | 'well-read'\ntype Disposition = 'dismal' | 'hopeful' | 'propitious' | 'roseate'\ntype Valor = 'timid' | 'bold' | 'courageous' | 'fearless'\n\n// a better word for this...\n// presence?\ntype Presence = 'bland' | 'charismatic' | 'captivating' | 'magnetic' \n\ntype MentalQuality = Insight | Depth | Education | Disposition | Valor | Presence\nexport type MentalAttribute = 'insight' | 'depth' | 'education' | 'disposition' | 'valor' | 'presence'\n\ntype Mind = {\n  // [key in MentalAttribute]: MentalQuality,\n  \n  insight: Insight\n  depth: Depth\n  education: Education\n  disposition: Disposition\n  valor: Valor\n  presence: Presence\n}\n\nexport const createMind = (): Mind => {\n  const insight: Insight = pick([ 'dense', 'intuitive', 'incisive', 'brilliant' ])\n  const depth: Depth = pick([ 'superficial', 'substantial', 'profound', 'inscrutable' ])\n  const education: Education = pick([ 'unlettered', 'literate', 'tutored', 'well-read' ])\n  const disposition: Disposition = pick([ 'dismal', 'hopeful', 'propitious', 'roseate' ])\n  const valor: Valor = pick([ 'timid', 'bold', 'courageous', 'fearless' ])\n  const presence: Presence = pick([ 'bland', 'magnetic', 'charismatic', 'captivating' ])\n  return { insight, depth, education, disposition, valor, presence }\n}\n\ntype Wit = 'slow' | 'clever' | 'biting' | 'savage'\ntype Empathy = 'sadistic' | 'generous' | 'benevolent' | 'selfless'\ntype Integrity = 'uncertain' | 'sound' | 'solid' | 'incorruptible'\ntype Beauty = 'ugly' | 'fair' | 'radiant' | 'resplendent'\ntype Charm  = 'repulsive' | 'inoffensive' | 'affable' | 'likeable'\ntype Resolve = 'vacillating' | 'steadfast' | 'intrepid' | 'relentless'\ntype Temperament = 'guardian' | 'artisan' | 'rational' | 'idealist'\n\ntype SpiritualQuality = Wit\n                      | Empathy\n                      | Integrity\n                      | Beauty\n                      | Charm\n                      | Resolve\n                      | Temperament\n\ntype Soul = {\n  wit: Wit\n  empathy: Empathy\n  integrity: Integrity\n  beauty: Beauty\n  charm: Charm\n  resolve: Resolve\n  temperament: Temperament\n}\n\n\nexport const createSoul = (): Soul => {\n  const wit: Wit = pick([ 'slow', 'clever', 'biting', 'savage' ])\n  const empathy: Empathy = pick([ 'sadistic', 'generous', 'benevolent', 'selfless' ])\n  const integrity: Integrity = pick([ 'uncertain', 'sound', 'solid', 'incorruptible' ])\n  const beauty: Beauty = pick([ 'ugly', 'fair', 'radiant', 'resplendent' ])\n  const charm: Charm = pick([ 'repulsive', 'inoffensive', 'affable', 'likeable' ])\n  const resolve: Resolve = pick([ 'vacillating', 'steadfast', 'intrepid', 'relentless' ])\n  const temperament: Temperament = pick([ 'guardian', 'artisan', 'rational', 'idealist'])\n  \n  return { wit, empathy, integrity, beauty, charm, resolve, temperament }\n}\n\n// type Category = BasicEntity\n// type Item = Entity<Category> & {}\n// type Event = BasicEntity\n// type Incident = Entity<Incident>\n\n// export type Trait = { id: number, name: string, rank: 0 | 1 | 2 | 3 | 4 | 5 }\nexport type Memory = { id: number, name: string, description: string }\n\ntype IndividualQuality = PhysicalQuality | SocialQuality | MentalQuality | SpiritualQuality\nexport type PhysicalAttribute = 'spirit' | 'strength' | 'cunning' | 'agility' | 'guile'\nexport type SocialAttribute =  'wealth' | 'sophistication' | 'power' | 'knowledge'\nexport type SpiritualAttribute = 'wit' | 'empathy' | 'integrity' | 'beauty' | 'charm' | 'resolve' | 'temperament'\ntype AttributeMatrix = {\n  physical: { [key in PhysicalAttribute]: PhysicalQuality[] },\n  social: { [key in SocialAttribute]: SocialQuality[] },\n  mental: { [key in MentalAttribute]: MentalQuality[] },\n  spiritual: { [key in SpiritualAttribute]: SpiritualQuality[] },\n}\n\nexport const attributes: AttributeMatrix = {\n  physical: {\n    spirit: [ 'languorous', 'vigorous', 'impetuous', 'ferocious' ],\n    strength: [ 'weak', 'robust', 'mighty', 'indomitable' ],\n    cunning: [ 'foolish', 'sly', 'crafty', 'manipulative' ],\n    agility: [ 'clumsy', 'nimble', 'spry', 'balletic' ],\n    guile: [ 'transparent', 'convincing', 'beguiling', 'insidious' ],\n  },\n\n  social: {\n    wealth: [ 'impoverished', 'well-off', 'luxuriant', 'decadent' ],\n    sophistication: [ 'unpretentious', 'savvy', 'urbane', 'sleek' ],\n    power: [ 'inconsequential', 'marginal', 'influential', 'sovereign' ],\n    knowledge: [ 'clueless', 'well-informed', 'wise', 'prescient' ]\n\n  },\n  mental: {\n    insight: ['dense' , 'intuitive' , 'incisive' , 'brilliant' ],\n    depth:[ 'superficial' , 'substantial' , 'profound' , 'inscrutable' ],\n    education:[ 'unlettered' , 'literate' , 'tutored' , 'well-read'],\n    disposition:[ 'dismal' , 'hopeful' , 'propitious' , 'roseate'],\n    valor: [ 'timid' , 'bold' , 'courageous' , 'fearless'],\n    presence: [ 'bland' , 'charismatic' , 'captivating' , 'magnetic' ]\n    \n  },\n  spiritual: {\n    wit: [ 'slow', 'clever', 'biting', 'savage' ],\n    empathy: [ 'sadistic', 'generous', 'benevolent', 'selfless' ],\n    integrity: [ 'uncertain', 'sound', 'solid', 'incorruptible' ],\n    beauty: [ 'ugly', 'fair', 'radiant', 'resplendent' ],\n    charm: [ 'repulsive', 'inoffensive', 'affable', 'likeable' ],\n    resolve: [ 'vacillating', 'steadfast', 'intrepid', 'relentless' ],\n    temperament: [ 'guardian', 'artisan', 'rational', 'idealist' ],\n  },\n}\nexport const judge = (quality: IndividualQuality): Quality => {\n  const qualityValues: Quality[] = ['terrible', 'adequate', 'good', 'excellent']\n  const matrix = attributes;\n  let result = null\n  Object.entries(matrix).forEach(([attributeGroupName, attributeGroup]) => {\n    Object.entries(attributeGroup).forEach(([attributeName, qualities]) => {\n      qualities.forEach((q: IndividualQuality) => {\n        // console.log(\"compare\", { q, quality })\n         if (q===quality) {\n           result = qualityValues[qualities.indexOf(q)]\n         }\n      })\n    })\n  })\n  // const terribleQualities: IndividualQuality[] = [ 'ugly', 'weak', 'dismal', 'clueless' ]\n  // if (terribleQualities.includes(quality)) {\n  //   return 'terrible'\n  // }\n\n  if (result === null) {\n  throw new Error(\"Cannot judge unknown quality \" + quality)\n  } else {\n    return result\n  }\n  // return 'adequate'\n}\n\ntype Rational = 'inventor' | 'architect' | 'fieldmarshal' | 'mastermind'\ntype Idealist = 'champion' | 'healer' | 'teacher' | 'counselor'\ntype Artisan = 'performer' | 'composer' | 'persuader' | 'crafter'\ntype Guardian = 'provider' | 'protector' | 'supervisor' | 'inspector'\n// type RoleKind = 'ration'\n// }\n\ntype SocialRole = Idealist\n                | Rational\n                | Artisan\n                | Guardian\n\nconst roles: { [key in Temperament]: SocialRole[] } = {\n  idealist: [ 'champion', 'healer',    'teacher',      'counselor' ],\n  rational: [ 'inventor', 'architect', 'fieldmarshal', 'mastermind' ],\n  artisan: [ 'performer', 'composer',  'persuader',    'crafter' ],\n  guardian: [ 'provider', 'protector', 'supervisor',   'inspector' ],\n}\n\nexport type Person = Individual<Moiety> & {\n  body: Body\n  mind: Mind\n  soul: Soul\n  role: SocialRole\n\n\n  // ie within my moiety, I am (thought of as)...\n  // rank: 'commoner' | 'wellborn'\n  // title?: string\n  // reputation: 'unknown' | 'worthy' | 'adored' | 'revered'\n\n  // individually...\n  things: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n  // stats: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n\n  currency: number\n  traits: ManageStocks // IList<Trait>\n\n  // things to draw meters for..\n  meters: { [meterName: string]: Function }\n  memory: Collection<Memory>\n  // philosophy?: Ideology\n  // destiny: 'doomed' | 'commonplace' | 'exceptional' | 'free'\n}\n\nconst personId = new Sequence()\nconst human: Species = { id: -1, name: 'Human Being', size: 'medium' }\nexport const createPerson = (name: string, moiety: Moiety): Person => {\n\n  const inventory = new Stocks<any>(`${name}'s Things`)\n  const traits = new Stocks<any>(`${name}'s Traits`)\n  // const state = new Stocks<any>(`${name}'s State`)\n    // personAttrs.things = inventory.manageAll()\n    const soul: Soul = createSoul()\n    let roleOptions = roles[soul.temperament]\n    // if (soul.temperament === 'rational') {\n\n    // }\n\n\n\n  return {\n    id: personId.next,\n    kind: moiety,\n    role: sample(roleOptions),\n    // kind: createMoiety()\n    name,\n    age: 0,\n    body: createAnimal(name, human),\n    mind: createMind(),\n    soul,\n    // rank: 'commoner',\n    // reputation: 'unknown',\n    currency: 0,\n    things: inventory.manageAll(),\n    traits: traits.manageAll(),\n    // stats: state.manageAll()\n    // things: new M\n    meters: {},\n    memory: new Collection<Memory>(),\n  }\n\n}\n\n// const person = (): Person => {\n//   const newPerson: Person = {\n//     id: personId.next()\n//   }\n//   return newPerson\n// }\n\nexport type Recipe = BasicEntity & {\n  produces: { [resourceName: string]: number }\n  consumes?: { [resourceName: string]: number }\n  requiresMachine?: string\n}\n\nexport type Machine = BasicEntity\n\n// export type Task = BasicEntity & {\n//   machine?: string\n//   recipe: string\n// }\n\n// type ManageList = {}\n\nexport type ManageStocks = {\n  add: (amount: number, name: string) => void,\n  remove: (amount: number, name: string) => void,\n  count: (name: string) => number,\n  list: () => any[]\n}\n\nexport type ManageStock<T> = {\n  add: (amount: number) => void,\n  remove: (amount: number) => void,\n  count: number,\n  item: T\n}\n\nexport type ManagePopulation<T> = {\n  count: number\n  birth: (name: string) => T\n  death: (name: string) => T\n  add: (amount: number) => T[]\n  remove: (amount: number) => T[]\n}\n\nexport type ManagePopulationRegistry<T> = {\n  lookup: (name: string) => ManagePopulation<T>\n}\n\n// todo rename\nexport interface EvolvingStocks {\n  [key: string]: ManageStocks\n}\nexport type TimeEvolution = (evolution: EvolvingStocks, ticks: number) => void\n\nexport type StepResult = {\n  changed: { \n    [groupName: string]: { [elementName: string]: number }\n  }\n}\n\n// todo move these model/sim things somewhere else???\nexport type Action = { id: number, name: string, act: Function }\nexport type Policy = { id: number, name: string, manage: Function }\n","import { isString } from \"./utils/isString\";\nimport { boundMethod } from \"autobind-decorator\";\nimport { Entity } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass SetHelper {\n  static first<T>(set: Set<T>): T { return set.values().next().value }\n}\n\n// a collection of named individuals...\nconst populationIds: Sequence = new Sequence()\nexport class Population<Specie, Dividual extends Entity<Specie>> {\n  public id = populationIds.next\n  private ids: Sequence = new Sequence()\n  constructor(\n    public name: string,\n    public species?: Specie,\n    protected individuals: Set<Dividual> = new Set(),\n  ) {}\n\n  list() { \n    const theList: Dividual[] = []\n    this.individuals.forEach(individual => theList.push(individual))\n    return theList;\n  }\n  get count() { return this.individuals.size }\n  get first() { \n    return SetHelper.first(this.individuals)\n   }\n  public lookup(name: string): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.name === name) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with name '${name}' in the population of ${this.name}`)\n  }\n\n  @boundMethod\n  public lookupById(id: number): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.id === id) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with id ${id} in the population of ${this.name}`)\n  };\n\n  public birth(name: string = `${this.name} ${this.count}`): Dividual {\n    const newborn = this.create(name)\n    return newborn\n  }\n\n  @boundMethod\n  public death(name?: string): Dividual {\n    if (name) {\n      const doomed = this.destroy(name)\n      if (doomed) {\n        return doomed\n      }\n    } else {\n      const doomed = this.first\n      if (doomed) {\n        this.destroy(doomed.name)\n        return doomed\n      }\n    }\n    throw new Error(\"Population already empty!\")\n  }\n\n  public add(amount: number) {\n    const newborns = []\n    for (let i = 0; i < amount; i++) {\n      newborns.push(this.birth())\n    }\n    return newborns\n  }\n\n  public remove(amount: number) {\n    const doneFor = []\n    for (let i = 0; i < Math.min(this.count, amount); i++) {\n      doneFor.push(this.death(this.first.name))\n    }\n    return doneFor\n  }\n\n  protected build(attrs: any) {\n    let name = null;\n    let attributes: Partial<Dividual> = {};\n    // console.log(attrs)\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    \n    const id = this.ids.next; //Math.max(0, ...this.ids) + 1;\n    const theIndividual: Dividual = { id, name, ...attributes } as unknown as Dividual;\n    return theIndividual;\n  }\n\n\n  public create(name: string): Dividual;\n  public create(attrs: Partial<Dividual>): Dividual;\n  @boundMethod\n  public create(attrs: any) {\n    const theIndividual: Dividual = this.build(attrs)\n    this.individuals.add(theIndividual);\n    return theIndividual;\n  }\n\n  public destroy(name: string): Dividual;\n  @boundMethod\n  public destroy(name: string) {\n    const theIndividual: Dividual = this.lookup(name)\n    this.individuals.delete(theIndividual);\n    return theIndividual;\n  }\n\n  get report() {\n    return Object.fromEntries(this.list().map(individual => {\n      return [individual.id, individual.name];\n    }))\n  }\n}\n","import { List, Map } from '../collections';\nimport { Recipe, Moiety, Person, ManageStocks, createPerson, createMoiety } from \"./types\";\nimport { Population } from \"./Population\";\nimport { Collection } from \"./Collection\";\nimport { boundMethod } from 'autobind-decorator';\n\nexport class Community extends Population<Moiety, Person> {\n  moieties: List<Moiety> = new List<Moiety>();\n  obscured: boolean = false // don't display details\n   \n  public recipes = new Collection<Recipe>();\n  public jobs = new Map<Person, Recipe>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  );\n\n  public inventories = new Map<Person, ManageStocks>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  )\n\n  get report(): { [personName: string]: string; } {\n    const entries = this.list()\n      .map(person => [person.id, (this.jobs.get(person) || {name: '?'}).name]);\n    return Object.fromEntries(entries);\n  }\n\n  // okay if we need to override create + build inventories let's do it ??\n  public create(name: string): Person;\n  public create(attrs: Partial<Person>): Person;\n  @boundMethod\n  public create(attrs: any) {\n    const personAttrs = super.build(attrs);\n    const { name, age } = personAttrs;\n    const person: Person = createPerson(name, createMoiety(`${name}'s Gens`)) //, this.species)\n    person.age = age\n    this.individuals.add(person)\n    return person\n  }\n\n  // people have inventories...\n  // and maybe they've declared what they want\n\n  // measureTime(time: number): HumanCalendar {}\n\n  // trade({ resources })\n\n  work({ resources }: { resources: { add: Function; remove: Function; count: Function; }; }): void {\n    const { report } = this.jobs;\n    Object.entries(report).forEach(([_workerName, recipe]: [string, Recipe]) => {\n      this.produce(recipe, resources);\n    });\n  }\n  \n  private produce(recipe: Recipe, resources: { add: Function; remove: Function; count: Function; }) {\n    if (this.mayProduce(recipe, resources)) {\n      if (recipe.consumes) {\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          resources.remove(amount, resource);\n        });\n      }\n      Object.entries(recipe.produces).forEach(([resource, amount]) => {\n        resources.add(amount, resource);\n      });\n    }\n  }\n\n  private mayProduce(recipe: Recipe, resources: { count: Function; }) {\n    let mayProduce = true;\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (resources.count(resource) < amount) {\n          mayProduce = false;\n        }\n      });\n    }\n    return mayProduce;\n  }\n\n}\n","import { Substance, Machine, Animal, Species, Action, Policy, Moiety, Person } from \"../types\"\nimport { Stocks } from \"../Stocks\"\nimport { Registry } from \"../Registry\"\nimport { Simulation } from \"./Simulation\"\nimport { IModel } from \"./IModel\"\nimport { Collection } from \"../Collection\"\nimport { Community } from \"../Community\"\nimport { Population } from \"../Population\"\nimport { Tiles } from \"../Board\"\n\ntype Fauna = Population<Species, Animal>\nexport class Model extends Simulation implements IModel  {\n  tracking = [ 'animals', 'resources' ]\n  get tiles(): Tiles { return [] }\n\n  public people = new Registry<Moiety, Person, Community>('people', Community)\n  public resources = new Stocks<Substance>('resources')\n  public machines  = new Stocks<Machine>('machines')\n  public animals   = new Registry<Species, Animal, Fauna>('wildlife', Population)\n\n  reset() {\n    this.resources.clear()\n    this.machines.clear()\n    this.animals.clear()\n    this.people.clear()\n    this.dynamics.clear()\n  }\n\n  // measurements\n  public metrics: { [name: string]: () => number } = {}\n  public notes: { [name: string]: () => string } = {} //() => { return {}}\n\n  // interactive elements\n  public actions: Collection<Action> = new Collection<Action>()\n  public policies: Collection<Policy> = new Collection<Policy>()\n\n  send(actionName: string, args: any): void {\n    const action = this.actions.lookup(actionName)\n\n    if (action) {\n      action.act(args)\n    } else {\n      throw new Error(`No such action ${actionName}`)\n    }\n  }\n\n  currentPolicy: Policy | undefined\n  choose(policyName: string): void {\n    // console.log(\"[Model.choose]\", policyName)\n    const policy = this.policies.lookup(policyName)\n    if (policy) {\n      this.currentPolicy = policy\n    } else {\n      throw new Error(`No such policy ${policyName}`)\n    }\n  }\n\n  public step() {\n    if (this.currentPolicy) {\n      // console.log(\"MANAGING\", { policy: this.currentPolicy })\n      this.currentPolicy.manage()\n    }\n    return super.step()\n  }\n}\n\nexport default Model;\n","import { prettyAmount } from \"../utils/prettyAmount\";\n\nexport function presentItem(deltas?: { [elementName: string]: number; }) {\n  return ({ name, amount }: { name: string; amount: number; }) => {\n    const delta = deltas && deltas[name];\n    return <li key={name} title={name} className='Item'>\n      <span className='Title' data-testid='Name'>{name}</span>\n      <span data-testid='Count'>\n        {prettyAmount(amount)}\n      </span>\n      <span data-testid='Delta'>\n        {delta}\n      </span>\n    </li>;\n  };\n}\n","export function Tile({ children, title }: { children?: React.ReactNode; title: string; }) {\n  return <div className='Tile' title={title}>\n    {/* <h5 className='Title'>{title}</h5> */}\n    {children}\n  </div>;\n}\n","import { Tile } from \"./Tile\";\nimport { Community } from \"../Community\";\nimport { presentIndividual } from \"./presentIndividual\";\n\n\nexport function presentCommunity(community: Community) {\n  return <Tile title={community.name} key={community.id}>\n    <ul aria-label='People'>\n      {community.obscured ? community.list().map(individual => <li key={individual.id}>{individual.name}</li>)\n                          : community.list().map(presentIndividual(community.report))}\n    </ul>\n  </Tile>;\n}\n","import { ManageStocks } from \"../types\";\n\n\nexport function presentIndividual(work: { [key: number]: string; }) {\n  return ({ id, name, things, traits, meters }: {\n    id: number;\n    name: string;\n    things: ManageStocks;\n    traits: ManageStocks;\n    meters: { [key: string]: Function }\n  }) => {\n    const itemNames = things.list().map(thing => thing.name);\n    return <li key={id} title={name} className='Item'>\n      <div className='Title' data-testid='Name'>{name}</div>\n      {Object.entries(meters).map(([meterName, measure]) => {\n        const { value, max } = measure()\n        return <div className='Meter' data-testid={meterName}>\n          <label htmlFor={meterName} style={{paddingRight: 10}}>{meterName}:</label>\n          <meter id={meterName}\n                 style={{ width: 130, height: 14 }}\n                 min=\"0\" max={max}\n                 low={max * 0.33} high={max * 0.66} optimum={max * 0.8}\n                 value={value}>\n              at {value}/{max}\n          </meter>\n        </div>\n      })}\n      {work[id] && work[id] !== '?' && <span data-testid='Status'>{work[id]}</span>}\n      {itemNames.length > 0 && <div className='Subitems' data-testid='Inventory'>\n        <ul>\n          {itemNames.sort((a,b) => a > b ? 1 : -1).map(it => <li key={it} style={{\n              ...(things.count(it) === 0 ? { display: 'none' } : {})\n            }}>\n            {it} <span data-testid={it}  className='Count'>{things.count(it)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      {traits.list().length > 0 && <div className='Traits' data-testid='Trait Ranks'>\n        <ul>\n          {traits.list().map(trait => <li key={trait.id} style={{\n              ...(traits.count(trait.name) === 0 ? { display: 'none' } : {})\n            }}>\n            {trait.name} <span data-testid={trait.name}>{traits.count(trait.name)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      \n    </li>;\n  };\n}\n","\nexport const capitalize = (word: string) => word.replace(/^\\w/, c => c.toUpperCase()) \nexport const titleize = (str: string) => str.split(' ').map(word => capitalize(word)).join(' ');\n","import React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\nexport const BoardTableView = ({\n  tiles,\n  tileColors,\n  tileInspect,\n  // inspecting,\n  // setInspecting,\n  // message,\n  condensed,\n  }: {\n    tiles: string[][],\n    tileColors: { [value: string]: string },\n    // message: string,\n    tileInspect: (x: number, y: number) => string\n    // todo maybe just manage inspect state here??\n    // setInspecting: Function, inspecting: [number, number], \n    condensed: boolean,\n  }) => {\n\n  const [inspecting, setInspecting] = useState([-1,-1]);\n  const message = inspecting[0] > 0 && inspecting[1] > 0\n    ? tileInspect(inspecting[0], inspecting[1]).split(\"\\n\").join(\"<br/>\")\n    : '' //<>--</>\n\n  return <>\n    <ReactTooltip multiline />\n    <table style={{\n      // fontFamily: '\"Source Code Pro\", \"Fira Code\", \"Inconsolata\", Menlo, Monaco, \"Courier New\", monospace',\n      fontSize: '3px',\n      cursor: 'pointer',\n      userSelect: 'none',\n      // overflow: 'hidden'\n    }}>\n      <tbody>\n        {tiles.map((row: string[], y: number) =>\n          <tr key={`row-${y}`}>\n            {row.map((cell: string, x: number) =>\n              <td\n                style={{\n                  ...(condensed ? { width: '1px', height: '1px' } : { width: '4px', height: '4px' }),\n                  backgroundColor: inspecting[0] === x && inspecting[1] === y\n                    ? 'white'\n                    : tileColors[cell]\n                }}\n                key={`cell-${x}-${y}}`}\n                onMouseEnter={() => setInspecting([x,y])}\n                onMouseLeave={() => setInspecting([-1,-1])}\n                data-tip={inspecting[0] === x && inspecting[1] === y ? message : ''}\n                // data-html\n              >\n                {!condensed && cell}\n              </td>\n            )}\n          </tr>\n        )}\n      </tbody>\n    </table></>\n  }\n","import React from \"react\";\n\nexport function Lights() {\n  // const FakeSphere = () => (\n  //   <mesh>\n  //     <sphereBufferGeometry attach=\"geometry\" args={[0.7, 30, 30]} />\n  //     <meshBasicMaterial attach=\"material\" color={0xfff1ef} />\n  //   </mesh>\n  // );\n  // const [luminousMatterOne, setPointLightOne] = useState();\n  // const [luminousMatterTwo, setPointLightTwo] = useState();\n\n  // const [ref, pLight1] = useResource();\n  // const [ref2, pLight2] = useResource();\n  // const ref = useRef()\n  return (\n    <group>\n      {/* <FakeSphere /> */}\n      <ambientLight position={[0, 0, -10]} intensity={4.9} />\n      <directionalLight intensity={0.5} position={[0, 0, 0]} color={0xffffff} />\n      <pointLight\n        intensity={1.9}\n        position={[-6, 3, -6]}\n        color={0xaca7ef}\n        // ref={setPointLightOne}\n      >\n        {/* {luminousMatterOne && <pointLightHelper args={[luminousMatterOne]} />} */}\n      </pointLight>\n      <pointLight\n        intensity={1.9}\n        position={[6, 3, 6]}\n        color={0x77ccff}\n        // ref={setPointLightTwo}\n      >\n        {/* {luminousMatterTwo && <pointLightHelper args={[luminousMatterTwo]} />} */}\n      </pointLight>\n\n    </group>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { FlyControls, OrbitControls } from '@react-three/drei'\n\nconst Controls = () => {\n  const [width, setWidth] = useState<number>(window.innerWidth);\n  function handleWindowSizeChange() {\n          setWidth(window.innerWidth);\n      }\n  useEffect(() => {\n          window.addEventListener('resize', handleWindowSizeChange);\n          return () => {\n              window.removeEventListener('resize', handleWindowSizeChange);\n          }\n      }, []);\n  \n  let isMobile: boolean = (width <= 768);\n  \n  return isMobile\n    ? <OrbitControls /> : <FlyControls movementSpeed={35} rollSpeed={1} dragToLook />\n}\n\nexport default Controls;\n","import { useFrame } from '@react-three/fiber';\nimport { Text } from '@react-three/drei';\nimport React, { useState } from 'react';\n// import { Water } from '@react-three/drei'\nimport { DataTexture, LuminanceFormat, Mesh, RGBAFormat, UnsignedByteType, } from \"three\";\n// import { SkyBox } from './Scene';\n// import { useFrame } from '@react-three/fiber';\n    var colors: { [color: string]: string } = {\"aliceblue\":\"#f0f8ff\",\"antiquewhite\":\"#faebd7\",\"aqua\":\"#00ffff\",\"aquamarine\":\"#7fffd4\",\"azure\":\"#f0ffff\",\n    \"beige\":\"#f5f5dc\",\"bisque\":\"#ffe4c4\",\"black\":\"#000000\",\"blanchedalmond\":\"#ffebcd\",\"blue\":\"#0000ff\",\"blueviolet\":\"#8a2be2\",\"brown\":\"#a52a2a\",\"burlywood\":\"#deb887\",\n    \"cadetblue\":\"#5f9ea0\",\"chartreuse\":\"#7fff00\",\"chocolate\":\"#d2691e\",\"coral\":\"#ff7f50\",\"cornflowerblue\":\"#6495ed\",\"cornsilk\":\"#fff8dc\",\"crimson\":\"#dc143c\",\"cyan\":\"#00ffff\",\n    \"darkblue\":\"#00008b\",\"darkcyan\":\"#008b8b\",\"darkgoldenrod\":\"#b8860b\",\"darkgray\":\"#a9a9a9\",\"darkgreen\":\"#006400\",\"darkkhaki\":\"#bdb76b\",\"darkmagenta\":\"#8b008b\",\"darkolivegreen\":\"#556b2f\",\n    \"darkorange\":\"#ff8c00\",\"darkorchid\":\"#9932cc\",\"darkred\":\"#8b0000\",\"darksalmon\":\"#e9967a\",\"darkseagreen\":\"#8fbc8f\",\"darkslateblue\":\"#483d8b\",\"darkslategray\":\"#2f4f4f\",\"darkturquoise\":\"#00ced1\",\n    \"darkviolet\":\"#9400d3\",\"deeppink\":\"#ff1493\",\"deepskyblue\":\"#00bfff\",\"dimgray\":\"#696969\",\"dodgerblue\":\"#1e90ff\",\n    \"firebrick\":\"#b22222\",\"floralwhite\":\"#fffaf0\",\"forestgreen\":\"#228b22\",\"fuchsia\":\"#ff00ff\",\n    \"gainsboro\":\"#dcdcdc\",\"ghostwhite\":\"#f8f8ff\",\"gold\":\"#ffd700\",\"goldenrod\":\"#daa520\",\"gray\":\"#808080\",\"green\":\"#008000\",\"greenyellow\":\"#adff2f\",\n    \"honeydew\":\"#f0fff0\",\"hotpink\":\"#ff69b4\",\n    \"indianred \":\"#cd5c5c\",\"indigo\":\"#4b0082\",\"ivory\":\"#fffff0\",\"khaki\":\"#f0e68c\",\n    \"lavender\":\"#e6e6fa\",\"lavenderblush\":\"#fff0f5\",\"lawngreen\":\"#7cfc00\",\"lemonchiffon\":\"#fffacd\",\"lightblue\":\"#add8e6\",\"lightcoral\":\"#f08080\",\"lightcyan\":\"#e0ffff\",\"lightgoldenrodyellow\":\"#fafad2\",\n    \"lightgrey\":\"#d3d3d3\",\"lightgreen\":\"#90ee90\",\"lightpink\":\"#ffb6c1\",\"lightsalmon\":\"#ffa07a\",\"lightseagreen\":\"#20b2aa\",\"lightskyblue\":\"#87cefa\",\"lightslategray\":\"#778899\",\"lightsteelblue\":\"#b0c4de\",\n    \"lightyellow\":\"#ffffe0\",\"lime\":\"#00ff00\",\"limegreen\":\"#32cd32\",\"linen\":\"#faf0e6\",\n    \"magenta\":\"#ff00ff\",\"maroon\":\"#800000\",\"mediumaquamarine\":\"#66cdaa\",\"mediumblue\":\"#0000cd\",\"mediumorchid\":\"#ba55d3\",\"mediumpurple\":\"#9370d8\",\"mediumseagreen\":\"#3cb371\",\"mediumslateblue\":\"#7b68ee\",\n    \"mediumspringgreen\":\"#00fa9a\",\"mediumturquoise\":\"#48d1cc\",\"mediumvioletred\":\"#c71585\",\"midnightblue\":\"#191970\",\"mintcream\":\"#f5fffa\",\"mistyrose\":\"#ffe4e1\",\"moccasin\":\"#ffe4b5\",\n    \"navajowhite\":\"#ffdead\",\"navy\":\"#000080\",\n    \"oldlace\":\"#fdf5e6\",\"olive\":\"#808000\",\"olivedrab\":\"#6b8e23\",\"orange\":\"#ffa500\",\"orangered\":\"#ff4500\",\"orchid\":\"#da70d6\",\n    \"palegoldenrod\":\"#eee8aa\",\"palegreen\":\"#98fb98\",\"paleturquoise\":\"#afeeee\",\"palevioletred\":\"#d87093\",\"papayawhip\":\"#ffefd5\",\"peachpuff\":\"#ffdab9\",\"peru\":\"#cd853f\",\"pink\":\"#ffc0cb\",\"plum\":\"#dda0dd\",\"powderblue\":\"#b0e0e6\",\"purple\":\"#800080\",\n    \"rebeccapurple\":\"#663399\",\"red\":\"#ff0000\",\"rosybrown\":\"#bc8f8f\",\"royalblue\":\"#4169e1\",\n    \"saddlebrown\":\"#8b4513\",\"salmon\":\"#fa8072\",\"sandybrown\":\"#f4a460\",\"seagreen\":\"#2e8b57\",\"seashell\":\"#fff5ee\",\"sienna\":\"#a0522d\",\"silver\":\"#c0c0c0\",\"skyblue\":\"#87ceeb\",\"slateblue\":\"#6a5acd\",\"slategray\":\"#708090\",\"snow\":\"#fffafa\",\"springgreen\":\"#00ff7f\",\"steelblue\":\"#4682b4\",\n    \"tan\":\"#d2b48c\",\"teal\":\"#008080\",\"thistle\":\"#d8bfd8\",\"tomato\":\"#ff6347\",\"turquoise\":\"#40e0d0\",\n    \"violet\":\"#ee82ee\",\n    \"wheat\":\"#f5deb3\",\"white\":\"#ffffff\",\"whitesmoke\":\"#f5f5f5\",\n    \"yellow\":\"#ffff00\",\"yellowgreen\":\"#9acd32\"};\n\n\nfunction colorNameToHex(color: string)\n{\n  if (color === undefined) { return '#000000'; }\n    if (typeof colors[color.toLowerCase()] != 'undefined')\n        return colors[color.toLowerCase()];\n\n    return '#000000';\n}\n\nconst bilinearInterpolator = (func: (x: number, y: number) => number) => (x: number, y: number) => {\n  // \"func\" is a function that takes 2 integer arguments and returns some value\n  const x1 = Math.floor(x);\n  const x2 = Math.ceil(x);\n  const y1 = Math.floor(y);\n  const y2 = Math.ceil(y);\n\n  if ((x1 === x2) && (y1 === y2)) return func(x1, y1);\n  if (x1 === x2) {\n    return (func(x1, y1) * (y2 - y) + func(x1, y2) * (y - y1)) / (y2 - y1);\n  }\n  if (y1 === y2) {\n    return (func(x1, y1) * (x2 - x) + func(x2, y1) * (x - x1)) / (x2 - x1);\n  }\n\n  // else: x1 != x2 and y1 != y2\n  return (\n    func(x1, y1) * (x2 - x) * (y2 - y) +\n    func(x2, y1) * (x - x1) * (y2 - y) +\n    func(x1, y2) * (x2 - x) * (y - y1) +\n    func(x2, y2) * (x - x1) * (y - y1)\n  )\n  / ((x2 - x1) * (y2 - y1));\n}\n\nconst makeImageData = (\n  tiles: string[][],\n  tileColors: { [tile: string]: string },  \n  imageSize: number,\n  // evolving: boolean\n): { rgb: Uint8Array, grayscale: Uint8Array } => {\n  var tileWidth = tiles[0].length,\n      tileHeight = tiles.length;\n\n  const width = imageSize, height = imageSize\n  \n  const grayscaleData = new Uint8Array(width * height);\n  const rgbData = new Uint8Array(width * height * 4);\n  // const greenData = new Uint8ClampedArray(width * height * 4)\n  // }\n  const heightAt = (x: number, y: number) => {\n    if (tiles[y] !== undefined) return parseInt(tiles[y][x], 10)\n    return 0\n  }\n  const colorAt = (x: number, y: number) => {\n    let h = heightAt(x,y)\n    let color = tileColors[Math.round(h)]\n    return color\n  }\n  const hexValueAt = (x: number, y: number) => {\n    let hex: string = colorNameToHex(colorAt(x,y)) //tileColors[Math.round(value)])\n    return hex;\n  }\n\n  const interpolate = bilinearInterpolator(heightAt)\n  // (x,y) => {\n  //   if (tiles[y] !== undefined) return parseInt(tiles[y][x], 10)\n  //   return 0\n  // })\n  // todo just interpolate for each color channel independently i think..?!\n  // return just green channel\n  const interpolateRed = bilinearInterpolator((x, y) => {\n    let hex: string = hexValueAt(x,y) //colorNameToHex(colorAt(x,y)) //tileColors[Math.round(value)])\n    var red = parseInt(hex[1]+hex[2],16);\n    return red;\n  })\n  const interpolateGreen = bilinearInterpolator((x, y) => {\n    let hex: string = hexValueAt(x,y) //colorNameToHex(colorAt(x,y)) //tileColors[Math.round(value)])\n    var green = parseInt(hex[3]+hex[4],16);\n    return green;\n  })\n  const interpolateBlue = bilinearInterpolator((x, y) => {\n    let hex: string = hexValueAt(x,y) // colorNameToHex(colorAt(x,y)) //tileColors[Math.round(value)])\n    var blue = parseInt(hex[5]+hex[6],16);\n    return blue;\n  })\n\n  \n  for (var y = 0; y < height - 1; y++) {\n    for (var x = 0; x < width - 1; x++) {\n      let pos = (y * width + x);\n      let x0 = tileWidth - ((x / (width)) * (tileWidth)),\n        y0 = (y / (height)) * (tileHeight);\n\n      let value = interpolate(x0, y0)\n      grayscaleData[pos] = value * 25\n\n      var rgbPos = (y * width + x) * 4;\n      rgbData[rgbPos] = interpolateRed(x0, y0)\n      rgbData[rgbPos + 1] = interpolateGreen(x0, y0)\n      rgbData[rgbPos + 2] = interpolateBlue(x0, y0)\n      rgbData[rgbPos + 3] = 255\n    }\n  }\n  return { rgb: rgbData, grayscale: grayscaleData }\n}\n\nlet cachedImageData: { grayscale: Uint8Array, rgb: Uint8Array } | null = null // {} // grayscale, rgb }\n\nconst Terrain = ({ tileColors, evolving, tiles }: { evolving: boolean, tiles: string[][], tileColors: { [tile: string]: string } }) => {\n  const [oceanMesh, setOcean] = useState()\n  useFrame(({ clock }) => {\n    if (oceanMesh) {\n      let mesh: Mesh = oceanMesh\n      mesh.position.z =12 \n                      + 0.125 * Math.sin(clock.elapsedTime*2)\n                      // + 0.5 * Math.sin(clock.elapsedTime*2)\n                      + 0.05 * Math.cos(clock.elapsedTime/2)\n    }\n  })\n  tiles = tiles || []\n  var tileWidth = tiles[0].length;\n  \n  const interpolationRate = evolving ? 1 : 4;\n  const imgSize = tileWidth * interpolationRate;\n  const width = imgSize, height = imgSize;\n\n  const { grayscale, rgb }: { grayscale: Uint8Array, rgb: Uint8Array } = cachedImageData\n    || makeImageData(tiles, tileColors, imgSize)\n  if (!evolving) { cachedImageData = { grayscale, rgb }}\n  else { cachedImageData = null }\n  \n  \n  const grayscaleTexture = new DataTexture(grayscale, width, height, LuminanceFormat, UnsignedByteType);\n  const rgbTexture = new DataTexture(rgb, width, height, RGBAFormat, UnsignedByteType);\n\n  const geometry = \n      <planeBufferGeometry attach=\"geometry\" args={[\n        // width, height,\n        // 8, 8,\n        // 16, 16,\n        // 32, 32,\n        // 64, 64,\n        // 128, 128,\n        // 256, 256,\n        // 512, 512,\n        // 1024, 1024,\n        2048, 2048,\n        1024, 1024,\n        // 2048, 2048\n        // 4096, 4096,\n      ]} />\n\n  const showOcean = true\n  \n  return <>\n    <mesh\n      // rotation={[-Math.PI/2,0,0]}\n    >\n      {geometry}\n       \n      <meshPhongMaterial\n        attach=\"material\"\n        color={\"navajowhite\"}\n        map={rgbTexture}\n        displacementMap={grayscaleTexture}\n        displacementScale={64}\n        shininess={2}\n        flatShading\n      />\n    </mesh>\n\n    <Text\n      position={[0,50,40]}\n      rotation={[Math.PI/2,0,0]}\n      font='Fira Code'\n      fontSize={8}\n      color=\"white\"\n      anchorX=\"center\" anchorY=\"middle\"\n    >\n      Welcome, traveler!\n    </Text>\n\n    {showOcean && <mesh\n      ref={setOcean}\n      // rotation={[-Math.PI/2,0,0]}\n      // position={[0,0,0]}\n    >\n      {geometry}\n       \n      <meshPhongMaterial\n        attach=\"material\"\n        color={\"darkblue\"}\n        transparent\n        opacity={0.85}\n        displacementScale={64}\n        shininess={1}\n        flatShading\n      />\n    </mesh>}\n\n  </>;\n};  \n\nexport default Terrain;\n","import React from \"react\";\nimport \"@react-three/fiber\";\nimport {\n  EffectComposer,\n  // DotScreen,\n  // // Pixelation,\n  // Noise,\n  // Bloom, \n  // // Outline,\n  // // Glitch,\n  // Pixelation,\n  // DepthOfField, Noise, Vignette\n} from '@react-three/postprocessing'\n// import { EffectComposer, Pixelation, Vignette } from '@react-three/postprocessing'\n\n\nexport default function Effects() {\n  const fxStack = <>\n        {/* <Pixelation granularity={1} /> */}\n        {/* <Pixelation granularity={2.5} /> */}\n        {/* <Bloom luminanceThreshold={0} luminanceSmoothing={0.9} height={10} /> */}\n        {/* <Noise opacity={0.12} /> */}\n        {/* <DotScreen scale={1} /> */}\n        {/* <DotScreen scale={0.6} /> */}\n        {/* <DotScreen scale={0.1} /> */}\n        </>\n  const fx = true\n  return (\n    <EffectComposer>\n        {/* <DotScreen scale={2} /> */}\n        {/* <Pixelation granularity={2.5} /> */}\n      {fx ? fxStack : <></>}\n\n    </EffectComposer>\n  )\n}\n","import React from \"react\";\nimport {useThree} from \"@react-three/fiber\";\n// import { useThree } from \"@react-three/fiber\";\nimport { Lights } from \"./Lights\";\nimport Controls from \"./Controls\";\nimport Terrain from \"./Terrain\";\nimport Effects from \"./Effects\";\nimport { CubeTextureLoader } from \"three\";\n\nexport function skyboxTexture() {\n  // const { scene } = useThree();\n  const loader = new CubeTextureLoader();\n  // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\n  const texture = loader.load([\n    `${process.env.PUBLIC_URL}/1.jpg`,\n    `${process.env.PUBLIC_URL}/2.jpg`,\n    `${process.env.PUBLIC_URL}/3.jpg`,\n    `${process.env.PUBLIC_URL}/4.jpg`,\n    `${process.env.PUBLIC_URL}/5.jpg`,\n    `${process.env.PUBLIC_URL}/6.jpg`\n  ]);\n  return texture\n  // texture.side\n  // texture.rend\n\n  // Set the scene background property to the resulting texture.\n  // scene.background = texture;\n  // scene.frustumCulled = false\n  // return <></>; //null; //<></>;\n}\n\n// export default Controls;\nconst Scene = ({ tileColors, tiles, evolving }: { evolving: boolean, tiles: string[][], tileColors: { [tile: string]: string } }) => {\n  const { scene } = useThree();\n  if (scene.background === null) {\n    scene.background = skyboxTexture()\n  }\n  return (\n  <>\n        {/* <material attach=\"background\" args={[skyboxTexture()]} /> */}\n         {/* <fog attach=\"fog\" args={['#eaeaea', 5, 500]} /> */}\n        {/* <color attach=\"background\" args={['midnightblue']} /> */}\n \n    {/* <SkyBox /> */}\n    <Lights />\n    <Controls />\n    {/* <mesh>\n      <boxGeometry args={[20,20,20]} />\n      <meshPhongMaterial attach=\"material\" color={'hotpink'} />\n    </mesh> */}\n    <Terrain tiles={tiles} evolving={evolving} tileColors={tileColors} />\n    <Effects />\n  </>\n)\n  };\n\nexport { Scene }\n","import React, { Suspense } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport { Scene } from \"./Scene\"\n// import { Stage } from \"@react-three/drei\"\n\nconst ViewHeightmap = ({ tileColors, isBoardEvolving, tiles }: { tileColors: { [tile: string]: string }, isBoardEvolving: boolean, tiles: string[][] }) => {\n  return <>\n    <Canvas\n      frameloop={'demand'} \n      camera={{ zoom: 4, position: [0,0,32], \n       near: 0.1 }}\n       onCreated={({camera}) => {\n         camera.rotateX(Math.PI/2)\n       }}\n    >\n      <Suspense fallback={<div className=\"loading\">Loading</div>}>\n\n      {/* <Stage contactShadow shadows adjustCamera intensity={1} environment=\"city\" preset=\"rembrandt\"> */}\n      <Scene tiles={tiles} evolving={isBoardEvolving} tileColors={tileColors} />\n      {/* </Stage> */}\n      </Suspense>\n      \n    </Canvas>\n  </>\n}\n\nexport { ViewHeightmap as HeightmapCanvas }\n","import React from 'react';\nimport { BoardTableView } from \"./BoardTableView\";\nimport { HeightmapCanvas } from \"./Heightmap/Canvas\";\nexport interface IBoard { evolving: boolean, tiles: string[][], tileColors: { [tile: string]: string }, tileInspect: (x: number, y: number) => string}\n\nexport const BoardPresenter = ({ tiles, tileColors, tileInspect, evolving }: IBoard) => {\n  let largeMap = tiles.length-1 > 64\n  const showThreeScene = !!largeMap //!(process.env.NODE_ENV === 'test');\n  const showCartogram = !showThreeScene //|| (!evolving); //false; //!(process.env.NODE_ENV === 'test');\n  const isMapCondensed = true\n  return <div style={{ width: '100vw', height: '70vh', display: 'flex' }}>\n    {showThreeScene && <HeightmapCanvas\n      isBoardEvolving={evolving}\n      tiles={tiles}\n      tileColors={tileColors}\n    />}\n    {showCartogram && <BoardTableView\n      tileColors={tileColors}\n      tileInspect={tileInspect}\n      tiles={tiles}\n      condensed={isMapCondensed}\n      />}\n  </div>\n}\n","import React from \"react\";\nimport { Machine, Moiety, Person } from \"../types\";\nimport { LastDelta } from \"../../ModelPresenter\";\nimport { presentItem } from \"../Model/presentItem\";\nimport { Tile } from \"./Tile\";\nimport { presentCommunity } from \"./presentCommunity\";\nimport { Population } from \"../Population\";\nimport { Community } from \"../Community\";\nimport { capitalize } from '../utils/capitalize';\nimport { BoardPresenter, IBoard } from \"./BoardPresenter\";\n\nexport type ModelViewProps = {\n  modelName: string;\n  items: { name: string; amount: number; }[];\n  animals: { name: string; amount: number }[];\n  communities: Population<Moiety, Person>[];\n  machines: Machine[];\n  lastChanges: LastDelta;\n  metrics: { [name: string]: number };\n  notes: { [name: string]: string };\n  board: IBoard\n}\n\nexport function ModelView({\n  modelName,\n  items,\n  communities,\n  machines,\n  animals,\n  lastChanges,\n  metrics,\n  notes,\n  board,\n}: ModelViewProps) {\n  const folks = (communities as Community[]).map(presentCommunity)\n  // console.log({ community: communities[0].list() })\n  return <div className='Model'>\n    {/* <ViewHeightmap /> */}\n    <h4 aria-label='Model Title' style={{display: 'none'}}>{modelName}</h4>\n    {board.tiles.length > 0 && <BoardPresenter {...board} />}\n    {items.length > 0 && (<Tile title='Items'>\n      <ul aria-label='Resources'>\n        {items.map(presentItem(lastChanges.resources))}\n      </ul>\n    </Tile>)}\n    {animals.length > 0 && (\n      <Tile title='Animals'>\n        <ul aria-label='Animals'>\n          {animals.map(presentItem(lastChanges.animals))}\n        </ul>\n      </Tile>)}\n      {communities.length > 0 && <div title='Individuals' style={{display: 'flex'}}>{folks}</div>}\n    {machines.length > 0 && <Tile title='Machines'>\n      <ul>\n        {machines.map(({ name }) => <li key={name}>{name}</li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(metrics).length > 0 && <Tile title='Metrics'>\n      <ul>\n        {Object.entries(metrics).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Count'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(notes).length > 0 && <div title='Notes'\n      style={{\n        overflow: 'scroll',\n        maxHeight: '640px'\n      }}\n    >\n    <table>\n      <tbody>\n      {/* <tr> */}\n        {\n          Object.entries(notes).map(([name, value]) => name.startsWith('*')\n            ? (\n                <tr key={name} style={{textAlign: 'center'}} title={capitalize(name.replaceAll('*', ''))}>\n                  <td colSpan={3}>\n                    <b>{value}</b>\n                  </td>\n                </tr>\n              )\n            : (\n                <tr key={name} title={name} >\n                  <td key={name} style={{textAlign: 'right', color: 'gray' }}>\n                    {name}\n                  </td>\n                  <td style={{width: '4px'}}></td>\n                  <td style={{ minWidth: '180px', textAlign: 'left', fontSize: '15pt' }}>\n                    <span data-testid='Description' style={{\n                      ...(value.startsWith('*') && {color: 'lightgreen'}),\n                      ...(value.startsWith('%') && {color: 'goldenrod'}),\n                      ...(value.startsWith('~') && {color: 'darkgray'}),\n                    }}>\n                      {value.replaceAll('*','').replaceAll('%','').replaceAll('~','')}\n                    </span>\n                  </td>\n                </tr>\n              )\n          )\n        }\n\n    </tbody>\n    </table>\n      {/* </tr> */}\n    </div>}\n  </div>;\n}\n","import { Model } from './Model';\nimport { IModel } from './IModel';\nimport { ModelView } from '../View/ModelView';\nexport { Model, ModelView }\nexport type { IModel }\nexport default Model\n","// import { IAssembly } from './ecosphere/Assembly';\nimport { ModelView } from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\n\nexport type LastDelta = { [group: string]: { [element: string]: number }}\n\ntype ModelPresenterProps = {\n  model: IModel\n  step: Function \n  send: Function\n  choose: Function\n  lastChanges: LastDelta\n}\n\nconst view = (model: IModel, lastChanges: LastDelta) => {\n  const { actions, resources, people, machines, animals, metrics, notes, tiles, tileColors } = model;\n\n  const props = {\n    modelName: model.name,\n    items: resources.report,\n    communities: people.populationList, //.populations,\n    // individuals: people.list(),\n    // work: people.report,\n    machines: machines.list(),\n    animals: animals.report,\n    actions: actions.list(),\n    metrics: Object.fromEntries(\n      Object.entries(metrics).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    notes: Object.fromEntries(\n      Object.entries(notes).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    lastChanges,\n    board: {\n      tiles: tiles || [],\n      tileColors: tileColors || {},\n      tileInspect: (model.tileInspect || (() => '--')),\n      evolving: model.tilesEvolving || false\n    }\n  }\n\n  return props\n}\n\nexport function ModelPresenter({ model, send, choose, step, lastChanges }: ModelPresenterProps) {\n  return <>\n    <div aria-label='View'>\n      <ModelView {...view(model, lastChanges)} />\n    </div>\n\n    <div aria-label='Controls'>\n      <span title='Run' style={{display: 'none'}}>\n        <button onClick={() => step(true)}>Step</button>\n      </span>\n\n      <span title='Actions'>\n        {model.actions.list().map(({ name }) => <button title={name} key={name} onClick={() => send(name)}>\n          {name}\n        </button>)}\n      </span>\n\n      {model.policies.count > 0 && <div className='Policy' title='Policies'>\n        {/* <h5>Policies</h5> */}\n        {model.policies.list().map(({ name }) => <label key={name}><input\n          type='radio'\n          checked={model.currentPolicy?.name === name}\n          title={name}\n          key={name}\n          onChange={() => choose(name)}\n        />\n        {name}\n        </label>)}\n      </div>}\n    </div>\n  </>;\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { LastDelta } from './ModelPresenter';\nimport { isModel } from './ModelSelector';\n\nexport type ModelAPI = {\n  model: IModel | IAssembly\n  setModel(model: IModel | IAssembly): void\n  step: Function,\n  lastChanges: LastDelta,\n  send: (actionName: string, args: any) => void,\n  choose: (policyName: string, args: any) => void,\n  setDelay: (milliseconds: number) => void\n}\n\n// ticks per sec\n// const ticksPerSecond = (n: number) => n > 0 ? Math.floor(1000 / n) : 1\n// const speeds = {slow: 10, fast: 25, faster: 50, fastest: 80};\nexport function useModel(initialModel: IModel | IAssembly): ModelAPI { //model: IModel = new Model('Hello World')): ModelAPI {\n  const [model, setModel] = useState(initialModel) //new Model('Hello World'))\n\n  const [lastChanges, setLastChanges] = useState({} as LastDelta)\n  const isTest = process.env.NODE_ENV === 'test'\n  const [delay, setDelay] = useState(isTest ? 5000 : 2) //ticksPerSecond(speeds.slow));\n\n  const [shouldStep, step] = useState(false);\n  const [shouldSend, doSend] = useState(false);\n  const [shouldManage, doManage] = useState(false)\n\n  const performStep = () => { step(true); };\n  const [command, setCommand] = useState('')\n  const [policy, setPolicy] = useState('')\n\n  useEffect(() => {\n    if (shouldSend) {\n      if (command && isModel(model)) { model.send(command, {}) }\n      doSend(false)\n    }\n  }, [command, model, shouldSend]);\n\n  useEffect(() => {\n    if (shouldManage) {\n      if (policy && isModel(model)) { model.choose(policy, {}) }\n      doManage(false)\n    }\n  }, [policy, model, shouldManage]);\n\n  const performSend = (actionName: string, args: any) => {\n    setCommand(actionName)\n    doSend(true)\n  }\n\n  const performChoose = (policyName: string, args: any) => {\n    // console.log(\"CHOOSE\", policyName)\n    setPolicy(policyName)\n    doManage(true)\n  }\n\n  useEffect(() => {\n    if (shouldStep && isModel(model)) {\n      let { changed } = model.step();\n      step(false);\n      setLastChanges(changed);\n    }\n  }, [shouldStep, model]);\n\n  useInterval(() => step(true), delay); \n\n  return {\n    model,\n    step: performStep,\n    lastChanges: lastChanges as LastDelta,\n    send: (actionName: string, args: any) => performSend(actionName, args), \n    choose: (policyName: string, args: any) => performChoose(policyName, args),\n    setDelay,\n    setModel,\n  };\n}\n\nfunction useInterval(callback: any, delay: number) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      // @ts-ignore\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport Model from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelPresenter } from './ModelPresenter';\nimport { useModel } from './useModel';\n\nexport const isModel = (maybeModel: IModel | IAssembly): maybeModel is IModel => {\n  return maybeModel instanceof Model;\n}\n\nconst AssemblyPresenter: React.FC<{ assembly: IAssembly }> = ({ assembly }) => {\n  return <>{assembly.models.items.map((theModel: IModel) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { step, send, choose, lastChanges, model } = useModel(theModel);\n    return <>\n    <h4>{theModel.name}</h4>\n    <ModelPresenter\n             key={model.name}\n             step={step}\n             send={send}\n             model={model as IModel}\n             choose={choose}\n             lastChanges={lastChanges}\n           />\n           </>\n  })}</>\n}\n\nexport function ModelSelector({ initialModel, models }: {\n  initialModel: IModel;\n  models: (IModel | IAssembly)[];\n}) {\n  const { step, send, choose, lastChanges, model, setModel } = useModel(initialModel);\n  return <>\n    <Dropdown\n      options={models.map(model => model.name)}\n      onChange={({ value }) => {\n        const theModel = models.find((model: IModel | IAssembly) => model.name === value);\n        if (theModel) { setModel(theModel); }\n      }}\n      value={model.name}\n      placeholder=\"Select a model\" />\n    {isModel(model) ? <ModelPresenter\n                       step={step}\n                       send={send}\n                       model={model}\n                       choose={choose}\n                       lastChanges={lastChanges} />\n                    : <AssemblyPresenter assembly={model} />}\n  </>;\n}\n","import { StringGeneratorSequence } from \"../collections/Sequence\";\nimport { ISequence } from \"../collections/types\";\nimport { titleize, capitalize } from \"./utils/capitalize\";\nimport { choose, sample } from \"./utils/sample\";\n\nconst concepts = [\n  'earth', 'sky',\n  'mountain', 'hill', 'valley', 'peak', 'mound', 'point', 'mountain-chain',\n  'island', 'isle', \n  'sea', 'lake', 'bay', 'pool', 'harbor',\n  'forest',\n  'river', 'glen', 'stream',\n  // barrow, downs, gulch ...\n\n  'land', 'place', 'realm', 'region',\n  'peoples', 'kingdom',\n  'road', 'path',\n  'haven', 'fortress', 'prison', 'citadel', 'stronghold', 'tower', 'garden',\n  // modifiers..\n  'ever-', '-less', 'at-',\n  // masculine/feminine suffices\n  '-person', '-man', '-son', '-woman', '-maid', '-daughter',\n  // relations\n  'friend', 'foe', 'lord', 'slave', 'king', 'queen', 'prince', 'princess',\n\n  // ...aspects...\n  'light', 'dark',\n  'shadow', 'shade',\n  'sun', 'moon', 'stars',\n  'day', 'night', 'spark', 'starlight', 'firmament',\n  // weather\n  'heat', 'cold',\n  'mist', 'snow', 'wind', 'rain', 'cloud', //'hail',\n  'rainbow', 'dew', 'frost',\n  // metals...\n  'tin', 'iron', 'silver', 'gold', \n  // weapons\n  // 'axe', 'sword', 'bow', 'shield',\n\n  // cut, delve, hew, till, hunt...?\n\n  // shades, hues...\n  'white', 'black', 'gray', 'red', 'blue', 'green', 'orange',\n  // ...animals,\n  'dragons', 'elephants',\n  'bears', 'birds', 'horses', 'snakes', 'wolves',\n  // mole...\n\n  // tame animals..\n  // 'boars',\n  'hounds',\n\n  // birds in particular...\n  'swans', 'eagles', 'nightingales',\n  // swallow\n\n  // ...elements,\n  'ice', 'fire', 'earth', 'water',\n\n  // quasi-elements...\n  'embers', 'steam', 'magma', 'radiance',\n  'soot', 'ash', 'salt', 'void',\n\n  // ...times of day\n  'morning', 'evening', 'dusk', 'noon', 'afternoon', 'midnight',\n  // trees\n  'willow', 'pine', 'cherry', 'oak', 'spruce', 'birch', 'elm', 'holly',\n\n  // flowers\n  'rose', 'daisy', 'poppy', 'dandelion', 'lily',\n  // jasmine/jessamine, violet\n  // lotus\n\n  // seasons\n  'autumn', 'winter', 'spring', 'summer',\n  // moods\n  'dread', 'horror', 'awe', 'joy', 'sorrow', 'gloom',\n  // food\n  'apple', 'honey', 'bread', 'elderberry', 'wine', 'fish',\n  // natural substances..\n  'wax',\n  // 'nut',\n\n  // instruments..?\n  // lute, harp, viol ...\n\n  // adjectives...\n  'tall', 'deep', 'lofty', 'lonely',\n  'great', 'large', 'small', 'tiny',\n  'narrow', 'wide', 'sharp', 'giant',\n  'quick', 'pale', 'bitter',\n\n  'golden', 'holy', 'fortunate', 'dusty', 'beautiful',\n  'fell', 'cloudy', 'secret', 'sweet', 'bold',\n  'splendid', 'abundant', 'sparkling',\n\n  // animal aspects...\n  'horns', 'fangs', 'claws',\n\n  // gemstones...\n  // 'emerald', 'ruby',\n\n  // more abstract things...\n  'love', 'dream',\n  'music', 'silence', 'divine',\n\n  'fate', 'thought', 'speech', 'skill',\n  'tomorrow',\n\n  'spirit',\n  'tyranny', 'freedom',\n\n  'magic',\n\n  // bodily substances\n  'blood', 'tears', \n\n  // activities?\n  'laughter',\n\n  // created things...\n  'jewel', 'ship', 'needle', 'bell', 'candle',\n\n  // clothes\n  'mantle', 'veil', // 'garment'\n\n\n  // questing...\n  'journey', 'treasure', 'battle', 'smith',\n\n  // names for the languages themselves? races?\n  // 'dwarves', // dwarrow, khazad,\n  // 'dwarvish', // dwarvish, khuzdul...\n  // 'elves', // aelves, \n  // 'elvish', // aelvish, sindarin,\n  // 'men', // men\n  // 'mannish', // westron, ...\n\n  // 'peoples',\n  // 'common',\n  // men (ylde/glishmen/...), dwarrow (dwarven/khuzdul...), aeldar (aelves/quenya...), maiar, valar,\n\n] as const;\n\nexport type Concept = typeof concepts[number];\nexport const theConcepts: Concept[] = concepts as unknown as Concept[]\ntype Lexeme = string\nexport type Vocabulary = {[key in Concept]: Lexeme}\n\nexport class Dictionary {\n  constructor(\n    public languageName: string,\n    protected vocabulary: Vocabulary,\n    protected enhanceTranslation?: (input: string) => string\n  ) {}\n\n  // todo support more 'syntax'\n  // (at least recognizing 'x of y', where x + y are translated 'first'...)\n  // (also -less should just modify the immediately preceding word)\n  translate(...concepts: Concept[]): Lexeme {\n    // let lastConcept: Concept | null = null;\n    let lastWord: string = ''\n    let translation = concepts.reduce((acc, concept, index) => {\n      let word = this.vocabulary[concept]\n      acc = acc.trim()\n      let space = true\n      if (acc.endsWith('-') || acc.endsWith('*')) {\n        space = false; acc = acc.substring(0, acc.length-1)\n      }\n      if (index > 0 && (word.startsWith('-') || word.startsWith('*'))) {\n        space = false; word = word.substring(1, word.length) //replaceAll('-', '')\n      }\n      // if (word.startsWith(acc[acc.length-1])) { space = false; acc = acc.substring(0, acc.length - 1) }\n\n      let elements = [acc, word]\n      // if (concept.startsWith('-')) {\n      if (lastWord.startsWith('-')) {\n        space = false;\n        // if (word.endsWith('-')) {\n        //   word = word.replaceAll('-', '')\n        elements = [word, acc]\n        // }\n      }\n\n      // lastConcept = concept;\n      lastWord = word;\n      return elements.join(space ? ' ' : '')\n    }, '')\n\n    translation = translation.replaceAll('-', '')\n    // okay, need to map these irregulars to a process...\n    \n    let result = this.enhanceTranslation\n      ? this.enhanceTranslation(translation)\n      : translation\n    return titleize(result) //titleize(translation)\n  }\n\n  name = (...ideas: Concept[]) => (...descriptors: Concept[]) => {\n    let notion = capitalize(ideas.join('-'))\n    let description = capitalize(descriptors.join('-'))\n    let form = `${description} ${notion}`\n    if (description.endsWith('s')) { form = `${description}' ${notion}`}\n    let translation = `${this.translate(\n      ...ideas,\n      ...descriptors,\n      )}`;\n    return [ \n      form,\n      translation\n    ]\n  }\n\n  nameInverse = (...ideas: Concept[]) => (...descriptors: Concept[]) => {\n    let notion = capitalize(ideas.join('-'))\n    let description = capitalize(descriptors.join('-'))\n    let form = `${description} ${notion}`\n    if (description.endsWith('s')) { form = `${description}' ${notion}`}\n    let translation = `${this.translate(\n      ...descriptors,\n      ...ideas,\n      )}`;\n    return [ \n      form,\n      translation\n    ]\n  }\n\n}\n\n\nexport class DictionarySequence\n     extends StringGeneratorSequence\n  implements ISequence<string> {\n    private notions: Concept[]\n  constructor(\n    private dictionary: Dictionary,\n    private invertOrder: boolean = false,\n    ...notions: Concept[]\n  ) {\n    super()\n    this.notions = notions\n  }\n\n  generate(): string {\n    console.log(`Generate ${this.notions.join('/')} using ${this.dictionary.languageName} dictionary...`)\n    const ideas: Concept[] = choose(1, theConcepts);\n    const inventName = this.invertOrder\n      ? this.dictionary.nameInverse(sample(this.notions))\n      : this.dictionary.name(sample(this.notions))\n    const [significance, name] = inventName(...ideas)\n    return `${name} (${significance})`\n  }\n}\n\n// move this stuff outside? \n// todo ... hard to construct full dict from scratch!\n// want some kind of system for assembling the dictionary from\n// (reasonably small number) roots\n// eg if beauty (gezi) then => beatuiful (geziel) .. \n// but more generally reveal the 'concept algebra' of the ideas\nexport type Roots = {\n  man: string\n  woman: string\n  son: string\n  daughter: string\n  crown: string\n  place: string\n  sleep: string\n  great: string\n  small: string\n  beauty: string\n  tree: string\n  flower: string\n  water: string\n  // cove: string\n  safe: string\n  light: string\n  shadow: string\n  one: string\n  many: string\n  joy: string\n  sorrow: string\n  heart: string\n  bitter: string\n  sweet: string\n  point: string\n  heat: string\n  cold: string\n  tall: string\n  deep: string\n  bell: string\n  mound: string\n  run: string\n  sing: string\n  way: string\n  no: string\n  at: string\n  eat: string\n  drink: string\n  air: string\n  good: string\n  bad: string\n  quick: string\n  // slow: string\n  time: string\n  cut: string\n  all: string\n  hard: string\n  soft: string\n  color: string\n  ore: string\n  wing: string\n  snake: string\n  horse: string\n  bear: string\n  // elephant: string\n  dog: string\n  // wild: string\n  fear: string\n  death: string\n  // sound: string\n  tooth: string\n  // wood: string\n  over: string\n  high: string\n  mantle: string\n  // face: string\n  fight: string\n  mere: string\n  strong: string\n}\n\n// try to support building the 150+ word dictionary from\n// smaller set of root words?\n// ensures some internal consistency too?\nconst assembleDictionary = (\n  name: string,\n  roots: Roots,\n  vocabOverrides: Partial<Vocabulary>,\n  replacements: { [key: string]: string } = {}\n): Dictionary => {\n  const {\n    man, woman, son, daughter,\n    crown, place, tree, sleep, flower,\n    beauty, // valor,\n    great, small,\n    water, //cove,\n    safe,\n    // cloud,\n    // star,\n    light, shadow,\n    one, many,\n    joy, sorrow,\n    sweet, bitter,\n    point, \n    heat, cold,\n    tall, deep,\n    bell, mound,\n\n    run, sing, way,\n    // forever,\n    no, at, eat, drink,\n    good, bad,\n    quick, //slow,\n    time, air,\n    cut,\n    all,\n    hard, soft,\n    color, ore,\n    wing,\n    snake, horse, bear, dog,\n    // wild,\n    fear,\n    death,\n    // sound,\n    tooth,\n    heart,\n    // wood,\n    over,\n    high,\n    // mantle,\n    fight,\n    // face,\n    mere,\n    strong,\n  } = roots\n\n  // const kernel = {\n  //   sweet: good + taste,\n  //   bitter: bad + taste,\n  // }\n\n  const basics = {\n    '-person': man,\n    '-man': man,\n    '-woman': woman,\n    '-maid': small + woman,\n    '-son': son,\n    '-daughter': daughter,\n\n    // mantle: over + coat,\n    // veil: over + face,\n    cove: cut + water,\n\n    star: soft + light,\n    daisy: bell + flower,\n    poppy: sleep + flower,\n    dandelion: crown + flower,\n    willow: sorrow + tree,\n    cherry: good + tree,\n    spruce: sweet + tree,\n    pine: bitter + tree,\n    birch: small + tree,\n    elm: tall + tree,\n    oak: hard + tree,\n    holly: joy + tree,\n    king: crown + man,\n    queen: crown + woman,\n    sea: great + water,\n    lake: water + place,\n    pool: water + mere,\n    haven: safe + place,\n    // mist: water + cloud,\n    forest: tree + place,\n    people: man + woman,\n    ice: bitter + cold,\n    prison: bitter + sorrow,\n    jewel: small + beauty,\n    needle: bitter + point,\n    candle: heat + point,\n    hill: small + mound,\n    mountain: mound + place,\n    valley: way + place,\n    peak: point + place,\n    mound: mound + place,\n    land: man + place,\n    lofty: great + high,\n    sky: high + over,\n    low: small + one,\n    river: water + way,\n    isle: water + place,\n    island: deep + water,\n    wine: joy + drink,\n    honey: sweet + drink,\n    apple: small + eat,\n    bread: good + eat,\n    elderberry: safe + eat,\n    fish: small + quick,\n    harvest: tree + cut,\n    night: shadow + time,\n    garden: flower + place,\n    // strong: great + hard,\n    // giant: great + tall,\n    vault: cut + place,\n\n    white: light + color,\n    black: shadow + color,\n    green: tree + color,\n    red: heat + color,\n    blue: cold + color,\n\n    morning: light + time,\n    evening: shadow + time,\n    noon: high + light,\n    fire: heat + light,\n\n    tin: soft + ore,\n    silver: beauty + ore,\n    gold: deep + ore,\n\n    bird: quick + wing,\n    birds: good + wing,\n    horses: horse,\n    elephants: great + horse, //elephant,\n    bears: bear,\n    snakes: snake,\n    wolves: bad + dog,\n    hounds: good + dog,\n    // gray: light + shadow + color, 'red', 'blue', 'green', 'orange',\n    large: tall + great,\n    tiny: small + small,\n    thirst: no + drink,\n    wax: soft + quick,\n\n    veil: small + soft,\n\n    fortunate: great + good,\n    beautiful: great + beauty,\n    // silence: no + sound,\n\n    music: man + sing,\n\n    abundant: many + many,\n    // sparkling: run + light,\n    teeth: many + tooth,\n    battle: many + man + fight,\n    dark: no + light,\n\n    wood: tree + ore,\n  }\n\n  const {\n    fire, red, cove,\n    vault, star, night, ice, harvest, river, mountain, // valley,\n    king, land, lofty, sky, low, people, '-person': person,\n    white, black, morning, evening, noon, bird,\n    large, thirst, music, teeth, battle,\n    wood,\n  } = basics\n\n  const intermediate = {\n    bay: cove + place,\n    harbor: safe + cove,\n    dragons: strong + wing + snake,\n    swans: beauty + bird,\n    eagles: lofty + bird,\n    nightingales: evening + bird,\n    iron: strong + ore,\n    dusk: morning + evening,\n    gray: white + black,\n    orange: harvest + color,\n    afternoon: deep + noon,\n    midnight: deep + evening,\n    lily: star + flower,\n    rose: red + flower,\n    divine: great + king,\n    princess: king + daughter,\n    prince: king + son,\n    kingdom: king + place,\n    fortress: king + safe, \n    citadel: many + people,\n    stronghold: safe + people + deep,\n    tower: tall + over,\n    'mountain-chain': many + mountain,\n    friend: sweet + person,\n    foe: bitter + person,\n    lord: lofty + person,\n    slave: low + person,\n    rain: sky + water,\n    earth: many + land,\n    glen: river + land, // valley,\n    stream: small + river,\n    realm: one + place,\n    region: many + river,\n    peoples: many + people,\n    road: all + person,\n    path: run + way,\n    shade: deep + shadow,\n    sun: sky + light,\n    moon: night + light,\n    autumn: harvest + time,\n    winter: bitter + time,\n    spring: flower + time,\n    summer: heat + time,\n    cloud: sky + water,\n    cloudy: sky + water,\n    'ever-': all + time,\n    '-less': no,\n    'at-': at,\n    stars: many + star,\n    day: light + time,\n    starlight: star + light,\n    spark: strong + fire,\n    snow: sky + cold,\n    mist: soft + sky,\n    firmament: strong + vault,\n    wind: strong + air,\n    rainbow: color + sky,\n    frost: hard + ice,\n    dew: morning + water,\n    dread: fear + king,\n    lonely: one + at + mere,\n    giant: large + man,\n    awe: great + fear,\n    ash: fire + death,\n    steam: fire + water,\n    magma: fire + river,\n\n    dry: heat + thirst,\n    food: eat + harvest,\n    space: great + lofty,\n    dark: deep + shadow,\n    broad: deep,\n    voice: person + music,\n    war: great + battle,\n    laughter: joy + music,\n    // was also thinking\n    // orange: fire + color,\n    // purple: red + blue, ....\n    silence: soft + music,\n  } //= intermediate\n\n  const {\n    dread, ash, rainbow, dry, food, space, dark, broad, orange,\n    divine, voice, iron, spark, silence, //music,\n    // frost, rainbow\n  } = intermediate\n\n  // console.log('assemble!', { roots, basics, intermediate })\n\n  const vocab: Vocabulary = {\n    ...roots,\n    ...basics,\n    ...intermediate,\n    sparkling: many + spark,\n    horror: black + dread,\n    embers: ash,\n    soot: black + ash,\n    radiance: rainbow + color,\n    salt: dry + food,\n    void: no + space,\n    gloom: dark + black,\n    narrow: no + broad, // river + valley + place,\n    wide: broad,\n    sharp: dread + point,\n    pale: soft + white,\n    golden: white + orange + beauty,\n    holy: divine + joy,\n    dusty: dry + soft,\n    fell: cold + fear,\n    secret: dark + silence,\n    bold: strong + voice,\n    splendid: rainbow + light,\n    horns: many + dread + point,\n    claws: bad + point,\n    fangs: dread + teeth,\n    love: heart + person,\n    dream: sleep + music,\n    fate: divine + fire,\n    speech: many + voice,\n    tomorrow: time + time,\n    spirit: light + divine,\n    tyranny: bad + king,\n    magic: divine + spark,\n    thought: light + time,\n    skill: good + person,\n    freedom: strong + people,\n    blood: red + water,\n    tears: sorrow + water,\n    ship: water + wood,\n    journey: place + time,\n    treasure: good + joy,\n    smith: iron + person,\n\n    ...vocabOverrides,\n\n    /**\n     *\n     avalon: magic + island / green + island\n     child: small + person\n     dungeon: dark + stone\n     citadel: castle + high / castle + city\n     fortress: castle + strong\n     throne: high + seat\n\n     aelves: light + people\n     orkh: dark + people\n\n     dwarrow: stone + people\n     men: lake + people\n     heflen: under + hill + people\n     fae: beautiful + people\n\n     gnomes: deep + people\n     colossi: giant + people\n\n     */\n    \n    \n    // grievous: heavy + sorrow\n    // joy: holy + happiness\n    // harsh: bitter + sharp\n    // hollow: soft + place [ i prefer low + place ? ]\n\n  }\n  // console.log(\"FULL VOCAB\", { vocab })\n  return new Dictionary(name, vocab, (input: string) => {\n    Object.keys(replacements).forEach(key => {\n      if (input.includes(key)) {\n        input = input.replaceAll(key, replacements[key])\n      }\n    })\n    return input\n  })\n}\n\n// todo grammatical pipeline\n// radicals -> conjugations -> vocab kernel -> extensions, intermediate aggluts -> final vocab\n\nexport { assembleDictionary }\n","// dwarrow-folk\nimport { assembleDictionary, Dictionary, Roots } from \"../Dictionary\";\nconst khuzdulRoots: Roots = {\n  beauty: 'kib', // 'ea',\n  ore: 'il',\n  water: '-na',\n  way: 'la',\n\n  air: 'aer',\n  all: 'ere',\n  at: 'es-',\n  bad: 'nu',\n  bear: 'gruw',\n  bell: 'bjel',\n  bitter: 'mé',\n  cold: 'í',\n  color: 'o',\n  crown: 'ar',\n  cut: 'kh',\n  daughter: 'al',\n  death: 'lun',\n  deep: 'yse',\n  dog: 'hu',\n  drink: 'ik',\n  eat: 'zu',\n  fear: 'ga',\n  fight: 'kla',\n  flower: 'ela',\n  good: 'lu',\n  great: 'agh',\n  hard: 'ekh',\n  heart: 'eru',\n  heat: '-hrond', //thu',\n  high: 'tl',\n  horse: 'raph',\n  joy: '-hyt',\n  light: 'ia-',\n  man: '-rhd',\n  mantle: '-manté', //brae',\n  many: 'ah',\n  mere: 'sea',\n  mound: 'haeth',\n  no: 'u-',\n  one: 'eru',\n  over: 'ya-',\n  place: 'n-',\n  point: '-zirak',\n  quick: 'ea-',\n  run: 'r',\n  safe: '-cúa',\n  shadow: 'uz',\n  sing: 'ina',\n  sleep: '-dre',\n  small: 'eai',\n  snake: 'lug',\n  soft: 'i',\n  son: 'on',\n  sorrow: 'srg',\n  strong: 'elu',\n  sweet: 'hlor',\n  tall: 'mu-',\n  time: 'an',\n  tooth: 'tur',\n  tree: 'an',\n  wing: 'hla',\n  woman: 'an',\n}\n\nconst khuzdulVocab = {\n  // common: '',\n  // dwarvish: 'khuzdul',\n\n  // jewel: 'silmaril',\n  // // horn: 'horn',\n  // summer: 'samhradh', //sumrum',\n  // prison: 'kharkhor', //carcern', //fengsel',\n  // iron: 'jern',\n  // holly: 'kristtorn',\n  // land: '-lann', // jord',\n  // mountain: 'fell', //'fjell',\n  // 'mountain-chain': 'fellkjede',\n  // peak: 'felltindr',\n  // bay: 'vik-',\n  // stars: '-sterne',\n  // silence: '-stille',\n  // // silver: 'sølv',\n  // river: 'elv',\n  // ice: 'yses', //is',\n  // icy: 'iskald',\n  // fangs: 'hoggtann',\n  // dragons: 'drager',\n  // giant: 'kjempe',\n  // hill: 'høyde',\n  // golden: 'gyllen',\n  // gold: 'gull',\n  // music: 'musikk',\n  // pine: 'furu',\n  // eagles: 'orn-',\n  // gray: 'liath-',\n  // stronghold: 'daingneach', //bfort',\n  // tyranny: 'dyren-', // 'tiren-', //grusomhet',\n  // nightingales: 'nattergal',\n  // vale: 'dal',\n  // valley: 'dalr',\n  // magic: 'seith',\n  // '-woman': '-kona', //víf',\n\n  // haven: '-cúan', //'höfn',\n  // swans: 'eala', // swoon', //'sisne', //'cygnus',\n  // day: 'dagaz', //\n\n  // cherry: 'kerásion',\n  // // mist: 'niwl', // also like (icelandic for fog): fjúka\n\n  // // actual khuzdul vocab!!\n  // laughter: 'gàire',\n  // spring: 'earrach',\n\n  // lonely: 'ensam',\n  // isle: 'ö',\n\n  mist: 'nevel',\n}\n\nconst trueKhudzulVocab = {\n  speech: 'aglâb', //agbla'\n  lord: 'uzbad',\n  path: 'nâla', // river-course\n  river: 'nâla', // river-course\n  water: 'nâla', // river-course\n  black: 'narâg',\n  cloud: 'shathûr',\n  lake: 'zâram',\n  pool: 'zâram',\n  silver: 'kibil-', // 'zigil',\n  stream: 'ûl',\n  // river: 'ûlnâla', // river-course\n  horn: 'inbar',\n  fortress: 'gathol',\n  dark: 'azan',\n  red: 'baraz',\n  valley: 'duban',\n  great: 'gabil',\n\n  delve: 'dûm',\n  // dream: 'draumr',\n  autumn: 'salôn', // lit. \"fall\"\n\n  \n}\n\n// todo add some vocab too? shield -- skjald\n// and override: oak -- eik\nconst khuzdul: Dictionary = assembleDictionary('Khuzdul',\n  khuzdulRoots,\n  {\n    // great: 'gabil',\n    ...khuzdulVocab,\n    ...trueKhudzulVocab\n  },\n  {\n    'kibeah': 'ea',\n    'ia': 'e',\n    'hrond': 'th',\n    'ee': 'i',\n    'ae': 'e',\n    'elu': 'lu',\n    'esa': 'as',\n    'gh': 'g',\n    'hd': 'd',\n    'ag': 's',\n    'anan': 'a',\n    'he': 'e',\n    'rdn': 't',\n    'ly': 'i',\n    'ah': 'r',\n    'tl': 'r',\n    'yse': 'is',\n    'ss': 'z',\n    'srg': 'zh',\n    'sre': 'se',\n    'a r': 'ah',\n    'l m': 'n',\n    'g m': 'k',\n    'aa': 'u',\n    'thn': 't',\n    'eo': 'u',\n    'rdr': 'l',\n    'sna': 'se',\n    'a s': 'sh',\n    'th s': 'st',\n    'th u': 'w',\n    'eai': 'a',\n    'kho': 'cu',\n    'sr': 'sur',\n    'iti': 'ut',\n    'rg': 'u',\n    'thz': 'thus',\n    'ise': 'se',\n    'dre': 'li',\n    'rdi': 'no',\n    'na': 'r',\n\n    'rr': 'r',\n    'tth': 'shi',\n    // 'yrso': 'ara',\n    // 'bre': 'gorn',\n    'serl': 'ar',\n    'ahie': 'agorn',\n    \n    'uu': 'w',\n    'wz': 'yrs',\n    'st': 'm',\n    'cuk': 'kh',\n    'rdz': 'ts',\n    'rl': 'l',\n    'wts': 'uz',\n    'tiu': 'reg',\n    'lt': 'nd',\n    \n    \n    // 'bre': 'vr',\n    // 'wz': 's',\n    // 'sre': 'st',\n    // 'esa': 'as',\n    // // 'nhd': 'rd',\n    // // 'hh': 'g',\n    // // 'ii': 'y',\n    // 'rr': 'r',\n    // 'rh': 'r',\n    // 'ysen': 'iso',\n    // 'eai': 'o',\n    // 'ao': 'e',\n    // 'ui': 'o',\n    // 'oe': 'u',\n    // 'ua': 'ie',\n    // // 'oa': 'e',\n    // 'mrd': 'v',\n    // 'gh': 'g',\n    // 'aa': 'a',\n    // 'ndi': 't',\n    \n    \n    // 'dard': 'drem',\n    // 'adard': 'e',\n\n    // 'eru': 'ui'\n  //   // 'eth': 'sh',\n  //   // 'erue': 'er',\n  //   'esa': 'as',\n  //   'yseold': 'iso',\n  //   'oa': 'o',\n  //   // 'ae': 'y',\n  //   'ea': 'y',\n  //   'yy': 'ea',\n  //   // 'hl': 'l',\n  //   // 'agh': 'g',\n  //   'uia': 'a',\n  //   'aya': 'ie',\n  //   // 'eya': 'ea',\n\n\n  //   // 'rrh': 'r',\n  //   'ao': 'u',\n  //   // 'uu': 'w',\n  //   // 'gtl': 'l',\n  //   // 'nn': 'm',\n  //   // 'ui': 'i',\n  //   'rhd': 'd',\n  //   'nina': 'nia',\n  //   'ghart': 'gard',\n  //   'rdt': 'dh',\n  //   'asgh': 'asg',\n  //   'elut': 'lût',\n  //   'úun': 'úan',\n  //   'ahla': 'ala',\n  //   'aght': 'og',\n  //   'yhl': 'il',\n  //   'ogl': 'gel',\n  //   'thanth': 'tan',\n  //   'ila': 'ye',\n  //   'ss': 'th',\n  //   'tly': 'y',\n  //   'dan': 'del',\n  //   'ht': 'd',\n  //   'dad': 'ed',\n  //   'aeta': 'eth',\n  //   'agh': 'zh',\n  //   'thun': 'tr',\n  //   'yseo': 'iso',\n  //   'ved': 'th',\n  //   'ndn': 'nyn',\n\n})\n\nexport default khuzdul;\n","import { Dictionary, Vocabulary } from \"../Dictionary\";\n\n// see https://eldamo.org/content/vocabulary-indexes/vocabulary-words-ns.html\nexport const sindarinVocabulary: Vocabulary = {\n  'heat': 'ast',\n  'cold': 'ring',\n  // was confusing to try to do this one b/c of the order!\n  '-less': 'uv-',\n\n  'ever-': 'oio-', // 'ever-dusk' --> evendim\n  'at-': 'ad-',\n\n  // fem/masculine suffices\n  '-person': '-we',\n  '-man': '-on',\n  '-son': '-ion',\n\n  '-woman': '-ien',\n  '-maid': '-wen',\n  '-daughter': '-iell',\n\n  'mountain-chain': '-orodrim',\n\n  abundant: 'ovor',\n  afternoon: 'avnedhor',\n  apple: 'orf',\n  autumn: 'iarvas-', \n  awe: 'anwar',\n  battle: 'dagor',\n  bay: 'côf', //'-iâ',\n  bears: 'graw',\n  beautiful: 'bain',\n  bell: 'nell',\n  bitter: 'saer',\n  birch: 'hwinn*',\n  birds: 'aewen',\n  black: 'morn', \n  blood: 'sereg',\n  blue: 'luin-',\n  bold: 'beren',\n  bread: '-bas',\n  candle: 'lígu',\n  cherry: 'aebin*',\n  citadel: 'ost-',\n  claws: 'gamp-',\n  cloudy: 'fanui',\n  daisy: 'eirien',\n  dandelion: 'orchen',\n  day: 'or-',\n  deep: 'nûr-',\n  dew: 'mîdh-',\n  divine: 'ballónë', //lean',\n  dragons: 'amlug',\n  dread: 'gost',\n  dream: 'ôl-',\n  dusk: 'moth-',\n  dusty: 'astren*',\n  eagles: 'thoron',\n  earth: 'amar',\n  elderberry: 'gwennod',\n  elephants: 'annabon',\n  elm: 'alaf',\n  evening: 'aduial',\n  fangs: 'caraxë',\n  fate: 'amarth',\n  fell: 'delu', // deadly\n  fire: 'nor-', //'naur-',\n  firmament: 'menel*',\n  fish: 'lhim',\n  foe: '-coth',\n  forest: 'taur*',\n  fortress: 'garth-',\n  fortunate: 'alwed',\n  freedom: 'leinas',\n  friend: '-mellon',\n  frost: 'nais',\n  giant: 'noroth',\n  glen: 'imlad', // dell\n  gloom: 'dim-',\n  gold: 'malt-',\n  golden: 'glóriel',\n  gray: 'thind-',\n  great: 'beleg-',\n  green: 'calen-',\n  harbor: 'hûb',\n  haven: '-lond*', // cúan\n  hill: 'amon', // tun\n  holy: 'aer',\n  honey: 'glî',\n  horns: 'rais',\n  horror: 'angoss-',\n  horses: 'roch',\n  ice: 'hel-',\n  iron: 'ang-',\n  isle: 'tol',\n  jewel: 'mîr',\n  journey: 'ledh-',\n  joy: 'glass-',\n  king: 'aran',\n  kingdom: 'arnad',\n  laughter: 'lalaith',\n  lake: 'ael',\n  land: 'dor-',\n  large: 'daer',\n\n  light: 'ea',\n  dark: 'dûr',\n\n  lily: 'loth-',\n  lofty: 'raud',\n  lonely: 'er*', //air*',\n  lord: '-gon',\n  love: 'mîl',\n  magic: 'lûth',\n  mantle: 'col-',\n  midnight: 'fuin',\n  mist: 'hith-',\n  moon: 'ithil',\n  morning: '-aur',\n  mound: 'coro-',\n  mountain: 'ered',\n  music: '-linnas',\n  narrow: 'agor-',\n  needle: 'aeglin',\n  night: 'dû',\n  nightingales: 'dúlin*',\n  noon: 'nedhor',\n  oak: 'doron*',\n  orange: 'culuin',\n  pale: 'nim-',\n  path: 'lant',\n  peak: 'aegnas', // see point, needle\n  peoples: 'li-',\n  pine: 'thon*',\n  place: 'sa-',\n  point: 'til',\n  pool: 'lîn',\n  poppy: 'lurloss-',\n  prison: '-band',\n  quick: 'lim',\n  rain: 'ross-',\n  rainbow: 'ninniach',\n  realm: '-arthor',\n  red: 'caran-',\n  region: 'gardh',\n  river: '-rant',\n  road: 'men',\n  rose: 'merin*',\n  sea: '-geaer', //'mer',\n  secret: 'dolen*',\n  shade: 'gwath',\n  // irish is scáth \n  shadow: '-lum', // 'gwath', //dûl',\n\n  sharp: 'crisg-',\n  ship: 'cair*',\n  silence: 'dhín-',\n  silver: 'celeb-',\n  skill: 'curu-',\n  sky: '-ell',\n  slave: 'mûl',\n  small: 'cidinn*',\n  smith: '-tan',\n  snakes: 'lŷg',\n  snow: 'loss-',\n  sorrow: 'nîr',\n  spark: 'tinu-',\n  sparkling: 'míriel',\n  speech: 'paeth*',\n  spirit: 'fëa-',\n  splendid: 'claur-',\n  spring: 'ethuil',\n  spruce: 'ecthelorn*',\n  starlight: 'gilith',\n  stars: '-ngil',\n  stream: 'sîr',\n  stronghold: '-gothrond',\n  summer: 'llairë', //aer',\n  sun: 'anor',\n  swans: 'alqua',\n  sweet: 'laich',\n  tall: \"ta-\", //nd-\",\n  tears: 'nirnaeth',\n  thought: 'nauth*',\n  tin: '-ladog',\n  tiny: 'tithen*',\n  tomorrow: 'abor',\n  tower: 'barad-',\n  treasure: 'maen*',\n  tyranny: 'thang',\n  valley: 'nan', // vale; see glen(-imlad)\n  veil: 'fân',\n  water: 'nin',\n  wax: 'lîg',\n  white: 'nique-',\n  wide: '-land',\n  willow: 'tathar*',\n  wind: 'gwae',\n  wine: 'miru',\n  winter: 'rhîw',\n  holly: 'ereg*',\n  garden: 'sant',\n  queen: 'bereth',\n  prince: 'ernil',\n  princess: 'brethil',\n  cloud: 'fan',\n  hounds: 'hû',\n  wolves: 'draug',\n  embers: 'iûl',\n  soot: 'ast',\n  ash: 'lith',\n  salt: 'sing',\n  void: 'gaw',\n  steam: 'tuim',\n  magma: 'orodu',\n  radiance: 'aglar',\n\n  island: 'mineth', //minath',\n  // hail: 'ai',\n}\n\nconst replacements = {\n  'iandë': 'essëa',\n  // 'airia': 'ere',\n  // 'endë': 'essëa', //ssea',\n  'dc': 'g',\n  'nc': 'g',\n  'db': 'v',\n  'uwen': 'uviel',\n  'ean': 'ónë',\n  'nng': 'ng',\n  'airt': 'írd',\n  'gdor': 'gion',\n  'ôlm': 'lór',\n  'rineth': 'rien',\n  // 'egdor': 'egion',\n\n  // 'uie': 'uvie',\n  // 'ir': 'er',\n  // 'ln': 'len',\n  // 'fn': 'van',\n  // 'rngil': 'rgil*',\n  // 'nn': 'n',\n  // 'ororo': 'oro',\n\n  // 'oss': 'ossë',\n\n}\n// const dashBeginnings: { [begin: string]: string } = { 'ng': 'a' }\n\nconst generalEndings: { [end: string]: string } = {\n  'ss': 'ë',\n  // 'dor': 'ion',\n  // 'n': 'iath',\n  // 'lt': 'hen',\n  // 'll': 'l',\n  // 'oss': ''\n}\n\nconst starEndings: { [end: string]: string } = {\n  // 'er': 'essëa',\n  // 'er': 'essëa',\n  'r': 'iand',\n  'on': 'ion',\n  'il': 'ion',\n  // 'eg': 'ion',\n  'nd': 'ë',\n}\n\nconst simpleEnhance = (tx: string) => {\n  tx = tx.split(' ').map(word => {\n    // if (word.startsWith('-')) {\n    //   word = word.substring(1, word.length)\n    //   Object.keys(dashBeginnings).forEach(beginning => {\n    //     if (word.startsWith(beginning)) {\n    //       word = dashBeginnings[beginning] + word\n    //     }\n    //   })\n    // }\n    // if (word.endsWith('-')) {\n      // word = word.substring(0, word.length - 1)\n\n      Object.keys(generalEndings).forEach(ending => {\n        if (word.endsWith(ending)) {\n          word += generalEndings[ending]\n        }\n      })\n    // }\n\n\n    if (word.endsWith('*')) {\n      word = word.replaceAll('*', '')\n      Object.keys(starEndings).forEach(ending => {\n        if (word.endsWith(ending)) {\n          word += starEndings[ending]\n        }\n      })\n    }\n\n    Object.entries(replacements).forEach(([search, replace]) => {\n      word = word.replaceAll(search, replace)\n    })\n\n    // hmmm\n    // word.replaceAll('*', '')\n    return word\n  }).join(' ')\n  return tx\n}\n\nconst sindarinDictionary = new Dictionary(\"Sindarin\",  sindarinVocabulary,\n  (tx) => simpleEnhance(tx))\n  // (tx) => tx)\n  //enhance(tx))\nexport { sindarinDictionary as Sindarin }\n","// todo thinking Common could be interesting\n// idea is to fill in the dictionary but choose \n// poetic wording where possible\n// (quality here depends on better solutions\n// for syntax / ordering / particles / etc too)\n\n// actually just doing old english now but it's still metal\n\nimport { Dictionary, Vocabulary } from \"../Dictionary\"\n\n\nconst westronVocab: Vocabulary = {\n  heat: 'hǣte',\n  cold: 'cheald',\n  abundant: 'ofer',\n  afternoon: 'ofernón',//afternoon',\n  apple: 'æppel', // apple',\n  autumn: 'hærfest', \n  awe: 'ondrysnu', //awe',\n  battle: 'gefeoht', //'feoht',\n  bay: 'berie', //'-iâ',\n  bears: 'bruin', // 'bera',\n  beautiful: 'cyrten',\n  bell: 'cnyll', //bell',\n  birch: 'beorc',\n  bitter: 'āfor',\n  birds: 'bord',\n  black: 'murk', //'blæc', //black',\n  blood: 'blod',\n  blue: 'blár', // 'bleó', //blaw',\n  bold: 'baldor',\n  bread: 'hláf', //bread',\n  candle: 'condell',\n  cherry: 'cirse', // cherry',\n  citadel: 'burhfæsten', //city',\n  claws: 'clif',\n  cloudy: 'genipfull', //clouded',\n  daisy: 'dæges', // woundwort',\n  dandelion: 'æg-wyrt', // puffball',\n  day: 'dæg', //day',\n  dark: 'dearc',\n  deep: 'deop', //deopnes',\n  dew: 'deaw',\n  divine: 'týr', //sublim', //godcund', //godbearn',\n  dragons: 'fýrdraca', //wyrm //sky-serpent',\n  dread: 'bróga', //ghastly',\n  dream: 'drēam', // dréam',\n  dusk: 'dosk', //eventide',\n  dusty: 'dystig',\n\n  eagles: 'earn',\n  earth: 'aarde',\n  elderberry: 'elder',\n  elephants: 'elpend', //oliphaunt',\n  elm: 'wych', //wahu',\n\n  evening: 'ǣfnung', //evendim',\n  fangs: '-fon',\n  fate: 'déaþwyrd', //fate',\n  fell: 'fiellan', // deadly\n  fire: 'fýr', //furen', //'fier', //bæl', //fire', //'naur-',\n  firmament: 'heofon', //heavens',\n  fish: 'fisc',\n  foe: '-ġefāh', //fāhman', //'-feond', //enemy',\n  forest: 'forwest',\n  fortress: 'healden',\n  fortunate: 'eádeg', //lucky',\n  freedom: 'freodom',\n  friend: 'frēond', //friend',\n  frost: 'hrīm', //rime',\n  giant: 'ēoten', // colossus',\n  glen: 'glyn', // dell\n  gloom: 'glōm', //murk',\n  gold: 'guld',\n  golden: 'gylden',\n  gray: 'græg-', //grár', //græ',\n  great: 'ærgod', // great',\n  green: 'grene',\n\n  harbor: 'hyth',\n  haven: '-haff', //hæfen', //port',\n  hill: '-holm', // 'hyll', // tun\n  holy: 'hāliġ',\n  honey: 'huniġ',\n  horns: 'kern',\n  horror: 'fyrhtu',\n  horses: 'eoh',\n\n  ice: 'īs',\n  iron: 'ísen',\n  isle: 'yle',\n  island: 'īegland', //island',\n\n  jewel: 'siġel',\n  journey: 'faru',\n  joy: 'wynn', //'hiht', // 'drēam', // 'ġefēa', //joy',\n  king: 'kenning',\n  kingdom: 'kenningdom',\n  laughter: 'hleahtor',\n  lake: 'lac',\n  land: 'lond', //eäth',\n  large: 'rum',\n  light: 'leoht',\n  lily: 'lilie',\n  lofty: 'hoch',\n  lonely: '-syndrig',\n\n  lord: 'frēa', //-lord',\n\n  love: 'leof',\n  magic: 'rún', //charm',\n  mantle: 'mantel', //hacele',\n  midnight: 'midnyght',\n  mist: '-hase', //'mistur',\n  moon: 'mēnô', //mone', // 'mōna',\n  morning: '-morn',\n  mound: 'tel-',\n  mountain: 'munt-',\n  music: 'dréam', //cræft', //-song',\n\n  narrow: 'nearunes',//narrow-',\n  needle: 'nædl', //needle',\n  night: 'nyght',\n  nightingales: 'stærlinc', //thrush',\n  noon: 'noon',\n\n  oak: 'eik',\n  orange: 'orenge',\n\n  pale: 'wann-',\n  path: 'pade-', //brimlad',\n  peak: 'piic', //pinca', // see point, needle\n  peoples: '-folk',\n  pine: 'pintreow',\n  place: '-stead',//bídung', //place',\n  point: '-gad',\n  pool: '-clæne', //mere',\n  poppy: 'popiġ', //celandine',\n  prison: '-cweartern', //gaol', // 'carcern'\n\n  quick: 'cwic', //fast',\n  rain: 'reġn', // regn',\n  rainbow: 'reġnboga', //rainbow',\n\n  realm: '-ríce', //ward',\n  red: 'reod-',\n  region: '-guard',\n  river: '-ex',\n  road: 'rād', //road',\n  rose: 'ros',\n\n  sea: 'sǣ', // 'estmere', //'mer',\n  secret: 'dēagol', //hord', //secret',\n  shade: 'sceadu',\n  shadow: 'sceaduwe', //shadow', // 'gwath', //dûl',\n  sharp: 'sharp',\n  ship: 'scip',\n  silence: 'swīġe', //stilnes', //stige',\n  silver: 'seolfor',\n  skill: 'cræft', //searu',\n  sky: 'heofon', //sky',\n  slave: 'träl', //thrall',\n  small: 'smæl',\n  smith: '-wyrhta',\n  snakes: 'natra',\n  snow: 'snáw', //snow-',\n  sorrow: 'sorh',\n  spark: 'ysl', //spark-',\n  sparkling: 'bladesung',\n  speech: 'sprǽc', //speech*',\n  spirit: 'arodnes-',\n  splendid: 'from', //splendid-',\n  spring: 'lencten',\n  spruce: 'sæppe',\n  starlight: 'tunglenleoht', //light',\n  stars: '-tunglen', // tungol // steorra', //star',\n  // astronomy: 'tungolcræft',\n  stream: 'strēam', //river',\n  stronghold: '-fæsten',\n  summer: 'haf', //sumor', //aer',\n  sun: 'sunu',\n  swans: 'ilfetu', //swan',\n  sweet: 'swéte', //sweet',\n\n  tall: \"brant-\", //nd-\",\n  tears: 'hróp', //tears',\n  thought: 'thóht', //thought*',\n  tin: '-zin',\n  tiny: 'tyne*',\n  tomorrow: 'tōmorgen', //morrow',\n  tower: 'stipel-',\n  treasure: 'sinc',\n  tyranny: 'mánbealu',\n\n  valley: 'dæl', //vale',\n  veil: 'oferbræ', //veil',\n  water: 'wæter', //water',\n  wax: 'weax',\n  white: 'albe', // hwit\n  wide: 'wīd', //wijd',\n  willow: 'welig',\n  wind: 'gwynt',\n  wine: '-win',\n  winter: 'yver', //'winter',\n  holly: 'holen-',\n  garden: 'gewyrtún', //garden',\n  queen: 'cwæn', //cwen', //queen',\n  prince: 'fyrste', //prince',\n  princess: 'iníon', //princess',\n  cloud: 'genip', //cloud',\n  hounds: 'hund',\n  wolves: 'wulf',\n  embers: 'ǣmyrġe', // 'ysl', //embers',\n  soot: 'hrum', //soot',\n  ash: 'asce',\n  salt: 'sealt',\n  void: 'rūm', //space',\n  steam: 'stôm',\n  // 'stēam',\n  magma: 'hraun', //lava',\n  radiance: 'glæm', //brilliance',\n\n  '-less': 'no-',\n  'ever-': 'ǣfre-', //even-', // 'ever-dusk' --> evendim\n  'at-': 'æt-', //upon-',\n\n  // fem/masculine suffices\n  '-person': '-wight',\n  '-man': '-man',\n  '-son': '-ing',\n\n  '-woman': '-fro',\n  '-maid': '-magað', //'-mæden', //maid',\n  '-daughter': '-dohtor',\n  \n  'mountain-chain': 'beorgstede',\n}\n\nconst replacements: { [key: string]: string } = {\n  'lenlond': 'llin',\n}\n\nconst Westron = new Dictionary('Westron', westronVocab, (input: string) => {\n  Object.keys(replacements).forEach(key => {\n    if (input.includes(key)) {\n      input = input.replaceAll(key, replacements[key])\n    }\n  })\n  return input\n})\n\nexport default Westron\n","import { Dictionary, Vocabulary } from \"../Dictionary\"\n\n// want a truly 'common' or plain language...\n// much closer to middle (or even contemporary)\n// . still poetic/whimsical/dramatic/etc)\nconst commonVocabulary: Vocabulary = {\n  heat: 'hete',\n  cold: 'cold',\n  cloud: 'cloud', //'pall',\n  cloudy: 'cloudy', //'pallid', //clouded',\n  daisy: 'woundwort',\n  dandelion: 'puffball',\n  dragons: 'drake',\n  dark: 'derk',\n  island: 'ylond',\n  abundant: 'abounding',\n  afternoon: 'overnoon',\n  apple: 'pome',\n  autumn: 'fall', \n\n  awe: 'wonder', //awe',\n  battle: 'batell',\n  bay: 'bay', //'-iâ',\n  bears: 'bera', //bruin',\n  beautiful: 'lovesome',\n  bell: 'belle', //bell',\n  birch: 'birce',\n  birds: 'bord',\n\n  bitter: 'bittre',\n  // 'murk' in the sense of absorbing all light\n  black: 'merk-', //'blake-', //black',\n  blood: 'blood',\n  blue: 'blew', //blaw',\n  bold: 'bolt',\n  bread: 'bred', //bread',\n  candle: 'candel',\n  cherry: 'cherie', // cherry',\n  citadel: 'city-hold', // burhfæsten', //city',\n  claws: 'clawe',\n  day: 'daye', //day',\n  deep: 'deepe', //deopnes',\n  dew: 'deaw',\n  divine: 'gode', //divin',\n  // dragons: 'fýrdraca', //wyrm //sky-serpent',\n  dread: 'drede', //ghastly',\n  dream: 'dreame',\n  dusk: 'eventide',\n  dusty: 'dusti',\n\n  eagles: 'egle',\n  earth: 'erthe',\n  elderberry: 'elder',\n  elephants: 'olifant',\n  elm: 'elme', //wahu',\n\n  evening: 'evenyng', //dim',\n  fangs: 'fangtooth',\n  fate: 'doom', //fate',\n  fell: 'fellen', // deadly\n  fire: 'fier', //'fȳr', //fier', //bæl', //fire', //'naur-',\n  firmament: 'heven', //heavens',\n  fish: 'fisch',\n  foe: 'faman', //enemy',\n  forest: 'foreste',\n  fortress: 'holden',\n  fortunate: 'lukky', //lucky',\n  freedom: 'freodom',\n  friend: 'frēond', //friend',\n  frost: 'ryme',//forst',\n  giant: 'giaunt', // colossus',\n  glen: 'gleann', // dell\n  gloom: 'gloam',\n  gold: 'gold',\n  golden: 'gulden',\n  gray: 'grey',\n  great: 'great',\n  green: 'gre',\n\n  harbor: 'hyth',\n  haven: '-havene', //port',\n  hill: '-hyll', // tun\n  holy: 'hāliġ',\n  honey: 'huniġ',\n  horns: 'horne',\n  horror: 'fyrhtu',\n  horses: 'eoh',\n\n  ice: 'is-',\n  iron: 'iren-',\n  isle: 'yl-', //'īegland', //island',\n\n  jewel: 'jeuel',\n  journey: 'journe',\n  joy: 'joye', //ġefēa', //joy',\n  king: 'kenning',\n  kingdom: 'kenningdom',\n  laughter: 'laughtre',\n  lake: 'lac',\n  land: '-land', //eäth',\n  large: 'larc', //grand',\n  light: 'lighte',\n  lily: 'lilly',\n  lofty: 'lofte',\n  lonely: 'lone',\n\n  lord: 'lord', //-lord',\n\n  love: 'love',\n  magic: 'magyk', //charm',\n  mantle: '-cloke', //mantel',\n  midnight: 'midnyght',\n  mist: '-fog',\n  moon: 'mone', // 'mōna',\n  morning: '-morn',\n  mound: '-hyll',\n  mountain: 'mount',\n  music: 'musika', //dréamcræft', //-song',\n\n  narrow: 'narrowe',//narrow-',\n  needle: 'nedle', //needle',\n  night: 'nyght',\n  nightingales: 'thrust', //stærlinc', //thrush',\n  noon: 'noon',\n\n  oak: 'oak',\n  orange: 'orenge',\n\n  pale: 'bleek-',\n  path: 'peth', //brimlad',\n  peak: 'peek', // see point, needle\n  peoples: '-folk',\n  pine: 'pyne',\n  place: '-stead',//bídung', //place',\n  point: '-point',\n  pool: '-pole', //mere',\n  poppy: 'celandine',\n  prison: 'gaole', //'prisoun', // gaol', // 'carcern'\n\n  quick: 'quic',\n  rain: 'rain',\n  rainbow: 'rainbow',\n\n  realm: 'ward', // -ríce', //ward',\n  red: 'reod-',\n  region: '-regioun', //guard',\n  river: 'ryver',\n  road: 'rode',\n  rose: 'rose',\n\n  sea: 'see', //estmere', //'mer',\n  secret: 'secrette', //secret', //secret',\n  shade: 'shade',\n  shadow: 'schadowe', //shadow', //sceaduwe', //shadow', // 'gwath', //dûl',\n  sharp: 'sharp',\n  ship: 'shippe',\n  silence: 'stilnes', //silence',\n  silver: 'argent', // 'sulver',\n  skill: 'skille', //searu',\n  sky: 'skie', //'heaven', //sky',\n  slave: 'thralle',\n  small: 'smal',\n  smith: '-wright',\n  snakes: 'addere', //serpent',\n  snow: 'snow', //snow-',\n  sorrow: 'sorwe',\n  spark: 'sparke', //ysl', //spark-',\n  sparkling: 'glitre',\n  speech: 'speche', //speech*',\n  spirit: 'gāst-',\n  splendid: 'splendur', //from', //splendid-',\n  spring: 'springen',\n  spruce: 'spruse',\n  starlight: 'sterrelighte',\n  stars: '-sterre', //star',\n  stream: 'strēam', //river',\n  stronghold: '-stranghalde',\n  summer: '-sumer', //aer',\n  sun: 'sun',\n  swans: 'swan', //swane',\n  sweet: 'sweete', //sweet',\n\n  tall: \"-talle\", // brant-\", //nd-\",\n  tears: 'cryinge', //tears',\n  thought: 'thoughte', //thought*',\n  tin: 'tin',\n  tiny: 'tyny',\n  tomorrow: 'tomorwe',\n  tower: 'torr-',\n  treasure: 'tresour',\n  tyranny: 'tirranye', //mánbealu',\n\n  valley: 'valeye', //'dæl', //vale',\n  veil: 'veyl', //veil',\n  water: 'watir',\n  wax: 'waxe',\n  white: 'hwit', // hwit\n  wide: 'wyd',\n  willow: 'willow',\n  wind: 'wynd-',\n  wine: '-wyn',\n  winter: 'wintre',\n  holly: 'holi-',\n  garden: 'gardyn', //garden',\n  queen: 'cwen', //queen',\n  prince: 'prince',\n  princess: 'princess',\n  hounds: 'hound',\n  wolves: 'wolf',\n  embers: 'embre', //embers',\n  soot: 'soote', //soot',\n  ash: 'ash',\n  salt: 'salt',\n  void: 'voide', //space',\n  steam: 'steem',\n  magma: 'lava',\n  radiance: 'gleam', //brilliance',\n\n  '-less': 'no-',\n  'ever-': 'even-', // 'ever-dusk' --> evendim\n  'at-': 'by--',\n\n  // fem/masculine suffices\n  '-person': '-persoun',\n  '-man': '-man',\n  '-son': '-sonn',\n\n  '-woman': '-weoman',\n  '-maid': '-mayden', //maid',\n  '-daughter': '-doughter',\n  \n  'mountain-chain': ' mountayne', //mountains',\n}\n\nconst Common = new Dictionary(\"Common\", commonVocabulary)\nexport default Common\n","import { boundMethod } from \"autobind-decorator\";\nimport { Concept, theConcepts } from \"../ecosphere/Dictionary\";\nimport Model from \"../ecosphere/Model\";\nimport { attributes, createMoiety, createPerson, judge, Memory, MentalAttribute, Person, PhysicalAttribute, SocialAttribute, SpiritualAttribute } from \"../ecosphere/types\";\nimport { capitalize } from \"../ecosphere/utils/capitalize\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { choose, sample } from \"../ecosphere/utils/sample\";\nimport Khuzdul from \"../ecosphere/Languages/Khuzdul\";\nimport { Sindarin } from \"../ecosphere/Languages/Sindarin\";\nimport Westron from \"../ecosphere/Languages/Westron\";\nimport Common from \"../ecosphere/Languages/Common\";\n\nconst generatePerson = () => {\n  const moiety = createMoiety('A Social Group')\n  const gender = sample(['male', 'female'])\n  let suffices: Concept[] = gender === 'male'\n    ? ['-person', '-man', '-son']\n    : ['-woman', '-maid', '-daughter']\n  let concepts: Concept[] = choose(randomInteger(1,2), theConcepts)\n  let nameElements: Concept[] = [\n    ...concepts,\n    ...(randomInteger(0, 12) > 9 ? [sample(suffices)] : []),\n  ]\n  \n  let dicts = [ Sindarin, Khuzdul, Westron, Common ]\n  let name = sample(dicts).translate(...nameElements).trim()\n  // const firstName = sample(gender === 'male' ? [ 'Sam', 'Eric', 'Ted', 'Jones' ] : ['Sarah', 'Edna', 'Terri', 'Rosa'])\n  // const lastName = sample(['Smith', 'Lever', 'Token', 'Switch', 'Agent', 'Op'])\n  const significance = (concepts.map(n => capitalize(n)).reverse().join('-')).trim(); //.replaceAll('-', ''));\n\n  const person = createPerson(\n    (name === significance\n      ? name\n      : name + ' (' +  significance + ')'),\n    moiety\n    )\n  return { person, nameMeaning: significance }\n}\nclass Citizen extends Model {\n  subject: Person\n  nameMeaning: string\n\n  constructor() {\n    super('Citizen');\n\n    const { person, nameMeaning } = generatePerson() \n    this.subject = person\n    this.nameMeaning = nameMeaning\n\n    // this.people.create('Friends')\n    // this.people.create('Rivals')\n    // this.people.create('Peers')\n    // this.people.create('Family')\n\n    // this.resources.create('Happiness')\n    // this.resources.create('Money')\n    // this.resources.create('Money')\n\n    this.actions.create({ name: 'New', act: () => {\n      const { person, nameMeaning } = generatePerson() \n      this.subject = person //generatePerson() \n      this.nameMeaning = nameMeaning\n    }})\n\n    this.evolve(this.evolution)\n  }\n\n  @boundMethod\n  evolution() {\n    // this.subject.body\n    \n  }\n\n  displayAttribute = (value: string): string => {\n    const val = capitalize(value)\n    // let value = this.subject\n    // && this.subject.soul[attr as unknown as SpiritualAttribute]\n    if (judge(value as any) === 'excellent') return `*${val}`\n    if (judge(value as any) === 'adequate') return `~${val}`\n    if (judge(value as any) === 'terrible') return `%${val}`\n    return val\n  }\n\n  get attributeNames() {\n    const { spiritual, social, physical, mental } = attributes\n    return [\n      // attributes.spiritual\n      spiritual, social, physical, mental\n    ].map(Object.keys)\n  }\n\n  // metrics = { age: () => this.subject.age, }\n  notes = {\n    // 'current date': () => this.date.description,\n    '*name': () => this.subject.name,\n    'role': () => capitalize(this.subject.role),\n    // ...\n\n    // ...\n    ...Object.fromEntries(\n      Object.keys(attributes.spiritual).sort().map((attr: string) => {\n        return [ attr, () => { \n          let value = this.subject\n                 && this.subject.soul[attr as unknown as SpiritualAttribute]\n          return this.displayAttribute(value)\n        }]\n      })\n    ),\n\n    ...Object.fromEntries(\n      Object.keys(attributes.social).sort().map((attr: string) => {\n        return [ attr, () => { \n          let value = this.subject\n                 && this.subject.kind[attr as unknown as SocialAttribute]\n          return this.displayAttribute(value)\n        }]\n      })\n    ),\n    ...Object.fromEntries(\n      Object.keys(attributes.mental).sort().map((attr: string) => {\n        return [ attr, () => { \n          let value = this.subject\n                 && this.subject.mind[attr as unknown as MentalAttribute]\n          return this.displayAttribute(value); //[ value, value && judge(value) ].join(' - ')\n        }]\n      })\n    ),\n    ...Object.fromEntries(\n      Object.keys(attributes.physical).map((attr: string) => {\n        return [ attr, () => { \n          let value = this.subject\n                 && this.subject.body[attr as unknown as PhysicalAttribute]\n          return this.displayAttribute(value)\n        }]\n      })\n    ),\n    // [this.subject.name]: () => this.nameMeaning,\n    // 'agility': () => this.subject.body.agility,\n    // 'beauty': () => this.subject.soul.beauty,\n    // 'charm': () => this.subject.soul.charm,\n    // 'cunning': () => this.subject.body.cunning,\n    // 'depth': () => this.subject.mind.depth,\n    // 'education': () => this.subject.mind.education,\n    // 'empathy': () => this.subject.soul.empathy,\n    // 'guile': () => this.subject.body.guile,\n    // 'insight': () => this.subject.mind.insight,\n    // 'integrity': () => this.subject.soul.integrity,\n    // 'knowledge': () => this.subject.kind.knowledge,\n    // 'power': () => this.subject.kind.power,\n    // 'personality': () => this.subject.mind.personality,\n    // 'resolve': () => this.subject.soul.resolve,\n    // 'sophistication': () => this.subject.kind.sophistication,\n    // 'spirit': () => this.subject.body.spirit,\n    // 'strength': () => this.subject.body.strength,\n    // // 'tech': () => this.subject.kind.tech,\n    // 'valor': () => this.subject.mind.valor,\n    // 'wealth': () => this.subject.kind.wealth,\n    // 'wit': () => this.subject.soul.wit,\n    // 'bio': () => this.subject.memory.list().map(this.describeMemory).join('... '),\n  }\n\n  describeMemory(memory: Memory) {\n    return `I remember ${memory.description}`\n  }\n\n  // @boundMethod\n  get date() {\n    let time = this.ticks || 0\n    let secondInterval = 0.1;\n    let seconds = Math.floor(time / secondInterval);\n\n    let second = seconds%60\n    let minute = Math.floor(seconds/60)%60\n    let hour = Math.floor(seconds/(60*60))%24\n    let day = Math.floor(seconds / (60 * 60 * 24));\n    // let week = Math.floor(seconds / (60 * 60 * 24 * 7));\n    // let month = Math.floor(seconds / (60 * 60 * 24 * 7 * 4));\n    // let year = Math.floor(seconds / (60 * 60 * 24 * 365));\n\n    let dayOfWeek = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'][day % 7];\n\n    return {\n      dayOfWeek,\n      description: `${dayOfWeek} ${String(hour).padStart(2,'0')}:${String(minute).padStart(2,'0')}:${String(second).padStart(2,'0')}`\n    }\n  }\n}\n\nexport default new Citizen();\n","export type Tiles = string[][]\n\nconst first = <T>(arr: T[], pred: (x: T) => boolean): T => {\n  return arr.filter(pred)[0]\n}\n\nexport class Board {\n  private tiles: Tiles = []\n\n  view({ overlays }: { overlays: Board[] } = { overlays: []}): Tiles {\n    let viewTiles: Tiles = []\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        viewTiles[y] = viewTiles[y] || []\n        let overlay = overlays.length > 0 && first(overlays, o => {\n          let v = o.at(x,y); return v !== '' && v !== undefined\n          // return o.at(x,y) !== undefined\n        })\n        viewTiles[y][x] = (overlay && overlay.at(x,y))\n                       || this.at(x,y)\n                       || '_'\n      }\n    }\n    return viewTiles;\n  }\n\n  constructor(public width: number, public height: number) {}\n\n  // clear = (x0: string, y0: number, width: number, height: number) => {}\n\n  write = (character: string, x0: number, y0: number) => {\n    let x = x0;\n    let y = y0;\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = character;\n  }\n\n  erase(x: number, y: number) {\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = ''\n    // throw new Error(\"Method not implemented.\")\n  }\n  \n  drawBox = (char: string, x0: number, y0: number, width: number, height: number, filled?: boolean) => {\n    let x1 = x0 + width; let y1 = y0 + height;\n    for (let x = x0; x <= x1; x++) {\n      for (let y = y0; y <= y1; y++) {\n        if (x === x0 || y === y0 || x === x1 || y === y1) {\n          this.write(char, x, y)\n        } else {\n          if (filled) {\n            this.write(char, x, y)\n          }\n        }\n      }\n    }\n  }\n\n  // get width() { return this.tiles && this.tiles[0] && this.tiles[0].length }\n  // get height() { return this.tiles.length }\n\n  at(x: number, y: number) { //}, defaultValue: string = '') {\n    // if (x >= 0 && x <= this.width && y >= 0 && y <= this.height) {\n      const x0 = x % this.width\n      const y0 = y % this.height\n      if (this.tiles[y0]) {\n        return this.tiles[y0][x0]\n      }\n    // } \n    // return defaultValue\n  }\n\n\n  each(fn: (x: number, y: number, value: string) => void) {\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        fn(x,y,this.at(x,y) || '')\n      }\n    }\n  }\n\n  neighbors(x: number, y: number): string[] {\n    const at = ([x, y]: [ number, number ]) => this.at(x,y) || '' // || defaultValue\n    // let neighbors: string[] = [\n    //   at(x-1,y-1), at(x,y-1), at(x+1,y-1),\n    //   // at(x-1,y)  , at(x,y),   at(x+1,y),\n    //   at(x-1,y)  ,   at(x+1,y),\n    //   at(x-1,y+1), at(x,y+1), at(x+1,y+1),\n    // ]\n    return Board.neighborPositions(x,y).map(at) //neighbors\n  }\n\n  static neighborPositions(x: number, y: number): [number, number][] {\n    return [\n      [x-1,y-1], [x,y-1], [x+1,y-1],\n      [x-1,y  ], [x+1,y],\n      [x-1,y+1], [x,y+1], [x+1,y+1],\n    ]\n  }\n\n  step(eachCell: (val: string, neighbors: string[], position: [number, number]) => string, defaultValue: string = ''): Tiles {\n    // const ignored = ['*']\n    // console.log(\"Board.step -- start\")\n    let newTiles: Tiles = []\n    this.tiles = this.tiles || []\n    const at = (x: number, y: number) => this.at(x,y) || defaultValue\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        let currentValue = at(x,y)\n        if (currentValue !== undefined) {\n          // if (ignored.includes(currentValue)) { continue }\n          let neighbors: string[] = this.neighbors(x,y)\n          // [\n          //   at(x-1,y-1), at(x,y-1), at(x+1,y-1),\n          //   at(x-1,y)  , at(x,y),   at(x+1,y),\n          //   at(x-1,y+1), at(x,y+1), at(x+1,y+1),\n          // ]\n          const newCell = eachCell(currentValue, neighbors, [x,y])\n          newTiles[y] = newTiles[y] || []\n          newTiles[y][x] = newCell\n        }\n      }\n    }\n    this.tiles = newTiles\n    return newTiles\n  }\n}\n","export const clamp = (value: number, min: number, max: number) =>\n  Math.min(Math.max(value, min),max)\n","export const distance = (a: [number, number], b: [number, number]) => {\n  let dx = Math.abs(a[0] - b[0]);\n  let dy = Math.abs(a[1] - b[1]);\n  return Math.sqrt(dx * dx + dy * dy)\n}\n","import { NameSequence } from \"../collections/Sequence\";\nimport { Board, Tiles } from \"./Board\";\nimport { any } from \"./utils/any\";\nimport { clamp } from \"./utils/clamp\";\nimport { distance } from \"./utils/distance\";\nimport { randomInteger } from \"./utils/randomInteger\";\nimport { choose, sample } from \"./utils/sample\";\nimport { times } from \"./utils/times\";\n\nconst first = <T>(arr: T[], pred: (x: T) => boolean): T => {\n  return arr.filter(pred)[0]\n}\n\ntype Position = [number, number]\n\nfunction neighborPositions([x,y]: Position): Position[] { // [x: number, y: number): [number, number][] {\n  return [\n    [x-1,y-1], [x,y-1], [x+1,y-1],\n    [x-1,y  ], [x+1,y],\n    [x-1,y+1], [x,y+1], [x+1,y+1],\n  ]\n}\n\ntype Cell = {\n  value: number,\n  neighbors: number[],\n  position: Position,\n  localAverage: number\n}\ntype HeightmapOperation = (cell: Cell) => number\n\nexport class Heightmap {\n  get evolution() { return {\n    //  (# of steps to erode on height unit)\n    // faster values erode more slowly\n    erosionSlowness: 4,\n    smoothSlowness: 8,\n    extrudeIntensity: 6,\n\n    // flow slowness (for every 1 unit rise/fall, how many (10s of) cells to run?)\n    viscosity: 0.4,\n\n    // 100 = constant\n    bombardmentRate: 50,\n  }}\n\n\n  matrix: number[][] = []\n  maxHeight = 10000\n  heightUnit = (this.maxHeight / 10)\n  seaLevel = 2 * (this.maxHeight / 10) // - this.heightUnit\n\n  constructor(public width: number, public height: number) {\n  }\n\n  view({ overlays }: { overlays: Board[] } = { overlays: []}): Tiles {\n    let viewTiles: Tiles = []\n    for (let x = 0; x < this.width-1; x++) {\n      for (let y = 0; y < this.height-1; y++) {\n        viewTiles[y] = viewTiles[y] || []\n        let overlay = overlays.length > 0 && first(overlays, o => {\n          let v = o.at(x,y); return v !== '' && v !== undefined\n        })\n        viewTiles[y][x] = (overlay && overlay.at(x,y))\n          || String(\n              this.viewHeightAtPos([x,y]) || 0\n          )\n      }\n    }\n    return viewTiles;\n  }\n\n  evolve(...operations: HeightmapOperation[]) {\n    const adapt = () => this.step((value: number, neighbors: number[], position: Position) => {\n      let neighborSum = neighbors.reduce((a, b) => a + b, 0)\n      let localAverage = //Math.round(\n        (neighborSum + value) / (neighbors.length + 1)\n      // );\n\n      // times(10, () => {\n      operations.forEach((operate: HeightmapOperation) => {\n        value = operate({\n          value,\n          position,\n          neighbors,\n          localAverage\n        })\n      // })\n       })\n\n      return clamp(value, 0, this.maxHeight)\n    })\n    // adapt()\n    // times(1, )\n    times(4, adapt)\n  }\n  // (ie run through map once and compute all per-cell things simultaneously...)\n\n  viewHeightAtPos = ([x,y]: Position) => {\n    return Math.round(clamp(this.valueAtPosition([x,y]) * (1.0/this.heightUnit), 0, 9))\n  }\n\n\n  valueAtPosition = ([x,y]: Position): number => {\n    let x0 = x%this.width, y0 = y%this.height;\n    this.matrix[y0] = this.matrix[y0] || []\n    if (this.matrix[y0][x0] !== undefined) {\n      return this.matrix[y0][x0]\n    }\n    return 0\n  } //parseInt(this.matrixp.at(x,y) || '0', 10) }\n\n  write = (value: number, [x,y]: Position) => {\n    // throw new Error(\"Method not implemented.\");\n    this.matrix[y] = this.matrix[y] || []\n    this.matrix[y][x] = Math.round(clamp(value, 0, this.maxHeight))\n  }\n\n  // @boundMethod\n  each = (cb: (value: number, position: Position) => void) => {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        let position: Position = [x,y]\n        let value = this.valueAtPosition(position)\n        cb(value, position)\n      }\n    }\n  }\n\n  neighbors = ([x,y]: Position): number[] =>\n    neighborPositions([x,y]).map(this.valueAtPosition)\n\n  step = (\n    cb: (val: number, neighbors: number[], position: Position) => number,\n  ): number[][] => {\n    let newValues: number[][] = []\n    for (let y = 0; y <= this.height; y++) {\n      newValues[y] = []\n      for (let x = 0; x <= this.width; x++) {\n        let currentValue = this.valueAtPosition([x,y])\n        let newValue = null\n        let neighbors: number[] = this.neighbors([x,y])\n        newValue = cb(currentValue, neighbors, [x,y])\n        newValues[y][x] = newValue\n      }\n    }\n    this.matrix = newValues\n    return newValues\n  }\n\n  at = (x: number, y: number): number => this.valueAtPosition([x,y])\n\n  smooth: HeightmapOperation = ({ value, neighbors: ns, localAverage: average }: Cell) => { // = () => {\n    // let u = this.mu / 5 //128 // (1+2*this.evolution.smoothSlowness)\n    // return sample(ns) - u\n  //   // cleanup coastlines\n    let level = this.seaLevel //- this.mu //+ this.mu\n    // const immediate = [ns[1], ns[3], ns[5], ns[7]]\n    let aboveWater = ns.filter(n => n >= level).length;\n    if (aboveWater <= 2 && value >= level) { return level - this.mu } //value - u } //level - this.mu }\n    if (aboveWater >= 6 && value <= level) { return level + this.mu } //value + u }\n    // if (value < Math.min(...ns) - this.mu) { return value + u }\n    // if (value > Math.max(...ns) + this.mu) { return value - u }\n    // if (value < average - this.mu) { return value + u }\n    // if (value > average + this.mu) { return value - u }\n\n\n    return value\n  };\n\n  mu = this.heightUnit\n  flow: HeightmapOperation = ({ value, neighbors: ns, localAverage: average }: Cell) => {\n    if (value >= 1) { return value }\n    const immediate = [ns[1], ns[3], ns[5], ns[7]]\n    let { viscosity } = this.evolution\n    // let u = (3*this.mu) / (2+viscosity) // / (3*this.evolution.viscosity)\n\n    let u = this.mu / (1+viscosity)\n    \n\n    // let sameHeightNeighbors = immediate.filter(neighbor =>\n    //   Math.abs(value - neighbor) < this.mu*2\n    // )\n    // if (value > 0 && (\n    //   sameHeightNeighbors.length === 1\n    //  || sameHeightNeighbors.length === 2\n    // )) {\n    //   return value //sample(sameHeightNeighbors) //value, same\n    // }\n\n    // let u = this.mu / 8\n    let tallest = Math.max(...ns)\n    // if (tallest > this.maxHeight * 0.55) { u *= 5 } //value - this.mu }\n    // if (tallest < this.maxHeight * 0.65) { u *= 3 } //value - this.mu }\n    return sample([\n      // value,\n      // value - u,\n      // tallest - 2*u,\n      tallest,\n      sample(immediate) - u, // u //sameHeightNeighbors.length*u //this.mu*2\n      sample(ns) - 3*u, // u //sameHeightNeighbors.length*u //this.mu*2\n      // sample(ns) - 2*u, // u //sameHeightNeighbors.length*u //this.mu*2\n      // tallest - 5*u,\n      // (value + average)/2 + u,\n      Math.max(\n        value,\n        // Math.max(...immediate) - u, //this.mu*2\n        // average - u\n        sample(ns) - u, // u //sameHeightNeighbors.length*u //this.mu*2\n        \n      )\n      // ...immediate.map(neighbor => Math.max(value, neighbor - u)),\n      // ...ns.map(neighbor => Math.max(value, neighbor - u)),\n      // value > 0 ? Math.max(value, sample(immediate) + u) : 1\n      // Math.max(value, average)\n    ])\n    // let tallestImmediate = Math.max(...immediate)\n    // if (value > average || value > tallestImmediate) { return value } //u = this.mu}\n\n    // let tallestNeighbor = Math.max(...ns)\n    // // u *= ((value)/this.maxHeight)\n    // if (tallestNeighbor >= 0.6 * this.maxHeight) { u = this.mu * 1.5 }\n    // if (Math.abs(tallestNeighbor - this.seaLevel) < this.mu/4) {\n    //   u = this.mu * 3\n    // }\n    // // else { u = this.mu / 64 }\n    // return sample([\n    //   value,\n    //   // value,\n    //   // value,\n    //   // value,\n    //   // Math.round((value+average)/2),\n    //   // Math.round((value + tallestNeighbor - u) / 2),\n    //   // ((tallestNeighbor <= 0.65 * this.maxHeight &&\n    //   // tallestNeighbor >= 0.45 * this.maxHeight)\n    //   //   ? Math.max(value, tallestImmediate - u)\n    //   //   : value), //this.mu),\n    //   // ((tallestNeighbor <= 0.85 * this.maxHeight &&\n    //   // tallestNeighbor >= 0.35 * this.maxHeight)\n    //   //   ? Math.max(value, tallestImmediate)\n    //   //   : value), //this.mu),\n    //   // value > this.seaLevel ? Math.max(value, sample(immediate) - u) : value, //this.mu),\n    //   Math.max(value, tallestImmediate - u), //this.mu),\n\n    //   // Math.max(value, sample(ns) - 3*u),\n    // ]);\n  };\n\n  erode: HeightmapOperation = ({ value, neighbors: ns, localAverage }) => {\n    // if (value <= this.seaLevel + this.mu) { return value }\n    // const immediate = [ns[1], ns[3], ns[5], ns[7]]\n    // // let { viscosity } = this.evolution\n    // // let u = (5*this.mu) / (2+viscosity) // / (3*this.evolution.viscosity)\n    // let sameHeightNeighbors = immediate.filter(neighbor =>\n    //   Math.abs(value - neighbor) < this.mu // 2\n    // )\n    // if ((sameHeightNeighbors.length === 1\n    //  || sameHeightNeighbors.length === 2)) {\n    //   //  return sample([value])\n    //   return value\n    // }\n\n    // return value\n    let u = (this.mu)/64 //(1+8*this.evolution.erosionSlowness)\n    // // if (Math.abs(value - this.seaLevel) < this.mu*2) { u = -1 } //value - this.mu }\n    let eroded = value - u\n    // if (value > localAverage + 2*this.mu) return eroded - this.mu\n    if (value > localAverage + this.mu) return eroded\n    return value > localAverage ? sample([eroded, value]) : value //sample([eroded, value]) //Math.min(eroded, sample(sameHeightNeighbors));\n    //sample([ value, eroded ])\n\n    // return value > 0.85 * this.maxHeight\n    //   ? value - this.mu\n    //   : eroded\n  }\n\n  adjuster = (amount: number) => (position: Position) => {\n    let value = this.valueAtPosition(position)\n    this.write(value + amount, position)\n  }\n\n  extrude = (positions: [number, number][]) => {\n    const raiseGround = this.adjuster(\n      this.heightUnit * this.evolution.extrudeIntensity\n    )\n    choose(positions.length/32, positions).forEach(raiseGround)\n    // positions.forEach(raiseGround) //pos => raiseGround(pos))\n  };\n\n  intrude = (positions: [number, number][]) => {\n    const lowerGround = this.adjuster(-this.heightUnit * this.evolution.extrudeIntensity / 2) //heightUnit)\n    positions.forEach(lowerGround)\n  };\n\n  bombard = (intensity: number = 1) => {\n    let radius = randomInteger(1,4+randomInteger(0,intensity));\n    let impactSite: [number, number] = [ randomInteger(1, this.width-1), randomInteger(1, this.height-1) ]\n    const distanceToImpact = (pos: [number, number]) => distance(pos, impactSite)\n    let craterPositions: [number, number][] = []\n    let craterEdge: [number, number][] = []\n    let [x0,y0]: [number, number] = impactSite;\n    for (let x=x0 - radius; x < x0 + radius; x++) {\n      for(let y = y0 - radius; y < y0 + radius; y++) {\n        let d = Math.round(distanceToImpact([x,y]))\n        if (Math.abs(d - radius) < 1) {\n          craterEdge.push([x,y])\n        } else if (d < radius) {\n          craterPositions.push([x,y])\n        }\n      }\n    }\n    this.intrude(craterPositions);\n    this.extrude(craterEdge);\n  }\n\n  orogeny = (mountains: [number, number][]) => this.extrude(\n    choose(2, mountains)\n  )\n\n  geoform = (hades: boolean, mountains: [number, number][]) => {\n    // const d100 = randomInteger(0,100)\n    // if (d100 < this.evolution.bombardmentRate) {\n    //   this.bombard(hades ? this.height/2 : this.height/8);\n    // }\n\n    if (hades) {\n      this.extrude(mountains)\n    }\n\n    this.evolve(\n      this.flow,\n      // hades\n      this.erode,\n      // this.smooth,\n      // todo this.sculpt  ...\n      hades ? this.erode : this.smooth\n    )\n  };\n\n  componentNames = new NameSequence()\n\n  // todo should use view heights??\n  components(\n    consider: (value: number, ns: number[]) => boolean,\n  ): { [component: string]: [number, number][] } {\n    let componentMap: { [component: string]: [number, number][] } = {}\n    this.each((val, pos) => {\n      let ns = this.neighbors(pos)\n      let roundedValue = Math.round(val / this.mu) * this.mu\n      if (!!consider(roundedValue, ns)) {\n        // do we belong to an existing region? (adjacency)\n        let existingComponentNames = Object.keys(componentMap).filter(component => {\n          // are any of the points in r adjacent to this one?\n          let adjacent = any(componentMap[component], ([x1,y1]) => {\n            return distance(pos, [x1,y1]) <= Math.sqrt(2)\n          })\n          return adjacent\n        })\n        if (existingComponentNames.length > 0) {\n          let firstAdjacentComponentName = existingComponentNames[0]\n          componentMap[firstAdjacentComponentName].push(pos)\n          if (existingComponentNames.length > 1) {\n            // merge all regions...\n            existingComponentNames.forEach(component => {\n              // delete that region + add to first region\n              if (component !== firstAdjacentComponentName) {\n                componentMap[firstAdjacentComponentName] = [\n                  ...componentMap[firstAdjacentComponentName],\n                  ...componentMap[component],\n                ]\n                delete componentMap[component]\n              }\n            })\n          }\n        } else {\n          // invent a new region\n          let component = this.componentNames.next;\n          componentMap[component] = [pos]\n        }\n      }\n    })\n    return componentMap\n  }\n\n  regions = () => this.components(val => val >= this.seaLevel)\n  waterways = () => this.components(val => val < this.seaLevel)\n  ranges = () => this.components(val => val >= 0.8 * this.maxHeight)\n\n  valleys = () => {\n    let level = this.seaLevel\n    return this.components((val,ns) => val >= level && Math.abs(val-level) < this.heightUnit\n                                    && ((ns.reduce((a,b) => a + b, 0) / ns.length) >= level)\n    )\n  }\n\n  bays = () => {\n    let level = this.seaLevel\n    return this.components((val,ns) => val <= level && Math.abs(val-level) < this.heightUnit\n                                    && ((ns.reduce((a,b) => a + b, 0) / ns.length) <= level));\n    // let level = this.seaLevel //this.seaLevel - 1\n    // return this.components(v => v === level || v === level - 1)\n    //(val) => val === level || val === level - 1)) // || val === level - 2))\n                                    // && ((ns.reduce((a,b) => a + b, 0) / ns.length) <= level + 1)\n    // )\n  }\n                                           \n // could also detect trenches?? poetically 'deeps'?\n}\n","export const any = <T>(list: Array<T>, pred: (value: T) => boolean) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i])) {\n      return true\n    }\n  }\n  return false\n}\n\nexport const all = <T>(list: Array<T>, pred: (value: T) => boolean) => {\n  for (let i = 0; i < list.length; i++) {\n    if (!pred(list[i])) {\n      return false\n    }\n  }\n  return true\n}\n","import { Dictionary, DictionarySequence } from \"../ecosphere/Dictionary\";\nimport { Heightmap } from \"./Heightmap\";\nimport { Sindarin } from \"./Languages/Sindarin\";\n// import Common from \"./Languages/Common\";\n// import Westron from \"./Languages/Westron\";\nimport { sample } from \"./utils/sample\";\n\n// const markov = (lines: string) => new MarkovSequence(lines.split(\"\\n\"))\nclass Linguist {\n  constructor(private dictionary: Dictionary) {}\n  names = {\n    places: new DictionarySequence(this.dictionary, true, 'land', 'place'), //'realm', 'haven', 'place'),\n    regions: new DictionarySequence(this.dictionary, false, 'isle', 'place'),\n    waterways: new DictionarySequence(this.dictionary, false, 'sea', 'lake', 'water', 'pool'),\n    ranges: new DictionarySequence(this.dictionary, true, 'mountain-chain'),\n    mountains:  new DictionarySequence(this.dictionary, false, 'mountain'),\n    valleys: new DictionarySequence(this.dictionary, false, 'valley'),\n    bays: new DictionarySequence(this.dictionary, false, 'bay')\n  }\n\n  // cache names...\n  private waterwayNames: { [rawWaterbodyName: string]: string } = {}\n  private regionNames:   { [rawRegionName: string]: string } = {}\n  private rangeNames:    { [rawRangeName: string]: string } = {}\n  private valleyNames:   { [rawValleyName: string]: string } = {}\n  private bayNames:      { [rawBayName: string]: string } = {}\n\n  nameWaterway(rawWaterbodyName: string, _area: number) {\n    if (this.waterwayNames[rawWaterbodyName] === undefined) {\n      this.waterwayNames[rawWaterbodyName] = this.names.waterways.next\n    }\n    return this.waterwayNames[rawWaterbodyName]\n  }\n\n  nameRegion(rawRegionName: string, _area: number) {\n    if (this.regionNames[rawRegionName] === undefined) {\n      this.regionNames[rawRegionName] = sample([\n        this.names.regions,\n        this.names.places\n      ]).next\n    }\n    return this.regionNames[rawRegionName]\n  }\n\n  nameRange(rawRangeName: string, _area: number): string | undefined {\n    if (this.rangeNames[rawRangeName] === undefined) {\n      this.rangeNames[rawRangeName] = sample([\n        this.names.ranges,\n        this.names.mountains\n      ]).next\n    }\n    return this.rangeNames[rawRangeName]\n  }\n\n  nameValley(rawValleyName: string, _area: number): string | undefined {\n    if (this.valleyNames[rawValleyName] === undefined) {\n      this.valleyNames[rawValleyName] = this.names.valleys.next\n    }\n    return this.valleyNames[rawValleyName]\n  }\n\n  nameBay(rawBayName: string, area: number): string | undefined {\n    if (this.bayNames[rawBayName] === undefined) {\n      this.bayNames[rawBayName] = this.names.bays.next\n    }\n    return this.bayNames[rawBayName]\n  }\n}\n\nexport class Cartographer {\n  // private language: d\n  private linguist = new Linguist(this.dictionary)\n  private _waterways: { [rawWaterbodyName: string]: [number, number][] } = {}\n  private _regions: { [rawRegionName: string]: [number, number][] } = {}\n  private _ranges: { [rawRangeName: string]: [number, number][] } = {}\n  private _valleys: { [rawValleyName: string]: [number, number][] } = {}\n  private _bays: { [rawBayName: string]: [number, number][] } = {}\n\n  constructor(\n    private elevation: Heightmap,\n    private dictionary: Dictionary = Sindarin\n  ) {}\n\n  reset() {\n    this._regions = {}\n    this._waterways = {}\n    this._ranges = {}\n    this._valleys = {}\n    this._bays = {}\n  }\n\n  // cache heightmap regions + names..\n  get regions() {\n    if (Object.keys(this._regions).length === 0) {\n      this._regions = this.elevation.regions()\n    }\n    return this._regions\n  }\n\n  identifyRegion(x: number, y: number): string | undefined {\n    const rawRegionName = Object.keys(this.regions).find(region =>\n      this.regions[region].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rawRegionName) {\n      let area = this.regions[rawRegionName].length\n      return this.linguist.nameRegion(rawRegionName, area)\n    }\n  }\n\n  get waterways() {\n    if (Object.keys(this._waterways).length === 0) {\n      this._waterways = this.elevation.waterways()\n    }\n    return this._waterways\n  }\n\n  identifyWaterway(x: number, y: number): string | undefined {\n    const rawWaterbodyName = Object.keys(this.waterways).find(waterway =>\n      this.waterways[waterway].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rawWaterbodyName) {\n      let area = this.waterways[rawWaterbodyName].length\n      return this.linguist.nameWaterway(rawWaterbodyName, area)\n    }\n  }\n\n  identifyRegionOrWaterway(x: number, y: number): string | undefined {\n    return this.identifyRegion(x,y)\n        || this.identifyWaterway(x,y)\n        || '(err: unknown region/waterway)'\n  }\n\n  get ranges() {\n    if (Object.keys(this._ranges).length === 0) {\n      this._ranges = this.elevation.ranges()\n    }\n    return this._ranges\n  }\n\n  identifyRange(x: number, y: number): string | undefined {\n    const rangeName = Object.keys(this.ranges).find(range =>\n      this.ranges[range].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rangeName) {\n      const area = this.ranges[rangeName].length\n      return this.linguist.nameRange(rangeName, area)\n    }\n  }\n\n  get valleys() {\n    if (Object.keys(this._valleys).length === 0) {\n      this._valleys = this.elevation.valleys()\n    }\n    return this._valleys\n  }\n\n  identifyValley(x: number, y: number): string | undefined {\n    const valleyName = Object.keys(this.valleys).find(valley =>\n      this.valleys[valley].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (valleyName) {\n      const area = this.valleys[valleyName].length\n      return this.linguist.nameValley(valleyName, area)\n    }\n  }\n\n  get bays() {\n    if (Object.keys(this._bays).length === 0) {\n      this._bays = this.elevation.bays()\n      // console.log(\"Found bays\", this._bays)\n    }\n    return this._bays\n  }\n\n  identifyBay(x: number, y: number): string | undefined {\n    const bayName = Object.keys(this.bays).find(bay =>\n      this.bays[bay].find(([x0,y0]: [number, number]) => x===x0 && y===y0)\n    ) || null\n\n    if (bayName) {\n      const area = this.bays[bayName].length\n      return this.linguist.nameBay(bayName, area)\n    }\n  }\n\n  identifyFeatures(aeon: string, x: number, y: number): string | undefined {\n    if (aeon === 'Hadean' || aeon === 'Archean') {\n      return '(Cartography requires calmer aeon...)'\n    }    \n    return this.identifyRange(x,y)\n        || this.identifyValley(x,y)\n        || this.identifyBay(x,y)\n        || ''\n  }\n\n\n  // identifyMountain, identifyRiver\n  // identify -- include all single point features (mountains, rivers, ...'arrows'?)\n}\n\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { EvolvingStocks } from \"../ecosphere/types\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { construct } from \"../ecosphere/utils/replicate\";\nimport { sample } from \"../ecosphere/utils/sample\";\nimport { Heightmap } from \"../ecosphere/Heightmap\";\nimport { Cartographer } from \"../ecosphere/Cartographer\";\n\ntype Aeon = 'Hadean' | 'Archean' | 'Proterozoic'\n\n\nclass WorldMap extends Model {\n  notes = { aeon: () => this.aeon }\n\n  get aeon(): Aeon {\n    let eon: Aeon = 'Hadean';\n    if (this.ticks >= this.mapgenTicks / 2) { eon = 'Archean' }\n    if (this.ticks > this.mapgenTicks) { eon = 'Proterozoic' }\n    return eon;\n  }\n\n  // size = 64\n  size = 128\n  // size = 64\n  width = this.size\n  height = this.size\n\n  private mapgenTicks = 64\n  elevation: Heightmap = new Heightmap(this.width, this.height)\n  private terrain: Board = new Board(this.width, this.height)\n  // private vegetation: Board = new Board(this.width, this.height)\n  private mountainSpots: [number, number][] = []\n  private areaPercent = Math.floor(this.area / 100);\n\n  constructor() {\n    super(\"Overworld\")\n    this.evolve(this.evolution)\n    this.actions.create({ name: 'Geoform', act: () => {\n      this.ticks = 0\n      this.cartographer.reset()\n      // this.cartographer._regions = {}\n      // this.cartographer._waterways = {}\n    }});\n    // this.reboot()\n  }\n\n  get tiles() { return this.elevation.view({ overlays: [\n    // this.vegetation,\n    // this.terrain,\n    // this.elevation.binaryImage(),\n    // this.elevation.transform(),\n  ] }) }\n\n  get tilesEvolving() { return this.aeon === 'Hadean' || this.aeon === 'Archean' }\n  \n\n  @boundMethod\n  tileInspect(x: number, y: number) {\n    const elevation = this.elevation.at(x,y) || 0\n    const li = Math.round(3600 * ( elevation - 4 ) / 5280)\n    const elevationMessage = li === 0 ? 'At sea level' : `${Math.abs(li)} li ${li >= 0 ? 'above' : 'below'} sea level`\n    if (this.aeon === 'Hadean' || this.aeon === 'Archean') {\n      return elevationMessage\n    }\n\n    const region = this.cartographer.identifyRegionOrWaterway(x,y)\n    const features = this.cartographer.identifyFeatures(this.aeon, x,y)\n    return [\n      features, region,\n      // elevationMessage\n    ]\n      .filter(Boolean)\n      .join(\"\\n\")\n    \n    //`${features} / ${region} / ${elevationMessage}`\n  }\n\n  protected cartographer = new Cartographer(this.elevation)\n\n  tileColors = {\n    // terrain\n    // land\n    '.':  'lightgreen',\n\n    // sea\n    '~': 'midnightblue',\n    ',': 'navy',\n\n    // vegetation...\n    '\\'': 'darkgreen',\n\n    // elevation map\n    // '0': 'black',\n    // '1': 'white',\n\n    // heightmap\n    // '1': 'black',\n    // '0': 'navy',\n    // '1': 'navy',\n    // '2': 'midnightblue',\n    // '3': 'midnightblue',\n    // '4': 'blue',\n    // '5': 'moccasin',\n    // '6': 'forestgreen',\n    // '7': 'darkgreen',\n    // '8': 'darkgreen',\n    // '9': 'darkgreen',\n    '0': 'navy',\n    // '1': 'moccasin',\n    // '2': 'forestgreen',\n    '1': 'midnightblue',\n    '2': 'moccasin',\n    '3': 'forestgreen',\n    '4': 'green', //mediumblue',\n    '5': 'green',\n    '6': 'darkgreen',\n    '7': 'darkgreen',\n    '8': 'darkslategray',\n    '9': 'darkslategray',\n  }\n\n  // todo profiles? islands/continents/ocean/grasslands/mountains\n\n\n  @boundMethod\n  randomPosition(): [number, number] {\n    let x = randomInteger(0, this.width)\n    let y = randomInteger(0, this.height)\n    return [x, y]\n  }\n\n  @boundMethod\n  randomPositionAlongLine(a: [number,number], b: [number,number], jitter: number = 3): [number, number] {\n    let [ax,ay] = a;\n    let [bx,by] = b;\n    let [dx,dy] = [ Math.abs(ax-bx), Math.abs(ay-by) ]\n    if (dx === 0) {\n      // it's vertical so... any points on this column\n      let y = randomInteger(0, this.height)\n      let x = ax\n      return [x, y]\n    } else if (dy === 0) {\n      let x = randomInteger(0, this.width)\n      let y = ay\n      return [x, y]\n    } else {\n      let slope = dy / dx; // rise over run\n      // so eg ay = slope * ax + b\n      //       -b = (slope * ax) - ay\n      //       b = -((slope * ax) - ay)\n      let y0 = (-((slope * ax) - ay))\n      let x = Math.floor(randomInteger(0, this.width))\n      let y = Math.floor((slope * x) + y0)\n      let j = jitter || 1;\n      return [x + randomInteger(-j,j),y + randomInteger(-j,j)]\n    }\n  }\n\n  get volcanoes() {\n    if (this.mountainSpots.length === 0) {\n      let targetSpotCount = Math.floor(1.6 * this.areaPercent)\n      let [a,b] = [ this.randomPosition(), this.randomPosition() ]\n      let chainSpots = construct(() => this.randomPositionAlongLine(a,b), targetSpotCount, false)\n      let isleSpots = construct(() => this.randomPosition(), targetSpotCount, false)\n\n      this.mountainSpots = [\n        ...chainSpots,\n        ...isleSpots\n      ]\n    }\n    return this.mountainSpots\n  }\n\n  genHeightmap() {\n    const hades = this.aeon === 'Hadean'\n    this.elevation.geoform(hades, this.volcanoes)\n  }\n\n  buildTerrain() {\n    this.terrain.each((x,y,_value) => {\n      let height = this.elevation.at(x,y) //parseInt(this.elevation.at(x,y) || '0')\n      if (height >= 9) {\n        this.terrain.write(\"^\", x, y)\n      } else if (height <= 4) {\n        this.terrain.write(sample([\"~\", ',']), x, y)\n      } else {\n        this.terrain.write('.',x,y)\n      }\n    })\n  }\n\n  // growVegetation() {\n  //   this.vegetation.step((val, _neighbors) => {\n  //     if (val === \"'\") {\n  //       if (_neighbors.length >= 2) { //} || _neighbors.length <= 6) {\n  //         return \"'\"\n  //       }\n  //     } else {\n  //       if (_neighbors.length === 3) {\n  //         return \"'\"\n  //       }\n  //     }\n  //     return ''\n  //   })\n  //   this.vegetation.each((x,y,value) => {\n  //     let h = parseInt(this.elevation.map.at(x,y) || '0')\n  //     // autogenesis\n  //     if (h <= 4 || h >= 8) { this.vegetation.erase(x, y) }\n  //     else if (value === '' && randomInteger(0,100) > 98) {\n  //       if (h >= 4 && h < 8) {\n  //         this.vegetation.write(\"'\", x, y)\n  //       }\n  //     }\n  //   })\n  // }\n\n  get area() { return this.width * this.height }\n\n  @boundMethod\n  evolution({ resources }: EvolvingStocks, t: number) {\n    if (t > 0) {\n      if (t % 100 === 0) { console.log(\"The world is \" + (t / 100) + \" million years old\") }\n      if (t <= this.mapgenTicks) { this.genHeightmap() }\n    }\n  }\n}\nconst worldMapMaker = new WorldMap()\nexport default worldMapMaker;\n\n","import { Concept, Dictionary, theConcepts } from \"../ecosphere/Dictionary\"\nimport { Model } from \"../ecosphere/Model\"\nimport Khuzdul from \"../ecosphere/Languages/Khuzdul\"\nimport { Sindarin } from \"../ecosphere/Languages/Sindarin\"\nimport Westron from \"../ecosphere/Languages/Westron\"\nimport Common from \"../ecosphere/Languages/Common\"\n// import { Celestial } from \"./Languages/Celestial\"\nclass Language extends Model {\n  constructor(private dictionary: Dictionary) {\n    super(`Language Explorer`)\n    this.actions.create({ name: 'Common', act: () => this.dictionary = Common })\n    this.actions.create({ name: 'Westron', act: () => this.dictionary = Westron })\n    this.actions.create({ name: 'Sindarin', act: () => this.dictionary = Sindarin })\n    this.actions.create({ name: 'Khuzdul', act: () => this.dictionary = Khuzdul })\n    // todo :)\n    // this.actions.create({ name: 'Primordial', act: () => this.dictionary = Celestial })\n    // this.policies.create({ name: 'Show Full Dictionary', manage: () => { } })\n    // this.\n  }\n\n  t = (...concepts: Concept[]) => this.dictionary.translate(...concepts)\n\n  check = (translations: string[], ...concepts: Concept[]) => {\n    let tx = this.t(...concepts)\n    translations.forEach(translation => {\n      if (tx === translation) { tx = `*${tx}`}\n    })\n    return tx; //`%${tx}`;\n  }\n\n  notes = {\n    '*lang': () => `${this.dictionary.languageName} Phrasebook`,\n    // validate that we haven't broken sindarin\n    '\"Nightingale\"': () => this.check([\"Tinuviel\", \"Luthien\"], 'spark', '-maid'),\n    'Silver River': () => this.check([\"Celebrant\", \"Kibilnâla\"], 'silver', 'river'),\n    'Haven of the Gods': () => this.check([\"Avallónë\", \"Asgard\"], 'at-', 'divine'),\n    'Swan Haven': () => this.check([\"Alqualondë\", \"Ealacúan\"], 'swans', 'haven'),\n    'Star-Eagle': () => this.check([\"Thorongil\", \"Aragorn\"], 'eagles', 'stars'),\n    'Dream Island': () => this.check([\"Lórien\"], 'dream', 'island'),\n    'Lonely Isle': () => this.check([\"Tol Eressëa\"], 'isle', 'lonely'),\n    'Land of Pines': () => this.check([\"Dorthonion\"], 'land', 'pine'),\n    // 'Mound of Summer': () => this.check(\"Corollaerë\", 'mound', 'summer'),\n    'Mound of Summer': () => this.check([\"Corollairë\"], 'mound', 'summer'),\n    'Tall White Point': () => this.check([\"Taniquetil\"], 'tall', 'white', 'point'),\n    'Spirit of Fire': () => this.check([\"Fëanor\"], 'spirit', 'fire'),\n    'Magic Woman': () => this.check([\"Lûthien\"], 'magic', '-woman'),\n    'Mountains of Tyranny': () => this.check([\"Thangorodrim\"], 'tyranny', 'mountain-chain'),\n    'Fire Stronghold': () => this.check([\"Norgothrond\"], 'fire', 'stronghold'),\n    'Grey-Mantle': () => this.check([\"Thingol\"], 'gray', 'mantle'),\n    'Iron Prison': () => this.check([\"Angband\"], 'iron', 'prison'),\n    'Black Foe': () => this.check([\"Morgoth\"], 'black', 'foe'),\n    'Icy Fangs': () => this.check([\"Helcaraxë\"], 'ice', 'fangs'),\n    'Ever-White': () => this.check([\"Oiolossë\"], 'ever-', 'snow'),\n    'Mist-Needle': () => this.check([\"Hithaeglin\"], 'mist', 'needle'),\n    'Mist-Shadow': () => this.check([\"Hithlum\"], 'mist', 'shadow'),\n    'Pale-horn Mountains': () => this.check([\"Ered Nimrais\"], 'mountain', 'pale', 'horns'),\n    'Shipmaker': () => this.check([\"Círdan\"], 'ship', 'smith'),\n    'Land of Holly': () => this.check([\"Eregion\"], 'holly', 'land'),\n    'Fate Hill': () => this.check([\"Amon Amarth\"], 'hill', 'fate'),\n    // '*dictionary': () => `${this.dictionary.languageName} Dictionary`,\n    // todo -- build out sindarin a bit...\n    // 'Heavenly Arch': () => this.check(\"Egalmoth\", 'firmament', 'arch'),\n    // 'Golden Flower': () => this.check(\"Glorfindel\", 'golden', 'flower'),\n    // 'Land of the Fence': () => this.check(\"Doriath\", 'land', 'fence'),\n    // 'Forsaken Land': () => this.check(\"Eglador\", 'forsaken', 'land'),\n    // 'Hidden Rock': () => this.check(\"Gondolin\", 'hidden', 'rock'),\n\n    /// other examples (not necessarily from beleriand)\n    // 'Hills of Evendim': () => this.t('hill', 'evening'),\n    // 'Mere of Shadows': () => this.t('pool', 'shadow'),\n    // 'Vale of Nightingales': () => this.t('valley', 'nightingales'),\n    // 'Dewy Region': () => this.t('dew', 'region'),\n    // 'Star Hill': () => this.t('hill', 'stars'),\n    'Golden Hill': () => this.t('hill', 'golden'),\n    'Pathless Sea': () => this.t('-less', 'path', 'sea'),\n    'Star-Music': () => this.t('stars', 'music'),\n    // 'Gold Mountain': () => this.t('mountain', 'gold'),\n    // 'Elephant Hill': () => this.t('hill', 'elephants'),\n    // 'Silent Land': () => this.t('land', 'silence'),\n    // 'Star Bay': () => this.t('bay', 'stars'),\n    'Bell-Star': () => this.t('bell', 'stars'),\n    // 'Saturday': () => this.t('day', 'stars'),\n    // various vocab...\n    // 'Dragon': () => this.t('dragons'),\n    // 'Giant': () => this.t('giant'),\n    '*dictionary': () => `${this.dictionary.languageName} Dictionary`,\n    ...Object.fromEntries(theConcepts.sort().map(idea => {\n      // let [name, significance] = this.t(idea);\n      return [idea, () => {\n        let tx = this.t(idea)\n        if (tx.length > 9) { return `%${tx}` }\n        return tx\n      }] // `Mount ${capitalize(idea)}`, () => this.dictionary.nameMountain(idea)[1]])\n    }))\n  }\n}\n\nexport default new Language(Khuzdul);\n\n","// import { Avernus } from \"./Avernus\"\n// import arena from \"./Arena\"\n// import { Society } from \"./Society\"\n// import zep from \"./zep\"\nimport Citizen from \"./Citizen\"\n// import Building from \"./Building\"\nimport worldMapMaker from \"./WorldMap\"\nimport Language from \"./Language\"\n\nconst models = [\n  worldMapMaker,\n  Language,\n  Citizen,\n  // Building,\n  // arena,\n  // zep,\n  // Avernus,\n  // Society,\n]\n\nexport default models\n\n","\nimport './App.css';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelSelector } from './ModelSelector';\nimport models from './examples';\n\ntype ApplicationProps = {\n  model: IModel\n}\n\nfunction App({ model: initialModel }: ApplicationProps) {\n\n  return <div className=\"App\">\n    {/* @ts-ignore */}\n    <ModelSelector models={models} initialModel={initialModel} />\n  </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport models from './examples';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App model={models[0]} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}