{"version":3,"sources":["ecosphere/utils/where.ts","ecosphere/utils/isString.ts","collections/Map.ts","collections/List.ts","ecosphere/utils/randomInteger.ts","ecosphere/utils/sample.ts","ecosphere/utils/times.ts","ecosphere/utils/MarkovGenerator.ts","ecosphere/utils/replicate.ts","collections/Sequence.ts","ecosphere/Stocks.ts","ecosphere/Registry.ts","ecosphere/Delta.ts","ecosphere/Model/Simulation.ts","ecosphere/Collection.ts","ecosphere/Population.ts","ecosphere/types/index.ts","ecosphere/types/Person.ts","ecosphere/Community.ts","ecosphere/Model/Model.ts","ecosphere/Model/presentItem.tsx","ecosphere/View/Tile.tsx","ecosphere/utils/capitalize.ts","ecosphere/View/presentCommunity.tsx","ecosphere/View/presentIndividual.tsx","ecosphere/View/Heightmap/Lights.tsx","ecosphere/View/Heightmap/Controls.tsx","ecosphere/View/Heightmap/PointOfInterest.tsx","ecosphere/utils/colors.ts","ecosphere/utils/interpolate.ts","ecosphere/View/Heightmap/Tree.tsx","ecosphere/View/Heightmap/Terrain.tsx","ecosphere/View/Heightmap/Scene.tsx","ecosphere/View/Heightmap/HeightmapCanvas.tsx","ecosphere/View/BoardPresenter.tsx","ecosphere/View/ModelView.tsx","ecosphere/Model/index.ts","ModelPresenter.tsx","useModel.tsx","ModelSelector.tsx","ecosphere/Board.ts","ecosphere/utils/any.ts","ecosphere/utils/clamp.ts","ecosphere/utils/distance.ts","ecosphere/utils/first.ts","ecosphere/Heightmap.ts","ecosphere/Dictionary.ts","ecosphere/Languages/Sindarin.ts","ecosphere/Cartographer.ts","examples/WorldMap.ts","ecosphere/Languages/Khuzdul.ts","ecosphere/Languages/Westron.ts","ecosphere/Languages/Common.ts","examples/Language.ts","ecosphere/utils/ordinate.ts","examples/towns/City.ts","examples/index.ts","App.tsx","index.tsx"],"names":["where","key","value","it","isString","String","KeyMap","idFor","nameFor","lookup","_data","k","v","this","namesAndValues","Object","entries","map","Number","fromEntries","List","items","count","length","push","filter","item","cb","forEach","fn","Error","randomInteger","min","max","Math","floor","random","sample","ts","choose","n","results","i","times","MarkovGenerator","ngrams","beginnings","text","beginning","substring","gram","next","charAt","hasOwnProperty","current","output","trim","construct","flatten","arrays","Array","apply","concat","Sequence","NameSequence","nameRoots","nameCount","array","replicate","join","StringGeneratorSequence","baseItems","generatedItems","result","generate","attempts","includes","order","generator","feed","boundMethod","StockManager","stocks","stockId","amount","add","name","remove","list","lookupById","Stocks","elements","ids","storage","attrs","attributes","has","manage","id","theEntity","setAmount","element","find","matching","create","flatMap","manageAll","Registry","popCtor","populations","species","values","x","theSpecies","population","populationList","pop","Delta","model","getStocks","changes","baseline","_store","Simulation","ticks","tracking","dynamics","e","flux","target","report","source","theDelta","manager","_delta","theFlows","flow","table","entry","t","flows","each","dynamism","changed","flowsReport","delta","updated","deltaAmount","Collection","SetHelper","set","populationIds","Population","individuals","Set","theList","individual","size","first","theIndividual","newborn","doomed","destroy","newborns","birth","doneFor","death","build","delete","pick","d100","animalIds","createAnimal","kind","age","guile","health","spirit","cunning","agility","strength","moietyIds","createMind","insight","depth","education","disposition","valor","presence","createSoul","wit","empathy","integrity","beauty","charm","resolve","temperament","roles","idealist","rational","artisan","guardian","personId","human","Community","moieties","obscured","recipes","jobs","Map","worker","inventories","person","job","get","undefined","recipe","personAttrs","moiety","inventory","traits","pets","soul","roleOptions","role","nameConcepts","body","mind","currency","things","meters","createPerson","wealth","sophistication","power","knowledge","createMoiety","resources","produce","mayProduce","consumes","resource","produces","Model","people","machines","animals","metrics","notes","actions","policies","currentPolicy","clear","actionName","args","action","act","policyName","policy","presentItem","deltas","title","className","Tile","children","capitalize","word","replace","c","toUpperCase","titleize","str","split","presentCommunity","community","work","thingNames","thing","itemNames","significance","reverse","reduce","left","right","startsWith","endsWith","style","display","flexDirection","width","fontStyle","fontSize","padding","flexWrap","justifyContent","meterName","measure","htmlFor","color","fontWeight","textTransform","paddingRight","height","low","high","optimum","trait","sort","a","b","description","quality","longDescription","marginBottom","textAlign","alignSelf","Lights","position","intensity","Controls","useState","window","innerWidth","setWidth","handleWindowSizeChange","useEffect","addEventListener","removeEventListener","OrbitControls","FlyControls","movementSpeed","rollSpeed","dragToLook","PointOfInterest","large","indexOf","subtitle","Text","font","anchorX","anchorY","replaceAll","colors","bilinearInterpolator","func","y","x1","x2","ceil","y1","y2","Tree","z","Billboard","scale","attach","transparent","extend","makeImageData","tiles","tileColors","imageSize","tileWidth","tileHeight","grayscaleData","Uint8Array","rgbData","heightAt","parseInt","interpolate","hexValueAt","hex","h","round","colorAt","toLowerCase","interpolateRed","interpolateGreen","interpolateBlue","pos","x0","y0","rgbPos","rgb","grayscale","cachedImageData","Terrain","tokens","evolving","pointsOfInterest","tilemapWidth","meshSize","treeUrl","process","treeMap","useLoader","TextureLoader","err","imgSize","grayscaleTexture","DataTexture","LuminanceFormat","UnsignedByteType","rgbTexture","RGBAFormat","terrainGeometry","toScenePosition","worldPos","sz","sceneScale","displacementMap","displacementScale","shininess","flatShading","trees","tree","opacity","Scene","scene","useThree","background","CubeTextureLoader","load","HeightmapCanvas","isBoardEvolving","frameloop","camera","zoom","near","far","onCreated","rotateX","PI","fallback","BoardPresenter","tileInspect","ModelView","modelName","communities","lastChanges","board","folks","keys","overflow","colSpan","minWidth","view","tilesEvolving","ModelPresenter","send","step","onClick","type","checked","onChange","useModel","initialModel","setModel","setLastChanges","delay","setDelay","shouldStep","shouldSend","doSend","shouldManage","doManage","command","setCommand","setPolicy","isModel","callback","savedCallback","useRef","tick","setInterval","clearInterval","useInterval","performSend","performChoose","maybeModel","AssemblyPresenter","assembly","models","theModel","ModelSelector","options","placeholder","arr","pred","Board","write","character","drawBox","char","filled","overlays","viewTiles","overlay","o","at","neighborPositions","eachCell","defaultValue","newTiles","currentValue","neighbors","newCell","any","clamp","distance","dx","abs","dy","sqrt","Heightmap","matrix","maxHeight","heightUnit","seaLevel","viewHeightAtPos","valueAtPosition","newValues","newValue","smooth","localAverage","mu","ns","tallest","viscosity","evolution","u","pow","erode","adjuster","extrude","positions","raiseGround","extrudeIntensity","intrude","lowerGround","bombard","radius","impactSite","distanceToImpact","craterPositions","craterEdge","d","geoform","hades","mountains","bombardmentRate","evolve","componentNames","_regions","regions","components","val","waterways","ranges","valleys","level","bays","erosionSpeed","smoothSpeed","operations","adapt","operate","consider","componentMap","roundedValue","existingComponentNames","component","firstAdjacentComponentName","theConcepts","Dictionary","languageName","vocabulary","enhanceTranslation","ideas","notion","descriptors","form","translation","translate","nameInverse","lastWord","concepts","acc","concept","index","space","DictionarySequence","dictionary","invertOrder","notions","console","log","replacements","generalEndings","starEndings","sindarinDictionary","abundant","afternoon","apple","autumn","awe","battle","bay","bears","beautiful","bell","bitter","birch","birds","black","blood","blue","bold","bread","candle","cherry","citadel","claws","cloudy","daisy","dandelion","day","deep","dew","divine","dragons","dread","dream","dusk","dusty","eagles","earth","elderberry","elephants","elm","evening","fangs","fate","fell","fire","firmament","fish","foe","forest","fortress","fortunate","freedom","friend","frost","giant","glen","gloom","gold","golden","gray","great","green","harbor","haven","hill","holy","honey","horns","horror","horses","ice","iron","isle","jewel","journey","joy","king","kingdom","laughter","lake","land","light","dark","lily","lofty","lonely","lord","love","magic","mantle","midnight","mist","moon","morning","mound","mountain","music","narrow","needle","night","nightingales","noon","oak","orange","pale","path","peak","peoples","pine","place","point","pool","poppy","prison","quick","rain","rainbow","realm","red","region","river","road","rose","sea","secret","shade","shadow","sharp","ship","silence","silver","skill","sky","slave","small","smith","snakes","snow","sorrow","spark","sparkling","speech","splendid","spring","spruce","starlight","stars","stream","stronghold","summer","sun","swans","sweet","tall","tears","thought","tin","tiny","tomorrow","tower","treasure","tyranny","valley","veil","water","wax","white","wide","willow","wind","wine","winter","holly","garden","queen","prince","princess","cloud","hounds","wolves","embers","soot","ash","salt","void","steam","magma","radiance","island","tx","ending","search","simpleEnhance","Linguist","names","places","waterwayNames","regionNames","rangeNames","valleyNames","bayNames","rawWaterbodyName","_area","rawRegionName","rawRangeName","rawValleyName","rawBayName","area","Cartographer","elevation","Sindarin","linguist","_waterways","_ranges","_valleys","_bays","nameRegion","waterway","nameWaterway","identifyRegion","identifyWaterway","rangeName","range","nameRange","valleyName","nameValley","bayName","nameBay","aeon","identifyRange","identifyValley","identifyBay","WorldMap","mapgenTicks","terrain","vegetation","mountainSpots","areaPercent","cartographer","reset","eon","getRegions","regionName","xsum","ysum","len","li","elevationMessage","identifyRegionOrWaterway","identifyFeatures","Boolean","jitter","ax","ay","bx","by","slope","j","targetSpotCount","randomPosition","chainSpots","randomPositionAlongLine","isleSpots","volcanoes","_value","grass","plants","treeline","alive","treeSigns","genHeightmap","growVegetation","worldMapMaker","khuzdul","roots","vocabOverrides","man","woman","son","daughter","crown","sleep","flower","safe","one","many","heat","cold","run","sing","way","no","eat","drink","good","bad","time","air","cut","all","hard","soft","ore","wing","snake","horse","bear","dog","fear","tooth","heart","over","fight","mere","strong","basics","cove","star","harvest","vault","bird","thirst","teeth","wood","intermediate","dry","food","broad","voice","war","vocab","input","assembleDictionary","horn","delve","Westron","Common","Language","check","translations","idea","Khuzdul","ordinate","num","ord","toString","slice","spiritEntities","date","ticksPerMinute","createCitizen","gender","suffices","nameElements","generateName","firstName","animalConcepts","dragon","elephant","hound","wolf","swan","eagle","nightingale","rooster","toad","owl","lion","falcon","spiritCreature","theConcept","animal","material","startedAt","jobDuration","evolveIndividual","decay","energy","maxEnergy","satiety","maxSatiety","maxJoy","rest","idle","vibe","hunt","trade","mine","assign","task","meatCount","fishCount","completedJob","currentTask","produceJobRewards","elapsed","probability","produceTaskOutcome","timeOfDay","possibleActivities","Meat","Fish","gather","onSuccess","Stone","price","subject","fine","medium","huge","berryCount","warn","shells","storeMeat","storeFish","boughtMeat","boughtFish","soldFish","soldMeat","soldPots","toSell","clay","stone","terrible","adequate","excellent","minutes","hours","days","weeks","seasons","minute","hour","seasonName","monthName","dayOfWeek","dayOfMonth","meridian","normalHour","padStart","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2934b848.chunk.js","sourcesContent":["export function where(key: string, value: any) {\n  return (it: any) => it[key] === value;\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n","import { IMap } from \"./types\";\nexport class KeyMap<K, V> implements IMap<K, V> {\n  _data: { [id: number]: V; } = {};\n  constructor(\n    private idFor: (k: K) => number,\n    private nameFor: (k: K) => string,\n    private lookup: (id: number) => K,\n  ) { }\n  set(k: K, v: V) { this._data[this.idFor(k)] = v; }\n  get(k: K): V { return this._data[this.idFor(k)]; }\n  get report(): { [name: string]: V } {\n    const namesAndValues = Object.entries(this._data)\n      .map(([k, v]) => [this.nameFor(this.lookup(Number(k))), v]);\n    return Object.fromEntries(namesAndValues);\n  }\n}\n","//\n\nimport { IList } from \"./types\";\n\nexport class List<T> implements IList<T> {\n  items: T[] = [];\n  protected get it() { return this.items; }\n  get first(): T { return this.items[0]; }\n  get last(): T { return this.items[this.count - 1]; }\n  get count(): number { return this.items.length; }\n  add(it: T) { this.items.push(it); }\n  remove(it: T) { this.items = this.items.filter(item => item !== it); }\n  each(cb: (it: T) => any) { this.items.forEach(cb); }\n  clear() { this.items = []; }\n  map<U>(fn: (it: T) => any): U[] { return this.items.map(fn) }\n\n  get sample(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n","export function randomInteger(min: number, max: number) {\n  // return min + Math.floor(Math.random() * (max - min));\n  let result = Math.floor(Math.random() * (max - min + 1) + min)\n  // console.log(\"Random integer between \" + min + \" and \" + max + \": \" + result)\n  return result\n}\n","import { randomInteger } from \"./randomInteger\";\nimport { times } from \"./times\";\n\nfunction sample<T>(ts: T[]): T {\n  let i = randomInteger(0,ts.length-1)\n  return ts[i];\n}\n\nfunction choose<T>(n: number, ts: T[]): T[] {\n  return times(n, () => sample(ts))\n}\n\nexport { sample, choose }\n","\nexport function times<T>(n: number, fn: (...args: any) => T): T[] {\n  let results: any[] = []\n  for (let i = 0; i < n; i++) { results.push(fn()) }\n  return results\n}\n","import { sample } from \"./sample\";\n\n// A MarkovGenerate object\nexport class MarkovGenerator {\n  // n - Order (or length) of each ngram\n  // max - What is the maximum amount we will generate?\n  constructor(private n: number, private max: number) {}\n\n  // An object as dictionary\n  // each ngram is the key, a list of possible next elements are the values\n  private ngrams: { [key: string]: string[] } = {};\n  // A separate array of possible beginnings to generated text\n  private beginnings: string[] = [];\n\n  // A function to feed in text to the markov chain\n  feed(text: string) {\n\n    // Discard this line if it's too short\n    if (text.length < this.n) {\n      return false;\n    }\n\n    // Store the first ngram of this line\n    let beginning = text.substring(0, this.n);\n    this.beginnings.push(beginning);\n\n    // Now let's go through everything and create the dictionary\n    for (var i = 0; i < text.length - this.n; i++) {\n      let gram = text.substring(i, i + this.n);\n      let next = text.charAt(i + this.n);\n      // Is this a new one?\n      if (!this.ngrams.hasOwnProperty(gram)) {\n        this.ngrams[gram] = [];\n      }\n      // Add to the list\n      this.ngrams[gram].push(next);\n    }\n  }\n\n  // Generate a text from the information ngrams\n  generate(): string {\n\n    // Get a random  beginning\n    let current = sample(this.beginnings) //.choice();\n    let output = current;\n\n    // Generate a new token max number of times\n    for (var i = 0; i < this.max; i++) {\n      // If this is a valid ngram\n      if (this.ngrams.hasOwnProperty(current)) {\n        // What are all the possible next tokens\n        let possible_next = this.ngrams[current];\n        // Pick one randomly\n        let next = sample(possible_next) //.choice();\n        // Add to the output\n        output += next;\n        // Get the last N entries of the output; we'll use this to look up\n        // an ngram in the next iteration of the loop\n        current = output.substring(output.length - this.n, output.length);\n      } else {\n        break;\n      }\n    }\n    // Here's what we got!\n    return output.trim();\n  }\n}\n","export function construct(fn: () => any, times: number, flatten?: boolean) {\n  // Create an array of size \"n\" with undefined values\n  var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  arrays = arrays.map(fn) //() => fn()) //() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  if (flatten) {\n  return [].concat.apply([], arrays);\n  } else {\n    return arrays;\n  }\n\n}\n\nexport function replicate(array: Array<any>, times: number) {\n  return construct(() => array, times)\n  // Create an array of size \"n\" with undefined values\n  // var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  // arrays = arrays.map(() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  // return [].concat.apply([], arrays);\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { MarkovGenerator } from \"../ecosphere/utils/MarkovGenerator\";\nimport { replicate } from \"../ecosphere/utils/replicate\";\nimport { ISequence } from \"./types\";\n\nexport class Sequence implements ISequence<number> {\n  count = 0;\n  get next(): number { return this.count++; }\n}\n\n// give a infinite list of distinct string names from\n// the alphabet with trailing single-quotes ('prime')\n// giving A, B, C,..., Y, Z then A', B', C', ... A'', B'', C'' ....\nexport class NameSequence implements ISequence<String> {\n  // next: string;\n  private nameRoots = [\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\n    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z',\n    //'a', 'b', 'c', 'd', 'e'\n  ]\n  private nameCount = new Sequence()\n  get next() {\n    let n = this.nameCount.next\n    return this.nameRoots[n % this.nameRoots.length]\n         + (replicate([\"'\"], n).join(''))\n  }\n}\n\nexport abstract class StringGeneratorSequence implements ISequence<string> {\n  baseItems: string[] = []\n  generatedItems: string[] = []\n  abstract generate(): string \n  get next(): string {\n    let result = this.generate()\n    let attempts = 0\n\n    while (\n      (\n        this.baseItems.includes(result)\n        || this.generatedItems.includes(result)\n      )\n      && attempts++ < 100\n    ) {\n      result = this.generate()\n    }\n    this.generatedItems.push(result)\n    return result\n  }\n}\n\nexport class MarkovSequence\n     extends StringGeneratorSequence\n  implements ISequence<string> {\n  generator: MarkovGenerator\n  constructor(private items: string[], order = 2, max = 10) {\n    super()\n    this.generator = new MarkovGenerator(order, max)\n    this.items.forEach(this.feed)\n  }\n\n  @boundMethod\n  feed(it: string) {\n    this.baseItems.push(it);\n    this.generator.feed(it);\n  }\n\n  generate(): string { return this.generator.generate(); }\n}\n","import { BasicEntity } from \"./types/BasicEntity\";\nimport { boundMethod } from 'autobind-decorator'\nimport { where } from \"./utils/where\";\nimport { isString } from \"./utils/isString\";\nimport { ManageStock, ManageStocks } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass StockManager<T extends BasicEntity> implements ManageStock<T> {\n  constructor(private stocks: Stocks<T>, private stockId: number) {}\n  add(amount: number): void { return this.stocks.add(amount, this.name) }\n  remove(amount: number): void { return this.stocks.remove(amount, this.name) }\n  get list(): T[] { return this.stocks.list() }\n  get count(): number { return this.stocks.count(this.name) }\n  get name() { return this.item.name }\n  get item(): T { return this.stocks.lookupById(this.stockId) }\n}\n\nexport class Stocks<T extends BasicEntity> {\n  private ids: Sequence = new Sequence()\n  private storage: { [key: number]: number; } = {}\n\n  constructor(\n    public name: string,\n    private elements: T[] = []\n  ) { }\n\n  @boundMethod\n  list() { return this.elements }\n\n  get _store() { return this.storage }\n\n  public clear() { this.elements = []; this.storage = {} }\n\n  public create(name: string): ManageStock<T>\n  public create(attributes: { name: string } & Omit<T, 'id' | 'name'>): ManageStock<T>\n  /** Create a new type of element to store */\n  @boundMethod\n  public create(attrs: any) {\n    let name: string | null = null;\n    let attributes: Partial<T> = {}\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    if (isString(name) && this.has(name)) {\n      return this.manage(name);\n    }\n    if (!isString(name)) { throw new Error(\"Name must be a string\") }\n    // const elementIds: number[] = this.list().map(({ id }) => id);\n    const id = this.ids.next; //Math.max(0, ...elementIds) + 1;\n    const theEntity: T = { id, name, ...attributes } as T\n    this.list().push(theEntity);\n    const manage: ManageStock<T> = this.manage(name as string)\n    return manage\n  }\n\n  @boundMethod\n  add(amount: number, name: string) {\n    this.setAmount(name, this.count(name) + amount);\n  }\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    // if ()\n    let result = this.count(name) - amount\n    // if (result < 0) console.warn(\"Removal results in less than zero \" + name)\n    this.setAmount(name, result) // this.count(name) - amount);\n  }\n\n  @boundMethod\n  zero(name: string): void {\n    this.setAmount(name, 0);\n  }\n\n  // assume we're trying to remove from elements list...?\n  @boundMethod\n  delete(name: string): void {\n    this.elements = this.elements.filter(it => it.name !== name)\n  }\n\n  @boundMethod\n  count(name: string): number {\n    const element: T = this.lookup(name);\n    const amount = this.storage[element.id] || 0;\n    return amount;\n  }\n\n  has(name: string): boolean {\n    const matching = this.elements.find(where('name', name))\n    return !!matching;\n  }\n\n  @boundMethod\n  lookupById(id: number): T {\n    const matching = this.elements.find(where('id', id))\n    if (matching) {\n      return matching as T;\n    }\n    throw new Error(`No such ${this.name} with id ${id}`);\n  }\n\n  lookup(name: string): T {\n    const matching = this.elements.find(where('name', name))\n    if (matching) {\n      return matching as T;\n    } else {\n      return this.create(name).item\n    }\n  }\n\n  get report(): (T & { amount: number })[] {\n    const items: T[] = this.list()\n    const table = items.flatMap((item: T) => {\n      const id = Number(item.id)\n      const amount = this.storage[id] || 0\n      return { ...item, amount }\n    })\n    return table\n  }\n\n  manage(name: string): ManageStock<T> {\n    return new StockManager<T>(this, this.lookup(name).id)\n  }\n\n  manageAll(): ManageStocks {\n    const { add, remove, count } = this\n    return { add, remove, count, list: () => this.elements }\n  }\n\n  get manager() { return this.manageAll() }\n\n  private setAmount(name: string, amount: number): void {\n    const element: T = this.lookup(name);\n    this.storage[element.id] = amount;\n  }\n}\n","import { Population } from \"./Population\";\nimport { BasicEntity } from \"./types/BasicEntity\";\nimport { Entity, ManageStocks } from \"./types\";\nimport { boundMethod } from \"autobind-decorator\";\n\n// eg map animal (species) names to populations of individual animals...\n\nexport class Registry<U extends BasicEntity, T extends Entity<U>, Pop extends Population<U,T>> {\n  populations: { [species: string]: Pop } = {};\n  species: { [species: string]: U } = {}\n  constructor(\n    public name: string,\n    public popCtor: new (name: string, specie: U) => Pop\n  ) {}\n\n  clear() {\n    this.populations = {}\n  }\n\n  @boundMethod\n  lookup(name: string): Pop {\n    if (this.has(name)) {\n      return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${name}'`);\n    }\n  }\n\n  @boundMethod\n  lookupById(id: number): U { //Population<U,T> {\n    const matching = Object.values(this.species).find(x => x.id === id)\n    if (matching) { //this.has(name)) {\n      return matching\n      // return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${id}'`);\n    }\n  }\n\n  has(name: string): boolean {\n    return this.populations.hasOwnProperty(name);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    return this.lookup(name).count;\n  }\n\n  @boundMethod\n  list(): U[] {\n    return Object.values(this.species)\n  }\n\n  listByName(name: string): T[] {\n    return this.lookup(name).list();\n  }\n\n  @boundMethod\n  create(name: string, species?: Omit<U, 'name' | 'id'>): Pop { //Population<U,T> {\n    if (this.has(name)) {\n      return this.lookup(name);\n    }\n    let theSpecies: U = { ...species, name, id: this.list().length+1 } as unknown as U; // species.kind points back to name...\n    let population: Pop = new this.popCtor(name, theSpecies);\n    this.populations[name] = population;\n    this.species[name] = theSpecies;\n    return population;\n  }\n\n  get populationList(): Population<U,T>[] { return Object.values(this.populations)}\n\n  get report() {\n    const pops = this.populationList.flatMap((population: Population<U,T>) => {\n      const pop = population\n      if (pop.count > 0) {\n        return { name: pop.name, amount: pop.count}\n      } else {\n        return []\n      }\n    })\n    return pops\n  };\n\n  @boundMethod\n  add(amount: number, name: string): void {\n    this.lookup(name).add(amount)\n  };\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.lookup(name).remove(amount)\n  };\n\n  manageAll(): ManageStocks {\n    const { add, remove, count, list } = this\n    return { add, remove, count, list }\n  }\n  get manager() { return this.manageAll() }\n}\n","import { Model } from \"./Model\";\nimport { Registry } from \"./Registry\";\nimport { Stocks } from \"./Stocks\";\nexport type DeltaSource = Stocks<any> | Registry<any, any, any> \n//<U extends BasicEntity, T extends Entity<U>> = Stocks<T> | Registry<U,T>\nexport type DeltaSourceManager = { add: Function, remove: Function, count: Function, list: Function }\nexport class Delta {\n  public changes: Stocks<any>;\n  constructor(public model: any, public getStocks: (model: Model) => DeltaSource) {\n    let baseline = this.getStocks(model)\n    this.changes = new Stocks(`${baseline.name} (delta)`, baseline.list());\n  }\n  get storage() { return this.changes._store }\n  // evolve(t: number): Delta {\n  //   let stocks = this.getStocks(this.model)\n  //   const flow = { [stocks.name]: stocks.manageAll() }\n  //   this.model.dynamics.each(dynamism => dynamism(flow, t));\n  //   return this;\n  // }\n}\n","import { List } from \"../../collections\";\nimport { Delta, DeltaSource } from \"../Delta\";\nimport { Entity, EvolvingStocks, TimeEvolution } from \"../types\";\nimport { ISimulation } from \"./ISimulation\";\n\nexport abstract class Simulation implements ISimulation {\n  protected ticks: number = 0;\n  protected tracking: string[] = []\n  public dynamics = new List<TimeEvolution>()\n  constructor(public name: string) { }\n  public evolve(e: TimeEvolution) { this.dynamics.add(e) }\n  public step() { return this.flux(this.ticks++) }\n\n  public get report() {\n    return Object.fromEntries(this.tracking.map(target =>\n      [target, (this as any)[target].report]\n    ))\n  }\n\n  private flow(target: string) {\n    const source = (this as any)[target]\n    const theDelta = new Delta(this, (model) => (model as any)[target])\n    const { add, remove } = theDelta.changes.manager\n    const { list, count, lookupById } = source\n    return { lookupById, _delta: theDelta, add, remove, list, count }\n  }\n  \n  private flows(): { [key: string]: { _delta: Delta, lookupById: Function, add: Function } } {\n    const theFlows: {[key: string]: any} = {}\n    this.tracking.forEach(target => theFlows[target] = this.flow(target))\n    return theFlows\n  }\n\n  private flowsReport(flow: { [s: string]: any }) {\n    const table: { [key: string]: any } = {}\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = flow._delta\n      table[name] = Object.fromEntries(\n        Object\n          .entries(theDelta.storage)\n          .map(entry => {\n            const [id, amount] = entry\n            const name = flow.lookupById(Number(id)).name\n            return [ name, amount ]\n          })\n      )\n    })\n    return table\n  }\n\n  private flux(t: number) {\n    const flow: EvolvingStocks = this.flows() as any as EvolvingStocks\n    this.dynamics.each(dynamism => dynamism(flow, t));\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = (flow as any)._delta\n      this.apply(theDelta, name)\n    })\n    return { changed: this.flowsReport(flow) }\n  }\n\n  private apply(delta: Delta, target: string) {\n    const source: DeltaSource = (this as any)[target] as DeltaSource\n    const manager = source.manager\n    const list = manager.list()\n    const { storage: updated } = delta;\n    const changed: { [elementName: string]: number; } = {};\n    list.forEach((item: Entity<any>) => {\n      if (updated[item.id]) {\n        const deltaAmount = updated[item.id];\n        manager.add(deltaAmount, item.name);\n        changed[item.name] = deltaAmount;\n      }\n    });\n    return { changed };\n  }\n}\n","import { List, Sequence } from \"../collections\";\nimport { IList } from \"../collections/types\";\nimport { BasicEntity } from \"./types/BasicEntity\";\n\nclass Collection<T extends BasicEntity> extends List<T> implements IList<T> {\n  list() { return this.items }\n  private ids = new Sequence()\n  get names(): string[] {\n    // throw new Error('Method not implemented.');\n    return this.items.map(item => item.name)\n  }\n  // private get ids() { return this.it.map(({ id }) => id) }\n  create(attributes: Partial<T>): T {\n    const id = this.ids.next;\n    const theEntity: T = { id, ...attributes } as unknown as T;\n    this.items.push(theEntity);\n    return theEntity\n  }\n\n  lookup(name: string) {\n    return this.items.find(it => it.name === name)\n  }\n}\n\nexport { Collection }\n","import { isString } from \"./utils/isString\";\nimport { boundMethod } from \"autobind-decorator\";\nimport { Entity } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass SetHelper {\n  static first<T>(set: Set<T>): T { return set.values().next().value }\n}\n\n// a collection of named individuals...\nconst populationIds: Sequence = new Sequence()\nexport class Population<Specie, Dividual extends Entity<Specie>> {\n  public id = populationIds.next\n  private ids: Sequence = new Sequence()\n  constructor(\n    public name: string,\n    public species?: Specie,\n    protected individuals: Set<Dividual> = new Set(),\n  ) {}\n\n  list() { \n    const theList: Dividual[] = []\n    this.individuals.forEach(individual => theList.push(individual))\n    return theList;\n  }\n  get count() { return this.individuals.size }\n  get first() { \n    return SetHelper.first(this.individuals)\n   }\n  public lookup(name: string): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.name === name) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with name '${name}' in the population of ${this.name}`)\n  }\n\n  @boundMethod\n  public lookupById(id: number): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.id === id) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with id ${id} in the population of ${this.name}`)\n  };\n\n  public birth(name: string = `${this.name} ${this.count}`): Dividual {\n    const newborn = this.create(name)\n    return newborn\n  }\n\n  @boundMethod\n  public death(name?: string): Dividual {\n    if (name) {\n      const doomed = this.destroy(name)\n      if (doomed) {\n        return doomed\n      }\n    } else {\n      const doomed = this.first\n      if (doomed) {\n        this.destroy(doomed.name)\n        return doomed\n      }\n    }\n    throw new Error(\"Population already empty!\")\n  }\n\n  public add(amount: number) {\n    const newborns = []\n    for (let i = 0; i < amount; i++) {\n      newborns.push(this.birth())\n    }\n    return newborns\n  }\n\n  public remove(amount: number) {\n    const doneFor = []\n    for (let i = 0; i < Math.min(this.count, amount); i++) {\n      doneFor.push(this.death(this.first.name))\n    }\n    return doneFor\n  }\n\n  protected build(attrs: any) {\n    let name = null;\n    let attributes: Partial<Dividual> = {};\n    // console.log(attrs)\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    \n    const id = this.ids.next; //Math.max(0, ...this.ids) + 1;\n    const theIndividual: Dividual = { id, name, ...attributes } as unknown as Dividual;\n    return theIndividual;\n  }\n\n\n  public create(name: string): Dividual;\n  public create(attrs: Partial<Dividual>): Dividual;\n  @boundMethod\n  public create(attrs: any) {\n    const theIndividual: Dividual = this.build(attrs)\n    this.individuals.add(theIndividual);\n    return theIndividual;\n  }\n\n  public destroy(name: string): Dividual;\n  @boundMethod\n  public destroy(name: string) {\n    const theIndividual: Dividual = this.lookup(name)\n    this.individuals.delete(theIndividual);\n    return theIndividual;\n  }\n\n  get report() {\n    return Object.fromEntries(this.list().map(individual => {\n      return [individual.id, individual.name];\n    }))\n  }\n}\n","import { Sequence } from \"../../collections\"\nimport { randomInteger } from \"../utils/randomInteger\"\nimport { sample } from \"../utils/sample\"\nimport { BasicEntity } from \"./BasicEntity\"\nimport { Person } from \"./Person\"\n\nexport type Substance = BasicEntity\nexport type Entity<T> = BasicEntity & { kind: T }\n\nexport type Quality = 'terrible' | 'adequate' | 'good' | 'excellent'\nexport type Size = 'fine' | 'small' | 'medium' | 'large' | 'huge'\n\n// kinds of objects...\ntype Kind = 'sculpture' // 'art'\n\n// substances objects can be made of...\nexport type Material = 'clay' | 'wood' | 'stone' | 'iron' //  | 'gold' | 'silver' | 'crystal'\n\n// instances of objects...\nexport type Item = Entity<Kind> & {\n  material?: Material\n  quality?: Quality\n  size?: Size\n  description: string\n  longDescription?: string\n  // provenance ...\n  // for artwork: concepts... styles...\n}\n\n\nexport type Species = BasicEntity & {\n  name: string\n  size?: Size\n  fitness?: Quality\n  material?: Substance\n}\n\nexport type Individual<T> = Entity<T> & {\n  age: number // maybe simpler to do bornAt?\n}\n\n\nexport type Creature<T> = Individual<T> & {\n  health: 'dying' | 'unwell' | 'flourishing' | 'triumphant'\n}\n\nexport function pick<T>(elements: T[]): T {\n  const d100 = randomInteger(0,100)\n  if (d100 > 98) {\n    return elements[3]\n  } else if (d100 < 2) {\n    return elements[0]\n  }\n\n  return sample([elements[1], elements[2]])\n}\n\ntype Spirit = 'languorous' | 'vigorous' | 'impetuous' | 'ferocious'\ntype Strength = 'weak' | 'robust' | 'mighty' | 'indomitable'\ntype Cunning = 'foolish' | 'sly' | 'crafty' | 'manipulative'\n//'dim' | 'attentive' | 'creative' | 'ingenious'\ntype Agility = 'clumsy' | 'nimble' | 'spry' | 'balletic'\ntype Guile = 'transparent' | 'convincing' | 'beguiling' | 'insidious'\n\nexport type PhysicalQuality = Spirit | Strength | Cunning | Agility | Guile\n\nexport type Animal = Creature<Species> & {\n  spirit: Spirit\n  strength: Strength\n  cunning: Cunning\n  guile: Guile\n  agility: Agility\n}\n\n\nconst animalIds = new Sequence()\nexport const createAnimal = (name: string, species: Species): Animal => {\n  return {\n    id: animalIds.next,\n    name,\n    kind: species,\n    age: 0,\n    guile: pick([ 'transparent', 'convincing', 'beguiling', 'insidious' ]),\n    health: pick(['dying', 'unwell', 'flourishing', 'triumphant']),\n    spirit: pick(['languorous', 'vigorous', 'impetuous', 'ferocious']),\n    cunning: pick(['foolish', 'sly', 'crafty', 'manipulative']),\n    agility: pick(['clumsy', 'nimble', 'spry', 'balletic']),\n    strength: pick(['weak', 'robust', 'mighty', 'indomitable']),\n  }\n}\n\nexport type Recipe = BasicEntity & {\n  time?: number\n  probability?: number\n\n  produces?: { [resourceName: string]: number }\n  consumes?: { [resourceName: string]: number }\n  requiresMachine?: string\n  onSuccess: (worker: Person, _recipe: Recipe) => void\n}\n\nexport type Machine = BasicEntity\n// export type Structure ....\n\nexport type ManageStocks = {\n  add: (amount: number, name: string) => void,\n  remove: (amount: number, name: string) => void,\n  count: (name: string) => number,\n  list: () => any[]\n}\n\nexport type ManageStock<T> = {\n  add: (amount: number) => void,\n  remove: (amount: number) => void,\n  count: number,\n  item: T\n}\n\nexport type ManagePopulation<T> = {\n  count: number\n  birth: (name: string) => T\n  death: (name: string) => T\n  add: (amount: number) => T[]\n  remove: (amount: number) => T[]\n}\n\nexport type ManagePopulationRegistry<T> = {\n  lookup: (name: string) => ManagePopulation<T>\n}\n\n// todo rename\nexport interface EvolvingStocks {\n  [key: string]: ManageStocks\n}\nexport type TimeEvolution = (evolution: EvolvingStocks, ticks: number) => void\n\nexport type StepResult = {\n  changed: { \n    [groupName: string]: { [elementName: string]: number }\n  }\n}\n\n// todo move these model/sim things somewhere else???\nexport type Action = { id: number, name: string, act: Function }\nexport type Policy = { id: number, name: string, manage: Function }\n\nexport type { Person };\n","import { Animal, Quality, Individual, ManageStocks, Item, Species, createAnimal, pick, PhysicalQuality } from \".\"\nimport { Sequence } from \"../../collections\"\nimport { Concept } from \"../Dictionary\"\nimport { Stocks } from \"../Stocks\"\nimport { sample } from \"../utils/sample\"\nimport { BasicEntity } from \"./BasicEntity\"\n\ntype Wealth = 'impoverished' | 'well-off' | 'luxuriant' | 'decadent'\ntype Sophistication = 'unpretentious' | 'savvy' | 'urbane' | 'sleek'\ntype Power = 'inconsequential' | 'marginal' | 'influential' | 'sovereign'\ntype Knowledge = 'clueless' | 'well-informed' | 'wise' | 'prescient'\n\ntype SocialQuality = Wealth | Sophistication | Power | Knowledge\n\nexport type Moiety = BasicEntity & {\n  wealth: Wealth\n  sophistication: Sophistication\n  power: Power\n  knowledge: Knowledge\n}\n\nconst moietyIds = new Sequence()\nexport const createMoiety = (name: string): Moiety => {\n  const wealth: Wealth = pick([ 'impoverished', 'well-off', 'luxuriant', 'decadent' ])\n  const sophistication: Sophistication = pick([ 'unpretentious', 'savvy', 'urbane', 'sleek' ])\n  const power: Power = pick([ 'inconsequential', 'marginal', 'influential', 'sovereign' ])\n  const knowledge: Knowledge = pick([ 'clueless', 'well-informed', 'wise', 'prescient' ])\n  // const tech: Technology = pick([ 'lost', 'primitive', 'archaic', 'advanced' ])\n  return { id: moietyIds.next, name, wealth, sophistication, power, knowledge } //, tech }\n}\n\ntype Body = Animal\n\ntype Insight = 'dense' | 'intuitive' | 'incisive' | 'brilliant'\ntype Depth = 'superficial' | 'substantial' | 'profound' | 'inscrutable'\ntype Education = 'unlettered' | 'literate' | 'tutored' | 'well-read'\ntype Disposition = 'dismal' | 'hopeful' | 'propitious' | 'roseate'\ntype Valor = 'timid' | 'bold' | 'courageous' | 'fearless'\ntype Presence = 'bland' | 'charismatic' | 'captivating' | 'magnetic' \n\ntype MentalQuality = Insight | Depth | Education | Disposition | Valor | Presence\nexport type MentalAttribute = 'insight' | 'depth' | 'education' | 'disposition' | 'valor' | 'presence'\n\ntype Mind = {\n  insight: Insight\n  depth: Depth\n  education: Education\n  disposition: Disposition\n  valor: Valor\n  presence: Presence\n}\n\nexport const createMind = (): Mind => {\n  const insight: Insight = pick([ 'dense', 'intuitive', 'incisive', 'brilliant' ])\n  const depth: Depth = pick([ 'superficial', 'substantial', 'profound', 'inscrutable' ])\n  const education: Education = pick([ 'unlettered', 'literate', 'tutored', 'well-read' ])\n  const disposition: Disposition = pick([ 'dismal', 'hopeful', 'propitious', 'roseate' ])\n  const valor: Valor = pick([ 'timid', 'bold', 'courageous', 'fearless' ])\n  const presence: Presence = pick([ 'bland', 'magnetic', 'charismatic', 'captivating' ])\n  return { insight, depth, education, disposition, valor, presence }\n}\n\ntype Wit = 'slow' | 'clever' | 'biting' | 'savage'\ntype Empathy = 'sadistic' | 'generous' | 'benevolent' | 'selfless'\ntype Integrity = 'uncertain' | 'sound' | 'solid' | 'incorruptible'\ntype Beauty = 'ugly' | 'fair' | 'radiant' | 'resplendent'\ntype Charm  = 'repulsive' | 'inoffensive' | 'affable' | 'likeable'\ntype Resolve = 'vacillating' | 'steadfast' | 'intrepid' | 'relentless'\ntype Temperament = 'guardian' | 'artisan' | 'rational' | 'idealist'\n\ntype SpiritualQuality = Wit\n                      | Empathy\n                      | Integrity\n                      | Beauty\n                      | Charm\n                      | Resolve\n                      | Temperament\n\ntype Soul = {\n  wit: Wit\n  empathy: Empathy\n  integrity: Integrity\n  beauty: Beauty\n  charm: Charm\n  resolve: Resolve\n  temperament: Temperament\n}\n\n\nexport const createSoul = (): Soul => {\n  const wit: Wit = pick([ 'slow', 'clever', 'biting', 'savage' ])\n  const empathy: Empathy = pick([ 'sadistic', 'generous', 'benevolent', 'selfless' ])\n  const integrity: Integrity = pick([ 'uncertain', 'sound', 'solid', 'incorruptible' ])\n  const beauty: Beauty = pick([ 'ugly', 'fair', 'radiant', 'resplendent' ])\n  const charm: Charm = pick([ 'repulsive', 'inoffensive', 'affable', 'likeable' ])\n  const resolve: Resolve = pick([ 'vacillating', 'steadfast', 'intrepid', 'relentless' ])\n  const temperament: Temperament = pick([ 'guardian', 'artisan', 'rational', 'idealist'])\n  \n  return { wit, empathy, integrity, beauty, charm, resolve, temperament }\n}\n\n// export type Memory = { id: number, name: string, description: string }\n\ntype IndividualQuality = PhysicalQuality | SocialQuality | MentalQuality | SpiritualQuality\nexport type PhysicalAttribute = 'spirit' | 'strength' | 'cunning' | 'agility' | 'guile'\nexport type SocialAttribute =  'wealth' | 'sophistication' | 'power' | 'knowledge'\nexport type SpiritualAttribute = 'wit' | 'empathy' | 'integrity' | 'beauty' | 'charm' | 'resolve' | 'temperament'\ntype AttributeMatrix = {\n  physical: { [key in PhysicalAttribute]: PhysicalQuality[] },\n  social: { [key in SocialAttribute]: SocialQuality[] },\n  mental: { [key in MentalAttribute]: MentalQuality[] },\n  spiritual: { [key in SpiritualAttribute]: SpiritualQuality[] },\n}\n\nexport const attributes: AttributeMatrix = {\n  physical: {\n    spirit: [ 'languorous', 'vigorous', 'impetuous', 'ferocious' ],\n    strength: [ 'weak', 'robust', 'mighty', 'indomitable' ],\n    cunning: [ 'foolish', 'sly', 'crafty', 'manipulative' ],\n    agility: [ 'clumsy', 'nimble', 'spry', 'balletic' ],\n    guile: [ 'transparent', 'convincing', 'beguiling', 'insidious' ],\n  },\n\n  social: {\n    wealth: [ 'impoverished', 'well-off', 'luxuriant', 'decadent' ],\n    sophistication: [ 'unpretentious', 'savvy', 'urbane', 'sleek' ],\n    power: [ 'inconsequential', 'marginal', 'influential', 'sovereign' ],\n    knowledge: [ 'clueless', 'well-informed', 'wise', 'prescient' ]\n\n  },\n  mental: {\n    insight: ['dense' , 'intuitive' , 'incisive' , 'brilliant' ],\n    depth:[ 'superficial' , 'substantial' , 'profound' , 'inscrutable' ],\n    education:[ 'unlettered' , 'literate' , 'tutored' , 'well-read'],\n    disposition:[ 'dismal' , 'hopeful' , 'propitious' , 'roseate'],\n    valor: [ 'timid' , 'bold' , 'courageous' , 'fearless'],\n    presence: [ 'bland' , 'charismatic' , 'captivating' , 'magnetic' ]\n    \n  },\n  spiritual: {\n    wit: [ 'slow', 'clever', 'biting', 'savage' ],\n    empathy: [ 'sadistic', 'generous', 'benevolent', 'selfless' ],\n    integrity: [ 'uncertain', 'sound', 'solid', 'incorruptible' ],\n    beauty: [ 'ugly', 'fair', 'radiant', 'resplendent' ],\n    charm: [ 'repulsive', 'inoffensive', 'affable', 'likeable' ],\n    resolve: [ 'vacillating', 'steadfast', 'intrepid', 'relentless' ],\n    temperament: [ 'guardian', 'artisan', 'rational', 'idealist' ],\n  },\n}\nexport const judge = (quality: IndividualQuality): Quality => {\n  const qualityValues: Quality[] = ['terrible', 'adequate', 'good', 'excellent']\n  const matrix = attributes;\n  let result = null\n  Object.entries(matrix).forEach(([attributeGroupName, attributeGroup]) => {\n    Object.entries(attributeGroup).forEach(([attributeName, qualities]) => {\n      qualities.forEach((q: IndividualQuality) => {\n        // console.log(\"compare\", { q, quality })\n         if (q===quality) {\n           result = qualityValues[qualities.indexOf(q)]\n         }\n      })\n    })\n  })\n  if (result === null) {\n  throw new Error(\"Cannot judge unknown quality \" + quality)\n  } else {\n    return result\n  }\n}\n\ntype Rational = 'inventor' | 'architect' | 'fieldmarshal' | 'mastermind'\ntype Idealist = 'champion' | 'healer' | 'teacher' | 'counselor'\ntype Artisan = 'performer' | 'composer' | 'persuader' | 'crafter'\ntype Guardian = 'provider' | 'protector' | 'supervisor' | 'inspector'\n\ntype SocialRole = Idealist\n                | Rational\n                | Artisan\n                | Guardian\n\nconst roles: { [key in Temperament]: SocialRole[] } = {\n  idealist: [ 'champion', 'healer',    'teacher',      'counselor' ],\n  rational: [ 'inventor', 'architect', 'fieldmarshal', 'mastermind' ],\n  artisan: [ 'performer', 'composer',  'persuader',    'crafter' ],\n  guardian: [ 'provider', 'protector', 'supervisor',   'inspector' ],\n}\n\nexport type Person = Individual<Moiety> & {\n  nameConcepts: Concept[]\n  body: Body\n  mind: Mind\n  soul: Soul\n  role: SocialRole\n  things: ManageStocks\n  items: Stocks<Item>\n  pets: Stocks<Animal>\n  currency: number\n  traits: ManageStocks\n  meters: () => { [meterName: string]: Function }\n  // memory: Collection<Memory>\n}\n\nconst personId = new Sequence()\nconst human: Species = { id: -1, name: 'Human Being', size: 'medium' }\nexport const createPerson = (name: string, moiety: Moiety, attrs: Partial<Person> = {}): Person => {\n\n  const inventory = new Stocks<any>(`${name}'s Things`)\n  const traits = new Stocks<any>(`${name}'s Traits`)\n  const items = new Stocks<Item>(`${name}'s Items`)\n    const pets = new Stocks<Animal>(`${name}'s Pets`);\n  // const state = new Stocks<any>(`${name}'s State`)\n    // personAttrs.things = inventory.manageAll()\n    const soul: Soul = createSoul()\n    let roleOptions = roles[soul.temperament]\n    // if (soul.temperament === 'rational') {\n\n    // }\n\n\n\n  return {\n    id: personId.next,\n    kind: moiety,\n    role: sample(roleOptions),\n    nameConcepts: [],\n    // kind: createMoiety()\n    name,\n    age: 0,\n    body: createAnimal(name, human),\n    mind: createMind(),\n    soul,\n    // rank: 'commoner',\n    // reputation: 'unknown',\n    currency: 0,\n    items, //.manageAll(),\n    things: inventory.manageAll(),\n    traits: traits.manageAll(),\n    pets,\n\n    // stats: state.manageAll()\n    // things: new M\n    meters: () => { return {}},\n    // memory: new Collection<Memory>(),\n    ...attrs,\n  }\n\n}\n","import { List, Map } from '../collections';\nimport { Recipe, ManageStocks } from \"./types\";\nimport { Population } from \"./Population\";\nimport { Collection } from \"./Collection\";\nimport { boundMethod } from 'autobind-decorator';\nimport { Moiety, Person, createPerson, createMoiety } from './types/Person';\n\ntype Job = { recipe: Recipe, startedAt?: number }\n\nexport class Community extends Population<Moiety, Person> {\n  moieties: List<Moiety> = new List<Moiety>();\n  obscured: boolean = false // don't display details\n   \n  public recipes = new Collection<Recipe>();\n  public jobs = new Map<Person, Job>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  );\n\n\n  public inventories = new Map<Person, ManageStocks>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  )\n\n  get report(): { [personName: string]: string; } {\n    const entries = this.list()\n      .map(person => {\n        let job =this.jobs.get(person)\n        return [person.id, (job !== undefined && job.recipe !== undefined) ? job.recipe.name : '?'];\n      });\n    return Object.fromEntries(entries);\n  }\n\n  // okay if we need to override create + build inventories let's do it ??\n  public create(name: string): Person;\n  public create(attrs: Partial<Person>): Person;\n  @boundMethod\n  public create(attrs: any) {\n    const personAttrs = super.build(attrs);\n    const { name, age } = personAttrs;\n    const person: Person = createPerson(name, createMoiety(`${name}'s Gens`), attrs) //, this.species)\n    person.age = age\n    this.individuals.add(person)\n    return person\n  }\n\n  work({ resources }: { resources: { add: Function; remove: Function; count: Function; }; }): void {\n    const { report } = this.jobs;\n    Object.entries(report).forEach(([_workerName, job]: [string, Job]) => {\n      if (job && job.recipe) { this.produce(job.recipe, resources) };\n    });\n  }\n  \n  private produce(recipe: Recipe, resources: { add: Function; remove: Function; count: Function; }) {\n    if (this.mayProduce(recipe, resources)) {\n      if (recipe.consumes) {\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          resources.remove(amount, resource);\n        });\n      }\n      Object.entries(recipe.produces || {}).forEach(([resource, amount]) => {\n        resources.add(amount, resource);\n      });\n    }\n  }\n\n  private mayProduce(recipe: Recipe, resources: { count: Function; }) {\n    let mayProduce = true;\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (resources.count(resource) < amount) {\n          mayProduce = false;\n        }\n      });\n    }\n    return mayProduce;\n  }\n\n}\n","import { Substance, Machine, Animal, Species, Action, Policy, Person } from \"../types\"\nimport { Stocks } from \"../Stocks\"\nimport { Registry } from \"../Registry\"\nimport { Simulation } from \"./Simulation\"\nimport { IModel } from \"./IModel\"\nimport { Collection } from \"../Collection\"\nimport { Community } from \"../Community\"\nimport { Population } from \"../Population\"\nimport { Tiles } from \"../Board\"\nimport { Moiety } from \"../types/Person\"\n\ntype Fauna = Population<Species, Animal>\nexport class Model extends Simulation implements IModel  {\n  tracking = [ 'animals', 'resources' ]\n  get tiles(): Tiles { return [] }\n  get tokens() { return {} }\n\n  public people = new Registry<Moiety, Person, Community>('people', Community)\n  public resources = new Stocks<Substance>('resources')\n  public machines  = new Stocks<Machine>('machines')\n  public animals   = new Registry<Species, Animal, Fauna>('wildlife', Population)\n\n  reset() {\n    this.resources.clear()\n    this.machines.clear()\n    this.animals.clear()\n    this.people.clear()\n    this.dynamics.clear()\n  }\n\n  // measurements\n  public metrics: { [name: string]: () => number } = {}\n  public notes: { [name: string]: () => string } = {} //() => { return {}}\n\n  // interactive elements\n  public actions: Collection<Action> = new Collection<Action>()\n  public policies: Collection<Policy> = new Collection<Policy>()\n\n  send(actionName: string, args: any): void {\n    const action = this.actions.lookup(actionName)\n\n    if (action) {\n      action.act(args)\n    } else {\n      throw new Error(`No such action ${actionName}`)\n    }\n  }\n\n  currentPolicy: Policy | undefined\n  choose(policyName: string): void {\n    // console.log(\"[Model.choose]\", policyName)\n    const policy = this.policies.lookup(policyName)\n    if (policy) {\n      this.currentPolicy = policy\n    } else {\n      throw new Error(`No such policy ${policyName}`)\n    }\n  }\n\n  public step() {\n    if (this.currentPolicy) {\n      // console.log(\"MANAGING\", { policy: this.currentPolicy })\n      this.currentPolicy.manage()\n    }\n    return super.step()\n  }\n}\n\nexport default Model;\n","import { prettyAmount } from \"../utils/prettyAmount\";\n\nexport function presentItem(deltas?: { [elementName: string]: number; }) {\n  return ({ name, amount }: { name: string; amount: number; }) => {\n    const delta = deltas && deltas[name];\n    return <li key={name} title={name} className='Item'>\n      <span className='Title' data-testid='Name'>{name}</span>\n      <span data-testid='Count'>\n        {prettyAmount(amount)}\n      </span>\n      <span data-testid='Delta'>\n        {delta}\n      </span>\n    </li>;\n  };\n}\n","export function Tile({ children, title }: { children?: React.ReactNode; title: string; }) {\n  return <div className='Tile' title={title}>\n    {/* <h5 className='Title'>{title}</h5> */}\n    {children}\n  </div>;\n}\n","\nexport const capitalize = (word: string) => word.replace(/^\\w/, c => c.toUpperCase()) \nexport const titleize = (str: string) => str.split(' ').map(word => capitalize(word)).join(' ');\n","import { Tile } from \"./Tile\";\nimport { Community } from \"../Community\";\nimport { presentIndividual } from \"./presentIndividual\";\n\nexport function presentCommunity(community: Community) {\n  return <Tile title={community.name} key={community.id}>\n    <ul aria-label='People'>\n      {community.obscured ? community.list().map(individual => <li key={individual.id}>{individual.name}</li>)\n                          : community.list().map(presentIndividual(community.report))}\n    </ul>\n  </Tile>;\n}\n","import { Concept } from \"../Dictionary\";\nimport { Stocks } from \"../Stocks\";\nimport { Item, ManageStocks } from \"../types\";\nimport { capitalize } from \"../utils/capitalize\";\n\n\nexport function presentIndividual(work: { [key: number]: string; }) {\n  return ({ id, name, things, traits, items, nameConcepts, meters }: {\n    id: number;\n    name: string;\n    // nameSignificance?: string;\n    nameConcepts: Concept[]\n    things: ManageStocks;\n    items: Stocks<Item>;\n    traits: ManageStocks;\n    meters: () => { [key: string]: Function }\n  }) => {\n    const thingNames = things.list().map(thing => thing.name);\n    const itemNames =  items.list().map(it => it.name)\n    const significance = (nameConcepts.map(n => capitalize(n)).reverse()).reduce((left: string, right: string) => {\n      if (right.startsWith('-')) { return left + right }\n      if (left.startsWith('-') || right.endsWith('-')) { return right + left }\n      return left + ' ' + right;\n    }, '') //.join(' ').trim(); //.replaceAll('-', ''));\n\n    const showThings = true, showTraits = false\n\n    return <li key={id} title={name} className='Item' style={{display: 'flex', flexDirection: 'column', width: '500px'}}>\n      <div className='Title' data-testid='Name'>\n        {name}\n      </div>\n      {significance && <div className='Subtitle' data-testid='Significance of Name' style={{ fontStyle: 'italic', fontSize:' 10pt' }}>\n        {significance}\n      </div>}\n      <div className='Meters' style={{ padding: '1px', display: 'flex', flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'center' }}>\n      {Object.entries(meters()).map(([meterName, measure]) => {\n        const { value, max } = measure()\n        return <div className='Meter' data-testid={meterName} style={{display: 'flex', width: '100px', flexDirection: 'row', flexWrap: 'wrap', padding: '2px'}}>\n          <label htmlFor={meterName} style={{fontSize: '8.5pt', color: 'white', fontWeight: 'lighter', textTransform: 'uppercase', paddingRight: '8px'}}>{meterName}</label>\n          <meter id={meterName}\n                 style={{ width:100, height: 14 }}\n                 min=\"0\" max={max}\n                 low={max * 0.33} high={max * 0.66} optimum={max * 0.8}\n                 value={value}>\n              at {value}/{max}\n          </meter>\n        </div>\n      })}\n      </div>\n      {work[id] && <span data-testid='Status' style={{ display: 'none' }}>{work[id]}</span>}\n      {traits.list().length > 0 && <div className='Traits' data-testid='Trait Ranks' style={{ display: showTraits ? 'block' : 'none' }}>\n        <ul>\n          {traits.list().map(trait => <li key={trait.id} style={{\n              ...(traits.count(trait.name) === 0 ? { display: 'none' } : {})\n            }}>\n            <b>{trait.name}</b>\n            <span data-testid={trait.name}>{traits.count(trait.name)}</span>\n          </li>)}\n        </ul>\n      </div>}\n      {itemNames.length > 0 && <div className='Items' data-testid='Possessions'>\n        <ul>\n          {itemNames.sort((a,b) => a > b ? 1 : -1).map(it => <li key={it} style={{\n            fontSize: '9pt',\n            display: 'flex',\n            flexDirection: 'column',\n            }}>\n              <div>\n              <span style={{color:'lightgray'}} title={items.lookup(it).description}>- {it}</span>\n              &nbsp;\n              <span style={{fontSize: '6.5pt'}}>\n                {items.lookup(it).description}\n                &nbsp;\n                <span style={{color:'darkslategray'}}>\n                  ({items.lookup(it).quality && items.lookup(it).quality})\n                </span>\n              </span>\n              </div>\n              {items.lookup(it).longDescription &&\n              <div style={{fontSize: '6pt', color: '#50403c', padding: '4px', marginBottom: '8px', width: '180px', textAlign: 'justify', alignSelf: 'center'}}>\n                {items.lookup(it).longDescription}\n              </div>}\n          </li>)}\n        </ul>\n      </div>}\n      {thingNames.length > 0 && <div className='Things' data-testid='Inventory' style={{ display: showThings ? 'block' : 'none' }}>\n        <ul>\n          {thingNames.sort((a,b) => a > b ? 1 : -1).map(it => <li key={it} style={{\n              ...(things.count(it) === 0 ? { display: 'none' } : {})\n            }}>\n            {it} <span data-testid={it}  className='Count'>{Math.floor(things.count(it))}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n\n      \n    </li>;\n  };\n}\n","import React from \"react\";\n\nexport function Lights() {\n  return (\n    <group>\n      <ambientLight position={[0, 0, 100]} intensity={4.9} />\n      {/* <directionalLight intensity={0.5} position={[0, 0, 0]} color={0xffffff} /> */}\n      {/* <pointLight\n        intensity={1.9}\n        position={[-6, 3, -6]}\n        color={0xaca7ef}\n      >\n      </pointLight>\n      <pointLight\n        intensity={1.9}\n        position={[6, 3, 6]}\n        color={0x77ccff}\n      >\n      </pointLight>\n */}\n    </group>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { FlyControls, OrbitControls } from '@react-three/drei'\n\nconst Controls = () => {\n  const [width, setWidth] = useState<number>(window.innerWidth);\n  function handleWindowSizeChange() {\n          setWidth(window.innerWidth);\n      }\n  useEffect(() => {\n          window.addEventListener('resize', handleWindowSizeChange);\n          return () => {\n              window.removeEventListener('resize', handleWindowSizeChange);\n          }\n      }, []);\n  \n  let isMobile: boolean = (width <= 768);\n  \n  return isMobile\n  ? <OrbitControls /> : <FlyControls movementSpeed={100} rollSpeed={0.5} dragToLook />\n}\n\nexport default Controls;\n","import React from 'react';\n// import { extend } from \"@react-three/fiber\";\n// import { Billboard } from '@react-three/drei/core/Billboard';\nimport { Text } from '@react-three/drei';\n// import { Texture } from 'three';\n// import { Mesh } from \"three\";\n// extend({ Billboard })\n\n// import React, { useState } from 'react';\n// import { useFrame } from '@react-three/fiber';\n\nexport function PointOfInterest({ title: str, position }: { //}, x, y, str, meshSize, baseHeight }: {\n  title: string, position: [number, number, number]\n  // x: number; y: number; str: string; meshSize: number;\n  // baseHeight: number;\n}) {\n  // const [text, setText] = useState();\n  // const [subtext, setSubtext] = useState();\n  // useFrame(({ camera }) => {\n  //   if (text) { (text as Mesh).lookAt(camera.position, y0, z0); }\n  //   if (subtext) { (subtext as Mesh).lookAt(camera.position, y0, z0); }\n  // });\n  let large = str.startsWith('*');\n  let title = str.substring(0, str.indexOf('('));\n  let subtitle = str.substring(str.indexOf('(') + 1, str.indexOf(')'));\n  // todo fix position of these things? use billboard?\n  // let [x0,y0,z0] = position\n  // let x0 = meshSize / 2 - (1.3 * (x) * meshSize / 128); // - meshSize/2,\n  // let y0 = 1.3 * (y) * meshSize / 128 - meshSize / 2;\n  // let z0 = baseHeight*2 + (large ? 15 : -20);\n  let fontSize = large ? 8 : 3;\n  let color = 'white'; //large ? \"white\" : \"gray\"\n  return <>\n    <Text\n      // ref={setText}\n      // rotation={[Math.PI / 2, 0, 0]}\n      font='Fira Code'\n      fontSize={fontSize}\n      color={color}\n\n      anchorX=\"center\" anchorY=\"middle\"\n      key={str + '-' + title}\n    >\n      {title.replaceAll('*', '')}\n    </Text>\n    {subtitle && <Text\n      // ref={setSubtext}\n      // position={[x0, y0, z0 + 15]}\n      position={[0, -5, 0]}\n      // rotation={[Math.PI / 2, 0, 0]}\n      font='Fira Code'\n      color={color}\n      fontSize={fontSize / 2}\n      anchorX=\"center\" anchorY=\"middle\"\n      key={str + '-' + subtitle}\n    >\n      {subtitle}\n    </Text>}\n  </>;\n}\n","const colors: { [color: string]: string } = {\"aliceblue\":\"#f0f8ff\",\"antiquewhite\":\"#faebd7\",\"aqua\":\"#00ffff\",\"aquamarine\":\"#7fffd4\",\"azure\":\"#f0ffff\",\n    \"beige\":\"#f5f5dc\",\"bisque\":\"#ffe4c4\",\"black\":\"#000000\",\"blanchedalmond\":\"#ffebcd\",\"blue\":\"#0000ff\",\"blueviolet\":\"#8a2be2\",\"brown\":\"#a52a2a\",\"burlywood\":\"#deb887\",\n    \"cadetblue\":\"#5f9ea0\",\"chartreuse\":\"#7fff00\",\"chocolate\":\"#d2691e\",\"coral\":\"#ff7f50\",\"cornflowerblue\":\"#6495ed\",\"cornsilk\":\"#fff8dc\",\"crimson\":\"#dc143c\",\"cyan\":\"#00ffff\",\n    \"darkblue\":\"#00008b\",\"darkcyan\":\"#008b8b\",\"darkgoldenrod\":\"#b8860b\",\"darkgray\":\"#a9a9a9\",\"darkgreen\":\"#006400\",\"darkkhaki\":\"#bdb76b\",\"darkmagenta\":\"#8b008b\",\"darkolivegreen\":\"#556b2f\",\n    \"darkorange\":\"#ff8c00\",\"darkorchid\":\"#9932cc\",\"darkred\":\"#8b0000\",\"darksalmon\":\"#e9967a\",\"darkseagreen\":\"#8fbc8f\",\"darkslateblue\":\"#483d8b\",\"darkslategray\":\"#2f4f4f\",\"darkturquoise\":\"#00ced1\",\n    \"darkviolet\":\"#9400d3\",\"deeppink\":\"#ff1493\",\"deepskyblue\":\"#00bfff\",\"dimgray\":\"#696969\",\"dodgerblue\":\"#1e90ff\",\n    \"firebrick\":\"#b22222\",\"floralwhite\":\"#fffaf0\",\"forestgreen\":\"#228b22\",\"fuchsia\":\"#ff00ff\",\n    \"gainsboro\":\"#dcdcdc\",\"ghostwhite\":\"#f8f8ff\",\"gold\":\"#ffd700\",\"goldenrod\":\"#daa520\",\"gray\":\"#808080\",\"green\":\"#008000\",\"greenyellow\":\"#adff2f\",\n    \"honeydew\":\"#f0fff0\",\"hotpink\":\"#ff69b4\",\n    \"indianred \":\"#cd5c5c\",\"indigo\":\"#4b0082\",\"ivory\":\"#fffff0\",\"khaki\":\"#f0e68c\",\n    \"lavender\":\"#e6e6fa\",\"lavenderblush\":\"#fff0f5\",\"lawngreen\":\"#7cfc00\",\"lemonchiffon\":\"#fffacd\",\"lightblue\":\"#add8e6\",\"lightcoral\":\"#f08080\",\"lightcyan\":\"#e0ffff\",\"lightgoldenrodyellow\":\"#fafad2\",\n    \"lightgrey\":\"#d3d3d3\",\"lightgreen\":\"#90ee90\",\"lightpink\":\"#ffb6c1\",\"lightsalmon\":\"#ffa07a\",\"lightseagreen\":\"#20b2aa\",\"lightskyblue\":\"#87cefa\",\"lightslategray\":\"#778899\",\"lightsteelblue\":\"#b0c4de\",\n    \"lightyellow\":\"#ffffe0\",\"lime\":\"#00ff00\",\"limegreen\":\"#32cd32\",\"linen\":\"#faf0e6\",\n    \"magenta\":\"#ff00ff\",\"maroon\":\"#800000\",\"mediumaquamarine\":\"#66cdaa\",\"mediumblue\":\"#0000cd\",\"mediumorchid\":\"#ba55d3\",\"mediumpurple\":\"#9370d8\",\"mediumseagreen\":\"#3cb371\",\"mediumslateblue\":\"#7b68ee\",\n    \"mediumspringgreen\":\"#00fa9a\",\"mediumturquoise\":\"#48d1cc\",\"mediumvioletred\":\"#c71585\",\"midnightblue\":\"#191970\",\"mintcream\":\"#f5fffa\",\"mistyrose\":\"#ffe4e1\",\"moccasin\":\"#ffe4b5\",\n    \"navajowhite\":\"#ffdead\",\"navy\":\"#000080\",\n    \"oldlace\":\"#fdf5e6\",\"olive\":\"#808000\",\"olivedrab\":\"#6b8e23\",\"orange\":\"#ffa500\",\"orangered\":\"#ff4500\",\"orchid\":\"#da70d6\",\n    \"palegoldenrod\":\"#eee8aa\",\"palegreen\":\"#98fb98\",\"paleturquoise\":\"#afeeee\",\"palevioletred\":\"#d87093\",\"papayawhip\":\"#ffefd5\",\"peachpuff\":\"#ffdab9\",\"peru\":\"#cd853f\",\"pink\":\"#ffc0cb\",\"plum\":\"#dda0dd\",\"powderblue\":\"#b0e0e6\",\"purple\":\"#800080\",\n    \"rebeccapurple\":\"#663399\",\"red\":\"#ff0000\",\"rosybrown\":\"#bc8f8f\",\"royalblue\":\"#4169e1\",\n    \"saddlebrown\":\"#8b4513\",\"salmon\":\"#fa8072\",\"sandybrown\":\"#f4a460\",\"seagreen\":\"#2e8b57\",\"seashell\":\"#fff5ee\",\"sienna\":\"#a0522d\",\"silver\":\"#c0c0c0\",\"skyblue\":\"#87ceeb\",\"slateblue\":\"#6a5acd\",\"slategray\":\"#708090\",\"snow\":\"#fffafa\",\"springgreen\":\"#00ff7f\",\"steelblue\":\"#4682b4\",\n    \"tan\":\"#d2b48c\",\"teal\":\"#008080\",\"thistle\":\"#d8bfd8\",\"tomato\":\"#ff6347\",\"turquoise\":\"#40e0d0\",\n    \"violet\":\"#ee82ee\",\n    \"wheat\":\"#f5deb3\",\"white\":\"#ffffff\",\"whitesmoke\":\"#f5f5f5\",\n    \"yellow\":\"#ffff00\",\"yellowgreen\":\"#9acd32\"};\n\n\nexport function colorNameToHex(color: string)\n{\n  if (color === undefined) { return '#000000'; }\n    if (typeof colors[color.toLowerCase()] != 'undefined')\n        return colors[color.toLowerCase()];\n\n    return '#000000';\n}\n","export const bilinearInterpolator = (func: (x: number, y: number) => number) => (x: number, y: number) => {\n  // \"func\" is a function that takes 2 integer arguments and returns some value\n  const x1 = Math.floor(x);\n  const x2 = Math.ceil(x);\n  const y1 = Math.floor(y);\n  const y2 = Math.ceil(y);\n\n  if ((x1 === x2) && (y1 === y2)) return func(x1, y1);\n  if (x1 === x2) {\n    return (func(x1, y1) * (y2 - y) + func(x1, y2) * (y - y1)) / (y2 - y1);\n  }\n  if (y1 === y2) {\n    return (func(x1, y1) * (x2 - x) + func(x2, y1) * (x - x1)) / (x2 - x1);\n  }\n\n  // else: x1 != x2 and y1 != y2\n  return (\n    func(x1, y1) * (x2 - x) * (y2 - y) +\n    func(x2, y1) * (x - x1) * (y2 - y) +\n    func(x1, y2) * (x2 - x) * (y - y1) +\n    func(x2, y2) * (x - x1) * (y - y1)\n  )\n  / ((x2 - x1) * (y2 - y1));\n}\n","import React from 'react';\nimport { Texture } from 'three';\nimport { Billboard } from '@react-three/drei'; ///core/Billboard';\n\n// okay jest *hates* this, presumably b/c of `extend` keyword\nimport { extend } from \"@react-three/fiber\";\n\n// if (process.env.NODE_ENV !== 'test') {\n  extend({ Billboard })\n// }\n\n// todo point towards cam?\nexport function Tree({ position, map }: { map: Texture; position: [number, number, number]; }) {\n\n  let [x, y, z] = position; //toScenePosition(position)\n  // console.log(\"Draw tree at \", { x,y })\n\n  // const { camera } = useThree()\n  // const [tree, set] = React.useState<Mesh>();\n  //  useFrame(({ camera }) => {\n  //   tree && tree.lookAt(camera.position)\n  //  })\n  const scale = 1.2\n  let zOff = scale * 0.875\n  return <Billboard\n  // follow={false}\n      // lockX lockY\n    // lockX\n    // lockZ\n      // scale={16}\n    position={[x, y, z + zOff]} // z + 32]}\n      // rotation={[0, -Math.PI / 2, -Math.PI / 2]}\n  >\n    <mesh\n      scale={scale}\n      // ref={set}\n\n    >\n      <planeGeometry args={[2, 2]} />\n      <meshStandardMaterial\n        // color='green'\n        attach='material'\n        transparent\n        // map={grayscaleTexture}\n        // map={rgbTexture}\n        map={map} // treeMap}\n      />\n    </mesh>\n  </Billboard>;\n}\n","import React from 'react';\nimport { useLoader } from '@react-three/fiber';\nimport { DataTexture, LuminanceFormat, RGBAFormat, Texture, TextureLoader, UnsignedByteType } from \"three\";\nimport { PointOfInterest } from './PointOfInterest';\nimport { colorNameToHex } from '../../utils/colors';\nimport { bilinearInterpolator } from '../../utils/interpolate';\nimport { Tree } from './Tree';\n\n\nconst makeImageData = (\n  tiles: string[][],\n  tileColors: { [tile: string]: string },  \n  imageSize: number,\n  // evolving: boolean\n): { rgb: Uint8Array, grayscale: Uint8Array } => {\n  var tileWidth = tiles[0].length + 1,\n      tileHeight = tiles.length + 1;\n\n  const width = imageSize, height = imageSize\n  \n  const grayscaleData = new Uint8Array(width * height);\n  const rgbData = new Uint8Array(width * height * 4);\n  // const greenData = new Uint8ClampedArray(width * height * 4)\n  // }\n  const heightAt = (x: number, y: number) => {\n    if (tiles[y] !== undefined) return parseInt(tiles[y][x], 10)\n    return 0\n  }\n  const interpolate = bilinearInterpolator(heightAt)\n\n  const colorAt = (x: number, y: number) => {\n    let h = heightAt(x,y)\n    let color = tileColors[Math.round(h)]\n    return color\n  }\n  const hexValueAt = (x: number, y: number) => {\n    let hex: string = colorNameToHex(colorAt(x,y))\n    return hex;\n  }\n\n  // const interpolate = bilinearInterpolator(heightAt)\n  \n  const interpolateRed = bilinearInterpolator((x, y) => {\n    let hex: string = hexValueAt(x,y)\n    var red = parseInt(hex[1]+hex[2],16);\n    return red;\n  })\n  const interpolateGreen = bilinearInterpolator((x, y) => {\n    let hex: string = hexValueAt(x,y)\n    var green = parseInt(hex[3]+hex[4],16);\n    return green;\n  })\n  const interpolateBlue = bilinearInterpolator((x, y) => {\n    let hex: string = hexValueAt(x,y)\n    var blue = parseInt(hex[5]+hex[6],16);\n    return blue;\n  })\n\n  \n  for (var y = 0; y <= height+2; y++) {\n    for (var x = 0; x <= width+2; x++) {\n      let pos = (y * width + x);\n      let x0 = tileWidth - ((x / (width)) * (tileWidth)),\n        y0 = (y / (height)) * (tileHeight);\n\n      let value = interpolate(x0, y0)\n      // if ((x0 === 25) && (y0 === 25)) {\n      //   value = 10\n      // } else if ((x0 === 25 || x0 === 75) && (y0 === 25 || y0 === 75)) {\n      //   value = 5\n      // } else {\n      //   value = 0\n      // }\n\n      grayscaleData[pos] = value * 25\n\n      var rgbPos = (y * width + x) * 4;\n      rgbData[rgbPos] = interpolateRed(x0, y0)\n      rgbData[rgbPos + 1] = interpolateGreen(x0, y0)\n      rgbData[rgbPos + 2] = interpolateBlue(x0, y0)\n      rgbData[rgbPos + 3] = 255\n    }\n  }\n  return { rgb: rgbData, grayscale: grayscaleData }\n}\n\nlet cachedImageData: { grayscale: Uint8Array, rgb: Uint8Array } | null = null // {} // grayscale, rgb }\n\n// handle just major landform\n// const Landmass = () => { }\n\nconst Terrain = ({\n  tokens,\n  tileColors,\n  evolving,\n  tiles,\n  pointsOfInterest,\n}: {\n  evolving: boolean,\n  tiles: string[][],\n  tileColors: { [tile: string]: string },\n  pointsOfInterest: { [name: string]: [number,number]},\n  tokens: { [name: string]: [number,number][] }\n }) => {\n\n  tiles = tiles || []\n  var tilemapWidth = tiles.length // - 1; //[0].length + 1;\n\n  // const scale = 1 //32\n  const meshSize = tilemapWidth // * scale // 1024 * scale //8192 //4096; //1024;\n  const maxLandHeight = 16 // * scale // / tilemapWidth //1024 * 2  //256 //128 //meshSize / tileWidth\n  const treeUrl = `${process.env.PUBLIC_URL}/tree.png`\n  \n  let treeMap: Texture | null = null;\n  try {\n   // eslint-disable-next-line react-hooks/rules-of-hooks\n   treeMap = useLoader(TextureLoader, treeUrl)\n  } catch (err) { }\n  \n  const baseInterpolationRate = 8\n  // const baseInterpolationRate = 2\n  // const baseInterpolationRate = 2\n  const interpolationRate = evolving ? 1 : baseInterpolationRate;\n  const imgSize = tilemapWidth * interpolationRate;\n  const width = imgSize, height = imgSize;\n\n  const { grayscale, rgb }: { grayscale: Uint8Array, rgb: Uint8Array } = cachedImageData\n    || makeImageData(tiles, tileColors, imgSize)\n  if (!evolving) { cachedImageData = { grayscale, rgb }}\n  else { cachedImageData = null }\n  \n  const grayscaleTexture = new DataTexture(grayscale, width, height, LuminanceFormat, UnsignedByteType);\n  const rgbTexture = new DataTexture(rgb, width, height, RGBAFormat, UnsignedByteType);\n\n  const meshGrain = 256; // 1024; // * 2; //1024;\n  const terrainGeometry = \n      <planeBufferGeometry attach=\"geometry\" args={[\n        meshSize, meshSize,\n        meshGrain, meshGrain\n      ]} />\n\n  const showTerrain = true, showOcean = true\n  const showGuide = true\n\n  const heightAt = (x: number, y: number) => {\n    if (tiles[y] !== undefined) return parseInt(tiles[y][x] || '0', 10)\n    return 0\n  }\n  const interpolate = bilinearInterpolator(heightAt)\n\n  const toScenePosition = (worldPos: [ number, number ]): [number,number,number] => {\n    const [x,y] = worldPos;\n    const sz = meshSize/2\n    const sceneScale = (tilemapWidth / sz) / 2\n    let x0 = sz - x*sceneScale\n    let y0 = y*sceneScale - sz\n    let z0 = interpolate(x,y)/10 * maxLandHeight\n    return [x0,y0,z0]\n  }\n\n  // const Forest = ({ at }: { at: [number,number] }) => {\n  //   return <>\n  //     {treeMap && <Tree map={treeMap} position={toScenePosition(at)} />}\n  //   </>\n  // }\n  \n  return <>\n    {showTerrain && <mesh\n      position={[0,0,0]}\n    >\n      {terrainGeometry}\n       \n      <meshPhongMaterial\n        attach=\"material\"\n        color={\"navajowhite\"}\n        map={rgbTexture}\n        displacementMap={grayscaleTexture}\n        displacementScale={maxLandHeight}\n        shininess={2}\n        flatShading\n      />\n\n    {showGuide && Object.entries(pointsOfInterest).map(([str, [x,y]], i) =>\n    <PointOfInterest\n      position={toScenePosition([x,y])}\n      title={str}\n    />)}\n\n      {tokens.trees.map(tree => treeMap && <Tree map={treeMap} position={toScenePosition(tree)} />)}\n    </mesh>}\n\n    {showOcean && <mesh\n      // ref={setOcean}\n      position={[0,0,4.75]}\n      // rotation={[-Math.PI/2,0,0]}\n    >\n      {terrainGeometry}\n      <meshPhongMaterial\n        attach=\"material\"\n        color={\"darkblue\"}\n        transparent\n        opacity={0.95}\n        displacementScale={64}\n        shininess={1}\n        flatShading\n      />\n    </mesh>}\n    \n\n  </>;\n};  \n\nexport default Terrain;\n","import React from \"react\";\nimport {useThree} from \"@react-three/fiber\";\nimport { Lights } from \"./Lights\";\nimport Controls from \"./Controls\";\nimport Terrain from \"./Terrain\";\n// import Effects from \"./Effects\";\nimport { CubeTextureLoader } from \"three\";\n\nexport function skyboxTexture() {\n  // const { scene } = useThree();\n  const loader = new CubeTextureLoader();\n  // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\n  const texture = loader.load([\n    `${process.env.PUBLIC_URL}/1.jpg`,\n    `${process.env.PUBLIC_URL}/2.jpg`,\n    `${process.env.PUBLIC_URL}/3.jpg`,\n    `${process.env.PUBLIC_URL}/4.jpg`,\n    `${process.env.PUBLIC_URL}/5.jpg`,\n    `${process.env.PUBLIC_URL}/6.jpg`\n  ]);\n  return texture\n  // texture.side\n  // texture.rend\n\n  // Set the scene background property to the resulting texture.\n  // scene.background = texture;\n  // scene.frustumCulled = false\n  // return <></>; //null; //<></>;\n}\n\n// export default Controls;\nconst Scene = ({\n  tiles,\n  tokens,\n  tileColors,\n  evolving,\n  pointsOfInterest\n}: {\n  evolving: boolean,\n  tiles: string[][],\n  tileColors: { [tile: string]: string },\n  pointsOfInterest: { [name: string]: [number,number] }\n  tokens: { [name: string]: [number,number][] }\n}) => {\n  const { scene } = useThree();\n  if (scene.background === null) {\n    scene.background = skyboxTexture()\n  }\n  // const Fog = () => <fog attach=\"fog\" args={['#eaeaea', 1, 256]} />\n  return (\n  <>\n    <Lights />\n    <Controls />\n    <Terrain\n      tiles={tiles}\n      tokens={tokens}\n      evolving={evolving}\n      tileColors={tileColors}\n      pointsOfInterest={pointsOfInterest}\n    />\n    {/* <Fog /> */}\n    {/* <Effects /> */}\n  </>\n)\n  };\n\nexport { Scene }\n","import React, { Suspense } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport { Scene } from \"./Scene\"\n\nconst HeightmapCanvas = ({\n  tileColors, isBoardEvolving, tiles, pointsOfInterest, tokens\n}: {\n  pointsOfInterest: { [name: string]: [number,number] }\n  tileColors: { [tile: string]: string },\n  tokens: { [name: string]: [number,number][] },\n  isBoardEvolving: boolean,\n  tiles: string[][]\n}) => {\n  const scene = { tiles, tokens, tileColors, pointsOfInterest, evolving: isBoardEvolving }\n  return <>\n    <Canvas\n      frameloop={'demand'} \n      camera={{ zoom: 4, position: [0,0,24], //20,128], \n       near: 0.1, far: 15000 }}\n       onCreated={({camera}) => {\n         camera.rotateX(Math.PI/2)\n        // camera.rotateY(-Math.PI/2)\n        // camera.rotateZ(-Math.PI/2)\n       }}\n    >\n      <Suspense fallback={<div className=\"loading\">Loading</div>}>\n        <Scene {...scene}\n          // tiles={tiles}\n          // evolving={isBoardEvolving}\n          // tileColors={tileColors}\n          // pointsOfInterest={pointsOfInterest}\n        />\n      </Suspense>\n    </Canvas>\n  </>\n}\n\nexport { HeightmapCanvas }\n","import React from 'react';\nimport { BoardTableView } from \"./BoardTableView\";\nimport { HeightmapCanvas } from \"./Heightmap/HeightmapCanvas\";\nexport interface IBoard {\n  evolving: boolean;\n  tiles: string[][];\n  tokens: { [token: string]: [number,number][] }; // the idea is tokens have a name + position..\n  tileColors: { [tile: string]: string };\n  tileInspect: (x: number, y: number) => string;\n  pointsOfInterest: { [name: string]: [number, number] };\n  // heightmap?: number[][];\n}\n\nexport const BoardPresenter = ({ tiles, tileColors, tileInspect, evolving, pointsOfInterest, tokens }: IBoard) => {\n  // let largeMap = tiles.length-1 > 64\n  const showThreeScene = true //!!largeMap\n  const showCartogram = !showThreeScene\n  const isMapCondensed = false\n  return <div style={{ width: '100vw', height: '70vh'}}>\n    {showThreeScene && <HeightmapCanvas\n      isBoardEvolving={evolving}\n      tiles={tiles}\n      // todo ... heightmap={heightmap}\n      tokens={tokens}\n      tileColors={tileColors}\n      pointsOfInterest={pointsOfInterest}\n    />}\n    {showCartogram && <BoardTableView\n      tileColors={tileColors}\n      tileInspect={tileInspect}\n      tiles={tiles}\n      condensed={isMapCondensed}\n      />}\n  </div>\n}\n","import React from \"react\";\nimport { Machine, Person } from \"../types\";\nimport { LastDelta } from \"../../ModelPresenter\";\nimport { presentItem } from \"../Model/presentItem\";\nimport { Tile } from \"./Tile\";\nimport { presentCommunity } from \"./presentCommunity\";\nimport { Population } from \"../Population\";\nimport { Community } from \"../Community\";\nimport { capitalize } from '../utils/capitalize';\nimport { BoardPresenter, IBoard } from \"./BoardPresenter\";\nimport './View.css'\nimport { Moiety } from \"../types/Person\";\n\nexport type ModelViewProps = {\n  modelName: string;\n  resources: { name: string; amount: number; }[];\n  animals: { name: string; amount: number }[];\n  communities: Population<Moiety, Person>[];\n  machines: Machine[];\n  lastChanges: LastDelta;\n  metrics: { [name: string]: number };\n  notes: { [name: string]: string };\n  board: IBoard\n}\n\nexport function ModelView({\n  modelName,\n  resources,\n  communities,\n  machines,\n  animals,\n  lastChanges,\n  metrics,\n  notes,\n  board,\n}: ModelViewProps) {\n  const folks = (communities as Community[]).map(presentCommunity)\n  // console.log({ community: communities[0].list() })\n  return <div className='Model' style={{ display: !!board.tiles.length ? 'block' : 'flex' }}>\n    {/* <ViewHeightmap /> */}\n    <h4 aria-label='Model Title' style={{display: 'none'}}>{modelName}</h4>\n    {board.tiles.length > 0 && <BoardPresenter {...board} />}\n    {resources.length > 0 && (<Tile title='Store'>\n      <ul aria-label='Resources'>\n        {resources.map(presentItem(lastChanges.resources))}\n      </ul>\n      \n      {/* <ul aria-label='Resources'>\n        {resources.map(presentItem(lastChanges.resources))}\n      </ul> */}\n    </Tile>)}\n    {animals.length > 0 && (\n      <Tile title='Animals'>\n        <ul aria-label='Animals'>\n          {animals.map(presentItem(lastChanges.animals))}\n        </ul>\n      </Tile>)}\n      {communities.length > 0 && <div title='Individuals' style={{display: 'flex'}}>{folks}</div>}\n    {machines.length > 0 && <Tile title='Machines'>\n      <ul>\n        {machines.map(({ name }) => <li key={name}>{name}</li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(metrics).length > 0 && <Tile title='Metrics'>\n      <ul>\n        {Object.entries(metrics).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Count'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(notes).length > 0 && <div title='Notes'\n      style={{\n        overflow: 'scroll',\n        height: '560px',\n        // maxHeight: '340px'\n      }}\n    >\n    <table>\n      <tbody>\n      {/* <tr> */}\n        {\n          Object.entries(notes).map(([name, value]) => name.startsWith('*')\n            ? (\n                <tr key={name} style={{textAlign: 'center'}} title={capitalize(name.replaceAll('*', ''))}>\n                  <td colSpan={3}>\n                    <b>{value}</b>\n                  </td>\n                </tr>\n              )\n            : (\n                <tr key={name} title={name} >\n                  <td key={name} style={{textAlign: 'right', color: 'gray' }}>\n                    {name}\n                  </td>\n                  <td style={{width: '4px'}}></td>\n                  <td style={{ minWidth: '180px', textAlign: 'left', fontSize: '15pt' }}>\n                    <span data-testid='Description' style={{\n                      ...(value.startsWith('*') && {color: 'lightgreen'}),\n                      ...(value.startsWith('%') && {color: 'goldenrod'}),\n                      ...(value.startsWith('~') && {color: 'darkgray'}),\n                    }}>\n                      {value.replaceAll('*','').replaceAll('%','').replaceAll('~','')}\n                    </span>\n                  </td>\n                </tr>\n              )\n          )\n        }\n\n    </tbody>\n    </table>\n      {/* </tr> */}\n    </div>}\n  </div>;\n}\n","import { Model } from './Model';\nimport { IModel } from './IModel';\nimport { ModelView } from '../View/ModelView';\nexport { Model, ModelView }\nexport type { IModel }\nexport default Model\n","// import { IAssembly } from './ecosphere/Assembly';\nimport { ModelView } from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelViewProps } from './ecosphere/View/ModelView';\n\nexport type LastDelta = { [group: string]: { [element: string]: number }}\n\ntype ModelPresenterProps = {\n  model: IModel\n  step: Function \n  send: Function\n  choose: Function\n  lastChanges: LastDelta\n}\n\nconst view = (model: IModel, lastChanges: LastDelta): ModelViewProps => {\n  const { resources, people, machines, animals, metrics, notes, tiles, tileColors } = model;\n\n  const props: ModelViewProps = {\n    modelName: model.name,\n    resources: resources.report,\n    communities: people.populationList, //.populations,\n    // individuals: people.list(),\n    // work: people.report,\n    machines: machines.list(),\n    animals: animals.report,\n    // actions: actions.list(),\n    metrics: Object.fromEntries(\n      Object.entries(metrics).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    notes: Object.fromEntries(\n      Object.entries(notes).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    lastChanges,\n    board: {\n      tiles: tiles || [],\n      tileColors: tileColors || {},\n      tileInspect: (model.tileInspect || (() => '--')),\n      evolving: model.tilesEvolving || false,\n      pointsOfInterest: model.pointsOfInterest || {},\n      tokens: model.tokens || {} \n      // { trees: [[0,0], [128,128], [256,256], [0,256], [256,0]] as [number,number][] } || {}\n      // { trees: [[0,0], [0,64], [64,0], [64,64]] as [number,number][] } || {}\n      // { trees: [[0,0], [0,32], [32,0], [32, 32]] as [number,number][] } || {}\n      // { trees: [[0,0], [0,128], [128,0], [128,128], [64,64]] as [number,number][] } || {}\n      // { trees: [[0,0], [0,1], [1,0], [1,1]] as [number,number][] } || {}\n      // { trees: [[0,0], [0,2], [2,0], [2,2]] as [number,number][] } || {}\n      // { trees: [[0,0], [0,4], [4,0], [4,4], //] as [number,number][] } || {}\n      //           [0,0], [0,8], [8,0], [8,8]] as [number,number][] } || {}\n    }\n  }\n\n  return props\n}\n\nexport function ModelPresenter({ model, send, choose, step, lastChanges }: ModelPresenterProps) {\n  return <>\n    <div aria-label='View'>\n      <ModelView {...view(model, lastChanges)} />\n    </div>\n\n    <div aria-label='Controls'>\n      <span title='Run' style={{display: 'none'}}>\n        <button onClick={() => step(true)}>Step</button>\n      </span>\n\n      <span title='Actions'>\n        {model.actions.list().map(({ name }) => <button title={name} key={name} onClick={() => send(name)}>\n          {name}\n        </button>)}\n      </span>\n\n      {model.policies.count > 0 && <div className='Policy' title='Policies'>\n        {/* <h5>Policies</h5> */}\n        {model.policies.list().map(({ name }) => <label key={name}><input\n          type='radio'\n          checked={model.currentPolicy?.name === name}\n          title={name}\n          key={name}\n          onChange={() => choose(name)}\n        />\n        {name}\n        </label>)}\n      </div>}\n    </div>\n  </>;\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { LastDelta } from './ModelPresenter';\nimport { isModel } from './ModelSelector';\n\nexport type ModelAPI = {\n  model: IModel | IAssembly\n  setModel(model: IModel | IAssembly): void\n  step: Function,\n  lastChanges: LastDelta,\n  send: (actionName: string, args: any) => void,\n  choose: (policyName: string, args: any) => void,\n  setDelay: (milliseconds: number) => void\n}\n\n// ticks per sec\n// const ticksPerSecond = (n: number) => n > 0 ? Math.floor(1000 / n) : 1\n// const speeds = {slow: 10, fast: 25, faster: 50, fastest: 80};\nexport function useModel(initialModel: IModel | IAssembly): ModelAPI { //model: IModel = new Model('Hello World')): ModelAPI {\n  const [model, setModel] = useState(initialModel) //new Model('Hello World'))\n\n  const [lastChanges, setLastChanges] = useState({} as LastDelta)\n  const isTest = process.env.NODE_ENV === 'test'\n  const [delay, setDelay] = useState(isTest ? 5000 : 2) //ticksPerSecond(speeds.slow));\n\n  const [shouldStep, step] = useState(false);\n  const [shouldSend, doSend] = useState(false);\n  const [shouldManage, doManage] = useState(false)\n\n  const performStep = () => { step(true); };\n  const [command, setCommand] = useState('')\n  const [policy, setPolicy] = useState('')\n\n  useEffect(() => {\n    if (shouldSend) {\n      if (command && isModel(model)) { model.send(command, {}) }\n      doSend(false)\n    }\n  }, [command, model, shouldSend]);\n\n  useEffect(() => {\n    if (shouldManage) {\n      if (policy && isModel(model)) { model.choose(policy, {}) }\n      doManage(false)\n    }\n  }, [policy, model, shouldManage]);\n\n  const performSend = (actionName: string, args: any) => {\n    setCommand(actionName)\n    doSend(true)\n  }\n\n  const performChoose = (policyName: string, args: any) => {\n    // console.log(\"CHOOSE\", policyName)\n    setPolicy(policyName)\n    doManage(true)\n  }\n\n  useEffect(() => {\n    if (shouldStep && isModel(model)) {\n      let { changed } = model.step();\n      step(false);\n      setLastChanges(changed);\n    }\n  }, [shouldStep, model]);\n\n  useInterval(() => step(true), delay); \n\n  return {\n    model,\n    step: performStep,\n    lastChanges: lastChanges as LastDelta,\n    send: (actionName: string, args: any) => performSend(actionName, args), \n    choose: (policyName: string, args: any) => performChoose(policyName, args),\n    setDelay,\n    setModel,\n  };\n}\n\nfunction useInterval(callback: any, delay: number) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      // @ts-ignore\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport Model from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelPresenter } from './ModelPresenter';\nimport { useModel } from './useModel';\n\nexport const isModel = (maybeModel: IModel | IAssembly): maybeModel is IModel => {\n  return maybeModel instanceof Model;\n}\n\nconst AssemblyPresenter: React.FC<{ assembly: IAssembly }> = ({ assembly }) => {\n  return <>{assembly.models.items.map((theModel: IModel) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { step, send, choose, lastChanges, model } = useModel(theModel);\n    return <>\n    <h4>{theModel.name}</h4>\n    <ModelPresenter\n             key={model.name}\n             step={step}\n             send={send}\n             model={model as IModel}\n             choose={choose}\n             lastChanges={lastChanges}\n           />\n           </>\n  })}</>\n}\n\nexport function ModelSelector({ initialModel, models }: {\n  initialModel: IModel;\n  models: (IModel | IAssembly)[];\n}) {\n  const { step, send, choose, lastChanges, model, setModel } = useModel(initialModel);\n  return <>\n    <Dropdown\n      options={models.map(model => model.name)}\n      onChange={({ value }) => {\n        const theModel = models.find((model: IModel | IAssembly) => model.name === value);\n        if (theModel) { setModel(theModel); }\n      }}\n      value={model.name}\n      placeholder=\"Select a model\" />\n    {isModel(model) ? <ModelPresenter\n                       step={step}\n                       send={send}\n                       model={model}\n                       choose={choose}\n                       lastChanges={lastChanges} />\n                    : <AssemblyPresenter assembly={model} />}\n  </>;\n}\n","export type Tiles = string[][]\n\nconst first = <T>(arr: T[], pred: (x: T) => boolean): T => {\n  return arr.filter(pred)[0]\n}\n\nexport class Board {\n  private tiles: Tiles = []\n\n  view({ overlays }: { overlays: Board[] } = { overlays: []}): Tiles {\n    let viewTiles: Tiles = []\n    for (let x = -1; x <= this.width; x++) {\n      for (let y = -1; y <= this.height; y++) {\n        viewTiles[y] = viewTiles[y] || []\n        let overlay = overlays.length > 0 && first(overlays, o => {\n          let v = o.at(x,y); return v !== '' && v !== undefined\n          // return o.at(x,y) !== undefined\n        })\n        viewTiles[y][x] = (overlay && overlay.at(x,y))\n                       || this.at(x,y)\n                       || '_'\n      }\n    }\n    return viewTiles;\n  }\n\n  constructor(public width: number, public height: number) {}\n\n  // clear = (x0: string, y0: number, width: number, height: number) => {}\n\n  write = (character: string, x0: number, y0: number) => {\n    let x = x0;\n    let y = y0;\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = character;\n  }\n\n  erase(x: number, y: number) {\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = ''\n    // throw new Error(\"Method not implemented.\")\n  }\n  \n  drawBox = (char: string, x0: number, y0: number, width: number, height: number, filled?: boolean) => {\n    let x1 = x0 + width; let y1 = y0 + height;\n    for (let x = x0; x <= x1; x++) {\n      for (let y = y0; y <= y1; y++) {\n        if (x === x0 || y === y0 || x === x1 || y === y1) {\n          this.write(char, x, y)\n        } else {\n          if (filled) {\n            this.write(char, x, y)\n          }\n        }\n      }\n    }\n  }\n\n  // get width() { return this.tiles && this.tiles[0] && this.tiles[0].length }\n  // get height() { return this.tiles.length }\n\n  at(x: number, y: number) { //}, defaultValue: string = '') {\n    // if (x >= 0 && x <= this.width && y >= 0 && y <= this.height) {\n      const x0 = x % this.width\n      const y0 = y % this.height\n      if (this.tiles[y0]) {\n        return this.tiles[y0][x0]\n      }\n    // } \n    // return defaultValue\n  }\n\n\n  each(fn: (x: number, y: number, value: string) => void) {\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        fn(x,y,this.at(x,y) || '')\n      }\n    }\n  }\n\n  neighbors(x: number, y: number): string[] {\n    const at = ([x, y]: [ number, number ]) => this.at(x,y) || '' // || defaultValue\n    // let neighbors: string[] = [\n    //   at(x-1,y-1), at(x,y-1), at(x+1,y-1),\n    //   // at(x-1,y)  , at(x,y),   at(x+1,y),\n    //   at(x-1,y)  ,   at(x+1,y),\n    //   at(x-1,y+1), at(x,y+1), at(x+1,y+1),\n    // ]\n    return Board.neighborPositions(x,y).map(at) //neighbors\n  }\n\n  static neighborPositions(x: number, y: number): [number, number][] {\n    return [\n      [x-1,y-1], [x,y-1], [x+1,y-1],\n      [x-1,y  ], [x+1,y],\n      [x-1,y+1], [x,y+1], [x+1,y+1],\n    ]\n  }\n\n  step(eachCell: (val: string, neighbors: string[], position: [number, number]) => string, defaultValue: string = ''): Tiles {\n    // const ignored = ['*']\n    // console.log(\"Board.step -- start\")\n    let newTiles: Tiles = []\n    this.tiles = this.tiles || []\n    const at = (x: number, y: number) => this.at(x,y) || defaultValue\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        let currentValue = at(x,y)\n        if (currentValue !== undefined) {\n          // if (ignored.includes(currentValue)) { continue }\n          let neighbors: string[] = this.neighbors(x,y)\n          // [\n          //   at(x-1,y-1), at(x,y-1), at(x+1,y-1),\n          //   at(x-1,y)  , at(x,y),   at(x+1,y),\n          //   at(x-1,y+1), at(x,y+1), at(x+1,y+1),\n          // ]\n          const newCell = eachCell(currentValue, neighbors, [x,y])\n          newTiles[y] = newTiles[y] || []\n          newTiles[y][x] = newCell\n        }\n      }\n    }\n    this.tiles = newTiles\n    return newTiles\n  }\n}\n","export const any = <T>(list: Array<T>, pred: (value: T) => boolean) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i])) {\n      return true\n    }\n  }\n  return false\n}\n\nexport const all = <T>(list: Array<T>, pred: (value: T) => boolean) => {\n  for (let i = 0; i < list.length; i++) {\n    if (!pred(list[i])) {\n      return false\n    }\n  }\n  return true\n}\n","export const clamp = (value: number, min: number, max: number) =>\n  Math.min(Math.max(value, min),max)\n","export const distance = (a: [number, number], b: [number, number]) => {\n  let dx = Math.abs(a[0] - b[0]);\n  let dy = Math.abs(a[1] - b[1]);\n  return Math.sqrt(dx * dx + dy * dy)\n}\n","\nexport function first<T>(arr: T[], pred: (x: T) => boolean): T {\n  return arr.filter(pred)[0];\n}\n","import { NameSequence } from \"../collections/Sequence\";\nimport { Board, Tiles } from \"./Board\";\nimport { any } from \"./utils/any\";\nimport { clamp } from \"./utils/clamp\";\nimport { distance } from \"./utils/distance\";\nimport { first } from \"./utils/first\";\nimport { randomInteger } from \"./utils/randomInteger\";\nimport { choose } from \"./utils/sample\";\n\ntype Position = [number, number]\n\nfunction neighborPositions([x,y]: Position): Position[] {\n  return [\n    [x-1,y-1], [x,y-1], [x+1,y-1],\n    [x-1,y  ], [x+1,y],\n    [x-1,y+1], [x,y+1], [x+1,y+1],\n  ]\n}\n\ntype Cell = {\n  value: number,\n  neighbors: number[],\n  position: Position,\n  localAverage: number\n}\ntype HeightmapOperation = (cell: Cell) => number\n\nexport class Heightmap {\n  get evolution() { return {\n    //  (# of steps to erode on height unit)\n    // faster values erode more slowly\n    erosionSpeed: 512,\n    smoothSpeed: 256,\n    extrudeIntensity: 10,\n\n    // flow 'intensity'\n    viscosity: 0,\n\n    // 100 = constant\n  bombardmentRate: 50,\n  }}\n\n  matrix: number[][] = []\n  maxHeight = 256 // 1024 //* 8\n  heightUnit = (this.maxHeight / 10)\n  seaLevel = 0.3 * this.maxHeight // 2 * (this.maxHeight / 10) // - this.heightUnit\n\n  constructor(public width: number, public height: number) {\n  }\n\n  view({ overlays }: { overlays: Board[] } = { overlays: []}): Tiles {\n    let viewTiles: Tiles = []\n    for (let x = 0; x < this.width-1; x++) {\n      for (let y = 0; y < this.height-1; y++) {\n        viewTiles[y] = viewTiles[y] || []\n        let overlay = overlays.length > 0 && first(overlays, o => {\n          let v = o.at(x,y); return v !== '' && v !== undefined\n        })\n        viewTiles[y][x] = (overlay && overlay.at(x,y))\n          || String(\n              this.viewHeightAtPos([x,y]) || 0\n          )\n      }\n    }\n    return viewTiles;\n  }\n\n  evolve(...operations: HeightmapOperation[]) {\n    const adapt = () => this.step((value: number, neighbors: number[], position: Position) => {\n      let neighborSum = neighbors.reduce((a, b) => a + b, 0)\n      let localAverage = //Math.round(\n        (neighborSum + value) / (neighbors.length + 1)\n      // );\n\n      // times(10, () => {\n      operations.forEach((operate: HeightmapOperation) => {\n        value = operate({\n          value,\n          position,\n          neighbors,\n          localAverage\n        })\n      // })\n       })\n\n      return clamp(value, 0, this.maxHeight)\n    })\n    adapt()\n    // times(1, )\n    // times(4, adapt)\n  }\n  // (ie run through map once and compute all per-cell things simultaneously...)\n\n  viewHeightAtPos = ([x,y]: Position) => {\n    return Math.round(clamp(this.valueAtPosition([x,y]) * (1.0/this.heightUnit), 0, 9))\n  }\n\n\n  valueAtPosition = ([x,y]: Position): number => {\n    let x0 = x%this.width, y0 = y%this.height;\n    this.matrix[y0] = this.matrix[y0] || []\n    if (this.matrix[y0][x0] !== undefined) {\n      return this.matrix[y0][x0]\n    }\n    return 0\n  } //parseInt(this.matrixp.at(x,y) || '0', 10) }\n\n  write = (value: number, [x,y]: Position) => {\n    // throw new Error(\"Method not implemented.\");\n    this.matrix[y] = this.matrix[y] || []\n    this.matrix[y][x] = Math.round(clamp(value, 0, this.maxHeight))\n  }\n\n  // @boundMethod\n  each = (cb: (value: number, position: Position) => void) => {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        let position: Position = [x,y]\n        let value = this.valueAtPosition(position)\n        cb(value, position)\n      }\n    }\n  }\n\n  neighbors = ([x,y]: Position): number[] =>\n    neighborPositions([x,y]).map(this.valueAtPosition)\n\n  step = (\n    cb: (val: number, neighbors: number[], position: Position) => number,\n  ): number[][] => {\n    let newValues: number[][] = []\n    for (let y = 0; y <= this.height; y++) {\n      newValues[y] = []\n      for (let x = 0; x <= this.width; x++) {\n        let currentValue = this.valueAtPosition([x,y])\n        let newValue = null\n        let neighbors: number[] = this.neighbors([x,y])\n        newValue = cb(currentValue, neighbors, [x,y])\n        newValues[y][x] = newValue\n      }\n    }\n    this.matrix = newValues\n    return newValues\n  }\n\n  at = (x: number, y: number): number => this.valueAtPosition([x,y])\n\n  smooth: HeightmapOperation = ({ value, neighbors: ns, localAverage: average }: Cell) => { // = () => {\n    // return value\n    // let aboveWater = ns.filter(n => n > this.seaLevel).length\n    // if (value > 0 && aboveWater <= 1 && value < this.seaLevel + 2*this.mu) { return this.seaLevel - this.mu }\n    // if (aboveWater >= 7 && value < this.seaLevel) { return this.seaLevel + 1 }\n    // if (average > this.seaLevel && aboveWater <= 3 && value > this.seaLevel) { return this.seaLevel - this.mu }\n    // if (value > average + this.mu) return value - 1 //sample([value, value-1])\n    // if (value >= Math.max(...ns) && value >= average && value < this.maxHeight * 0.6) return value - 1 //\n    // if (value > 0 && value <= Math.min(...ns)) return value + 1\n    return value\n    // if (Math.abs(value - average) < this.mu) return value\n    // return sample([ value, average ]) //value - 1 //sample([value, value - 1])\n    // if (randomInteger(0,1000) >= this.evolution.smoothSpeed) return value\n    // return sample([\n    //   value,\n    //   // ...ns.map(n => Math.max(n, value)),\n    //   Math.max(value, (Math.min(...ns) + Math.max(...ns))/2)\n    // ])\n    // ])\n  };\n\n  mu = this.heightUnit\n  flow: HeightmapOperation = ({ value, neighbors: ns, localAverage: average }: Cell) => {\n    if (value > 0) { return value }\n    // if (value > this.seaLevel - this.mu) return value //this.seaLevel - this.mu) { return value }\n    let tallest = Math.max(...ns)\n    let { viscosity } = this.evolution\n    let u = this.mu * Math.pow(2, randomInteger(-4, 2 + viscosity))\n    // if (Math.abs(tallest - this.maxHeight) < this.mu) {\n    //   return tallest - 2*this.mu\n    // }\n    if (u > this.mu*2) { u = this.mu*2 }\n    if (value > this.seaLevel && randomInteger(0,1000) < 5) { u = -u }\n    return Math.max(\n      value,\n      tallest-u,\n      // average-u,\n    )\n  };\n\n  erode: HeightmapOperation = ({ value, neighbors: ns, localAverage }) => {\n    // if (value <= localAverage - this.mu) return value\n    // if (value >= localAverage + this.mu) return value - 1\n    return value //sample([value, value - 1])\n    // return value\n    // if (value > localAverage + this.mu) return sample([ value, value - 1 ]) // his.mu //(value + localAverage) / 2\n    // if (value > Math.min(...ns) + 2*this.mu) return value-this.mu //this.mu //sample([ value, value - this.mu ]) // his.mu //(value + localAverage) / 2\n    // if (value < localAverage - this.mu) return sample([ value, value + 1 ]) // his.mu //(value + localAverage) / 2\n    // if (value > this.seaLevel + this.mu) return value - 1\n    // if (randomInteger(0,1000) > this.evolution.erosionSpeed) return value\n    // return sample([ value, value - 1 ]) //this.mu\n  }\n\n  private adjuster = (amount: number) => (position: Position) => {\n    let value = this.valueAtPosition(position)\n    this.write(value + amount, position)\n  }\n\n  extrude = (positions: [number, number][]) => {\n    if (positions.length === 0) return\n    const raiseGround = this.adjuster(\n      this.heightUnit * this.evolution.extrudeIntensity\n    )\n    choose(3, positions).forEach(raiseGround)\n    // positions.forEach(raiseGround) //pos => raiseGround(pos))\n  };\n\n  intrude = (positions: [number, number][]) => {\n    const lowerGround = this.adjuster(-this.heightUnit * this.evolution.extrudeIntensity / 2) //heightUnit)\n    positions.forEach(lowerGround)\n  };\n\n  bombard = (intensity: number = 1) => {\n    let radius = randomInteger(1,4+randomInteger(0,intensity));\n    let impactSite: [number, number] = [ randomInteger(1, this.width-1), randomInteger(1, this.height-1) ]\n    const distanceToImpact = (pos: [number, number]) => distance(pos, impactSite)\n    let craterPositions: [number, number][] = []\n    let craterEdge: [number, number][] = []\n    let [x0,y0]: [number, number] = impactSite;\n    for (let x=x0 - radius; x < x0 + radius; x++) {\n      for(let y = y0 - radius; y < y0 + radius; y++) {\n        let d = Math.round(distanceToImpact([x,y]))\n        if (Math.abs(d - radius) < 1) {\n          craterEdge.push([x,y])\n        } else if (d < radius) {\n          craterPositions.push([x,y])\n        }\n      }\n    }\n    this.intrude(craterPositions);\n    this.extrude(craterEdge);\n  }\n\n  // orogeny = (mountains: [number, number][]) => this.extrude(\n  //   choose(2, mountains)\n  // )\n\n  geoform = (hades: boolean, mountains: [number, number][]) => {\n    const d100 = randomInteger(0,100)\n    if (d100 < this.evolution.bombardmentRate) {\n      // this.bombard(hades ? this.height/2 : this.height/8);\n    }\n\n    if (hades) { this.extrude(mountains) }\n\n    this.evolve(\n      this.flow,\n      // hades\n      this.erode,\n      this.smooth,\n      // todo this.sculpt  ...\n      // hades ? this.erode : this.smooth\n    )\n  };\n\n  componentNames = new NameSequence()\n\n  // todo should use view heights??\n  components(\n    consider: (value: number, ns: number[]) => boolean,\n  ): { [component: string]: [number, number][] } {\n    let componentMap: { [component: string]: [number, number][] } = {}\n    this.each((val, pos) => {\n      let ns = this.neighbors(pos)\n      let roundedValue = Math.round(val / this.mu) * this.mu\n      if (!!consider(roundedValue, ns)) {\n        // do we belong to an existing region? (adjacency)\n        let existingComponentNames = Object.keys(componentMap).filter(component => {\n          // are any of the points in r adjacent to this one?\n          let adjacent = any(componentMap[component], ([x1,y1]) => {\n            return distance(pos, [x1,y1]) <= Math.sqrt(2)\n          })\n          return adjacent\n        })\n        if (existingComponentNames.length > 0) {\n          let firstAdjacentComponentName = existingComponentNames[0]\n          componentMap[firstAdjacentComponentName].push(pos)\n          if (existingComponentNames.length > 1) {\n            // merge all regions...\n            existingComponentNames.forEach(component => {\n              // delete that region + add to first region\n              if (component !== firstAdjacentComponentName) {\n                componentMap[firstAdjacentComponentName] = [\n                  ...componentMap[firstAdjacentComponentName],\n                  ...componentMap[component],\n                ]\n                delete componentMap[component]\n              }\n            })\n          }\n        } else {\n          // invent a new region\n          let component = this.componentNames.next;\n          componentMap[component] = [pos]\n        }\n      }\n    })\n    return componentMap\n  }\n\n  _regions: { [name: string]: [number, number][] } = {}\n\n  regions = () => {\n    if (Object.entries(this._regions).length === 0) {\n     this._regions = this.components(val => val >= this.seaLevel)\n    }\n    return this._regions\n  }\n\n  waterways = () => this.components(val => val < this.seaLevel)\n  ranges = () => this.components(val => val >= 0.8 * this.maxHeight)\n\n  valleys = () => {\n    let level = this.seaLevel\n    return this.components((val,ns) => val >= level && Math.abs(val-level) < this.heightUnit\n                                    && ((ns.reduce((a,b) => a + b, 0) / ns.length) >= level)\n    )\n  }\n\n  bays = () => {\n    let level = this.seaLevel\n    return this.components((val,ns) => val <= level && Math.abs(val-level) < this.heightUnit\n                                    && ((ns.reduce((a,b) => a + b, 0) / ns.length) <= level));\n    // let level = this.seaLevel //this.seaLevel - 1\n    // return this.components(v => v === level || v === level - 1)\n    //(val) => val === level || val === level - 1)) // || val === level - 2))\n                                    // && ((ns.reduce((a,b) => a + b, 0) / ns.length) <= level + 1)\n    // )\n  }\n                                           \n // could also detect trenches?? poetically 'deeps'?\n}\n","import { StringGeneratorSequence } from \"../collections/Sequence\";\nimport { ISequence } from \"../collections/types\";\nimport { titleize, capitalize } from \"./utils/capitalize\";\nimport { choose, sample } from \"./utils/sample\";\n\nconst concepts = [\n  'earth', 'sky',\n  'mountain', 'hill', 'valley', 'peak', 'mound', 'point', 'mountain-chain',\n  'island', 'isle', \n  'sea', 'lake', 'bay', 'pool', 'harbor',\n  'forest',\n  'river', 'glen', 'stream',\n  // barrow, downs, gulch ...\n\n  'land', 'place', 'realm', 'region',\n  'peoples', 'kingdom',\n  'road', 'path',\n  'haven', 'fortress', 'prison', 'citadel', 'stronghold', 'tower', 'garden',\n  // modifiers..\n  'ever-', '-less', 'at-',\n  // masculine/feminine suffices\n  '-person', '-man', '-son', '-woman', '-maid', '-daughter',\n  // relations\n  'friend', 'foe', 'lord', 'slave', 'king', 'queen', 'prince', 'princess',\n\n  // ...aspects...\n  'light', 'dark',\n  'shadow', 'shade',\n  'sun', 'moon', 'stars',\n  'day', 'night', 'spark', 'starlight', 'firmament',\n  // weather\n  'heat', 'cold',\n  'mist', 'snow', 'wind', 'rain', 'cloud', //'hail',\n  'rainbow', 'dew', 'frost',\n  // metals...\n  'tin', 'iron', 'silver', 'gold', \n  // weapons\n  // 'axe', 'sword', 'bow', 'shield',\n\n  // cut, delve, hew, till, hunt...?\n\n  // shades, hues...\n  'white', 'black', 'gray', 'red', 'blue', 'green', 'orange',\n  // ...animals,\n  'dragons', 'elephants',\n  'bears', 'birds', 'horses', 'snakes', 'wolves',\n  // mole...\n\n  // tame animals..\n  // 'boars',\n  'hounds',\n\n  // birds in particular...\n  'swans', 'eagles', 'nightingales',\n  // swallow\n\n  // ...elements,\n  'ice', 'fire', 'earth', 'water',\n\n  // quasi-elements...\n  'embers', 'steam', 'magma', 'radiance',\n  'soot', 'ash', 'salt', 'void',\n\n  // ...times of day\n  'morning', 'evening', 'dusk', 'noon', 'afternoon', 'midnight',\n  // trees\n  'willow', 'pine', 'cherry', 'oak', 'spruce', 'birch', 'elm', 'holly',\n\n  // flowers\n  'rose', 'daisy', 'poppy', 'dandelion', 'lily',\n  // jasmine/jessamine, violet\n  // lotus\n\n  // seasons\n  'autumn', 'winter', 'spring', 'summer',\n  // moods\n  'dread', 'horror', 'awe', 'joy', 'sorrow', 'gloom',\n  // food\n  'apple', 'honey', 'bread', 'elderberry', 'wine', 'fish',\n  // natural substances..\n  'wax',\n  // 'nut',\n\n  // instruments..?\n  // lute, harp, viol ...\n\n  // adjectives...\n  'tall', 'deep', 'lofty', 'lonely',\n  'great', 'large', 'small', 'tiny',\n  'narrow', 'wide', 'sharp', 'giant',\n  'quick', 'pale', 'bitter',\n\n  'golden', 'holy', 'fortunate', 'dusty', 'beautiful',\n  'fell', 'cloudy', 'secret', 'sweet', 'bold',\n  'splendid', 'abundant', 'sparkling',\n\n  // animal aspects...\n  'horns', 'fangs', 'claws',\n\n  // gemstones...\n  // 'emerald', 'ruby',\n\n  // more abstract things...\n  'love', 'dream',\n  'music', 'silence', 'divine',\n\n  'fate', 'thought', 'speech', 'skill',\n  'tomorrow',\n\n  'spirit',\n  'tyranny', 'freedom',\n\n  'magic',\n\n  // bodily substances\n  'blood', 'tears', \n\n  // activities?\n  'laughter',\n\n  // created things...\n  'jewel', 'ship', 'needle', 'bell', 'candle',\n\n  // clothes\n  'mantle', 'veil', // 'garment'\n\n\n  // questing...\n  'journey', 'treasure', 'battle', 'smith',\n\n  // names for the languages themselves? races?\n  // 'dwarves', // dwarrow, khazad,\n  // 'dwarvish', // dwarvish, khuzdul...\n  // 'elves', // aelves, \n  // 'elvish', // aelvish, sindarin,\n  // 'men', // men\n  // 'mannish', // westron, ...\n\n  // 'peoples',\n  // 'common',\n  // men (ylde/glishmen/...), dwarrow (dwarven/khuzdul...), aeldar (aelves/quenya...), maiar, valar,\n\n] as const;\n\nexport type Concept = typeof concepts[number];\nexport const theConcepts: Concept[] = concepts as unknown as Concept[]\ntype Lexeme = string\nexport type Vocabulary = {[key in Concept]: Lexeme}\n\nexport class Dictionary {\n  constructor(\n    public languageName: string,\n    protected vocabulary: Vocabulary,\n    protected enhanceTranslation?: (input: string) => string\n  ) {}\n\n  // todo support more 'syntax'\n  // (at least recognizing 'x of y', where x + y are translated 'first'...)\n  // (also -less should just modify the immediately preceding word)\n  translate(...concepts: Concept[]): Lexeme {\n    // let lastConcept: Concept | null = null;\n    let lastWord: string = ''\n    let translation = concepts.reduce((acc, concept, index) => {\n      let word = this.vocabulary[concept]\n      acc = acc.trim()\n      let space = true\n      if (acc.endsWith('-') || acc.endsWith('*')) {\n        space = false; acc = acc.substring(0, acc.length-1)\n      }\n      if (index > 0 && (word.startsWith('-') || word.startsWith('*'))) {\n        space = false; word = word.substring(1, word.length) //replaceAll('-', '')\n      }\n      // if (word.startsWith(acc[acc.length-1])) { space = false; acc = acc.substring(0, acc.length - 1) }\n\n      let elements = [acc, word]\n      // if (concept.startsWith('-')) {\n      if (lastWord.startsWith('-')) {\n        space = false;\n        // if (word.endsWith('-')) {\n        //   word = word.replaceAll('-', '')\n        elements = [word, acc]\n        // }\n      }\n\n      // lastConcept = concept;\n      lastWord = word;\n      return elements.join(space ? ' ' : '')\n    }, '')\n\n    translation = translation.replaceAll('-', '')\n    // okay, need to map these irregulars to a process...\n    \n    let result = this.enhanceTranslation\n      ? this.enhanceTranslation(translation)\n      : translation\n    return titleize(result) //titleize(translation)\n  }\n\n  name = (...ideas: Concept[]) => (...descriptors: Concept[]) => {\n    let notion = capitalize(ideas.join('-'))\n    let description = capitalize(descriptors.join('-'))\n    let form = `${description} ${notion}`\n    if (description.endsWith('s')) { form = `${description}' ${notion}`}\n    let translation = `${this.translate(\n      ...ideas,\n      ...descriptors,\n      )}`;\n    return [ \n      form,\n      translation\n    ]\n  }\n\n  nameInverse = (...ideas: Concept[]) => (...descriptors: Concept[]) => {\n    let notion = capitalize(ideas.join('-'))\n    let description = capitalize(descriptors.join('-'))\n    let form = `${description} ${notion}`\n    if (description.endsWith('s')) { form = `${description}' ${notion}`}\n    let translation = `${this.translate(\n      ...descriptors,\n      ...ideas,\n      )}`;\n    return [ \n      form,\n      translation\n    ]\n  }\n\n}\n\n\nexport class DictionarySequence\n     extends StringGeneratorSequence\n  implements ISequence<string> {\n    private notions: Concept[]\n  constructor(\n    private dictionary: Dictionary,\n    private invertOrder: boolean = false,\n    ...notions: Concept[]\n  ) {\n    super()\n    this.notions = notions\n  }\n\n  generate(): string {\n    console.log(`Generate ${this.notions.join('/')} using ${this.dictionary.languageName} dictionary...`)\n    const ideas: Concept[] = choose(1, theConcepts);\n    const inventName = this.invertOrder\n      ? this.dictionary.nameInverse(sample(this.notions))\n      : this.dictionary.name(sample(this.notions))\n    const [significance, name] = inventName(...ideas)\n    return `${name} (${significance})`\n  }\n}\n\n// move this stuff outside? \n// todo ... hard to construct full dict from scratch!\n// want some kind of system for assembling the dictionary from\n// (reasonably small number) roots\n// eg if beauty (gezi) then => beatuiful (geziel) .. \n// but more generally reveal the 'concept algebra' of the ideas\nexport type Roots = {\n  man: string\n  woman: string\n  son: string\n  daughter: string\n  crown: string\n  place: string\n  sleep: string\n  great: string\n  small: string\n  beauty: string\n  tree: string\n  flower: string\n  water: string\n  // cove: string\n  safe: string\n  light: string\n  shadow: string\n  one: string\n  many: string\n  joy: string\n  sorrow: string\n  heart: string\n  bitter: string\n  sweet: string\n  point: string\n  heat: string\n  cold: string\n  tall: string\n  deep: string\n  bell: string\n  mound: string\n  run: string\n  sing: string\n  way: string\n  no: string\n  at: string\n  eat: string\n  drink: string\n  air: string\n  good: string\n  bad: string\n  quick: string\n  // slow: string\n  time: string\n  cut: string\n  all: string\n  hard: string\n  soft: string\n  color: string\n  ore: string\n  wing: string\n  snake: string\n  horse: string\n  bear: string\n  // elephant: string\n  dog: string\n  // wild: string\n  fear: string\n  death: string\n  // sound: string\n  tooth: string\n  // wood: string\n  over: string\n  high: string\n  mantle: string\n  // face: string\n  fight: string\n  mere: string\n  strong: string\n}\n\n// try to support building the 150+ word dictionary from\n// smaller set of root words?\n// ensures some internal consistency too?\nconst assembleDictionary = (\n  name: string,\n  roots: Roots,\n  vocabOverrides: Partial<Vocabulary>,\n  replacements: { [key: string]: string } = {}\n): Dictionary => {\n  const {\n    man, woman, son, daughter,\n    crown, place, tree, sleep, flower,\n    beauty, // valor,\n    great, small,\n    water, //cove,\n    safe,\n    // cloud,\n    // star,\n    light, shadow,\n    one, many,\n    joy, sorrow,\n    sweet, bitter,\n    point, \n    heat, cold,\n    tall, deep,\n    bell, mound,\n\n    run, sing, way,\n    // forever,\n    no, at, eat, drink,\n    good, bad,\n    quick, //slow,\n    time, air,\n    cut,\n    all,\n    hard, soft,\n    color, ore,\n    wing,\n    snake, horse, bear, dog,\n    // wild,\n    fear,\n    death,\n    // sound,\n    tooth,\n    heart,\n    // wood,\n    over,\n    high,\n    // mantle,\n    fight,\n    // face,\n    mere,\n    strong,\n  } = roots\n\n  // const kernel = {\n  //   sweet: good + taste,\n  //   bitter: bad + taste,\n  // }\n\n  const basics = {\n    '-person': man,\n    '-man': man,\n    '-woman': woman,\n    '-maid': small + woman,\n    '-son': son,\n    '-daughter': daughter,\n\n    // mantle: over + coat,\n    // veil: over + face,\n    cove: cut + water,\n\n    star: soft + light,\n    daisy: bell + flower,\n    poppy: sleep + flower,\n    dandelion: crown + flower,\n    willow: sorrow + tree,\n    cherry: good + tree,\n    spruce: sweet + tree,\n    pine: bitter + tree,\n    birch: small + tree,\n    elm: tall + tree,\n    oak: hard + tree,\n    holly: joy + tree,\n    king: crown + man,\n    queen: crown + woman,\n    sea: great + water,\n    lake: water + place,\n    pool: water + mere,\n    haven: safe + place,\n    // mist: water + cloud,\n    forest: tree + place,\n    people: man + woman,\n    ice: bitter + cold,\n    prison: bitter + sorrow,\n    jewel: small + beauty,\n    needle: bitter + point,\n    candle: heat + point,\n    hill: small + mound,\n    mountain: mound + place,\n    valley: way + place,\n    peak: point + place,\n    mound: mound + place,\n    land: man + place,\n    lofty: great + high,\n    sky: high + over,\n    low: small + one,\n    river: water + way,\n    isle: water + place,\n    island: deep + water,\n    wine: joy + drink,\n    honey: sweet + drink,\n    apple: small + eat,\n    bread: good + eat,\n    elderberry: safe + eat,\n    fish: small + quick,\n    harvest: tree + cut,\n    night: shadow + time,\n    garden: flower + place,\n    // strong: great + hard,\n    // giant: great + tall,\n    vault: cut + place,\n\n    white: light + color,\n    black: shadow + color,\n    green: tree + color,\n    red: heat + color,\n    blue: cold + color,\n\n    morning: light + time,\n    evening: shadow + time,\n    noon: high + light,\n    fire: heat + light,\n\n    tin: soft + ore,\n    silver: beauty + ore,\n    gold: deep + ore,\n\n    bird: quick + wing,\n    birds: good + wing,\n    horses: horse,\n    elephants: great + horse, //elephant,\n    bears: bear,\n    snakes: snake,\n    wolves: bad + dog,\n    hounds: good + dog,\n    // gray: light + shadow + color, 'red', 'blue', 'green', 'orange',\n    large: tall + great,\n    tiny: small + small,\n    thirst: no + drink,\n    wax: soft + quick,\n\n    veil: small + soft,\n\n    fortunate: great + good,\n    beautiful: great + beauty,\n    // silence: no + sound,\n\n    music: man + sing,\n\n    abundant: many + many,\n    // sparkling: run + light,\n    teeth: many + tooth,\n    battle: many + man + fight,\n    dark: no + light,\n\n    wood: tree + ore,\n  }\n\n  const {\n    fire, red, cove,\n    vault, star, night, ice, harvest, river, mountain, // valley,\n    king, land, lofty, sky, low, people, '-person': person,\n    white, black, morning, evening, noon, bird,\n    large, thirst, music, teeth, battle,\n    wood,\n  } = basics\n\n  const intermediate = {\n    bay: cove + place,\n    harbor: safe + cove,\n    dragons: strong + wing + snake,\n    swans: beauty + bird,\n    eagles: lofty + bird,\n    nightingales: evening + bird,\n    iron: strong + ore,\n    dusk: morning + evening,\n    gray: white + black,\n    orange: harvest + color,\n    afternoon: deep + noon,\n    midnight: deep + evening,\n    lily: star + flower,\n    rose: red + flower,\n    divine: great + king,\n    princess: king + daughter,\n    prince: king + son,\n    kingdom: king + place,\n    fortress: king + safe, \n    citadel: many + people,\n    stronghold: safe + people + deep,\n    tower: tall + over,\n    'mountain-chain': many + mountain,\n    friend: sweet + person,\n    foe: bitter + person,\n    lord: lofty + person,\n    slave: low + person,\n    rain: sky + water,\n    earth: many + land,\n    glen: river + land, // valley,\n    stream: small + river,\n    realm: one + place,\n    region: many + river,\n    peoples: many + people,\n    road: all + person,\n    path: run + way,\n    shade: deep + shadow,\n    sun: sky + light,\n    moon: night + light,\n    autumn: harvest + time,\n    winter: bitter + time,\n    spring: flower + time,\n    summer: heat + time,\n    cloud: sky + water,\n    cloudy: sky + water,\n    'ever-': all + time,\n    '-less': no,\n    'at-': at,\n    stars: many + star,\n    day: light + time,\n    starlight: star + light,\n    spark: strong + fire,\n    snow: sky + cold,\n    mist: soft + sky,\n    firmament: strong + vault,\n    wind: strong + air,\n    rainbow: color + sky,\n    frost: hard + ice,\n    dew: morning + water,\n    dread: fear + king,\n    lonely: one + at + mere,\n    giant: large + man,\n    awe: great + fear,\n    ash: fire + death,\n    steam: fire + water,\n    magma: fire + river,\n\n    dry: heat + thirst,\n    food: eat + harvest,\n    space: great + lofty,\n    dark: deep + shadow,\n    broad: deep,\n    voice: person + music,\n    war: great + battle,\n    laughter: joy + music,\n    // was also thinking\n    // orange: fire + color,\n    // purple: red + blue, ....\n    silence: soft + music,\n  } //= intermediate\n\n  const {\n    dread, ash, rainbow, dry, food, space, dark, broad, orange,\n    divine, voice, iron, spark, silence, //music,\n    // frost, rainbow\n  } = intermediate\n\n  // console.log('assemble!', { roots, basics, intermediate })\n\n  const vocab: Vocabulary = {\n    ...roots,\n    ...basics,\n    ...intermediate,\n    sparkling: many + spark,\n    horror: black + dread,\n    embers: ash,\n    soot: black + ash,\n    radiance: rainbow + color,\n    salt: dry + food,\n    void: no + space,\n    gloom: dark + black,\n    narrow: no + broad, // river + valley + place,\n    wide: broad,\n    sharp: dread + point,\n    pale: soft + white,\n    golden: white + orange + beauty,\n    holy: divine + joy,\n    dusty: dry + soft,\n    fell: cold + fear,\n    secret: dark + silence,\n    bold: strong + voice,\n    splendid: rainbow + light,\n    horns: many + dread + point,\n    claws: bad + point,\n    fangs: dread + teeth,\n    love: heart + person,\n    dream: sleep + music,\n    fate: divine + fire,\n    speech: many + voice,\n    tomorrow: time + time,\n    spirit: light + divine,\n    tyranny: bad + king,\n    magic: divine + spark,\n    thought: light + time,\n    skill: good + person,\n    freedom: strong + people,\n    blood: red + water,\n    tears: sorrow + water,\n    ship: water + wood,\n    journey: place + time,\n    treasure: good + joy,\n    smith: iron + person,\n\n    ...vocabOverrides,\n\n    /**\n     *\n     avalon: magic + island / green + island\n     child: small + person\n     dungeon: dark + stone\n     citadel: castle + high / castle + city\n     fortress: castle + strong\n     throne: high + seat\n\n     aelves: light + people\n     orkh: dark + people\n\n     dwarrow: stone + people\n     men: lake + people\n     heflen: under + hill + people\n     fae: beautiful + people\n\n     gnomes: deep + people\n     colossi: giant + people\n\n     */\n    \n    \n    // grievous: heavy + sorrow\n    // joy: holy + happiness\n    // harsh: bitter + sharp\n    // hollow: soft + place [ i prefer low + place ? ]\n\n  }\n  // console.log(\"FULL VOCAB\", { vocab })\n  return new Dictionary(name, vocab, (input: string) => {\n    Object.keys(replacements).forEach(key => {\n      if (input.includes(key)) {\n        input = input.replaceAll(key, replacements[key])\n      }\n    })\n    return input\n  })\n}\n\n// todo grammatical pipeline\n// radicals -> conjugations -> vocab kernel -> extensions, intermediate aggluts -> final vocab\n\nexport { assembleDictionary }\n","import { Dictionary, Vocabulary } from \"../Dictionary\";\n\n// see https://eldamo.org/content/vocabulary-indexes/vocabulary-words-ns.html\nexport const sindarinVocabulary: Vocabulary = {\n  'heat': 'ast',\n  'cold': 'ring',\n  // was confusing to try to do this one b/c of the order!\n  '-less': 'uv-',\n\n  'ever-': 'oio-', // 'ever-dusk' --> evendim\n  'at-': 'ad-',\n\n  // fem/masculine suffices\n  '-person': '-we',\n  '-man': '-on',\n  '-son': '-ion',\n\n  '-woman': '-ien',\n  '-maid': '-wen',\n  '-daughter': '-iell',\n\n  'mountain-chain': '-orodrim',\n\n  abundant: 'ovor',\n  afternoon: 'avnedhor',\n  apple: 'orf',\n  autumn: 'iarvas-', \n  awe: 'anwar',\n  battle: 'dagor',\n  bay: 'côf', //'-iâ',\n  bears: 'graw',\n  beautiful: 'bain',\n  bell: 'nell',\n  bitter: 'saer',\n  birch: 'hwinn*',\n  birds: 'aewen',\n  black: 'morn', \n  blood: 'sereg',\n  blue: 'luin-',\n  bold: 'beren',\n  bread: '-bas',\n  candle: 'lígu',\n  cherry: 'aebin*',\n  citadel: 'ost-',\n  claws: 'gamp-',\n  cloudy: 'fanui',\n  daisy: 'eirien',\n  dandelion: 'orchen',\n  day: 'or-',\n  deep: 'nûr-',\n  dew: 'mîdh-',\n  divine: 'ballónë', //lean',\n  dragons: 'amlug',\n  dread: 'gost',\n  dream: 'ôl-',\n  dusk: 'moth-',\n  dusty: 'astren*',\n  eagles: 'thoron',\n  earth: 'amar',\n  elderberry: 'gwennod',\n  elephants: 'annabon',\n  elm: 'alaf',\n  evening: 'aduial',\n  fangs: 'caraxë',\n  fate: 'amarth',\n  fell: 'delu', // deadly\n  fire: 'nor-', //'naur-',\n  firmament: 'menel*',\n  fish: 'lhim',\n  foe: '-coth',\n  forest: 'taur*',\n  fortress: 'garth-',\n  fortunate: 'alwed',\n  freedom: 'leinas',\n  friend: '-mellon',\n  frost: 'nais',\n  giant: 'noroth',\n  glen: 'imlad', // dell\n  gloom: 'dim-',\n  gold: 'malt-',\n  golden: 'glóriel',\n  gray: 'thind-',\n  great: 'beleg-',\n  green: 'calen-',\n  harbor: 'hûb',\n  haven: '-lond*', // cúan\n  hill: 'amon', // tun\n  holy: 'aer',\n  honey: 'glî',\n  horns: 'rais',\n  horror: 'angoss-',\n  horses: 'roch',\n  ice: 'hel-',\n  iron: 'ang-',\n  isle: 'tol',\n  jewel: 'mîr',\n  journey: 'ledh-',\n  joy: 'glass-',\n  king: 'aran',\n  kingdom: 'arnad',\n  laughter: 'lalaith',\n  lake: 'ael',\n  land: 'dor-',\n  large: 'daer',\n\n  light: 'ea',\n  dark: 'dûr',\n\n  lily: 'loth-',\n  lofty: 'raud',\n  lonely: 'er*', //air*',\n  lord: '-gon',\n  love: 'mîl',\n  magic: 'lûth',\n  mantle: 'col-',\n  midnight: 'fuin',\n  mist: 'hith-',\n  moon: 'ithil',\n  morning: '-aur',\n  mound: 'coro-',\n  mountain: 'ered',\n  music: '-linnas',\n  narrow: 'agor-',\n  needle: 'aeglin',\n  night: 'dû',\n  nightingales: 'dúlin*',\n  noon: 'nedhor',\n  oak: 'doron*',\n  orange: 'culuin',\n  pale: 'nim-',\n  path: 'lant',\n  peak: 'aegnas', // see point, needle\n  peoples: 'li-',\n  pine: 'thon*',\n  place: 'sa-',\n  point: 'til',\n  pool: 'lîn',\n  poppy: 'lurloss-',\n  prison: '-band',\n  quick: 'lim',\n  rain: 'ross-',\n  rainbow: 'ninniach',\n  realm: '-arthor',\n  red: 'caran-',\n  region: 'gardh',\n  river: '-rant',\n  road: 'men',\n  rose: 'merin*',\n  sea: '-geaer', //'mer',\n  secret: 'dolen*',\n  shade: 'gwath',\n  // irish is scáth \n  shadow: '-lum', // 'gwath', //dûl',\n\n  sharp: 'crisg-',\n  ship: 'cair*',\n  silence: 'dhín-',\n  silver: 'celeb-',\n  skill: 'curu-',\n  sky: '-ell',\n  slave: 'mûl',\n  small: 'cidinn*',\n  smith: '-tan',\n  snakes: 'lŷg',\n  snow: 'loss-',\n  sorrow: 'nîr',\n  spark: 'tinu-',\n  sparkling: 'míriel',\n  speech: 'paeth*',\n  spirit: 'fëa-',\n  splendid: 'claur-',\n  spring: 'ethuil',\n  spruce: 'ecthelorn*',\n  starlight: 'gilith',\n  stars: '-ngil',\n  stream: 'sîr',\n  stronghold: '-gothrond',\n  summer: 'llairë', //aer',\n  sun: 'anor',\n  swans: 'alqua',\n  sweet: 'laich',\n  tall: \"ta-\", //nd-\",\n  tears: 'nirnaeth',\n  thought: 'nauth*',\n  tin: '-ladog',\n  tiny: 'tithen*',\n  tomorrow: 'abor',\n  tower: 'barad-',\n  treasure: 'maen*',\n  tyranny: 'thang',\n  valley: 'nan', // vale; see glen(-imlad)\n  veil: 'fân',\n  water: 'nin',\n  wax: 'lîg',\n  white: 'nique-',\n  wide: '-land',\n  willow: 'tathar*',\n  wind: 'gwae',\n  wine: 'miru',\n  winter: 'rhîw',\n  holly: 'ereg*',\n  garden: 'sant',\n  queen: 'bereth',\n  prince: 'ernil',\n  princess: 'brethil',\n  cloud: 'fan',\n  hounds: 'hû',\n  wolves: 'draug',\n  embers: 'iûl',\n  soot: 'ast',\n  ash: 'lith',\n  salt: 'sing',\n  void: 'gaw',\n  steam: 'tuim',\n  magma: 'orodu',\n  radiance: 'aglar',\n\n  island: 'mineth', //minath',\n  // hail: 'ai',\n}\n\nconst replacements = {\n  'iandë': 'essëa',\n  // 'airia': 'ere',\n  // 'endë': 'essëa', //ssea',\n  'dc': 'g',\n  'nc': 'g',\n  'db': 'v',\n  'uwen': 'uviel',\n  'ean': 'ónë',\n  'nng': 'ng',\n  'airt': 'írd',\n  'gdor': 'gion',\n  'ôlm': 'lór',\n  'rineth': 'rien',\n  // 'egdor': 'egion',\n\n  // 'uie': 'uvie',\n  // 'ir': 'er',\n  // 'ln': 'len',\n  // 'fn': 'van',\n  // 'rngil': 'rgil*',\n  // 'nn': 'n',\n  // 'ororo': 'oro',\n\n  // 'oss': 'ossë',\n\n}\n// const dashBeginnings: { [begin: string]: string } = { 'ng': 'a' }\n\nconst generalEndings: { [end: string]: string } = {\n  'ss': 'ë',\n  // 'dor': 'ion',\n  // 'n': 'iath',\n  // 'lt': 'hen',\n  // 'll': 'l',\n  // 'oss': ''\n}\n\nconst starEndings: { [end: string]: string } = {\n  // 'er': 'essëa',\n  // 'er': 'essëa',\n  'r': 'iand',\n  'on': 'ion',\n  'il': 'ion',\n  // 'eg': 'ion',\n  'nd': 'ë',\n}\n\nconst simpleEnhance = (tx: string) => {\n  tx = tx.split(' ').map(word => {\n    // if (word.startsWith('-')) {\n    //   word = word.substring(1, word.length)\n    //   Object.keys(dashBeginnings).forEach(beginning => {\n    //     if (word.startsWith(beginning)) {\n    //       word = dashBeginnings[beginning] + word\n    //     }\n    //   })\n    // }\n    // if (word.endsWith('-')) {\n      // word = word.substring(0, word.length - 1)\n\n      Object.keys(generalEndings).forEach(ending => {\n        if (word.endsWith(ending)) {\n          word += generalEndings[ending]\n        }\n      })\n    // }\n\n\n    if (word.endsWith('*')) {\n      word = word.replaceAll('*', '')\n      Object.keys(starEndings).forEach(ending => {\n        if (word.endsWith(ending)) {\n          word += starEndings[ending]\n        }\n      })\n    }\n\n    Object.entries(replacements).forEach(([search, replace]) => {\n      word = word.replaceAll(search, replace)\n    })\n\n    // hmmm\n    // word.replaceAll('*', '')\n    return word\n  }).join(' ')\n  return tx\n}\n\nconst sindarinDictionary = new Dictionary(\"Sindarin\",  sindarinVocabulary,\n  (tx) => simpleEnhance(tx))\n  // (tx) => tx)\n  //enhance(tx))\nexport { sindarinDictionary as Sindarin }\n","import { Dictionary, DictionarySequence } from \"../ecosphere/Dictionary\";\nimport { Heightmap } from \"./Heightmap\";\nimport { Sindarin } from \"./Languages/Sindarin\";\n// import Common from \"./Languages/Common\";\n// import Westron from \"./Languages/Westron\";\nimport { sample } from \"./utils/sample\";\n\n// const markov = (lines: string) => new MarkovSequence(lines.split(\"\\n\"))\nclass Linguist {\n  constructor(private dictionary: Dictionary) {}\n  names = {\n    places: new DictionarySequence(this.dictionary, true, 'land', 'place'), //'realm', 'haven', 'place'),\n    regions: new DictionarySequence(this.dictionary, false, 'isle', 'place'),\n    waterways: new DictionarySequence(this.dictionary, false, 'sea', 'lake', 'water', 'pool'),\n    ranges: new DictionarySequence(this.dictionary, true, 'mountain-chain'),\n    mountains:  new DictionarySequence(this.dictionary, false, 'mountain'),\n    valleys: new DictionarySequence(this.dictionary, false, 'valley'),\n    bays: new DictionarySequence(this.dictionary, false, 'bay')\n  }\n\n  // cache names...\n  private waterwayNames: { [rawWaterbodyName: string]: string } = {}\n  private regionNames:   { [rawRegionName: string]: string } = {}\n  private rangeNames:    { [rawRangeName: string]: string } = {}\n  private valleyNames:   { [rawValleyName: string]: string } = {}\n  private bayNames:      { [rawBayName: string]: string } = {}\n\n  nameWaterway(rawWaterbodyName: string, _area: number) {\n    if (this.waterwayNames[rawWaterbodyName] === undefined) {\n      this.waterwayNames[rawWaterbodyName] = this.names.waterways.next\n    }\n    return this.waterwayNames[rawWaterbodyName]\n  }\n\n  nameRegion(rawRegionName: string, _area: number) {\n    if (this.regionNames[rawRegionName] === undefined) {\n      this.regionNames[rawRegionName] = sample([\n        this.names.regions,\n        this.names.places\n      ]).next\n    }\n    return this.regionNames[rawRegionName]\n  }\n\n  nameRange(rawRangeName: string, _area: number): string | undefined {\n    if (this.rangeNames[rawRangeName] === undefined) {\n      this.rangeNames[rawRangeName] = sample([\n        this.names.ranges,\n        this.names.mountains\n      ]).next\n    }\n    return this.rangeNames[rawRangeName]\n  }\n\n  nameValley(rawValleyName: string, _area: number): string | undefined {\n    if (this.valleyNames[rawValleyName] === undefined) {\n      this.valleyNames[rawValleyName] = this.names.valleys.next\n    }\n    return this.valleyNames[rawValleyName]\n  }\n\n  nameBay(rawBayName: string, area: number): string | undefined {\n    if (this.bayNames[rawBayName] === undefined) {\n      this.bayNames[rawBayName] = this.names.bays.next\n    }\n    return this.bayNames[rawBayName]\n  }\n}\n\nexport class Cartographer {\n  // private language: d\n  private linguist = new Linguist(this.dictionary)\n  private _waterways: { [rawWaterbodyName: string]: [number, number][] } = {}\n  private _regions: { [rawRegionName: string]: [number, number][] } = {}\n  private _ranges: { [rawRangeName: string]: [number, number][] } = {}\n  private _valleys: { [rawValleyName: string]: [number, number][] } = {}\n  private _bays: { [rawBayName: string]: [number, number][] } = {}\n\n  constructor(\n    private elevation: Heightmap,\n    private dictionary: Dictionary = Sindarin\n  ) {}\n\n  reset() {\n    this._regions = {}\n    this._waterways = {}\n    this._ranges = {}\n    this._valleys = {}\n    this._bays = {}\n  }\n\n  // cache heightmap regions + names..\n  get regions() {\n    if (Object.keys(this._regions).length === 0) {\n      this._regions = this.elevation.regions()\n    }\n    return this._regions\n  }\n\n  identifyRegion(x: number, y: number): string | undefined {\n    const rawRegionName = Object.keys(this.regions).find(region =>\n      this.regions[region].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rawRegionName) {\n      let area = this.regions[rawRegionName].length\n      return this.linguist.nameRegion(rawRegionName, area)\n    }\n  }\n\n  get waterways() {\n    if (Object.keys(this._waterways).length === 0) {\n      this._waterways = this.elevation.waterways()\n    }\n    return this._waterways\n  }\n\n  identifyWaterway(x: number, y: number): string | undefined {\n    const rawWaterbodyName = Object.keys(this.waterways).find(waterway =>\n      this.waterways[waterway].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rawWaterbodyName) {\n      let area = this.waterways[rawWaterbodyName].length\n      return this.linguist.nameWaterway(rawWaterbodyName, area)\n    }\n  }\n\n  identifyRegionOrWaterway(x: number, y: number): string | undefined {\n    return this.identifyRegion(x,y)\n        || this.identifyWaterway(x,y)\n        || '(err: unknown region/waterway)'\n  }\n\n  get ranges() {\n    if (Object.keys(this._ranges).length === 0) {\n      this._ranges = this.elevation.ranges()\n    }\n    return this._ranges\n  }\n\n  identifyRange(x: number, y: number): string | undefined {\n    const rangeName = Object.keys(this.ranges).find(range =>\n      this.ranges[range].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rangeName) {\n      const area = this.ranges[rangeName].length\n      return this.linguist.nameRange(rangeName, area)\n    }\n  }\n\n  get valleys() {\n    if (Object.keys(this._valleys).length === 0) {\n      this._valleys = this.elevation.valleys()\n    }\n    return this._valleys\n  }\n\n  identifyValley(x: number, y: number): string | undefined {\n    const valleyName = Object.keys(this.valleys).find(valley =>\n      this.valleys[valley].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (valleyName) {\n      const area = this.valleys[valleyName].length\n      return this.linguist.nameValley(valleyName, area)\n    }\n  }\n\n  get bays() {\n    if (Object.keys(this._bays).length === 0) {\n      this._bays = this.elevation.bays()\n      // console.log(\"Found bays\", this._bays)\n    }\n    return this._bays\n  }\n\n  identifyBay(x: number, y: number): string | undefined {\n    const bayName = Object.keys(this.bays).find(bay =>\n      this.bays[bay].find(([x0,y0]: [number, number]) => x===x0 && y===y0)\n    ) || null\n\n    if (bayName) {\n      const area = this.bays[bayName].length\n      return this.linguist.nameBay(bayName, area)\n    }\n  }\n\n  identifyFeatures(aeon: string, x: number, y: number): string | undefined {\n    if (aeon === 'Hadean' || aeon === 'Archean') {\n      return '(Cartography requires calmer aeon...)'\n    }    \n    return this.identifyRange(x,y)\n        || this.identifyValley(x,y)\n        || this.identifyBay(x,y)\n        || ''\n  }\n\n\n  // identifyMountain, identifyRiver\n  // identify -- include all single point features (mountains, rivers, ...'arrows'?)\n}\n\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { EvolvingStocks } from \"../ecosphere/types\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { construct } from \"../ecosphere/utils/replicate\";\nimport { sample } from \"../ecosphere/utils/sample\";\nimport { Heightmap } from \"../ecosphere/Heightmap\";\nimport { Cartographer } from \"../ecosphere/Cartographer\";\n\ntype Aeon = 'Hadean' | 'Archean' | 'Proterozoic'\n\n\nclass WorldMap extends Model {\n  notes = { aeon: () => this.aeon }\n\n  get aeon(): Aeon {\n    let eon: Aeon = 'Hadean';\n    if (this.ticks >= this.mapgenTicks / 2) { eon = 'Archean' }\n    if (this.ticks > this.mapgenTicks) { eon = 'Proterozoic' }\n    return eon;\n  }\n\n  // size = 2\n  // size = 4\n  // size = 8\n  // size = 16\n  // size = 32\n  // size = 64\n  // size = 96\n  size = 128\n  // size = 192\n  // size = 256\n  // size = 512\n  width = this.size\n  height = this.size\n\n  private mapgenTicks = 128 //3 * this.size / 2\n  elevation: Heightmap = new Heightmap(this.width, this.height)\n  private terrain: Board = new Board(this.width, this.height)\n  private vegetation: Board = new Board(this.width, this.height)\n  private mountainSpots: [number, number][] = []\n  private areaPercent = Math.floor(this.area / 100);\n\n  constructor() {\n    super(\"Overworld\")\n    this.evolve(this.evolution)\n    this.actions.create({ name: 'Geoform', act: () => {\n      this.ticks = 0\n      this.cartographer.reset()\n      // this.cartographer._regions = {}\n      // this.cartographer._waterways = {}\n    }});\n    // this.reboot()\n  }\n\n  get tiles() { return this.elevation.view({ overlays: [\n    // this.vegetation,\n    // this.terrain,\n    // this.elevation.binaryImage(),\n    // this.elevation.transform(),\n  ] }) }\n\n  get tokens() { return { trees: this.trees }}\n\n  // ie \"are the tiles currently changing\"\n  get tilesEvolving() { return this.aeon === 'Hadean' || this.aeon === 'Archean' }\n\n  get pointsOfInterest(): { [name: string]: [number, number] } {\n    if (this.aeon === 'Hadean' || this.aeon === 'Archean') {\n      return { '*Please wait...': [50,50]}\n    }\n    let { regions: getRegions } = this.elevation\n    const regions = getRegions()\n    let pois: { [name: string]: [number, number] } = Object.fromEntries(\n      Object.entries(regions).map(([_rawRegionName, positions]: [string, [number, number][]]) => {\n        const regionName = this.cartographer.identifyRegion(...positions[0])\n        let xsum = 0, ysum = 0;\n        positions.forEach(([x, y]) => { xsum += x; ysum += y });\n        let len = positions.length\n        let x = xsum/len, y=ysum/len\n        let theName: string = (len > 80 ? '*' : '') + regionName\n        return [theName, [\n          Math.round(x),\n          Math.round(y)\n          // (x / this.size) * 100,\n          // (y / this.size) * 100,\n        ]]\n      })\n    )\n    return pois\n  }\n\n  @boundMethod\n  tileInspect(x: number, y: number) {\n    const elevation = this.elevation.at(x,y) || 0\n    const li = Math.round(3600 * ( elevation - 4 ) / 5280)\n    const elevationMessage = li === 0 ? 'At sea level' : `${Math.abs(li)} li ${li >= 0 ? 'above' : 'below'} sea level`\n    if (this.aeon === 'Hadean' || this.aeon === 'Archean') {\n      return elevationMessage\n    }\n\n    const region = this.cartographer.identifyRegionOrWaterway(x,y)\n    const features = this.cartographer.identifyFeatures(this.aeon, x,y)\n    return [\n      features, region,\n      // elevationMessage\n    ]\n      .filter(Boolean)\n      .join(\"\\n\")\n    \n    //`${features} / ${region} / ${elevationMessage}`\n  }\n\n  protected cartographer = new Cartographer(this.elevation)\n\n  tileColors = {\n    // terrain\n    // land\n    // '.':  'lightgreen',\n\n    // sea\n    '~': 'midnightblue',\n    ',': 'navy',\n\n    // vegetation...\n    '\\'': 'darkgreen', // tree\n    '\"': 'green', // grove\n    '.': 'lightgreen', // grass\n    // '^': 'mediumaquamarine', // grass / old forest\n\n    // elevation map\n    // '0': 'black',\n    // '1': 'white',\n\n    // heightmap\n    // '1': 'black',\n    // '0': 'navy',\n    // '1': 'navy',\n    // '2': 'midnightblue',\n    // '3': 'midnightblue',\n    // '4': 'blue',\n    // '5': 'moccasin',\n    // '6': 'forestgreen',\n    // '7': 'darkgreen',\n    // '8': 'darkgreen',\n    // '9': 'darkgreen',\n    '0': 'navy',\n    // '2': 'forestgreen',\n    '1': 'royalblue',\n    // '2': 'cornsilk',\n    '2': 'gold',\n    '3': 'silver',\n    '4': 'silver',\n    '5': 'darkgray',\n    '6': 'gray',\n    // '3': 'limegreen',\n    // '4': 'forestgreen',\n    // '5': 'green', //mediumblue',\n    // '6': 'darkgreen',\n    '7': 'darkslategray',\n    '8': 'slategray', //tan',\n    '9': 'white' //lightslategray', //darkslategray',\n  }\n\n  // todo profiles? islands/continents/ocean/grasslands/mountains...\n  // (ie configuration sets for the heightmap options...)\n\n  @boundMethod\n  randomPosition(): [number, number] {\n    let x = randomInteger(0, this.width)\n    let y = randomInteger(0, this.height)\n    return [x, y]\n  }\n\n  @boundMethod\n  randomPositionAlongLine(a: [number,number], b: [number,number], jitter: number = 3): [number, number] {\n    let [ax,ay] = a;\n    let [bx,by] = b;\n    let [dx,dy] = [ Math.abs(ax-bx), Math.abs(ay-by) ]\n    if (dx === 0) {\n      // it's vertical so... any points on this column\n      let y = randomInteger(0, this.height)\n      let x = ax\n      return [x, y]\n    } else if (dy === 0) {\n      let x = randomInteger(0, this.width)\n      let y = ay\n      return [x, y]\n    } else {\n      let slope = dy / dx; // rise over run\n      // so eg ay = slope * ax + b\n      //       -b = (slope * ax) - ay\n      //       b = -((slope * ax) - ay)\n      let y0 = (-((slope * ax) - ay))\n      let x = Math.floor(randomInteger(0, this.width))\n      let y = Math.floor((slope * x) + y0)\n      let j = jitter || 1;\n      return [x + randomInteger(-j,j),y + randomInteger(-j,j)]\n    }\n  }\n\n  get volcanoes() {\n    if (this.mountainSpots.length === 0) {\n      let targetSpotCount = Math.floor(1.6 * this.areaPercent)\n      let [a,b] = [ this.randomPosition(), this.randomPosition() ]\n      let chainSpots = construct(() => this.randomPositionAlongLine(a,b), targetSpotCount, false)\n      let isleSpots = construct(() => this.randomPosition(), targetSpotCount, false)\n\n      this.mountainSpots = [\n        ...chainSpots,\n        ...isleSpots\n      ]\n    }\n    return this.mountainSpots\n  }\n\n  genHeightmap() {\n    const hades = this.aeon === 'Hadean'\n    this.elevation.geoform(hades, this.ticks < 3 ? this.volcanoes : [])\n  }\n\n  buildTerrain() {\n    this.terrain.each((x,y,_value) => {\n      let height = this.elevation.at(x,y) //parseInt(this.elevation.at(x,y) || '0')\n      if (height >= 9) {\n        this.terrain.write(\"^\", x, y)\n      } else if (height <= 4) {\n        this.terrain.write(sample([\"~\", ',']), x, y)\n      } else {\n        this.terrain.write('.',x,y)\n      }\n    })\n  }\n\n  growVegetation() {\n    let tree = \"'\"\n    let grove = \"\\\"\"\n    let grass = \".\"\n    let plants = [tree,grove,grass]\n    let sea = this.elevation.seaLevel\n    let treeline = this.elevation.maxHeight / 2\n\n    this.vegetation.step((val, neighbors, position) => {\n      if (tree === val) return tree\n      let alive = (plants.includes(val))\n      let h = this.elevation.at(...position)\n      if (h > treeline || h < sea) { return ''}\n      let ns = neighbors.filter(n => plants.includes(n)).length\n      if (alive) {\n        if (ns > 0 && (val === grove)) { return val }\n        // if (ns > 1 && (val === tree)) { return val }\n        if (ns === 2 || ns === 3) return grass\n        else if (ns === 6) return tree\n        else if (ns === 7) return grove\n      } else {\n        if (ns === 2) return grass\n        if (randomInteger(0,1000) < 32) return grass\n      }\n      return ''\n    })\n  }\n\n  get trees(): [number, number][] {\n    let tree = \"'\"\n    let grove = \"\\\"\"\n    // let grass = \".\"\n    let treeSigns = [tree,grove] //,grass]\n    const trees: [number, number][] = []\n\n    this.vegetation.each((x,y,val) => {\n      if (treeSigns.includes(val)) trees.push([x,y]) \n    })\n    return trees\n  }\n\n  get area() { return this.width * this.height }\n\n  @boundMethod\n  evolution({ resources }: EvolvingStocks, t: number) {\n    if (t > 0) {\n      // if (t % 100 === 0) { console.log(\"The world is \" + (t / 100) + \" million years old\") }\n      if (t <= this.mapgenTicks) {\n        this.genHeightmap()\n        this.growVegetation()\n      }\n    }\n\n  }\n}\nconst worldMapMaker = new WorldMap()\nexport default worldMapMaker;\n\n","// dwarrow-folk\nimport { assembleDictionary, Dictionary, Roots } from \"../Dictionary\";\nconst khuzdulRoots: Roots = {\n  beauty: 'kib', // 'ea',\n  ore: 'il',\n  water: '-na',\n  way: 'la',\n\n  air: 'aer',\n  all: 'ere',\n  at: 'es-',\n  bad: 'nu',\n  bear: 'gruw',\n  bell: 'bjel',\n  bitter: 'mé',\n  cold: 'í',\n  color: 'o',\n  crown: 'ar',\n  cut: 'kh',\n  daughter: 'al',\n  death: 'lun',\n  deep: 'yse',\n  dog: 'hu',\n  drink: 'ik',\n  eat: 'zu',\n  fear: 'ga',\n  fight: 'kla',\n  flower: 'ela',\n  good: 'lu',\n  great: 'agh',\n  hard: 'ekh',\n  heart: 'eru',\n  heat: '-hrond', //thu',\n  high: 'tl',\n  horse: 'raph',\n  joy: '-hyt',\n  light: 'ia-',\n  man: '-rhd',\n  mantle: '-manté', //brae',\n  many: 'ah',\n  mere: 'sea',\n  mound: 'haeth',\n  no: 'u-',\n  one: 'eru',\n  over: 'ya-',\n  place: 'n-',\n  point: '-zirak',\n  quick: 'ea-',\n  run: 'r',\n  safe: '-cúa',\n  shadow: 'uz',\n  sing: 'ina',\n  sleep: '-dre',\n  small: 'eai',\n  snake: 'lug',\n  soft: 'i',\n  son: 'on',\n  sorrow: 'srg',\n  strong: 'elu',\n  sweet: 'hlor',\n  tall: 'mu-',\n  time: 'an',\n  tooth: 'tur',\n  tree: 'an',\n  wing: 'hla',\n  woman: 'an',\n}\n\nconst khuzdulVocab = {\n  // common: '',\n  // dwarvish: 'khuzdul',\n\n  // jewel: 'silmaril',\n  // // horn: 'horn',\n  // summer: 'samhradh', //sumrum',\n  // prison: 'kharkhor', //carcern', //fengsel',\n  // iron: 'jern',\n  // holly: 'kristtorn',\n  // land: '-lann', // jord',\n  // mountain: 'fell', //'fjell',\n  // 'mountain-chain': 'fellkjede',\n  // peak: 'felltindr',\n  // bay: 'vik-',\n  // stars: '-sterne',\n  // silence: '-stille',\n  // // silver: 'sølv',\n  // river: 'elv',\n  // ice: 'yses', //is',\n  // icy: 'iskald',\n  // fangs: 'hoggtann',\n  // dragons: 'drager',\n  // giant: 'kjempe',\n  // hill: 'høyde',\n  // golden: 'gyllen',\n  // gold: 'gull',\n  // music: 'musikk',\n  // pine: 'furu',\n  // eagles: 'orn-',\n  // gray: 'liath-',\n  // stronghold: 'daingneach', //bfort',\n  // tyranny: 'dyren-', // 'tiren-', //grusomhet',\n  // nightingales: 'nattergal',\n  // vale: 'dal',\n  // valley: 'dalr',\n  // magic: 'seith',\n  // '-woman': '-kona', //víf',\n\n  // haven: '-cúan', //'höfn',\n  // swans: 'eala', // swoon', //'sisne', //'cygnus',\n  // day: 'dagaz', //\n\n  // cherry: 'kerásion',\n  // // mist: 'niwl', // also like (icelandic for fog): fjúka\n\n  // // actual khuzdul vocab!!\n  // laughter: 'gàire',\n  // spring: 'earrach',\n\n  // lonely: 'ensam',\n  // isle: 'ö',\n\n  mist: 'nevel',\n}\n\nconst trueKhudzulVocab = {\n  speech: 'aglâb', //agbla'\n  lord: 'uzbad',\n  path: 'nâla', // river-course\n  river: 'nâla', // river-course\n  water: 'nâla', // river-course\n  black: 'narâg',\n  cloud: 'shathûr',\n  lake: 'zâram',\n  pool: 'zâram',\n  silver: 'kibil-', // 'zigil',\n  stream: 'ûl',\n  // river: 'ûlnâla', // river-course\n  horn: 'inbar',\n  fortress: 'gathol',\n  dark: 'azan',\n  red: 'baraz',\n  valley: 'duban',\n  great: 'gabil',\n\n  delve: 'dûm',\n  // dream: 'draumr',\n  autumn: 'salôn', // lit. \"fall\"\n\n  \n}\n\n// todo add some vocab too? shield -- skjald\n// and override: oak -- eik\nconst khuzdul: Dictionary = assembleDictionary('Khuzdul',\n  khuzdulRoots,\n  {\n    // great: 'gabil',\n    ...khuzdulVocab,\n    ...trueKhudzulVocab\n  },\n  {\n    'kibeah': 'ea',\n    'ia': 'e',\n    'hrond': 'th',\n    'ee': 'i',\n    'ae': 'e',\n    'elu': 'lu',\n    'esa': 'as',\n    'gh': 'g',\n    'hd': 'd',\n    'ag': 's',\n    'anan': 'a',\n    'he': 'e',\n    'rdn': 't',\n    'ly': 'i',\n    'ah': 'r',\n    'tl': 'r',\n    'yse': 'is',\n    'ss': 'z',\n    'srg': 'zh',\n    'sre': 'se',\n    'a r': 'ah',\n    'l m': 'n',\n    'g m': 'k',\n    'aa': 'u',\n    'thn': 't',\n    'eo': 'u',\n    'rdr': 'l',\n    'sna': 'se',\n    'a s': 'sh',\n    'th s': 'st',\n    'th u': 'w',\n    'eai': 'a',\n    'kho': 'cu',\n    'sr': 'sur',\n    'iti': 'ut',\n    'rg': 'u',\n    'thz': 'thus',\n    'ise': 'se',\n    'dre': 'li',\n    'rdi': 'no',\n    'na': 'r',\n\n    'rr': 'r',\n    'tth': 'shi',\n    // 'yrso': 'ara',\n    // 'bre': 'gorn',\n    'serl': 'ar',\n    'ahie': 'agorn',\n    \n    'uu': 'w',\n    'wz': 'yrs',\n    'st': 'm',\n    'cuk': 'kh',\n    'rdz': 'ts',\n    'rl': 'l',\n    'wts': 'uz',\n    'tiu': 'reg',\n    'lt': 'nd',\n    \n    \n    // 'bre': 'vr',\n    // 'wz': 's',\n    // 'sre': 'st',\n    // 'esa': 'as',\n    // // 'nhd': 'rd',\n    // // 'hh': 'g',\n    // // 'ii': 'y',\n    // 'rr': 'r',\n    // 'rh': 'r',\n    // 'ysen': 'iso',\n    // 'eai': 'o',\n    // 'ao': 'e',\n    // 'ui': 'o',\n    // 'oe': 'u',\n    // 'ua': 'ie',\n    // // 'oa': 'e',\n    // 'mrd': 'v',\n    // 'gh': 'g',\n    // 'aa': 'a',\n    // 'ndi': 't',\n    \n    \n    // 'dard': 'drem',\n    // 'adard': 'e',\n\n    // 'eru': 'ui'\n  //   // 'eth': 'sh',\n  //   // 'erue': 'er',\n  //   'esa': 'as',\n  //   'yseold': 'iso',\n  //   'oa': 'o',\n  //   // 'ae': 'y',\n  //   'ea': 'y',\n  //   'yy': 'ea',\n  //   // 'hl': 'l',\n  //   // 'agh': 'g',\n  //   'uia': 'a',\n  //   'aya': 'ie',\n  //   // 'eya': 'ea',\n\n\n  //   // 'rrh': 'r',\n  //   'ao': 'u',\n  //   // 'uu': 'w',\n  //   // 'gtl': 'l',\n  //   // 'nn': 'm',\n  //   // 'ui': 'i',\n  //   'rhd': 'd',\n  //   'nina': 'nia',\n  //   'ghart': 'gard',\n  //   'rdt': 'dh',\n  //   'asgh': 'asg',\n  //   'elut': 'lût',\n  //   'úun': 'úan',\n  //   'ahla': 'ala',\n  //   'aght': 'og',\n  //   'yhl': 'il',\n  //   'ogl': 'gel',\n  //   'thanth': 'tan',\n  //   'ila': 'ye',\n  //   'ss': 'th',\n  //   'tly': 'y',\n  //   'dan': 'del',\n  //   'ht': 'd',\n  //   'dad': 'ed',\n  //   'aeta': 'eth',\n  //   'agh': 'zh',\n  //   'thun': 'tr',\n  //   'yseo': 'iso',\n  //   'ved': 'th',\n  //   'ndn': 'nyn',\n\n})\n\nexport default khuzdul;\n","// todo thinking Common could be interesting\n// idea is to fill in the dictionary but choose \n// poetic wording where possible\n// (quality here depends on better solutions\n// for syntax / ordering / particles / etc too)\n\n// actually just doing old english now but it's still metal\n\nimport { Dictionary, Vocabulary } from \"../Dictionary\"\n\n\nconst westronVocab: Vocabulary = {\n  heat: 'hǣte',\n  cold: 'cheald',\n  abundant: 'ofer',\n  afternoon: 'ofernón',//afternoon',\n  apple: 'æppel', // apple',\n  autumn: 'hærfest', \n  awe: 'ondrysnu', //awe',\n  battle: 'gefeoht', //'feoht',\n  bay: 'berie', //'-iâ',\n  bears: 'bruin', // 'bera',\n  beautiful: 'cyrten',\n  bell: 'cnyll', //bell',\n  birch: 'beorc',\n  bitter: 'āfor',\n  birds: 'bord',\n  black: 'murk', //'blæc', //black',\n  blood: 'blod',\n  blue: 'blár', // 'bleó', //blaw',\n  bold: 'baldor',\n  bread: 'hláf', //bread',\n  candle: 'condell',\n  cherry: 'cirse', // cherry',\n  citadel: 'burhfæsten', //city',\n  claws: 'clif',\n  cloudy: 'genipfull', //clouded',\n  daisy: 'dæges', // woundwort',\n  dandelion: 'æg-wyrt', // puffball',\n  day: 'dæg', //day',\n  dark: 'dearc',\n  deep: 'deop', //deopnes',\n  dew: 'deaw',\n  divine: 'týr', //sublim', //godcund', //godbearn',\n  dragons: 'fýrdraca', //wyrm //sky-serpent',\n  dread: 'bróga', //ghastly',\n  dream: 'drēam', // dréam',\n  dusk: 'dosk', //eventide',\n  dusty: 'dystig',\n\n  eagles: 'earn',\n  earth: 'aarde',\n  elderberry: 'elder',\n  elephants: 'elpend', //oliphaunt',\n  elm: 'wych', //wahu',\n\n  evening: 'ǣfnung', //evendim',\n  fangs: '-fon',\n  fate: 'déaþwyrd', //fate',\n  fell: 'fiellan', // deadly\n  fire: 'fýr', //furen', //'fier', //bæl', //fire', //'naur-',\n  firmament: 'heofon', //heavens',\n  fish: 'fisc',\n  foe: '-ġefāh', //fāhman', //'-feond', //enemy',\n  forest: 'forwest',\n  fortress: 'healden',\n  fortunate: 'eádeg', //lucky',\n  freedom: 'freodom',\n  friend: 'frēond', //friend',\n  frost: 'hrīm', //rime',\n  giant: 'ēoten', // colossus',\n  glen: 'glyn', // dell\n  gloom: 'glōm', //murk',\n  gold: 'guld',\n  golden: 'gylden',\n  gray: 'græg-', //grár', //græ',\n  great: 'ærgod', // great',\n  green: 'grene',\n\n  harbor: 'hyth',\n  haven: '-haff', //hæfen', //port',\n  hill: '-holm', // 'hyll', // tun\n  holy: 'hāliġ',\n  honey: 'huniġ',\n  horns: 'kern',\n  horror: 'fyrhtu',\n  horses: 'eoh',\n\n  ice: 'īs',\n  iron: 'ísen',\n  isle: 'yle',\n  island: 'īegland', //island',\n\n  jewel: 'siġel',\n  journey: 'faru',\n  joy: 'wynn', //'hiht', // 'drēam', // 'ġefēa', //joy',\n  king: 'kenning',\n  kingdom: 'kenningdom',\n  laughter: 'hleahtor',\n  lake: 'lac',\n  land: 'lond', //eäth',\n  large: 'rum',\n  light: 'leoht',\n  lily: 'lilie',\n  lofty: 'hoch',\n  lonely: '-syndrig',\n\n  lord: 'frēa', //-lord',\n\n  love: 'leof',\n  magic: 'rún', //charm',\n  mantle: 'mantel', //hacele',\n  midnight: 'midnyght',\n  mist: '-hase', //'mistur',\n  moon: 'mēnô', //mone', // 'mōna',\n  morning: '-morn',\n  mound: 'tel-',\n  mountain: 'munt-',\n  music: 'dréam', //cræft', //-song',\n\n  narrow: 'nearunes',//narrow-',\n  needle: 'nædl', //needle',\n  night: 'nyght',\n  nightingales: 'stærlinc', //thrush',\n  noon: 'noon',\n\n  oak: 'eik',\n  orange: 'orenge',\n\n  pale: 'wann-',\n  path: 'pade-', //brimlad',\n  peak: 'piic', //pinca', // see point, needle\n  peoples: '-folk',\n  pine: 'pintreow',\n  place: '-stead',//bídung', //place',\n  point: '-gad',\n  pool: '-clæne', //mere',\n  poppy: 'popiġ', //celandine',\n  prison: '-cweartern', //gaol', // 'carcern'\n\n  quick: 'cwic', //fast',\n  rain: 'reġn', // regn',\n  rainbow: 'reġnboga', //rainbow',\n\n  realm: '-ríce', //ward',\n  red: 'reod-',\n  region: '-guard',\n  river: '-ex',\n  road: 'rād', //road',\n  rose: 'ros',\n\n  sea: 'sǣ', // 'estmere', //'mer',\n  secret: 'dēagol', //hord', //secret',\n  shade: 'sceadu',\n  shadow: 'sceaduwe', //shadow', // 'gwath', //dûl',\n  sharp: 'sharp',\n  ship: 'scip',\n  silence: 'swīġe', //stilnes', //stige',\n  silver: 'seolfor',\n  skill: 'cræft', //searu',\n  sky: 'heofon', //sky',\n  slave: 'träl', //thrall',\n  small: 'smæl',\n  smith: '-wyrhta',\n  snakes: 'natra',\n  snow: 'snáw', //snow-',\n  sorrow: 'sorh',\n  spark: 'ysl', //spark-',\n  sparkling: 'bladesung',\n  speech: 'sprǽc', //speech*',\n  spirit: 'arodnes-',\n  splendid: 'from', //splendid-',\n  spring: 'lencten',\n  spruce: 'sæppe',\n  starlight: 'tunglenleoht', //light',\n  stars: '-tunglen', // tungol // steorra', //star',\n  // astronomy: 'tungolcræft',\n  stream: 'strēam', //river',\n  stronghold: '-fæsten',\n  summer: 'haf', //sumor', //aer',\n  sun: 'sunu',\n  swans: 'ilfetu', //swan',\n  sweet: 'swéte', //sweet',\n\n  tall: \"brant-\", //nd-\",\n  tears: 'hróp', //tears',\n  thought: 'thóht', //thought*',\n  tin: '-zin',\n  tiny: 'tyne*',\n  tomorrow: 'tōmorgen', //morrow',\n  tower: 'stipel-',\n  treasure: 'sinc',\n  tyranny: 'mánbealu',\n\n  valley: 'dæl', //vale',\n  veil: 'oferbræ', //veil',\n  water: 'wæter', //water',\n  wax: 'weax',\n  white: 'albe', // hwit\n  wide: 'wīd', //wijd',\n  willow: 'welig',\n  wind: 'gwynt',\n  wine: '-win',\n  winter: 'yver', //'winter',\n  holly: 'holen-',\n  garden: 'gewyrtún', //garden',\n  queen: 'cwæn', //cwen', //queen',\n  prince: 'fyrste', //prince',\n  princess: 'iníon', //princess',\n  cloud: 'genip', //cloud',\n  hounds: 'hund',\n  wolves: 'wulf',\n  embers: 'ǣmyrġe', // 'ysl', //embers',\n  soot: 'hrum', //soot',\n  ash: 'asce',\n  salt: 'sealt',\n  void: 'rūm', //space',\n  steam: 'stôm',\n  // 'stēam',\n  magma: 'hraun', //lava',\n  radiance: 'glæm', //brilliance',\n\n  '-less': 'no-',\n  'ever-': 'ǣfre-', //even-', // 'ever-dusk' --> evendim\n  'at-': 'æt-', //upon-',\n\n  // fem/masculine suffices\n  '-person': '-wight',\n  '-man': '-man',\n  '-son': '-ing',\n\n  '-woman': '-fro',\n  '-maid': '-magað', //'-mæden', //maid',\n  '-daughter': '-dohtor',\n  \n  'mountain-chain': 'beorgstede',\n}\n\nconst replacements: { [key: string]: string } = {\n  'lenlond': 'llin',\n}\n\nconst Westron = new Dictionary('Westron', westronVocab, (input: string) => {\n  Object.keys(replacements).forEach(key => {\n    if (input.includes(key)) {\n      input = input.replaceAll(key, replacements[key])\n    }\n  })\n  return input\n})\n\nexport default Westron\n","import { Dictionary, Vocabulary } from \"../Dictionary\"\n\n// want a truly 'common' or plain language...\n// much closer to middle (or even contemporary)\n// . still poetic/whimsical/dramatic/etc)\nconst commonVocabulary: Vocabulary = {\n  heat: 'hete',\n  cold: 'cold',\n  cloud: 'cloud', //'pall',\n  cloudy: 'cloudy', //'pallid', //clouded',\n  daisy: 'woundwort',\n  dandelion: 'puffball',\n  dragons: 'drake',\n  dark: 'derk',\n  island: 'ylond',\n  abundant: 'abounding',\n  afternoon: 'overnoon',\n  apple: 'pome',\n  autumn: 'fall', \n\n  awe: 'wonder', //awe',\n  battle: 'batell',\n  bay: 'bay', //'-iâ',\n  bears: 'bera', //bruin',\n  beautiful: 'lovesome',\n  bell: 'belle', //bell',\n  birch: 'birce',\n  birds: 'bord',\n\n  bitter: 'bittre',\n  // 'murk' in the sense of absorbing all light\n  black: 'merk-', //'blake-', //black',\n  blood: 'blood',\n  blue: 'blew', //blaw',\n  bold: 'bolt',\n  bread: 'bred', //bread',\n  candle: 'candel',\n  cherry: 'cherie', // cherry',\n  citadel: 'city-hold', // burhfæsten', //city',\n  claws: 'clawe',\n  day: 'daye', //day',\n  deep: 'deepe', //deopnes',\n  dew: 'deaw',\n  divine: 'gode', //divin',\n  // dragons: 'fýrdraca', //wyrm //sky-serpent',\n  dread: 'drede', //ghastly',\n  dream: 'dreame',\n  dusk: 'eventide',\n  dusty: 'dusti',\n\n  eagles: 'egle',\n  earth: 'erthe',\n  elderberry: 'elder',\n  elephants: 'olifant',\n  elm: 'elme', //wahu',\n\n  evening: 'evenyng', //dim',\n  fangs: 'fangtooth',\n  fate: 'doom', //fate',\n  fell: 'fellen', // deadly\n  fire: 'fier', //'fȳr', //fier', //bæl', //fire', //'naur-',\n  firmament: 'heven', //heavens',\n  fish: 'fisch',\n  foe: 'faman', //enemy',\n  forest: 'foreste',\n  fortress: 'holden',\n  fortunate: 'lukky', //lucky',\n  freedom: 'freodom',\n  friend: 'frēond', //friend',\n  frost: 'ryme',//forst',\n  giant: 'giaunt', // colossus',\n  glen: 'gleann', // dell\n  gloom: 'gloam',\n  gold: 'gold',\n  golden: 'gulden',\n  gray: 'grey',\n  great: 'great',\n  green: 'gre',\n\n  harbor: 'hyth',\n  haven: '-havene', //port',\n  hill: '-hyll', // tun\n  holy: 'hāliġ',\n  honey: 'huniġ',\n  horns: 'horne',\n  horror: 'fyrhtu',\n  horses: 'eoh',\n\n  ice: 'is-',\n  iron: 'iren-',\n  isle: 'yl-', //'īegland', //island',\n\n  jewel: 'jeuel',\n  journey: 'journe',\n  joy: 'joye', //ġefēa', //joy',\n  king: 'kenning',\n  kingdom: 'kenningdom',\n  laughter: 'laughtre',\n  lake: 'lac',\n  land: '-land', //eäth',\n  large: 'larc', //grand',\n  light: 'lighte',\n  lily: 'lilly',\n  lofty: 'lofte',\n  lonely: 'lone',\n\n  lord: 'lord', //-lord',\n\n  love: 'love',\n  magic: 'magyk', //charm',\n  mantle: '-cloke', //mantel',\n  midnight: 'midnyght',\n  mist: '-fog',\n  moon: 'mone', // 'mōna',\n  morning: '-morn',\n  mound: '-hyll',\n  mountain: 'mount',\n  music: 'musika', //dréamcræft', //-song',\n\n  narrow: 'narrowe',//narrow-',\n  needle: 'nedle', //needle',\n  night: 'nyght',\n  nightingales: 'thrush', //stærlinc', //thrush',\n  noon: 'noon',\n\n  oak: 'oak',\n  orange: 'orenge',\n\n  pale: 'bleek-',\n  path: 'peth', //brimlad',\n  peak: 'peek', // see point, needle\n  peoples: '-folk',\n  pine: 'pyne',\n  place: '-stead',//bídung', //place',\n  point: '-point',\n  pool: '-pole', //mere',\n  poppy: 'celandine',\n  prison: 'gaole', //'prisoun', // gaol', // 'carcern'\n\n  quick: 'quic',\n  rain: 'rain',\n  rainbow: 'rainbow',\n\n  realm: 'ward', // -ríce', //ward',\n  red: 'reod-',\n  region: '-regioun', //guard',\n  river: 'ryver',\n  road: 'rode',\n  rose: 'rose',\n\n  sea: 'see', //estmere', //'mer',\n  secret: 'secrette', //secret', //secret',\n  shade: 'shade',\n  shadow: 'schadowe', //shadow', //sceaduwe', //shadow', // 'gwath', //dûl',\n  sharp: 'sharp',\n  ship: 'shippe',\n  silence: 'stilnes', //silence',\n  silver: 'argent', // 'sulver',\n  skill: 'skille', //searu',\n  sky: 'skie', //'heaven', //sky',\n  slave: 'thralle',\n  small: 'smal',\n  smith: '-wright',\n  snakes: 'addere', //serpent',\n  snow: 'snow', //snow-',\n  sorrow: 'sorwe',\n  spark: 'sparke', //ysl', //spark-',\n  sparkling: 'glitre',\n  speech: 'speche', //speech*',\n  spirit: 'gāst-',\n  splendid: 'splendur', //from', //splendid-',\n  spring: 'springen',\n  spruce: 'spruse',\n  starlight: 'sterrelighte',\n  stars: '-sterre', //star',\n  stream: 'strēam', //river',\n  stronghold: '-stranghalde',\n  summer: '-sumer', //aer',\n  sun: 'sun',\n  swans: 'swan', //swane',\n  sweet: 'sweete', //sweet',\n\n  tall: \"-talle\", // brant-\", //nd-\",\n  tears: 'cryinge', //tears',\n  thought: 'thoughte', //thought*',\n  tin: 'tin',\n  tiny: 'tyny',\n  tomorrow: 'tomorwe',\n  tower: 'torr-',\n  treasure: 'tresour',\n  tyranny: 'tirranye', //mánbealu',\n\n  valley: 'valeye', //'dæl', //vale',\n  veil: 'veyl', //veil',\n  water: 'watir',\n  wax: 'waxe',\n  white: 'hwit', // hwit\n  wide: 'wyd',\n  willow: 'willow',\n  wind: 'wynd-',\n  wine: '-wyn',\n  winter: 'wintre',\n  holly: 'holi-',\n  garden: 'gardyn', //garden',\n  queen: 'cwen', //queen',\n  prince: 'prince',\n  princess: 'princess',\n  hounds: 'hound',\n  wolves: 'wolf',\n  embers: 'embre', //embers',\n  soot: 'soote', //soot',\n  ash: 'ash',\n  salt: 'salt',\n  void: 'voide', //space',\n  steam: 'steem',\n  magma: 'lava',\n  radiance: 'gleam', //brilliance',\n\n  '-less': 'no-',\n  'ever-': 'even-', // 'ever-dusk' --> evendim\n  'at-': 'by--',\n\n  // fem/masculine suffices\n  '-person': '-persoun',\n  '-man': '-man',\n  '-son': '-sonn',\n\n  '-woman': '-weoman',\n  '-maid': '-mayden', //maid',\n  '-daughter': '-doughter',\n  \n  'mountain-chain': ' mountayne', //mountains',\n}\n\nconst Common = new Dictionary(\"Common\", commonVocabulary)\nexport default Common\n","import { Concept, Dictionary, theConcepts } from \"../ecosphere/Dictionary\"\nimport { Model } from \"../ecosphere/Model\"\nimport Khuzdul from \"../ecosphere/Languages/Khuzdul\"\nimport { Sindarin } from \"../ecosphere/Languages/Sindarin\"\nimport Westron from \"../ecosphere/Languages/Westron\"\nimport Common from \"../ecosphere/Languages/Common\"\n// import { Celestial } from \"./Languages/Celestial\"\nclass Language extends Model {\n  constructor(private dictionary: Dictionary) {\n    super(`Language Explorer`)\n    this.actions.create({ name: 'Common', act: () => this.dictionary = Common })\n    this.actions.create({ name: 'Westron', act: () => this.dictionary = Westron })\n    this.actions.create({ name: 'Sindarin', act: () => this.dictionary = Sindarin })\n    this.actions.create({ name: 'Khuzdul', act: () => this.dictionary = Khuzdul })\n    // todo :)\n    // this.actions.create({ name: 'Primordial', act: () => this.dictionary = Celestial })\n    // this.policies.create({ name: 'Show Full Dictionary', manage: () => { } })\n    // this.\n  }\n\n  t = (...concepts: Concept[]) => this.dictionary.translate(...concepts)\n\n  check = (translations: string[], ...concepts: Concept[]) => {\n    let tx = this.t(...concepts)\n    translations.forEach(translation => {\n      if (tx === translation) { tx = `*${tx}`}\n    })\n    return tx; //`%${tx}`;\n  }\n\n  notes = {\n    '*lang': () => `${this.dictionary.languageName} Phrasebook`,\n    // validate that we haven't broken sindarin\n    '\"Nightingale\"': () => this.check([\"Tinuviel\", \"Luthien\"], 'spark', '-maid'),\n    'Silver River': () => this.check([\"Celebrant\", \"Kibilnâla\"], 'silver', 'river'),\n    'Haven of the Gods': () => this.check([\"Avallónë\", \"Asgard\"], 'at-', 'divine'),\n    'Swan Haven': () => this.check([\"Alqualondë\", \"Ealacúan\"], 'swans', 'haven'),\n    'Star-Eagle': () => this.check([\"Thorongil\", \"Aragorn\"], 'eagles', 'stars'),\n    'Dream Island': () => this.check([\"Lórien\"], 'dream', 'island'),\n    'Lonely Isle': () => this.check([\"Tol Eressëa\"], 'isle', 'lonely'),\n    'Land of Pines': () => this.check([\"Dorthonion\"], 'land', 'pine'),\n    // 'Mound of Summer': () => this.check(\"Corollaerë\", 'mound', 'summer'),\n    'Mound of Summer': () => this.check([\"Corollairë\"], 'mound', 'summer'),\n    'Tall White Point': () => this.check([\"Taniquetil\"], 'tall', 'white', 'point'),\n    'Spirit of Fire': () => this.check([\"Fëanor\"], 'spirit', 'fire'),\n    'Magic Woman': () => this.check([\"Lûthien\"], 'magic', '-woman'),\n    'Mountains of Tyranny': () => this.check([\"Thangorodrim\"], 'tyranny', 'mountain-chain'),\n    'Fire Stronghold': () => this.check([\"Norgothrond\"], 'fire', 'stronghold'),\n    'Grey-Mantle': () => this.check([\"Thingol\"], 'gray', 'mantle'),\n    'Iron Prison': () => this.check([\"Angband\"], 'iron', 'prison'),\n    'Black Foe': () => this.check([\"Morgoth\"], 'black', 'foe'),\n    'Icy Fangs': () => this.check([\"Helcaraxë\"], 'ice', 'fangs'),\n    'Ever-White': () => this.check([\"Oiolossë\"], 'ever-', 'snow'),\n    'Mist-Needle': () => this.check([\"Hithaeglin\"], 'mist', 'needle'),\n    'Mist-Shadow': () => this.check([\"Hithlum\"], 'mist', 'shadow'),\n    'Pale-horn Mountains': () => this.check([\"Ered Nimrais\"], 'mountain', 'pale', 'horns'),\n    'Shipmaker': () => this.check([\"Círdan\"], 'ship', 'smith'),\n    'Land of Holly': () => this.check([\"Eregion\"], 'holly', 'land'),\n    'Fate Hill': () => this.check([\"Amon Amarth\"], 'hill', 'fate'),\n    // '*dictionary': () => `${this.dictionary.languageName} Dictionary`,\n    // todo -- build out sindarin a bit...\n    // 'Heavenly Arch': () => this.check(\"Egalmoth\", 'firmament', 'arch'),\n    // 'Golden Flower': () => this.check(\"Glorfindel\", 'golden', 'flower'),\n    // 'Land of the Fence': () => this.check(\"Doriath\", 'land', 'fence'),\n    // 'Forsaken Land': () => this.check(\"Eglador\", 'forsaken', 'land'),\n    // 'Hidden Rock': () => this.check(\"Gondolin\", 'hidden', 'rock'),\n\n    /// other examples (not necessarily from beleriand)\n    // 'Hills of Evendim': () => this.t('hill', 'evening'),\n    // 'Mere of Shadows': () => this.t('pool', 'shadow'),\n    // 'Vale of Nightingales': () => this.t('valley', 'nightingales'),\n    // 'Dewy Region': () => this.t('dew', 'region'),\n    // 'Star Hill': () => this.t('hill', 'stars'),\n    'Golden Hill': () => this.t('hill', 'golden'),\n    'Pathless Sea': () => this.t('-less', 'path', 'sea'),\n    'Star-Music': () => this.t('stars', 'music'),\n    // 'Gold Mountain': () => this.t('mountain', 'gold'),\n    // 'Elephant Hill': () => this.t('hill', 'elephants'),\n    // 'Silent Land': () => this.t('land', 'silence'),\n    // 'Star Bay': () => this.t('bay', 'stars'),\n    'Bell-Star': () => this.t('bell', 'stars'),\n    // 'Saturday': () => this.t('day', 'stars'),\n    // various vocab...\n    // 'Dragon': () => this.t('dragons'),\n    // 'Giant': () => this.t('giant'),\n    '*dictionary': () => `${this.dictionary.languageName} Dictionary`,\n    ...Object.fromEntries(theConcepts.sort().map(idea => {\n      // let [name, significance] = this.t(idea);\n      return [idea, () => {\n        let tx = this.t(idea)\n        if (tx.length > 9) { return `%${tx}` }\n        return tx\n      }] // `Mount ${capitalize(idea)}`, () => this.dictionary.nameMountain(idea)[1]])\n    }))\n  }\n}\n\nexport default new Language(Khuzdul);\n\n","export default function ordinate(num: number){\n  // var num = this + 1,\n  let last = num.toString().slice(-1),\n      ord = '';\n  switch (last) {\n      case '1':\n          ord = 'st';\n          break;\n      case '2':\n          ord = 'nd';\n          break;\n      case '3':\n          ord = 'rd';\n          break;\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '0':\n          ord = 'th';\n          break;\n  }\n  return num.toString() + ord;\n};\n","import { Community } from \"../../ecosphere/Community\"\nimport { Concept, theConcepts } from \"../../ecosphere/Dictionary\"\nimport Westron from \"../../ecosphere/Languages/Westron\"\nimport Model from \"../../ecosphere/Model\"\nimport { Recipe, TimeEvolution, Person, ManageStocks, Quality, Size, Material } from \"../../ecosphere/types\"\nimport { any } from \"../../ecosphere/utils/any\"\nimport { capitalize } from \"../../ecosphere/utils/capitalize\"\nimport ordinate from \"../../ecosphere/utils/ordinate\"\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\"\nimport { choose, sample } from \"../../ecosphere/utils/sample\"\n\ntype Gender = 'male' | 'female'\nfunction generateName(gender: Gender): { name: string, concepts: Concept[] } {\n  let suffices: Concept[] = gender === 'male'\n    ? ['-person', '-man', '-son']\n    : ['-woman', '-maid', '-daughter']\n\n  let concepts: Concept[] = choose(randomInteger(1,3), theConcepts)\n  let nameElements: Concept[] = [\n    ...concepts,\n    ...(randomInteger(0, 12) > 9 ? [sample(suffices)] : []),\n  ]\n\n  let dicts = [ Westron ] //Sindarin, Khuzdul, Westron, Common ]\n  let name = sample(dicts).translate(...nameElements).trim()\n\n  // const significance = (concepts.map(n => capitalize(n)).reverse().join('-')).trim(); //.replaceAll('-', ''));\n\n  // let nameWithMeaning = (name === significance\n  //   ? name\n  //   : name + ' (' +  significance + ')')\n\n  return { name, concepts } //significance } //nameWithMeaning\n}\n  \ntype Activity = 'idle'\n              | 'eat'\n              | 'rest'\n              | 'hunt'\n              | 'fish'\n              | 'gather'\n              | 'vibe'\n              | 'trade'\n              | 'create'\n              | 'mine'\n\ntype CitizenRole = 'Artisan' | 'Hunter' | 'Fisherman' | 'Merchant'\n\n// spirit 'entities' \nconst spiritEntities = [\n  'dragon', 'elephant',\n  'bear', 'horse', 'snake', 'hound',\n  'swan', 'eagle', 'nightingale',\n  'wolf',\n  // wolf -> wolves\n  'cherry', 'lily', 'rose', 'apple', 'fish',\n  'moon', 'birch',\n\n  'deer', 'elk', 'bear', 'lizard', 'mouse', 'pig', 'owl',\n  'tiger', 'goat', 'monkey', 'rooster', 'rabbit', 'lion',\n  'falcon',\n\n  'cloud', 'fireball',\n  \n  'bell', 'thimble', 'cup',\n  'boat',\n\n  'dial', 'bead', \n  'cube', 'sphere', 'pyramid', 'spiral',\n\n  'robot', 'alien', \n]\n\nclass City extends Model {\n  \n\nfolks: Community\nrecipes: { [key in Activity]: Recipe }\nnotes = {\n  date: () => this.date.description,\n  time: () => this.date.time,\n}\nticksPerMinute = 5\n\nconstructor() {\n  super('Citadel');\n  this.evolve(this.evolution)\n\n  this.folks = this.people.create('Folks')\n\n  const fish = this.folks.recipes.create({ name: 'Fish', time: 500, probability: 0.45, produces: { Meat: 2 } })\n  const hunt = this.folks.recipes.create({ name: 'Hunt', time: 240, probability: 0.52, produces: { Fish: 1 } })\n  const rest = this.folks.recipes.create({ name: 'Rest', time: 1900 })\n  const eat = this.folks.recipes.create({ name: 'Eat', time: 200 })\n  const vibe = this.folks.recipes.create({ name: 'Vibe', time: 777 })\n  const idle = this.folks.recipes.create({ name: 'Ready', time: 180 })\n  const gather = this.folks.recipes.create({ name: 'Gather', time: 1234 })\n  const trade = this.folks.recipes.create({ name: 'Trade', time: 300, onSuccess: this.trade })\n  const mine = this.folks.recipes.create({ name: 'Trade', time: 300, produces: { Stone: 10 }})\n  //individual => this.tradeWith(individual) })\n\n  // interesting b/c a concrete object in the world really 'owns' the progress?\n  const create = this.folks.recipes.create({ name: 'Sculpt', time: 1700, consumes: { Stone: 5 } })\n\n  this.recipes = { fish, hunt, rest, eat, vibe, idle, gather, trade, create, mine };\n\n  const roles: CitizenRole[] = ['Hunter', 'Fisherman', 'Artisan'] //, 'Merchant']\n\n  roles.forEach(role => this.actions.create({\n    name: `New ${role}`,\n    act: () => this.createCitizen(role)\n  }))\n\n  this.resources.add(100, 'Meat')\n  this.resources.add(100, 'Fish')\n\n  // this.policies.create({ name: 'Role-Directed', manage: () => {}); // normal labor model\n  // this.policies.create({ name: 'Autonomous', manage: () => {});    // more free-spirited like\n}\n\ncreateCitizen = (role: CitizenRole) => {\n  const gender: Gender = sample(['male', 'female'])\n  const { name, concepts } = generateName(gender)\n  const firstName = name.split(' ')[0]\n  const individual = this.folks.create({ name, nameConcepts: concepts })\n\n  if (role === 'Artisan') {\n    individual.traits.add(1, 'Sculpting')\n    individual.traits.add(1, 'Mining')\n  } else if (role === 'Hunter') {\n    individual.traits.add(1, 'Hunting')\n  } else if (role === 'Fisherman') {\n    individual.traits.add(1, 'Fishing')\n  } else if (role === 'Merchant') {\n    individual.traits.add(1, 'Trading')\n  }\n\n  individual.things.add(40, 'Energy')\n  individual.things.add(100, 'Max Energy')\n  individual.things.add(80, 'Satiety')\n  individual.things.add(100, 'Max Satiety')\n  individual.things.add(80, 'Joy')\n  individual.things.add(100, 'Max Joy')\n\n  individual.things.add(100, 'Shells')\n\n\n  const animalConcepts: { [name: string]: Concept } = {\n    dragon: 'dragons',\n    elephant: 'elephants',\n    bear: 'bears',\n    horse: 'horses',\n    snake: 'snakes',\n    hound: 'hounds',\n    wolf: 'wolves',\n    swan: 'swans',\n    eagle: 'eagles',\n    nightingale: 'nightingales',\n\n    rooster: 'morning',\n    toad: 'evening',\n    owl: 'night',\n\n    lion: 'bold',\n    falcon: 'quick',\n  }\n\n  // concepts = ['wolf']\n  let spiritCreature = sample(spiritEntities)\n  // let animalPlurals = spiritAnimals.map(a => a + 's')\n  if (any(concepts, concept => spiritEntities.includes(concept) || Object.values(animalConcepts).includes(concept))) {\n    let theConcept = spiritEntities.find(animal => concepts.includes(animal as Concept) || concepts.includes(animalConcepts[animal]))\n    if (theConcept) { spiritCreature = theConcept }\n  }\n\n  individual.items.create({\n    name: `${sample(['Little', 'Tiny'])} Stone ${capitalize(spiritCreature)}`,\n    description: `${firstName}'s Personal Totem`,\n    kind: 'sculpture',\n    quality: sample(['excellent', 'good'] as Quality[]),\n    size: 'fine',\n    material: 'stone',\n  })\n\n  // todo they need a pet?? eg\n  // const pet = createAnimal(sample([ 'Spot', 'Rover', 'Miss Perkins' ]), { id: 1, name: 'Dog' })\n  // individual.pets.create(pet)\n\n  individual.meters = () => {\n    const job = this.folks.jobs.get(individual)\n    return {\n      'Energy': () => {\n        return {\n          value: individual.things.count('Energy'),\n          max: individual.things.count('Max Energy'),\n        }\n      },\n      'Satiety': () => {\n        return {\n          value: individual.things.count('Satiety'),\n          max: individual.things.count('Max Satiety'),\n        }\n      },\n      'Joy': () => {\n        return {\n          value: individual.things.count('Joy'),\n          max: individual.things.count('Max Joy'),\n        }\n      },\n      ...(job !== undefined ? {\n        [job.recipe.name]: () => {\n          // if (job !== undefined) {\n          const { recipe, startedAt } = job\n          const { time: jobDuration } = recipe\n          const elapsed = startedAt ? this.ticks - startedAt : -1\n          return {\n            value: elapsed,\n            max: jobDuration,\n          };\n          // } else { return { value: 0, max: 0 } } \n        }\n      } : { 'Idle': () => { return { value: 0, max: 0 } } })\n\n    }\n  };\n}\n\nevolution: TimeEvolution = ({ resources }, t) => {\n  this.folks.list().forEach(individual => this.evolveIndividual(individual, individual.things))\n}\n\nevolveIndividual = (individual: Person, resources: ManageStocks) => {\n  \n\n  const decay = {\n    energy: 0.01,\n    satiety: 0.012,\n    joy: 0.001,\n  }\n\n\n  const energy = resources.count('Energy')\n  const maxEnergy = resources.count('Max Energy')\n  const satiety = resources.count('Satiety')\n  const maxSatiety = resources.count('Max Satiety')\n  const joy = resources.count('Joy')\n  const maxJoy = resources.count('Max Joy')\n\n  if (energy > maxEnergy) { resources.remove(energy - maxEnergy, 'Energy') }\n  if (energy > 0) {\n    resources.remove(decay.energy, 'Energy')\n  }\n\n  if (satiety > maxSatiety) { resources.remove(satiety - maxSatiety, 'Satiety') }\n  if (satiety > 0) {\n    resources.remove(decay.satiety, 'Satiety')\n  }\n\n  if (joy > maxJoy) { resources.remove(joy - maxJoy, 'Joy') }\n  if (joy > 0) {\n    resources.remove(decay.joy, 'Joy')\n  }\n\n  const folks = this.folks\n  const { eat, rest, idle, vibe, hunt, fish, trade, create, mine } = this.recipes\n\n  const assign = (task: Recipe) => {\n    folks.jobs.set(individual, { recipe: task, startedAt: this.ticks })\n  }\n\n  const job = folks.jobs.get(individual)\n\n  const meatCount = resources.count('Meat')\n  const fishCount = resources.count('Fish')\n  const food = fishCount //resources.count('Fish')\n    + meatCount //resources.count('Meat')\n    + resources.count('Berry')\n\n  // todo move this job-completion logic into production model???\n  let completedJob = false //, failedJob = false\n  if (job) {\n    const { recipe: currentTask, startedAt } = job\n    let produceJobRewards = false\n\n    let elapsed = startedAt ? this.ticks - startedAt : -1\n    let { time, probability } = currentTask\n\n    // console.log({ job, elapsed, time, ticks: this.ticks })\n\n    if (time === undefined) {\n      completedJob = true\n      produceJobRewards = true\n    } else {\n      if (elapsed > time) {\n        completedJob = true\n        if (probability === undefined) { produceJobRewards = true }\n        else {\n          produceJobRewards = randomInteger(0, 100) <= probability * 100\n        }\n      }\n    }\n\n    if (produceJobRewards) {\n      this.produceTaskOutcome(currentTask, individual); //resources);\n    }\n\n  }\n\n\n  if (job === undefined) { //job === undefined || job.recipe.name === 'Ready') { //} || currentTask === idle) {\n    // console.log(\"no job yet..\")\n    // const shells = resources.count('Shells')\n    if (food < 5) { \n      console.log(\"food less than five, trade?!\")\n      assign(trade)\n    }\n    else if (meatCount > 10 || fishCount > 10) { assign(trade) }\n    else if (this.date.timeOfDay === 'night' && energy < 70) { assign(rest) }\n    else if (energy < 40) { assign(rest) }\n    else if (satiety < 65 && food > 0) { assign(eat) }\n    else if (joy < 40) { assign(vibe) }\n    else {\n      if (this.date.timeOfDay === 'morning' || this.date.timeOfDay === 'afternoon') {\n        let possibleActivities: Recipe[] = [ create ]\n        if (individual.traits.count('Hunting') > 0) {\n          possibleActivities.push(hunt)\n          // assign(hunt)\n        } else if (individual.traits.count('Fishing') > 0) {\n          possibleActivities.push(fish)\n          // assign(fish)\n        } else if (individual.traits.count('Mining') > 0) {\n            possibleActivities.push(mine)\n        }\n\n        assign(sample(possibleActivities))\n      }\n      else if (satiety < 70 && food > 0) { assign(eat) }\n      else if (joy < 90) { assign(vibe) }\n      else {\n        assign(idle)\n      }\n    }\n  }\n\n  if (completedJob) { this.folks.jobs.set(individual, undefined as any) }\n}\n\n  produceTaskOutcome(task: Recipe, individual: Person) { //resources: ManageStocks) {\n    const { things: resources } = individual\n\n    const energy = resources.count('Energy')\n    const maxEnergy = resources.count('Max Energy')\n    const satiety = resources.count('Satiety')\n    const maxSatiety = resources.count('Max Satiety')\n    const joy = resources.count('Joy')\n    const maxJoy = resources.count('Max Joy')\n\n    const meatCount = resources.count('Meat')\n    const fishCount = resources.count('Fish')\n    const food = fishCount //resources.count('Fish')\n      + meatCount //resources.count('Meat')\n      + resources.count('Berry')\n\n    const { eat, rest, vibe, fish, gather, trade, create } = this.recipes\n    const produce = {\n      fish: 2,\n      meat: 3,\n      berry: 12,\n    };\n    const price = { meat: 10, fish: 4, pots: 25 }\n    if (task.name === 'Hunt') {\n      resources.add(1 + randomInteger(0, produce.meat), 'Meat')\n    } else if (task === fish) {\n      resources.add(1 + randomInteger(0, produce.fish), 'Fish')\n    } else if (task === gather) {\n      resources.add(3 + randomInteger(0, produce.berry), 'Berry')\n    } else if (task === rest) {\n      if (energy < maxEnergy) {\n        resources.add(\n          75, //clamp(1+randomInteger(5,25),0,maxEnergy-energy),\n          'Energy')\n      }\n    } else if (task === vibe) {\n      if (joy < maxJoy) {\n        resources.add(\n          35, //clamp(1+randomInteger(15,35),0,maxEnergy-energy),\n          'Joy'\n        )\n      }\n    } else if (task === create) {\n      // resources.add(1, 'Clay Pot')\n\n\n      const skill = individual.traits.count('Sculpting')\n      const subject = sample(spiritEntities)\n      const sizeDescriptions = { fine: 'tiny', small: 'little', medium: 'big', large: 'huge', huge: 'gigantic' }\n      const size = skill > 0 ? sample(['fine', 'small', 'medium', 'large'] as Size[]) : 'small'\n\n      const moods = [\n        'worried', 'profound', 'angered', 'aroused', 'elephantine', 'persecuted', 'annoyed', 'excellent', 'striving', 'seeking',\n        'cautious', 'terrible', 'sullen', 'dismal', 'joyous', 'surprised', 'happy', 'content', 'confused', 'terrified', 'gentle',\n      ]\n\n      const ideas = [\n        'loss', 'victory', 'foundation', 'beauty', 'holiness', 'covetousness', 'anxiety', 'productivity',\n        'holism', 'concern', 'care', 'generosity', 'faith', 'temporality', 'illusoriness', 'elusiveness',\n        'chaos', 'purity', 'space', 'time', 'worldliness', 'ugliness', 'hatred', 'appreciation', 'coldness',\n        'cruelty', 'grace', 'facility', 'spareness', 'lack', 'plenitude', 'indulgence', 'innocence', 'parsimony',\n      ]\n\n      // const mood = sample(moods)\n      const quality: Quality = 'excellent'; // skill > 0 ? sample(['good', 'excellent'] as Quality[]) : sample(['terrible', 'adequate'] as Quality[]);\n\n      const description = `A ${[sizeDescriptions[size], 'stone', subject].join(' ')} by ${individual.name.split(' ')[0]}`\n      const longDescription = `This ${subject} was carved from stone by ${individual.name}.\n                               Its aspect is ${sample(moods)} ${sample(['yet', 'but', 'and'])}\n                               suggests a strong sense of ${sample(ideas)}.`\n\n      individual.items.create({\n        name: `Stone ${capitalize(subject)}`,\n        kind: 'sculpture',\n        size,\n        quality, \n        description,\n        longDescription\n      })\n\n    } else if (task === eat) {\n      if (satiety < maxSatiety * 0.8) {\n        const fishCount = resources.count('Fish')\n        const meatCount = resources.count('Meat')\n        const berryCount = resources.count('Berry')\n\n        if (fishCount > 0) {\n          resources.remove(1, 'Fish')\n          resources.add(25, 'Satiety')\n        } else if (meatCount > 0) {\n          resources.remove(1, 'Meat')\n          resources.add(25, 'Satiety')\n        } else if (berryCount > 0) {\n          resources.remove(1, 'Berry')\n          resources.add(15, 'Satiety')\n        } else {\n          console.warn(\"hungry but no food!\")\n        }\n      }\n    } else if (task === trade) {\n      // console.log(\"TRADE!!!!!\")\n      // trade w/ town..\n      const shells = resources.count('Shells')\n      console.log(\"i have \" + shells + \"shell\")\n      if (food < 5) {\n        const storeMeat = this.resources.count('Meat')\n        const storeFish = this.resources.count('Fish')\n        console.log(\"low on food...\", { shells, storeMeat, storeFish })\n        if (shells > 10 && storeMeat > 0) {\n          let boughtMeat = Math.min(storeMeat, Math.floor(shells / price.meat))\n          console.log(`Trade shells for ${boughtMeat} meat!`)\n          this.resources.remove(boughtMeat, 'Meat')\n          resources.add(boughtMeat, 'Meat')\n          resources.remove(boughtMeat * price.meat, 'Shells')\n        } else if (shells > 6 && storeFish > 0) {\n          let boughtFish = Math.min(storeFish, Math.floor(shells / price.fish))\n          console.log(`Trade shells for ${boughtFish} fish!`)\n          this.resources.remove(boughtFish, 'Fish')\n          resources.add(boughtFish, 'Fish')\n          resources.remove(price.fish * boughtFish, 'Shells')\n        }\n\n      } //else { //if (food > 5) {\n      if (fishCount > 10) {\n        // console.log(\"Trade fish for shells!\")\n        let soldFish = fishCount - 10\n        this.resources.add(soldFish, 'Fish')\n        resources.remove(soldFish, 'Fish')\n        resources.add(soldFish * price.fish, 'Shells')\n      }\n      if (meatCount > 10) {\n        // console.log(\"Trade meat for shells!\")\n        let soldMeat = meatCount - 10\n        this.resources.add(soldMeat, 'Meat')\n        resources.remove(soldMeat, 'Meat')\n        resources.add(soldMeat * price.meat, 'Shells')\n      }\n\n      if (resources.count('Clay Pot') > 0) {\n        let soldPots = resources.count('Clay Pot')\n        this.resources.add(soldPots, 'Clay Pot')\n        resources.remove(soldPots, 'Clay Pot')\n        resources.add(soldPots * price.pots, 'Clay Pot')\n      }\n      let toSell = individual.items.list().find(it => !it.description.includes('Personal'))\n      if (toSell) {\n        console.log(\"SELL ITEM \" + toSell.name + \"!!\")\n        // individual.items.remove(1, toSell.name)\n        individual.items.delete(toSell.name)\n        // debugger\n        const basePrice = 1000\n        const materialMultiplier: { [key in Material]: number } = {\n          wood: 0.8,\n          clay: 0.95,\n          stone: 1.3,\n          iron: 2.5,\n        }\n        const qualityMultiplier: { [key in Quality]: number } = {\n          terrible: 0.5,\n          adequate: 1.2,\n          good: 1.5,\n          excellent: 2\n        }\n        const price = basePrice\n          * (toSell.material ? materialMultiplier[toSell.material] : 0.1)\n          * (toSell.quality ? qualityMultiplier[toSell.quality] : 0.1)\n        // individual.items.manage(toSell).remove(1)\n        // pricing model taking into account material + quality??\n        console.log(\"---> Sold \" + toSell.description + \" for \" + price)\n        resources.add(price, 'Shells')\n      }\n      // }\n\n      // if (food > 10) {\n      // this.resources.add(1, 'Meat')\n      // resources.remove(1, 'Meat')\n      // resources.add(10, 'Shells')\n      // }\n\n      // }\n    }\n  }\n\n\n  get date() {\n    let minutes = Math.floor(this.ticks / this.ticksPerMinute);\n    let hours = Math.floor(minutes / 60)\n    let days = Math.floor(hours / 24)\n    let weeks = Math.floor(days / 7)\n    let seasons = Math.floor(weeks / 12)\n\n    let minute = Math.floor(minutes) % 60;\n    let hour = Math.floor(hours % 24);\n    let day = Math.floor(days % 7);\n    let season = Math.floor(seasons % 4);\n\n    let seasonName = ['winter', 'spring', 'summer', 'autumn'][season];\n    let monthName = [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    ][Math.floor(weeks / 4) % 12];\n\n    let dayOfWeek = ['Mon', 'Tues', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][day];\n\n    let dayOfMonth = (days + 1) % 30;\n\n    let timeOfDay = ['night', 'morning', 'afternoon', 'evening'][Math.floor(hour / 6) % 4]\n    let dayPartSign: { [key: string]: string } = { morning: '🌅', afternoon: '🏙️', evening: '🌆', night: '🌃' }\n    let seasonSign: { [key: string]: string } = { winter: '❄️', summer: '🌴', spring: '🌱', autumn: '🍂' }\n\n    let meridian = hour >= 12 ? 'pm' : 'am'\n\n    let normalHour = (hour % 12) === 0 ? 12 : (hour % 12)\n\n    return {\n      dayOfWeek,\n      timeOfDay,\n      description: `${seasonSign[seasonName]} ${dayOfWeek}, ${monthName} ${ordinate(dayOfMonth)}`,\n      time: `${dayPartSign[timeOfDay]} ${String(normalHour)}:${String(minute).padStart(2, '0')} ${(meridian.toUpperCase())}`,\n    }\n  }\n\n  // handle any outstanding trades bewteen individual + town..\n  trade(individual: Person) {\n    // todo -- wire this up and start breaking out things that actually require complexity here?\n    console.log(\"hit trade job complete callback!!!\")\n  }\n}\n\nexport default new City()\n","import worldMapMaker from \"./WorldMap\"\nimport Language from \"./Language\"\nimport City from \"./towns/City\"\n\nconst models = [\n  City,\n  worldMapMaker,\n  // Citizen,\n  Language,\n  // Building,\n  // arena,\n  // zep,\n  // Avernus,\n  // Society,\n]\n\nexport default models\n\n","\nimport './App.css';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelSelector } from './ModelSelector';\nimport models from './examples';\n\ntype ApplicationProps = {\n  model: IModel\n}\n\nfunction App({ model: initialModel }: ApplicationProps) {\n\n  return <div className=\"App\">\n    {/* @ts-ignore */}\n    <ModelSelector models={models} initialModel={initialModel} />\n  </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport models from './examples';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App model={models[0]} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}