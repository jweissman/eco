{"version":3,"sources":["ecosphere/utils/where.ts","ecosphere/utils/isString.ts","collections/Map.ts","collections/List.ts","ecosphere/utils/randomInteger.ts","ecosphere/utils/times.ts","ecosphere/utils/sample.ts","ecosphere/utils/MarkovGenerator.ts","ecosphere/utils/replicate.ts","collections/Sequence.ts","ecosphere/Stocks.ts","ecosphere/Registry.ts","ecosphere/Delta.ts","ecosphere/Model/Simulation.ts","ecosphere/Collection.ts","ecosphere/types/index.ts","ecosphere/Population.ts","ecosphere/Community.ts","ecosphere/Model/Model.ts","ecosphere/Model/presentItem.tsx","ecosphere/View/Tile.tsx","ecosphere/View/presentCommunity.tsx","ecosphere/View/presentIndividual.tsx","ecosphere/View/ModelView.tsx","ecosphere/Model/index.ts","ModelPresenter.tsx","useModel.tsx","ModelSelector.tsx","examples/Avernus.ts","examples/Arena/MonsterManual.ts","examples/Arena/PlayerHandbook.ts","examples/Arena/index.ts","examples/Factory.ts","ecosphere/utils/unique.ts","examples/zep.tsx","ecosphere/utils/capitalize.ts","ecosphere/Dictionary.ts","examples/Languages/Khuzdul.ts","examples/Languages/Sindarin.ts","examples/Languages/Westron.ts","examples/Citizen.ts","ecosphere/Board.ts","examples/Building.tsx","ecosphere/utils/clamp.ts","ecosphere/utils/distance.ts","ecosphere/Heightmap.ts","ecosphere/utils/any.ts","examples/WorldMap.ts","examples/index.ts","examples/Language.ts","App.tsx","index.tsx"],"names":["where","key","value","it","isString","String","KeyMap","idFor","nameFor","lookup","_data","k","v","this","namesAndValues","Object","entries","map","Number","fromEntries","List","items","count","length","push","filter","item","cb","forEach","fn","Error","randomInteger","min","max","Math","floor","random","times","n","results","i","sample","ts","choose","MarkovGenerator","ngrams","beginnings","text","beginning","substring","gram","next","charAt","hasOwnProperty","current","output","trim","construct","flatten","arrays","Array","apply","concat","Sequence","NameSequence","nameRoots","nameCount","array","replicate","join","StringGeneratorSequence","baseItems","generatedItems","result","generate","attempts","includes","order","generator","feed","boundMethod","StockManager","stocks","stockId","amount","add","name","remove","list","lookupById","Stocks","elements","ids","storage","attrs","attributes","has","manage","id","theEntity","setAmount","element","find","matching","create","flatMap","manageAll","Registry","popCtor","populations","species","values","x","theSpecies","population","populationList","pop","Delta","model","getStocks","changes","baseline","_store","Simulation","ticks","tracking","dynamics","e","flux","target","report","source","theDelta","manager","_delta","theFlows","flow","table","entry","t","flows","each","dynamism","changed","flowsReport","delta","updated","deltaAmount","Collection","pick","d100","animalIds","createAnimal","kind","age","guile","health","spirit","cunning","agility","strength","moietyIds","createMoiety","wealth","sophistication","power","knowledge","tech","personId","human","size","createPerson","moiety","inventory","traits","body","mind","insight","depth","education","disposition","valor","personality","soul","wit","empathy","integrity","beauty","charm","resolve","currency","things","meters","memory","SetHelper","set","populationIds","Population","individuals","Set","theList","individual","first","theIndividual","newborn","doomed","destroy","newborns","birth","doneFor","death","build","delete","Community","moieties","obscured","recipes","jobs","Map","worker","inventories","person","get","personAttrs","resources","recipe","produce","mayProduce","consumes","resource","produces","Model","people","machines","animals","metrics","notes","actions","policies","currentPolicy","clear","actionName","args","action","act","policyName","policy","presentItem","deltas","title","className","Tile","children","presentCommunity","community","work","itemNames","thing","meterName","measure","htmlFor","style","paddingRight","width","height","low","high","optimum","sort","a","b","display","trait","ViewHeightmap","BoardTable","tiles","tileColors","tileInspect","useState","inspecting","setInspecting","message","flexDirection","fontFamily","cursor","row","y","cell","color","backgroundColor","onMouseEnter","onMouseLeave","ModelView","modelName","communities","lastChanges","board","folks","keys","view","ModelPresenter","send","step","onClick","type","checked","onChange","useModel","initialModel","setModel","setLastChanges","delay","setDelay","shouldStep","shouldSend","doSend","shouldManage","doManage","command","setCommand","setPolicy","useEffect","isModel","callback","savedCallback","useRef","tick","setInterval","clearInterval","useInterval","performSend","performChoose","maybeModel","AssemblyPresenter","assembly","models","theModel","ModelSelector","options","placeholder","give","recipient","supplier","world","miner","minter","smelter","fisherman","mineGold","smeltGold","mintCoin","evolve","MonsterManual","basicCreatures","Fragment","hp","evasion","Light","Fog","reflect","Aura","speed","Shadow","Wisp","Filament","counter","Voice","absorb","defense","Nothing","regen","challengingCreatures","Fiendling","Gremlin","Goblin","Kobold","Orc","uncommonCreatures","Rat","Bat","Snake","Blob","Bear","Ghost","Rogue","Troll","Giant","bosses","Priest","heal","Vampire","Drake","Lich","extraplanar","Demon","Angel","Archdemon","Dracolith","Archangel","dragons","rareCreatures","Leviathan","bestiary","basicSubtypes","Hostile","Intimidating","Nimble","Quick","Timid","Spry","Dancing","Vigilant","Relentless","Armored","Hardened","Benevolent","Protective","Snarling","Emboldened","Floating","Crystalline","Glinting","Mobile","Coldsnap","Blinding","Noxious","rareSubtypes","Voracious","Vicious","Vexatious","Arrogant","Querulous","Adventurous","Questing","Silvered","Mirrored","Aggressive","Dominating","Swift","Accelerated","Elusive","Reluctant","Hidden","Invisible","Imperceptible","Regrowing","Hydra","Fortified","Angelic","Prismatic","Pugnacious","Augmented","Skillful","Skeletal","Undead","Zombie","Favored","Fiendish","Fierce","Opalescent","Cruel","Vortex","evade","Luminous","Defiant","Devious","Draconic","subtypes","Common","Evasive","Retaliatory","Inspired","Infused","Radiant","Resplendent","Heavy","Titanic","Unholy","Blessed","Adept","perks","Piercing","Enchanted","Clockwork","Phantasmal","Cosmic","Imperious","monsterIds","difficulty","creature","base","cr","generateBasicMonster","adjustedCr","crFactor","perk","PlayerHandbook","level","pow","hero","characterClass","template","characterClasses","attr","baseStartingHp","levelUp","pc","attributeBoosts","common","uncommon","rare","epic","legendary","rarity","levelAttr","perkLevels","console","log","Fighter","perkBenefits","Brutality","Counterweight","Efferverscence","Efficacious","Opalescence","Ethereal","Faith","Finesse","Fitness","Fluidity","Dexterity","Precision","Swiftness","Rapidity","Medic","Vitality","Whirlwind","Focus","Iridescence","Concentration","Salvation","DungeonMasterGuide","durations","round","day","arena","events","eventIds","challengeRating","heroIds","metricGrain","manual","spawnHero","spawnEnemyParty","enemyName","at","party","totalLevels","adv","reduce","recentEvents","totalInjuryAmount","recent","injury","enemy","enemies","defender","aggressor","reflected","damage","enemyInjured","effective","absorption","injure","strike","attribute","multiplier","benefits","ranks","benefit","holyDefense","holyDamage","magicDefense","magicDamage","physicalDamage","criticalStrike","baseDamage","bonus","critChance","overallDamage","aggressors","defenders","aggSpeed","damageAll","hit","chainChance","maxChain","chain","healee","maxHeal","unit","adventurer","xp","gil","per","levelCost","stock","encounterChance","turnStarted","attack","mortalityCheck","Factory","bills","deliveryRate","fulfillmentEvents","canProduce","workers","required","requirement","producingRequirement","missingRequirements","missing","evolution","orderIds","event","description","deliverTo","receive","reset","firstUnfulfilled","unfulfilled","produceUnfulfilled","allBillsRequested","arr","u","l","unique","bill","nextUnfulfilled","undefined","orderItemNames","itemName","account","price","emit","warn","factory","reboot","product","managers","capitalize","word","replace","c","toUpperCase","titleize","str","split","theConcepts","Dictionary","languageName","vocabulary","enhanceTranslation","ideas","notion","descriptors","form","endsWith","translation","translate","nameInverse","concepts","acc","concept","index","space","startsWith","replaceAll","DictionarySequence","dictionary","invertOrder","notions","significance","khuzdul","roots","replacements","man","woman","son","daughter","crown","place","tree","sleep","flower","great","small","water","cove","safe","light","shadow","one","many","joy","sorrow","sweet","bitter","point","heat","cold","tall","deep","bell","mound","run","sing","way","no","eat","drink","good","bad","quick","slow","time","air","cut","all","hard","soft","ore","wing","snake","horse","bear","elephant","dog","wild","fear","sound","tooth","heart","wood","over","coat","fight","face","mere","strong","basics","mantle","veil","star","daisy","poppy","dandelion","willow","cherry","spruce","pine","birch","elm","oak","holly","king","queen","sea","lake","pool","bay","harbor","haven","forest","ice","prison","jewel","needle","candle","hill","mountain","valley","peak","land","lofty","sky","river","isle","wine","honey","apple","bread","elderberry","fish","harvest","night","garden","vault","white","black","green","red","blue","morning","evening","noon","fire","tin","silver","gold","bird","birds","horses","elephants","bears","snakes","wolves","hounds","large","tiny","thirst","wax","fortunate","beautiful","silence","music","abundant","teeth","battle","intermediate","swans","eagles","nightingales","iron","dusk","gray","orange","afternoon","midnight","lily","rose","divine","princess","prince","kingdom","fortress","citadel","stronghold","tower","friend","foe","lord","slave","rain","earth","glen","stream","realm","region","peoples","road","path","shade","sun","moon","autumn","winter","spring","summer","cloud","cloudy","stars","starlight","spark","snow","mist","firmament","wind","rainbow","frost","dew","dread","lonely","giant","awe","ash","steam","magma","dry","food","dark","broad","voice","war","vocab","sparkling","horror","embers","soot","radiance","salt","void","gloom","narrow","wide","sharp","pale","golden","holy","dusty","fell","secret","bold","splendid","horns","claws","fangs","love","dream","fate","speech","tomorrow","tyranny","magic","thought","skill","freedom","blood","tears","ship","journey","treasure","smith","input","assembleDictionary","dashBeginnings","dashEndings","starEndings","Aelvic","tx","ending","search","simpleEnhance","Westron","generatePerson","suffices","nameElements","Khuzdul","reverse","subject","date","seconds","second","minute","hour","dayOfWeek","padStart","pred","Board","write","character","x0","y0","drawBox","char","filled","x1","y1","overlays","viewTiles","overlay","o","neighborPositions","eachCell","defaultValue","newTiles","currentValue","neighbors","newCell","buildingMaker","building","clamp","distance","dx","abs","dy","sqrt","Heightmap","seaLevel","smooth","ns","average","above","immediate","erode","rate","extrude","positions","pos","h","parseInt","val","intrude","bombard","intensity","radius","impactSite","distanceToImpact","craterPositions","craterEdge","d","orogeny","mountains","geoform","hades","componentNames","regions","components","waterways","ranges","valleys","bays","position","neighborValues","neighbor","neighborSum","localAverage","newVal","consider","componentMap","existingComponentNames","component","any","firstAdjacentComponentName","Linguist","waterwayNames","regionNames","rangeNames","valleyNames","bayNames","rawWaterbodyName","_area","names","rawRegionName","places","rawRangeName","rawValleyName","rawBayName","area","Cartographer","linguist","_waterways","_regions","_ranges","_valleys","_bays","elevation","nameRegion","waterway","nameWaterway","identifyRegion","identifyWaterway","rangeName","range","nameRange","valleyName","nameValley","bayName","nameBay","aeon","identifyRange","identifyValley","identifyBay","worldMapMaker","mapgenTicks","terrain","mountainSpots","areaPercent","cartographer","eon","li","elevationMessage","identifyRegionOrWaterway","identifyFeatures","Boolean","jitter","ax","ay","bx","by","slope","j","targetSpotCount","randomPosition","spots","randomPositionAlongLine","_value","genHeightmap","Building","zep","Avernus","Citizen","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfbc9275.chunk.js","sourcesContent":["export function where(key: string, value: any) {\n  return (it: any) => it[key] === value;\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n","import { IMap } from \"./types\";\nexport class KeyMap<K, V> implements IMap<K, V> {\n  _data: { [id: number]: V; } = {};\n  constructor(\n    private idFor: (k: K) => number,\n    private nameFor: (k: K) => string,\n    private lookup: (id: number) => K,\n  ) { }\n  set(k: K, v: V) { this._data[this.idFor(k)] = v; }\n  get(k: K): V { return this._data[this.idFor(k)]; }\n  get report(): { [name: string]: V } {\n    const namesAndValues = Object.entries(this._data)\n      .map(([k, v]) => [this.nameFor(this.lookup(Number(k))), v]);\n    return Object.fromEntries(namesAndValues);\n  }\n}\n","//\n\nimport { IList } from \"./types\";\n\nexport class List<T> implements IList<T> {\n  items: T[] = [];\n  protected get it() { return this.items; }\n  get first(): T { return this.items[0]; }\n  get last(): T { return this.items[this.count - 1]; }\n  get count(): number { return this.items.length; }\n  add(it: T) { this.items.push(it); }\n  remove(it: T) { this.items = this.items.filter(item => item !== it); }\n  each(cb: (it: T) => any) { this.items.forEach(cb); }\n  clear() { this.items = []; }\n  map<U>(fn: (it: T) => any): U[] { return this.items.map(fn) }\n\n  get sample(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n","export function randomInteger(min: number, max: number) {\n  // return min + Math.floor(Math.random() * (max - min));\n  let result = Math.floor(Math.random() * (max - min + 1) + min)\n  // console.log(\"Random integer between \" + min + \" and \" + max + \": \" + result)\n  return result\n}\n","\nexport function times<T>(n: number, fn: (...args: any) => T): T[] {\n  let results: any[] = []\n  for (let i = 0; i < n; i++) { results.push(fn()) }\n  return results\n}\n","import { randomInteger } from \"./randomInteger\";\nimport { times } from \"./times\";\n\nfunction sample<T>(ts: T[]): T {\n  let i = randomInteger(0,ts.length-1)\n  return ts[i];\n}\n\nfunction choose<T>(n: number, ts: T[]): T[] {\n  return times(n, () => sample(ts))\n}\n\nexport { sample, choose }\n","import { sample } from \"./sample\";\n\n// A MarkovGenerate object\nexport class MarkovGenerator {\n  // n - Order (or length) of each ngram\n  // max - What is the maximum amount we will generate?\n  constructor(private n: number, private max: number) {}\n\n  // An object as dictionary\n  // each ngram is the key, a list of possible next elements are the values\n  private ngrams: { [key: string]: string[] } = {};\n  // A separate array of possible beginnings to generated text\n  private beginnings: string[] = [];\n\n  // A function to feed in text to the markov chain\n  feed(text: string) {\n\n    // Discard this line if it's too short\n    if (text.length < this.n) {\n      return false;\n    }\n\n    // Store the first ngram of this line\n    let beginning = text.substring(0, this.n);\n    this.beginnings.push(beginning);\n\n    // Now let's go through everything and create the dictionary\n    for (var i = 0; i < text.length - this.n; i++) {\n      let gram = text.substring(i, i + this.n);\n      let next = text.charAt(i + this.n);\n      // Is this a new one?\n      if (!this.ngrams.hasOwnProperty(gram)) {\n        this.ngrams[gram] = [];\n      }\n      // Add to the list\n      this.ngrams[gram].push(next);\n    }\n  }\n\n  // Generate a text from the information ngrams\n  generate(): string {\n\n    // Get a random  beginning\n    let current = sample(this.beginnings) //.choice();\n    let output = current;\n\n    // Generate a new token max number of times\n    for (var i = 0; i < this.max; i++) {\n      // If this is a valid ngram\n      if (this.ngrams.hasOwnProperty(current)) {\n        // What are all the possible next tokens\n        let possible_next = this.ngrams[current];\n        // Pick one randomly\n        let next = sample(possible_next) //.choice();\n        // Add to the output\n        output += next;\n        // Get the last N entries of the output; we'll use this to look up\n        // an ngram in the next iteration of the loop\n        current = output.substring(output.length - this.n, output.length);\n      } else {\n        break;\n      }\n    }\n    // Here's what we got!\n    return output.trim();\n  }\n}\n","export function construct(fn: () => any, times: number, flatten?: boolean) {\n  // Create an array of size \"n\" with undefined values\n  var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  arrays = arrays.map(fn) //() => fn()) //() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  if (flatten) {\n  return [].concat.apply([], arrays);\n  } else {\n    return arrays;\n  }\n\n}\n\nexport function replicate(array: Array<any>, times: number) {\n  return construct(() => array, times)\n  // Create an array of size \"n\" with undefined values\n  // var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  // arrays = arrays.map(() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  // return [].concat.apply([], arrays);\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { MarkovGenerator } from \"../ecosphere/utils/MarkovGenerator\";\nimport { replicate } from \"../ecosphere/utils/replicate\";\nimport { ISequence } from \"./types\";\n\nexport class Sequence implements ISequence<number> {\n  count = 0;\n  get next(): number { return this.count++; }\n}\n\n// give a infinite list of distinct string names from\n// the alphabet with trailing single-quotes ('prime')\n// giving A, B, C,..., Y, Z then A', B', C', ... A'', B'', C'' ....\nexport class NameSequence implements ISequence<String> {\n  // next: string;\n  private nameRoots = [\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\n    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z',\n    //'a', 'b', 'c', 'd', 'e'\n  ]\n  private nameCount = new Sequence()\n  get next() {\n    let n = this.nameCount.next\n    return this.nameRoots[n % this.nameRoots.length]\n         + (replicate([\"'\"], n).join(''))\n  }\n}\n\nexport abstract class StringGeneratorSequence implements ISequence<string> {\n  baseItems: string[] = []\n  generatedItems: string[] = []\n  abstract generate(): string \n  get next(): string {\n    let result = this.generate()\n    let attempts = 0\n\n    while (\n      (\n        this.baseItems.includes(result)\n        || this.generatedItems.includes(result)\n      )\n      && attempts++ < 100\n    ) {\n      result = this.generate()\n    }\n    this.generatedItems.push(result)\n    return result\n  }\n}\n\nexport class MarkovSequence\n     extends StringGeneratorSequence\n  implements ISequence<string> {\n  generator: MarkovGenerator\n  constructor(private items: string[], order = 2, max = 10) {\n    super()\n    this.generator = new MarkovGenerator(order, max)\n    this.items.forEach(this.feed)\n  }\n\n  @boundMethod\n  feed(it: string) {\n    this.baseItems.push(it);\n    this.generator.feed(it);\n  }\n\n  generate(): string { return this.generator.generate(); }\n}\n","import { BasicEntity } from \"./types/BasicEntity\";\nimport { boundMethod } from 'autobind-decorator'\nimport { where } from \"./utils/where\";\nimport { isString } from \"./utils/isString\";\nimport { ManageStock, ManageStocks } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass StockManager<T extends BasicEntity> implements ManageStock<T> {\n  constructor(private stocks: Stocks<T>, private stockId: number) {}\n  add(amount: number): void { return this.stocks.add(amount, this.name) }\n  remove(amount: number): void { return this.stocks.remove(amount, this.name) }\n  get list(): T[] { return this.stocks.list() }\n  get count(): number { return this.stocks.count(this.name) }\n  get name() { return this.item.name }\n  get item(): T { return this.stocks.lookupById(this.stockId) }\n}\n\nexport class Stocks<T extends BasicEntity> {\n  private ids: Sequence = new Sequence()\n  private storage: { [key: number]: number; } = {}\n\n  constructor(\n    public name: string,\n    private elements: T[] = []\n  ) { }\n\n  @boundMethod\n  list() { return this.elements }\n\n  get _store() { return this.storage }\n\n  public clear() { this.elements = []; this.storage = {} }\n\n  public create(name: string): ManageStock<T>\n  public create(attributes: { name: string } & Omit<T, 'id' | 'name'>): ManageStock<T>\n  /** Create a new type of element to store */\n  @boundMethod\n  public create(attrs: any) {\n    let name: string | null = null;\n    let attributes: Partial<T> = {}\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    if (isString(name) && this.has(name)) {\n      return this.manage(name);\n    }\n    if (!isString(name)) { throw new Error(\"Name must be a string\") }\n    // const elementIds: number[] = this.list().map(({ id }) => id);\n    const id = this.ids.next; //Math.max(0, ...elementIds) + 1;\n    const theEntity: T = { id, name, ...attributes } as T\n    this.list().push(theEntity);\n    const manage: ManageStock<T> = this.manage(name as string)\n    return manage\n  }\n\n  @boundMethod\n  add(amount: number, name: string) {\n    this.setAmount(name, this.count(name) + amount);\n  }\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.setAmount(name, this.count(name) - amount);\n  }\n\n  @boundMethod\n  zero(name: string): void {\n    this.setAmount(name, 0);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    const element: T = this.lookup(name);\n    const amount = this.storage[element.id] || 0;\n    return amount;\n  }\n\n  has(name: string): boolean {\n    const matching = this.elements.find(where('name', name))\n    return !!matching;\n  }\n\n  @boundMethod\n  lookupById(id: number): T {\n    const matching = this.elements.find(where('id', id))\n    if (matching) {\n      return matching as T;\n    }\n    throw new Error(`No such ${this.name} with id ${id}`);\n  }\n\n  lookup(name: string): T {\n    const matching = this.elements.find(where('name', name))\n    if (matching) {\n      return matching as T;\n    } else {\n      return this.create(name).item\n    }\n  }\n\n  get report(): (T & { amount: number })[] {\n    const items: T[] = this.list()\n    const table = items.flatMap((item: T) => {\n      const id = Number(item.id)\n      const amount = this.storage[id] || 0\n      return { ...item, amount }\n    })\n    return table\n  }\n\n  manage(name: string): ManageStock<T> {\n    return new StockManager<T>(this, this.lookup(name).id)\n  }\n\n  manageAll(): ManageStocks {\n    const { add, remove, count } = this\n    return { add, remove, count, list: () => this.elements }\n  }\n\n  get manager() { return this.manageAll() }\n\n  private setAmount(name: string, amount: number): void {\n    const element: T = this.lookup(name);\n    this.storage[element.id] = amount;\n  }\n}\n","import { Population } from \"./Population\";\nimport { BasicEntity } from \"./types/BasicEntity\";\nimport { Entity, ManageStocks } from \"./types\";\nimport { boundMethod } from \"autobind-decorator\";\n\n// eg map animal (species) names to populations of individual animals...\n\nexport class Registry<U extends BasicEntity, T extends Entity<U>, Pop extends Population<U,T>> {\n  populations: { [species: string]: Pop } = {};\n  species: { [species: string]: U } = {}\n  constructor(\n    public name: string,\n    public popCtor: new (name: string, specie: U) => Pop\n  ) {}\n\n  clear() {\n    this.populations = {}\n  }\n\n  @boundMethod\n  lookup(name: string): Pop {\n    if (this.has(name)) {\n      return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${name}'`);\n    }\n  }\n\n  @boundMethod\n  lookupById(id: number): U { //Population<U,T> {\n    const matching = Object.values(this.species).find(x => x.id === id)\n    if (matching) { //this.has(name)) {\n      return matching\n      // return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${id}'`);\n    }\n  }\n\n  has(name: string): boolean {\n    return this.populations.hasOwnProperty(name);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    return this.lookup(name).count;\n  }\n\n  @boundMethod\n  list(): U[] {\n    return Object.values(this.species)\n  }\n\n  listByName(name: string): T[] {\n    return this.lookup(name).list();\n  }\n\n  @boundMethod\n  create(name: string, species?: Omit<U, 'name' | 'id'>): Pop { //Population<U,T> {\n    if (this.has(name)) {\n      return this.lookup(name);\n    }\n    let theSpecies: U = { ...species, name, id: this.list().length+1 } as unknown as U; // species.kind points back to name...\n    let population: Pop = new this.popCtor(name, theSpecies);\n    this.populations[name] = population;\n    this.species[name] = theSpecies;\n    return population;\n  }\n\n  get populationList(): Population<U,T>[] { return Object.values(this.populations)}\n\n  get report() {\n    const pops = this.populationList.flatMap((population: Population<U,T>) => {\n      const pop = population\n      if (pop.count > 0) {\n        return { name: pop.name, amount: pop.count}\n      } else {\n        return []\n      }\n    })\n    return pops\n  };\n\n  @boundMethod\n  add(amount: number, name: string): void {\n    this.lookup(name).add(amount)\n  };\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.lookup(name).remove(amount)\n  };\n\n  manageAll(): ManageStocks {\n    const { add, remove, count, list } = this\n    return { add, remove, count, list }\n  }\n  get manager() { return this.manageAll() }\n}\n","import { Model } from \"./Model\";\nimport { Registry } from \"./Registry\";\nimport { Stocks } from \"./Stocks\";\nexport type DeltaSource = Stocks<any> | Registry<any, any, any> \n//<U extends BasicEntity, T extends Entity<U>> = Stocks<T> | Registry<U,T>\nexport type DeltaSourceManager = { add: Function, remove: Function, count: Function, list: Function }\nexport class Delta {\n  public changes: Stocks<any>;\n  constructor(public model: any, public getStocks: (model: Model) => DeltaSource) {\n    let baseline = this.getStocks(model)\n    this.changes = new Stocks(`${baseline.name} (delta)`, baseline.list());\n  }\n  get storage() { return this.changes._store }\n  // evolve(t: number): Delta {\n  //   let stocks = this.getStocks(this.model)\n  //   const flow = { [stocks.name]: stocks.manageAll() }\n  //   this.model.dynamics.each(dynamism => dynamism(flow, t));\n  //   return this;\n  // }\n}\n","import { List } from \"../../collections\";\nimport { Delta, DeltaSource } from \"../Delta\";\nimport { Entity, EvolvingStocks, TimeEvolution } from \"../types\";\nimport { ISimulation } from \"./ISimulation\";\n\nexport abstract class Simulation implements ISimulation {\n  protected ticks: number = 0;\n  protected tracking: string[] = []\n  public dynamics = new List<TimeEvolution>()\n  constructor(public name: string) { }\n  public evolve(e: TimeEvolution) { this.dynamics.add(e) }\n  public step() { return this.flux(this.ticks++) }\n\n  public get report() {\n    return Object.fromEntries(this.tracking.map(target =>\n      [target, (this as any)[target].report]\n    ))\n  }\n\n  private flow(target: string) {\n    const source = (this as any)[target]\n    const theDelta = new Delta(this, (model) => (model as any)[target])\n    const { add, remove } = theDelta.changes.manager\n    const { list, count, lookupById } = source\n    return { lookupById, _delta: theDelta, add, remove, list, count }\n  }\n  \n  private flows(): { [key: string]: { _delta: Delta, lookupById: Function, add: Function } } {\n    const theFlows: {[key: string]: any} = {}\n    this.tracking.forEach(target => theFlows[target] = this.flow(target))\n    return theFlows\n  }\n\n  private flowsReport(flow: { [s: string]: any }) {\n    const table: { [key: string]: any } = {}\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = flow._delta\n      table[name] = Object.fromEntries(\n        Object\n          .entries(theDelta.storage)\n          .map(entry => {\n            const [id, amount] = entry\n            const name = flow.lookupById(Number(id)).name\n            return [ name, amount ]\n          })\n      )\n    })\n    return table\n  }\n\n  private flux(t: number) {\n    const flow: EvolvingStocks = this.flows() as any as EvolvingStocks\n    this.dynamics.each(dynamism => dynamism(flow, t));\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = (flow as any)._delta\n      this.apply(theDelta, name)\n    })\n    return { changed: this.flowsReport(flow) }\n  }\n\n  private apply(delta: Delta, target: string) {\n    const source: DeltaSource = (this as any)[target] as DeltaSource\n    const manager = source.manager\n    const list = manager.list()\n    const { storage: updated } = delta;\n    const changed: { [elementName: string]: number; } = {};\n    list.forEach((item: Entity<any>) => {\n      if (updated[item.id]) {\n        const deltaAmount = updated[item.id];\n        manager.add(deltaAmount, item.name);\n        changed[item.name] = deltaAmount;\n      }\n    });\n    return { changed };\n  }\n}\n","import { List, Sequence } from \"../collections\";\nimport { IList } from \"../collections/types\";\nimport { BasicEntity } from \"./types/BasicEntity\";\n\nclass Collection<T extends BasicEntity> extends List<T> implements IList<T> {\n  list() { return this.items }\n  private ids = new Sequence()\n  get names(): string[] {\n    // throw new Error('Method not implemented.');\n    return this.items.map(item => item.name)\n  }\n  // private get ids() { return this.it.map(({ id }) => id) }\n  create(attributes: Partial<T>): T {\n    const id = this.ids.next;\n    const theEntity: T = { id, ...attributes } as unknown as T;\n    this.items.push(theEntity);\n    return theEntity\n  }\n\n  lookup(name: string) {\n    return this.items.find(it => it.name === name)\n  }\n}\n\nexport { Collection }\n","import { Sequence } from \"../../collections\"\nimport { Collection } from \"../Collection\"\nimport { Stocks } from \"../Stocks\"\nimport { randomInteger } from \"../utils/randomInteger\"\nimport { sample } from \"../utils/sample\"\nimport { BasicEntity } from \"./BasicEntity\"\n\nexport type Substance = BasicEntity\nexport type Entity<T> = BasicEntity & { kind: T }\n\nexport type Quality = 'terrible' | 'poor' | 'adequate' | 'good' | 'excellent'\ntype Size = 'fine' | 'small' | 'medium' | 'large' | 'huge'\nexport type Species = BasicEntity & {\n  name: string\n  size?: Size\n  fitness?: Quality\n}\n\nexport type Individual<T> = Entity<T> & {\n  age: number // maybe simpler to do bornAt?\n}\n\nexport type Creature<T> = Individual<T> & {\n  health: 'dying' | 'unwell' | 'flourishing' | 'triumphant'\n}\n\nfunction pick<T>(elements: T[]): T {\n  const d100 = randomInteger(0,100)\n  if (d100 > 95) {\n    return elements[3]\n  } else if (d100 < 5) {\n    return elements[0]\n  }\n\n  return sample([elements[1], elements[2]])\n}\n\ntype Spirit = 'languorous' | 'vigorous' | 'impetuous' | 'ferocious'\ntype Strength = 'weak' | 'robust' | 'mighty' | 'indomitable'\ntype Cunning = 'foolish' | 'sly' | 'crafty' | 'manipulative'\n//'dim' | 'attentive' | 'creative' | 'ingenious'\ntype Agility = 'clumsy' | 'nimble' | 'spry' | 'balletic'\ntype Guile = 'transparent' | 'convincing' | 'beguiling' | 'insidious'\n\nexport type Animal = Creature<Species> & {\n  spirit: Spirit\n  strength: Strength\n  cunning: Cunning\n  guile: Guile\n  agility: Agility\n}\n\n\nconst animalIds = new Sequence()\nexport const createAnimal = (name: string, species: Species): Animal => {\n  return {\n    id: animalIds.next,\n    name,\n    kind: species,\n    age: 0,\n    guile: pick([ 'transparent', 'convincing', 'beguiling', 'insidious' ]),\n    health: pick(['dying', 'unwell', 'flourishing', 'triumphant']),\n    spirit: pick(['languorous', 'vigorous', 'impetuous', 'ferocious']),\n    cunning: pick(['foolish', 'sly', 'crafty', 'manipulative']),\n    agility: pick(['clumsy', 'nimble', 'spry', 'balletic']),\n    strength: pick(['weak', 'robust', 'mighty', 'indomitable']),\n  }\n}\n\n// major demographic groupings -- moieties (maybe *this* should be called a Community??)\ntype Wealth = 'impoverished' | 'well-off' | 'luxuriant' | 'decadent'\ntype Sophistication = 'unpretentious' | 'savvy' | 'urbane' | 'sleek'\ntype Power = 'inconsequential' | 'marginal' | 'influential' | 'sovereign'\ntype Knowledge = 'clueless' | 'well-informed' | 'wise' | 'prescient'\ntype Technology = 'lost' | 'primitive' | 'archaic' | 'advanced'\n\nexport type Moiety = BasicEntity & {\n  wealth: Wealth\n  sophistication: Sophistication\n  power: Power\n  knowledge: Knowledge\n  tech: Technology\n}\n\nconst moietyIds = new Sequence()\nexport const createMoiety = (name: string): Moiety => {\n  const wealth: Wealth = pick([ 'impoverished', 'well-off', 'luxuriant', 'decadent' ])\n  const sophistication: Sophistication = pick([ 'unpretentious', 'savvy', 'urbane', 'sleek' ])\n  const power: Power = pick([ 'inconsequential', 'marginal', 'influential', 'sovereign' ])\n  const knowledge: Knowledge = pick([ 'clueless', 'well-informed', 'wise', 'prescient' ])\n  const tech: Technology = pick([ 'lost', 'primitive', 'archaic', 'advanced' ])\n  return { id: moietyIds.next, name, wealth, sophistication, power, knowledge, tech }\n}\n\ntype Body = Animal\n\ntype Insight = 'dense' | 'intuitive' | 'incisive' | 'brilliant'\ntype Depth = 'superficial' | 'substantial' | 'profound' | 'inscrutable'\ntype Education = 'unlettered' | 'literate' | 'tutored' | 'well-read'\ntype Disposition = 'dismal' | 'hopeful' | 'propitious' | 'roseate'\ntype Valor = 'timid' | 'bold' | 'courageous' | 'fearless'\ntype Personality = 'bland' | 'charismatic' | 'captivating' | 'magnetic' \n\ntype Mind = {\n  insight: Insight\n  depth: Depth\n  education: Education\n  disposition: Disposition\n  valor: Valor\n  personality: Personality\n}\n\nexport const createMind = (): Mind => {\n  const insight: Insight = pick([ 'dense', 'intuitive', 'incisive', 'brilliant' ])\n  const depth: Depth = pick([ 'superficial', 'substantial', 'profound', 'inscrutable' ])\n  const education: Education = pick([ 'unlettered', 'literate', 'tutored', 'well-read' ])\n  const disposition: Disposition = pick([ 'dismal', 'hopeful', 'propitious', 'roseate' ])\n  const valor: Valor = pick([ 'timid', 'bold', 'courageous', 'fearless' ])\n  const personality: Personality = pick([ 'bland', 'magnetic', 'charismatic', 'captivating' ])\n  return { insight, depth, education, disposition, valor, personality }\n}\n\ntype Wit = 'slow' | 'clever' | 'biting' | 'savage'\ntype Empathy = 'sadistic' | 'generous' | 'benevolent' | 'selfless'\ntype Integrity = 'uncertain' | 'sound' | 'solid' | 'incorruptible'\ntype Beauty = 'ugly' | 'fair' | 'radiant' | 'resplendent'\ntype Charm  = 'repulsive' | 'inoffensive' | 'affable' | 'likeable'\ntype Resolve = 'vacillating' | 'steadfast' | 'intrepid' | 'relentless'\n\ntype Soul = {\n  wit: Wit\n  empathy: Empathy\n  integrity: Integrity\n  beauty: Beauty\n  charm: Charm\n  resolve: Resolve\n}\n\nexport const createSoul = (): Soul => {\n  const wit: Wit = pick([ 'slow', 'clever', 'biting', 'savage' ])\n  const empathy: Empathy = pick([ 'sadistic', 'generous', 'benevolent', 'selfless' ])\n  const integrity: Integrity = pick([ 'uncertain', 'sound', 'solid', 'incorruptible' ])\n  const beauty: Beauty = pick([ 'ugly', 'fair', 'radiant', 'resplendent' ])\n  const charm: Charm = pick([ 'repulsive', 'inoffensive', 'affable', 'likeable' ])\n  const resolve: Resolve = pick([ 'vacillating', 'steadfast', 'intrepid', 'relentless' ])\n  \n  return { wit, empathy, integrity, beauty, charm, resolve }\n}\n\n// type Category = BasicEntity\n// type Item = Entity<Category> & {}\n// type Event = BasicEntity\n// type Incident = Entity<Incident>\n\n// export type Trait = { id: number, name: string, rank: 0 | 1 | 2 | 3 | 4 | 5 }\nexport type Memory = { id: number, name: string, description: string }\n\nexport type Person = Individual<Moiety> & {\n  body: Body\n  mind: Mind\n  soul: Soul\n\n\n  // ie within my moiety, I am (thought of as)...\n  // rank: 'commoner' | 'wellborn'\n  // title?: string\n  // reputation: 'unknown' | 'worthy' | 'adored' | 'revered'\n\n  // individually...\n  things: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n  // stats: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n\n  currency: number\n  traits: ManageStocks // IList<Trait>\n\n  // things to draw meters for..\n  meters: { [meterName: string]: Function }\n  memory: Collection<Memory>\n  // philosophy?: Ideology\n  // destiny: 'doomed' | 'commonplace' | 'exceptional' | 'free'\n}\n\nconst personId = new Sequence()\nconst human: Species = { id: -1, name: 'Human Being', size: 'medium' }\nexport const createPerson = (name: string, moiety: Moiety): Person => {\n\n  const inventory = new Stocks<any>(`${name}'s Things`)\n  const traits = new Stocks<any>(`${name}'s Traits`)\n  // const state = new Stocks<any>(`${name}'s State`)\n    // personAttrs.things = inventory.manageAll()\n  return {\n    id: personId.next,\n    kind: moiety,\n    // kind: createMoiety()\n    name,\n    age: 0,\n    body: createAnimal(name, human),\n    mind: createMind(),\n    soul: createSoul(),\n    // rank: 'commoner',\n    // reputation: 'unknown',\n    currency: 0,\n    things: inventory.manageAll(),\n    traits: traits.manageAll(),\n    // stats: state.manageAll()\n    // things: new M\n    meters: {},\n    memory: new Collection<Memory>(),\n  }\n\n}\n\n// const person = (): Person => {\n//   const newPerson: Person = {\n//     id: personId.next()\n//   }\n//   return newPerson\n// }\n\nexport type Recipe = BasicEntity & {\n  produces: { [resourceName: string]: number }\n  consumes?: { [resourceName: string]: number }\n  requiresMachine?: string\n}\n\nexport type Machine = BasicEntity\n\n// export type Task = BasicEntity & {\n//   machine?: string\n//   recipe: string\n// }\n\n// type ManageList = {}\n\nexport type ManageStocks = {\n  add: (amount: number, name: string) => void,\n  remove: (amount: number, name: string) => void,\n  count: (name: string) => number,\n  list: () => any[]\n}\n\nexport type ManageStock<T> = {\n  add: (amount: number) => void,\n  remove: (amount: number) => void,\n  count: number,\n  item: T\n}\n\nexport type ManagePopulation<T> = {\n  count: number\n  birth: (name: string) => T\n  death: (name: string) => T\n  add: (amount: number) => T[]\n  remove: (amount: number) => T[]\n}\n\nexport type ManagePopulationRegistry<T> = {\n  lookup: (name: string) => ManagePopulation<T>\n}\n\n// todo rename\nexport interface EvolvingStocks {\n  [key: string]: ManageStocks\n}\nexport type TimeEvolution = (evolution: EvolvingStocks, ticks: number) => void\n\nexport type StepResult = {\n  changed: { \n    [groupName: string]: { [elementName: string]: number }\n  }\n}\n\n// todo move these model/sim things somewhere else???\nexport type Action = { id: number, name: string, act: Function }\nexport type Policy = { id: number, name: string, manage: Function }\n","import { isString } from \"./utils/isString\";\nimport { boundMethod } from \"autobind-decorator\";\nimport { Entity } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass SetHelper {\n  static first<T>(set: Set<T>): T { return set.values().next().value }\n}\n\n// a collection of named individuals...\nconst populationIds: Sequence = new Sequence()\nexport class Population<Specie, Dividual extends Entity<Specie>> {\n  public id = populationIds.next\n  private ids: Sequence = new Sequence()\n  constructor(\n    public name: string,\n    public species?: Specie,\n    protected individuals: Set<Dividual> = new Set(),\n  ) {}\n\n  list() { \n    const theList: Dividual[] = []\n    this.individuals.forEach(individual => theList.push(individual))\n    return theList;\n  }\n  get count() { return this.individuals.size }\n  get first() { \n    return SetHelper.first(this.individuals)\n   }\n  public lookup(name: string): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.name === name) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with name '${name}' in the population of ${this.name}`)\n  }\n\n  @boundMethod\n  public lookupById(id: number): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.id === id) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with id ${id} in the population of ${this.name}`)\n  };\n\n  public birth(name: string = `${this.name} ${this.count}`): Dividual {\n    const newborn = this.create(name)\n    return newborn\n  }\n\n  @boundMethod\n  public death(name?: string): Dividual {\n    if (name) {\n      const doomed = this.destroy(name)\n      if (doomed) {\n        return doomed\n      }\n    } else {\n      const doomed = this.first\n      if (doomed) {\n        this.destroy(doomed.name)\n        return doomed\n      }\n    }\n    throw new Error(\"Population already empty!\")\n  }\n\n  public add(amount: number) {\n    const newborns = []\n    for (let i = 0; i < amount; i++) {\n      newborns.push(this.birth())\n    }\n    return newborns\n  }\n\n  public remove(amount: number) {\n    const doneFor = []\n    for (let i = 0; i < Math.min(this.count, amount); i++) {\n      doneFor.push(this.death(this.first.name))\n    }\n    return doneFor\n  }\n\n  protected build(attrs: any) {\n    let name = null;\n    let attributes: Partial<Dividual> = {};\n    // console.log(attrs)\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    \n    const id = this.ids.next; //Math.max(0, ...this.ids) + 1;\n    const theIndividual: Dividual = { id, name, ...attributes } as unknown as Dividual;\n    return theIndividual;\n  }\n\n\n  public create(name: string): Dividual;\n  public create(attrs: Partial<Dividual>): Dividual;\n  @boundMethod\n  public create(attrs: any) {\n    const theIndividual: Dividual = this.build(attrs)\n    this.individuals.add(theIndividual);\n    return theIndividual;\n  }\n\n  public destroy(name: string): Dividual;\n  @boundMethod\n  public destroy(name: string) {\n    const theIndividual: Dividual = this.lookup(name)\n    this.individuals.delete(theIndividual);\n    return theIndividual;\n  }\n\n  get report() {\n    return Object.fromEntries(this.list().map(individual => {\n      return [individual.id, individual.name];\n    }))\n  }\n}\n","import { List, Map } from '../collections';\nimport { Recipe, Moiety, Person, ManageStocks, createPerson, createMoiety } from \"./types\";\nimport { Population } from \"./Population\";\nimport { Collection } from \"./Collection\";\nimport { boundMethod } from 'autobind-decorator';\n\nexport class Community extends Population<Moiety, Person> {\n  moieties: List<Moiety> = new List<Moiety>();\n  obscured: boolean = false // don't display details\n   \n  public recipes = new Collection<Recipe>();\n  public jobs = new Map<Person, Recipe>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  );\n\n  public inventories = new Map<Person, ManageStocks>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  )\n\n  get report(): { [personName: string]: string; } {\n    const entries = this.list()\n      .map(person => [person.id, (this.jobs.get(person) || {name: '?'}).name]);\n    return Object.fromEntries(entries);\n  }\n\n  // okay if we need to override create + build inventories let's do it ??\n  public create(name: string): Person;\n  public create(attrs: Partial<Person>): Person;\n  @boundMethod\n  public create(attrs: any) {\n    const personAttrs = super.build(attrs);\n    const { name, age } = personAttrs;\n    const person: Person = createPerson(name, createMoiety(`${name}'s Gens`)) //, this.species)\n    person.age = age\n    this.individuals.add(person)\n    return person\n  }\n\n  // people have inventories...\n  // and maybe they've declared what they want\n\n  // measureTime(time: number): HumanCalendar {}\n\n  // trade({ resources })\n\n  work({ resources }: { resources: { add: Function; remove: Function; count: Function; }; }): void {\n    const { report } = this.jobs;\n    Object.entries(report).forEach(([_workerName, recipe]: [string, Recipe]) => {\n      this.produce(recipe, resources);\n    });\n  }\n  \n  private produce(recipe: Recipe, resources: { add: Function; remove: Function; count: Function; }) {\n    if (this.mayProduce(recipe, resources)) {\n      if (recipe.consumes) {\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          resources.remove(amount, resource);\n        });\n      }\n      Object.entries(recipe.produces).forEach(([resource, amount]) => {\n        resources.add(amount, resource);\n      });\n    }\n  }\n\n  private mayProduce(recipe: Recipe, resources: { count: Function; }) {\n    let mayProduce = true;\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (resources.count(resource) < amount) {\n          mayProduce = false;\n        }\n      });\n    }\n    return mayProduce;\n  }\n\n}\n","import { Substance, Machine, Animal, Species, Action, Policy, Moiety, Person } from \"../types\"\nimport { Stocks } from \"../Stocks\"\nimport { Registry } from \"../Registry\"\nimport { Simulation } from \"./Simulation\"\nimport { IModel } from \"./IModel\"\nimport { Collection } from \"../Collection\"\nimport { Community } from \"../Community\"\nimport { Population } from \"../Population\"\nimport { Tiles } from \"../Board\"\n\ntype Fauna = Population<Species, Animal>\nexport class Model extends Simulation implements IModel  {\n  tracking = [ 'animals', 'resources' ]\n  get tiles(): Tiles { return [] }\n\n  public people = new Registry<Moiety, Person, Community>('people', Community)\n  public resources = new Stocks<Substance>('resources')\n  public machines  = new Stocks<Machine>('machines')\n  public animals   = new Registry<Species, Animal, Fauna>('wildlife', Population)\n\n  reset() {\n    this.resources.clear()\n    this.machines.clear()\n    this.animals.clear()\n    this.people.clear()\n    this.dynamics.clear()\n  }\n\n  // measurements\n  public metrics: { [name: string]: () => number } = {}\n  public notes: { [name: string]: () => string } = {}\n\n  // interactive elements\n  public actions: Collection<Action> = new Collection<Action>()\n  public policies: Collection<Policy> = new Collection<Policy>()\n\n  send(actionName: string, args: any): void {\n    const action = this.actions.lookup(actionName)\n\n    if (action) {\n      action.act(args)\n    } else {\n      throw new Error(`No such action ${actionName}`)\n    }\n  }\n\n  currentPolicy: Policy | undefined\n  choose(policyName: string): void {\n    // console.log(\"[Model.choose]\", policyName)\n    const policy = this.policies.lookup(policyName)\n    if (policy) {\n      this.currentPolicy = policy\n    } else {\n      throw new Error(`No such policy ${policyName}`)\n    }\n  }\n\n  public step() {\n    if (this.currentPolicy) {\n      // console.log(\"MANAGING\", { policy: this.currentPolicy })\n      this.currentPolicy.manage()\n    }\n    return super.step()\n  }\n}\n\nexport default Model;\n","import { prettyAmount } from \"../utils/prettyAmount\";\n\nexport function presentItem(deltas?: { [elementName: string]: number; }) {\n  return ({ name, amount }: { name: string; amount: number; }) => {\n    const delta = deltas && deltas[name];\n    return <li key={name} title={name} className='Item'>\n      <span className='Title' data-testid='Name'>{name}</span>\n      <span data-testid='Count'>\n        {prettyAmount(amount)}\n      </span>\n      <span data-testid='Delta'>\n        {delta}\n      </span>\n    </li>;\n  };\n}\n","export function Tile({ children, title }: { children?: React.ReactNode; title: string; }) {\n  return <div className='Tile' title={title}>\n    <h5 className='Title'>{title}</h5>\n    {children}\n  </div>;\n}\n","import { Tile } from \"./Tile\";\nimport { Community } from \"../Community\";\nimport { presentIndividual } from \"./presentIndividual\";\n\n\nexport function presentCommunity(community: Community) {\n  return <Tile title={community.name} key={community.id}>\n    <ul aria-label='People'>\n      {community.obscured ? community.list().map(individual => <li key={individual.id}>{individual.name}</li>)\n                          : community.list().map(presentIndividual(community.report))}\n    </ul>\n  </Tile>;\n}\n","import { ManageStocks } from \"../types\";\n\n\nexport function presentIndividual(work: { [key: number]: string; }) {\n  return ({ id, name, things, traits, meters }: {\n    id: number;\n    name: string;\n    things: ManageStocks;\n    traits: ManageStocks;\n    meters: { [key: string]: Function }\n  }) => {\n    const itemNames = things.list().map(thing => thing.name);\n    return <li key={id} title={name} className='Item'>\n      <div className='Title' data-testid='Name'>{name}</div>\n      {Object.entries(meters).map(([meterName, measure]) => {\n        const { value, max } = measure()\n        return <div className='Meter' data-testid={meterName}>\n          <label htmlFor={meterName} style={{paddingRight: 10}}>{meterName}:</label>\n          <meter id={meterName}\n                 style={{ width: 130, height: 14 }}\n                 min=\"0\" max={max}\n                 low={max * 0.33} high={max * 0.66} optimum={max * 0.8}\n                 value={value}>\n              at {value}/{max}\n          </meter>\n        </div>\n      })}\n      {work[id] && work[id] !== '?' && <span data-testid='Status'>{work[id]}</span>}\n      {itemNames.length > 0 && <div className='Subitems' data-testid='Inventory'>\n        <ul>\n          {itemNames.sort((a,b) => a > b ? 1 : -1).map(it => <li key={it} style={{\n              ...(things.count(it) === 0 ? { display: 'none' } : {})\n            }}>\n            {it} <span data-testid={it}  className='Count'>{things.count(it)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      {traits.list().length > 0 && <div className='Traits' data-testid='Trait Ranks'>\n        <ul>\n          {traits.list().map(trait => <li key={trait.id} style={{\n              ...(traits.count(trait.name) === 0 ? { display: 'none' } : {})\n            }}>\n            {trait.name} <span data-testid={trait.name}>{traits.count(trait.name)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      \n    </li>;\n  };\n}\n","// import { Suspense, useState } from \"react\";\n// import { Canvas } from \"@react-three/fiber\";\nimport { useState } from 'react';\nimport ReactTooltip from 'react-tooltip';\n\nimport { Machine, Moiety, Person } from \"../types\";\nimport { LastDelta } from \"../../ModelPresenter\";\nimport { presentItem } from \"../Model/presentItem\";\nimport { Tile } from \"./Tile\";\nimport { presentCommunity } from \"./presentCommunity\";\nimport { Population } from \"../Population\";\nimport { Community } from \"../Community\";\n\nimport './View.css';\n// import { Scene } from \"./Scene\";\n\nexport type ModelViewProps = {\n  modelName: string;\n  items: { name: string; amount: number; }[];\n  animals: { name: string; amount: number }[];\n  communities: Population<Moiety, Person>[];\n  machines: Machine[];\n  lastChanges: LastDelta;\n  metrics: { [name: string]: number };\n  notes: { [name: string]: string };\n  board: IBoard\n}\n\nconst ViewHeightmap = () => <>\n{/* <Canvas camera={{ zoom: 40, position: [0, 0, 500] }}>\n  <Suspense\n    fallback={<div className=\"loading\">Loading</div>}\n  >\n  </Suspense>\n  <Scene />\n</Canvas> */}\n</>\n \n\ninterface IBoard { tiles: string[][], tileColors: { [tile: string]: string }, tileInspect: (x: number, y: number) => string}\n\n\nconst BoardTable = ({ tiles, tileColors, tileInspect }: IBoard) => {\n  const [inspecting, setInspecting] = useState([-1,-1]);\n  const message = inspecting[0] > 0 && inspecting[1] > 0\n    ? tileInspect(inspecting[0], inspecting[1])\n    : <>--</>\n\n  return <div style={{ flexDirection: \"column\" }}>\n    <ReactTooltip />\n    <ViewHeightmap />\n    <table style={{\n      fontFamily: '\"Source Code Pro\", \"Fira Code\", \"Inconsolata\", Menlo, Monaco, \"Courier New\", monospace',\n      cursor: 'pointer',\n    }}>\n      <tbody>\n        {tiles.map((row: string[], y: number) =>\n          <tr key={`row-${y}`}>\n            {row.map((cell: string, x: number) =>\n              <td\n                style={{\n                  // highlight cell errors..\n                  // color: tileInspect(x,y).match(/error/) ? 'red' : tileColors[cell],\n                  // maxWidth: '4px',\n                  // maxHeight: '2px',\n                  color: tileColors[cell],\n                  backgroundColor: inspecting[0] === x && inspecting[1] === y ? 'gray': 'black'\n                }}\n                key={`cell-${x}-${y}}`}\n                onMouseEnter={() => setInspecting([x,y])}\n                onMouseLeave={() => setInspecting([-1,-1])}\n                data-tip={inspecting[0] === x && inspecting[1] === y ? message : ''}\n                // data-html\n              >{cell}</td>\n            )}\n          </tr>\n        )}\n      </tbody>\n    </table>\n  </div>\n}\n\nexport function ModelView({\n  modelName,\n  items,\n  // individuals,\n  communities,\n  machines,\n  animals,\n  lastChanges,\n  metrics,\n  notes,\n  board,\n  // work\n}: ModelViewProps) {\n  const folks = (communities as Community[]).map(presentCommunity)\n  // console.log({ community: communities[0].list() })\n  return <div className='Model'>\n    <h4 aria-label='Model Title' style={{display: 'none'}}>{modelName}</h4>\n    {board.tiles.length > 0 && <BoardTable {...board} />}\n    {items.length > 0 && (<Tile title='Items'>\n      <ul aria-label='Resources'>\n        {items.map(presentItem(lastChanges.resources))}\n      </ul>\n    </Tile>)}\n    {animals.length > 0 && (\n      <Tile title='Animals'>\n        <ul aria-label='Animals'>\n          {animals.map(presentItem(lastChanges.animals))}\n        </ul>\n      </Tile>)}\n      {communities.length > 0 && <div title='Individuals' style={{display: 'flex'}}>{folks}</div>}\n    {machines.length > 0 && <Tile title='Machines'>\n      <ul>\n        {machines.map(({ name }) => <li key={name}>{name}</li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(metrics).length > 0 && <Tile title='Metrics'>\n      <ul>\n        {Object.entries(metrics).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Count'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(notes).length > 0 && <Tile title='Notes'>\n      <ul>\n        {Object.entries(notes).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Description'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n  </div>;\n}\n","import { Model } from './Model';\nimport { IModel } from './IModel';\nimport { ModelView } from '../View/ModelView';\nexport { Model, ModelView }\nexport type { IModel }\nexport default Model\n","// import { IAssembly } from './ecosphere/Assembly';\nimport { ModelView } from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\n\nexport type LastDelta = { [group: string]: { [element: string]: number }}\n\ntype ModelPresenterProps = {\n  model: IModel\n  step: Function \n  send: Function\n  choose: Function\n  lastChanges: LastDelta\n}\n\nconst view = (model: IModel, lastChanges: LastDelta) => {\n  const { actions, resources, people, machines, animals, metrics, notes, tiles, tileColors } = model;\n\n  const props = {\n    modelName: model.name,\n    items: resources.report,\n    communities: people.populationList, //.populations,\n    // individuals: people.list(),\n    // work: people.report,\n    machines: machines.list(),\n    animals: animals.report,\n    actions: actions.list(),\n    metrics: Object.fromEntries(\n      Object.entries(metrics).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    notes: Object.fromEntries(\n      Object.entries(notes).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    lastChanges,\n    board: { tiles: tiles || [], tileColors: tileColors || {}, tileInspect: (model.tileInspect || (() => '--')) }\n  }\n\n  return props\n}\n\nexport function ModelPresenter({ model, send, choose, step, lastChanges }: ModelPresenterProps) {\n  return <>\n    <div aria-label='View'>\n      <ModelView {...view(model, lastChanges)} />\n    </div>\n\n    <div aria-label='Controls'>\n      <span title='Run' style={{display: 'none'}}>\n        <button onClick={() => step(true)}>Step</button>\n      </span>\n\n      <span title='Actions'>\n        {model.actions.list().map(({ name }) => <button title={name} key={name} onClick={() => send(name)}>\n          {name}\n        </button>)}\n      </span>\n\n      {model.policies.count > 0 && <div className='Policy' title='Policies'>\n        {/* <h5>Policies</h5> */}\n        {model.policies.list().map(({ name }) => <label key={name}><input\n          type='radio'\n          checked={model.currentPolicy?.name === name}\n          title={name}\n          key={name}\n          onChange={() => choose(name)}\n        />\n        {name}\n        </label>)}\n      </div>}\n    </div>\n  </>;\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { LastDelta } from './ModelPresenter';\nimport { isModel } from './ModelSelector';\n\nexport type ModelAPI = {\n  model: IModel | IAssembly\n  setModel(model: IModel | IAssembly): void\n  step: Function,\n  lastChanges: LastDelta,\n  send: (actionName: string, args: any) => void,\n  choose: (policyName: string, args: any) => void,\n  setDelay: (milliseconds: number) => void\n}\n\n// ticks per sec\n// const ticksPerSecond = (n: number) => n > 0 ? Math.floor(1000 / n) : 1\n// const speeds = {slow: 10, fast: 25, faster: 50, fastest: 80};\nexport function useModel(initialModel: IModel | IAssembly): ModelAPI { //model: IModel = new Model('Hello World')): ModelAPI {\n  const [model, setModel] = useState(initialModel) //new Model('Hello World'))\n\n  const [lastChanges, setLastChanges] = useState({} as LastDelta)\n  const isTest = process.env.NODE_ENV === 'test'\n  const [delay, setDelay] = useState(isTest ? 5000 : 2) //ticksPerSecond(speeds.slow));\n\n  const [shouldStep, step] = useState(false);\n  const [shouldSend, doSend] = useState(false);\n  const [shouldManage, doManage] = useState(false)\n\n  const performStep = () => { step(true); };\n  const [command, setCommand] = useState('')\n  const [policy, setPolicy] = useState('')\n\n  useEffect(() => {\n    if (shouldSend) {\n      if (command && isModel(model)) { model.send(command, {}) }\n      doSend(false)\n    }\n  }, [command, model, shouldSend]);\n\n  useEffect(() => {\n    if (shouldManage) {\n      if (policy && isModel(model)) { model.choose(policy, {}) }\n      doManage(false)\n    }\n  }, [policy, model, shouldManage]);\n\n  const performSend = (actionName: string, args: any) => {\n    setCommand(actionName)\n    doSend(true)\n  }\n\n  const performChoose = (policyName: string, args: any) => {\n    // console.log(\"CHOOSE\", policyName)\n    setPolicy(policyName)\n    doManage(true)\n  }\n\n  useEffect(() => {\n    if (shouldStep && isModel(model)) {\n      let { changed } = model.step();\n      step(false);\n      setLastChanges(changed);\n    }\n  }, [shouldStep, model]);\n\n  useInterval(() => step(true), delay); \n\n  return {\n    model,\n    step: performStep,\n    lastChanges: lastChanges as LastDelta,\n    send: (actionName: string, args: any) => performSend(actionName, args), \n    choose: (policyName: string, args: any) => performChoose(policyName, args),\n    setDelay,\n    setModel,\n  };\n}\n\nfunction useInterval(callback: any, delay: number) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      // @ts-ignore\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport Model from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelPresenter } from './ModelPresenter';\nimport { useModel } from './useModel';\n\nexport const isModel = (maybeModel: IModel | IAssembly): maybeModel is IModel => {\n  return maybeModel instanceof Model;\n}\n\nconst AssemblyPresenter: React.FC<{ assembly: IAssembly }> = ({ assembly }) => {\n  return <>{assembly.models.items.map((theModel: IModel) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { step, send, choose, lastChanges, model } = useModel(theModel);\n    return <>\n    <h4>{theModel.name}</h4>\n    <ModelPresenter\n             key={model.name}\n             step={step}\n             send={send}\n             model={model as IModel}\n             choose={choose}\n             lastChanges={lastChanges}\n           />\n           </>\n  })}</>\n}\n\nexport function ModelSelector({ initialModel, models }: {\n  initialModel: IModel;\n  models: (IModel | IAssembly)[];\n}) {\n  const { step, send, choose, lastChanges, model, setModel } = useModel(initialModel);\n  return <>\n    <Dropdown\n      options={models.map(model => model.name)}\n      onChange={({ value }) => {\n        const theModel = models.find((model: IModel | IAssembly) => model.name === value);\n        if (theModel) { setModel(theModel); }\n      }}\n      value={model.name}\n      placeholder=\"Select a model\" />\n    {isModel(model) ? <ModelPresenter\n                       step={step}\n                       send={send}\n                       model={model}\n                       choose={choose}\n                       lastChanges={lastChanges} />\n                    : <AssemblyPresenter assembly={model} />}\n  </>;\n}\n","// import Model from \"../ecosphere/Model\"\n\nimport Model from \"../ecosphere/Model\"\nimport { Person } from \"../ecosphere/types\"\n\nconst give = (recipient: Person, supplier: Person, n: number, item: string) => {\n  supplier.things.remove(n, item)\n  recipient.things.add(n, item)\n}\n\nconst world = new Model('Avernus')\nconst { resources, animals, people } = world\nconst folks = people.create('Townspeople')\nconst { recipes, jobs } = folks\n\nanimals.create('Fish')\n// resources.create('Fish')\n\n\n// const king = people.create('Maurice')\nconst miner = folks.create('Goldstrom')\nconst minter = folks.create('Octavius')\nconst smelter = folks.create('Smeltmore')\n// //const sheriff = people.create('Donald')\n// const claydigger = people.create('Bartlett')\n// const artist = people.create('Joseph')\nconst fisherman = folks.create('Harold')\n// const chef = people.create('Jethro')\n// const merchant = people.create('Reginald')\n\n// //set inventory\n// merchant.things.add(50, 'Gold Coin')\n\n\n// //create global resources\n// animals.create('Swimming Fish')\n// animals.add(500, 'Swimming Fish')\nresources.create('Gold Ore')\nresources.create('Gold Deposit')\nresources.create('Gold Bar')\nresources.create('Gold Coin')\n\nresources.add(100000000, 'Gold Deposit')\n// resources.create('Clay Deposit')\n// resources.add(10000, 'Clay Deposit')\n\n//create produced goods\n\n\n\n//jobs\n\n// const kingGold = recipes.create({\n//   name: 'Taking Gold',\n//   produces: { 'King Gold': 1 },\n//   consumes: { 'Gold Coin': 1 },\n// })\n\nconst mineGold = recipes.create({\n  name: 'Mining Gold',\n  produces: { 'Gold Ore': 1 },\n  consumes: { 'Gold Deposit': 10 },\n})\n\nconst smeltGold = recipes.create({\n  name: 'Smelt Gold',\n  produces: { 'Gold Bar': 1 },\n  consumes: { 'Gold Ore': 10 }\n})\n\nconst mintCoin = recipes.create({\n  name: 'Minting Gold Coins',\n  produces: { 'Gold Coin': 10 },\n  consumes: { 'Gold Bar': 1 },\n})\n\n// const digClay = recipes.create({\n//   name: 'Digging Clay',\n//   produces: { 'Clay Brick': 1 },\n//   consumes: { 'Clay Deposit': 1 },\n// })\n\n// const castPot = recipes.create({\n//   name: 'Casting Pottery',\n//   produces: { 'Fine Pottery': 1 },\n//   consumes: { 'Clay Brick': 1 },\n// })\n\n// const catchFish = recipes.create({\n//   name: 'Catching Fish',\n//   produces: { 'Caught Fish': 1 },\n//   consumes: { 'Swimming Fish': 1 },\n// })\n\n// const cookFish = recipes.create({\n//     name: 'Cooking Fish',\n//     produces: { 'Cooked Fish': 1 },\n//     consumes: { 'Caught Fish': 1 },\n// })\n\n//Set Jobs\njobs.set(miner, mineGold)\njobs.set(minter, mintCoin)\njobs.set(smelter, smeltGold)\n// jobs.set(claydigger, digClay)\n// jobs.set(artist, castPot)\n// jobs.set(fisherman, cookFish)\n// jobs.set(chef, cookFish)\n\nworld.evolve(({ resources, animals }, t) => {\n  // animals.add(1, 'Swimming Fish')\n\n  folks.work({ resources })\n\n  // employment\n  if (t % 10 === 0) {\n    const thePeople = [miner, minter, smelter]\n    thePeople.forEach(person => {\n      person.things.add(1, 'Gold Coin')\n      resources.remove(1, 'Gold Coin')\n    })\n  }\n\n  // taxation\n  // if (t % 1000 === 0) {\n  //   resources.remove()\n  // }\n\n  // wildlife hunting + fishing\n  if (t % 10 === 0) { // \n    // huntWildlife('Fish')\n    fisherman.things.add(1, 'Fish')\n    animals.remove(1, 'Fish')\n  }\n\n  // trade\n  const thePeople = [miner, minter, smelter]\n  // const theGoods = ['Fish', ]\n  thePeople.forEach(person => {\n    if (fisherman.things.count('Fish') > 3 && person.things.count('Gold Coin') > 5) {\n      give(fisherman, person, 5, 'Gold Coin')\n      give(person, fisherman, 1, 'Fish')\n    }\n  })\n})\n\n\nexport {world as Avernus}\n","import { Sequence } from \"../../collections\";\nimport { Person } from \"../../ecosphere/types\";\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\";\nimport { sample } from \"../../ecosphere/utils/sample\";\n\n// okay just some thoughts but: \n// - would be good to differentiate 'sapient' creatures with societies (Persons proper from Creatures..)\n// - would be good to make _use_ of the generated stats for the body + mind somehow\n// - would need to model species for different creatures...!\n// - and humanoid 'races' for the sapient peoples (orcs, kobolds..)\n// - would be neat to generate parties of enemy fighters too / heroes\n// - also: start relating generated people together (eg eliminate members of a cult or conspiracy)\n// - more generally questing and loot and bonuses for specific encounters\n// - more interesting rare creature generation\n// - more interesting attack/defense strats (stun/immobilize/stagger; max hp damage; stat damage; poison/venom)\n// - summoning\n// - more interesting magic creatures in general\n// - render combat! (just as board but:) rules for area of effect, movement, etc\n\nexport class MonsterManual {\n  basicCreatures = {\n    Fragment: { hp: 1, evasion: 95 },\n    Light: { hp: 24, evasion: 1 },\n    Fog: { hp: 26, evasion: 1, reflect: 10 },\n    Aura: { hp: 28, evasion: 1, speed: 1 },\n    Shadow: { hp: 38, evasion: 1, speed: 2 },\n    Wisp: { hp: 40, strength: 1, speed: 1, evasion: 1 },\n    Filament: { hp: 43, evasion: 1, speed: 1, counter: 1 },\n    Voice: { hp: 53, evasion: 1, speed: 1, counter: 1, absorb: 1, defense: 1 },\n    Nothing: { hp: 63, regen: 1, speed: 1, defense: 1, reflect: 1 },\n  };\n\n  challengingCreatures = {\n    // 'Gray Mote': { hp: 8, 'magic damage': 3 },\n    Fiendling: { hp: 12, 'holy damage': 1 }, //, speed: 1, counter: 1, evasion: 1 },\n    Gremlin: { hp: 22, speed: 1, counter: 1 }, // evasion: 1 },\n    Goblin: { hp: 30 },  //, 'magic damage': 1 },\n    Kobold: { hp: 40, strength: 1 }, // speed: 2 },\n    Orc: { hp: 48, strength: 1, speed: 1 }, //, counter: 1 },\n  }\n\n  uncommonCreatures = {\n    Rat: { hp: 14, strength: 1, speed: 3, evasion: 1 },\n    Bat: { hp: 18, strength: 2, speed: 2, evasion: 1, },\n    Snake: { hp: 15, strength: 3, speed: 2, evasion: 2, },\n    Blob: { hp: 24, strength: 2, speed: 1, evasion: 1 },\n    Bear: { hp: 30, strength: 3, speed: 2, evasion: 1 },\n    Ghost: { hp: 70, 'magic damage': 1, evasion: 1, counter: 1, speed: 1, absorb: 1, defense: 1 },\n    Rogue: { hp: 74, strength: 2, speed: 1, 'bonus damage': 2, evasion: 2, counter: 2 },\n    Troll: { hp: 83, strength: 2, speed: 2, regen: 1, counter: 1 },\n    Giant: { hp: 95, strength: 2, speed: 2, defense: 1, absorb: 1 },\n  };\n\n  bosses = {\n    Priest: { hp: 57, heal: 4, 'holy damage': 6, defense: 6, 'holy defense': 3, evasion: 2 },\n    Vampire: { hp: 84, strength: 2, speed: 3, 'magic damage': 1, absorb: 2, evasion: 2 },\n    Drake: { hp: 100, strength: 3, speed: 2, regen: 2, 'magic damage': 2, evasion: 2 },\n    Lich: { hp: 140, strength: 4, speed: 6, defense: 6, 'magic damage': 6, evasion: 6 },\n  };\n\n  extraplanar = {\n    Demon: { hp: 166, strength: 3, speed: 6, counter: 6, evasion: 6 },\n    Angel: { hp: 199, evasion: 2, absorb: 2, regen: 2, counter: 9, defense: 9, 'magic defense': 2, 'holy damage': 9 },\n    Archdemon: { hp: 366, absorb: 6, strength: 6, speed: 6, defense: 6, evasion: 6, 'magic damage': 6, 'holy damage': 16 },\n    Dracolith: { hp: 247, strength: 7, 'magic damage': 7, speed: 7, defense: 7, evasion: 7, counter: 7 },\n    Archangel: { hp: 299, absorb: 9, strength: 9, speed: 9, defense: 9, evasion: 9, 'magic defense': 9, 'holy defense': 9, 'holy damage': 99 },\n\n    'Brutal Light': { hp: 123, speed: 2, strength: 6, 'bonus damage': 5, evasion: 4 },\n    'Floating Sigil': { hp: 234, speed: 10, defense: 10, counter: 10 },\n    'Astral Filament': { hp: 1234, strength: 15, absorb: 10, evasion: 5, counter: 1, regen: 1 },\n    'Essence Sphere': { hp: 12345, 'magic damage': 12, 'holy damage': 12, 'bonus damage': 12 },\n  };\n\n  dragons = {\n    // ...and dragons :)\n    // todo proper subtypes here -- also dragon _age_ would be good to model\n    'Green Dragon': { hp: 900, strength: 5, speed: 8, defense: 4, 'magic damage': 16, evasion: 24 },\n    'Red Dragon': { hp: 1100, strength: 7, speed: 9, defense: 14, 'magic damage': 26, evasion: 34 },\n    'Blue Dragon': { hp: 2100, strength: 9, speed: 11, defense: 24, 'magic damage': 36, evasion: 44 },\n    'Golden Dragon': { hp: 2400, strength: 11, speed: 15, defense: 34, 'magic damage': 66, evasion: 55 },\n    'Black Dragon': { hp: 2900, strength: 11, speed: 15, defense: 34, 'magic damage': 66, evasion: 55 },\n    'Primordial Dragon': { hp: 3919, strength: 30, speed: 30, defense: 30, 'magic damage': 30, evasion: 30 },\n  };\n\n  rareCreatures = {\n    'Eldritch Lich': { hp: 2500, strength: 8, speed: 6, defense: 4, 'magic damage': 13, evasion: 5 },\n    'Primordial Vampire': { hp: 3800, strength: 3, speed: 10, defense: 10, 'holy defense': 10, 'magic defense': 10, 'magic damage': 3, evasion: 3, absorb: 4 },\n    Leviathan: { hp: 9999, strength: 10, speed: 10, defense: 25, evasion: 25, counter: 25 },\n    ...this.extraplanar,\n    ...this.dragons\n  };\n\n\n  bestiary: { [monster: string]: { [attr: string]: number; }; } = {\n    ...this.basicCreatures,\n    ...this.uncommonCreatures,\n    ...this.challengingCreatures,\n    ...this.rareCreatures,\n    ...this.bosses,\n  };\n\n  basicSubtypes = {\n    Hostile: { strength: 1 }, Intimidating: { strength: 2 },\n    Nimble: { speed: 1 }, Quick: { speed: 2 },\n    Timid: { evasion: 1 }, Spry: { evasion: 2 }, Dancing: { evasion: 3 },\n    Vigilant: { regen: 1 }, Relentless: { regen: 2 },\n    Armored: { defense: 1 }, Hardened: { defense: 2 },\n    Benevolent: { heal: 1 }, Protective: { heal: 2 },\n    Snarling: { counter: 1 },\n\n    Emboldened: { 'bonus damage': 1 },\n    Floating: { evasion: 1, speed: 1 },\n    Crystalline: { reflect: 1 },\n    Glinting: { reflect: 2 },\n    Mobile: { speed: 1 },\n    Coldsnap: { speed: 1, regen: 1 },\n    Blinding: { reflect: 1, absorb: 1 },\n    Noxious: { defense: 1, counter: 1, absorb: 1 },\n  };\n\n  rareSubtypes: { [type: string]: { [attr: string]: number; }; } = {\n    Voracious: { hp: 5, strength: 1, speed: 1 },\n    Vicious: { hp: 10, strength: 1, defense: 1 },\n    Vexatious: { hp: 15, counter: 1, evasion: 1 },\n    Arrogant: { hp: -5, evasion: 1, counter: 1, speed: 1 },\n    Querulous: { hp: -10, strength: 1, speed: 1, regen: 1, absorb: 1, defense: 1 },\n\n    Adventurous: { hp: 5, 'bonus damage': 2 },\n    Questing: { hp: 10, 'bonus damage': 3 },\n\n    Silvered: { reflect: 2 }, Mirrored: { reflect: 3 },\n    Aggressive: { strength: 3 }, Dominating: { strength: 4 },\n    Swift: { speed: 3 }, Accelerated: { speed: 4 },\n    Elusive: { evasion: 4 }, Reluctant: { evasion: 5 }, Hidden: { evasion: 6 }, Invisible: { evasion: 8 }, Imperceptible: { evasion: 15 },\n    Regrowing: { regen: 3 }, Hydra: { regen: 4 },\n    Fortified: { defense: 3 },\n    Angelic: { heal: 3, 'holy damage': 2 },\n    Prismatic: { reflect: 3, absorb: 2, evasion: 1 },\n    // Hardened: { defense: 3, strength: 1, evasion: 1 },\n    Pugnacious: { 'bonus damage': 1, evasion: 1, counter: 1 },\n\n    // Elusive: { evasion: 1, defense: 1, regen: 1 },\n    Augmented: { strength: 1, 'magic damage': 1, 'bonus damage': 1 },\n    Skillful: { defense: 1, strength: 1, speed: 1, evasion: 1, counter: 1 },\n    Skeletal: { hp: -1, evasion: 2, absorb: 1, regen: 1 },\n    Undead: { hp: -1, strength: 1, regen: 1, absorb: 1, speed: 1, evasion: 1 },\n    Zombie: { hp: -2, evasion: 1, regen: 2, strength: 1 },\n    Favored: { hp: 1, strength: 2, speed: 2, 'magic damage': 1, regen: 1, evasion: 1 },\n    Fiendish: { hp: 2, strength: 3, speed: 3, defense: 1, regen: 1, evasion: 2 },\n    Fierce: { hp: 2, strength: 4, speed: 4, defense: 2, absorb: 2, evasion: 3, },\n    Opalescent: { hp: 2, reflect: 4, absorb: 2, evasion: 2, counter: 2, heal: 2 },\n    Cruel: { hp: 3, strength: 5, speed: 5, 'magic damage': 3, 'bonus damage': 2, absorb: 3, regen: 1, evasion: 4 },\n\n    Vortex: { hp: 1, reflect: 10, absorb: 10, evade: 50, counter: 50 },\n    Shadow: { hp: 2, 'magic damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Luminous: { hp: 3, 'holy damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Defiant: { hp: 1, 'bonus damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Devious: { hp: 2, evasion: 2, counter: 20, absorb: 20 },\n    Draconic: { hp: 3, 'magic damage': 1, counter: 20, absorb: 20 },\n  };\n\n  subtypes: { [type: string]: { [attr: string]: number; }; } = {\n    Common: {},\n    Evasive: { evasion: 3, counter: 2 },\n    Retaliatory: { defense: 1, counter: 2 },\n    Inspired: { 'bonus damage': 1 },\n    Infused: { 'bonus damage': 2, 'magic damage': 1 },\n    Radiant: { 'holy damage': 1 },\n    Resplendent: { 'holy damage': 2, strength: 1, speed: 1 },\n    Heavy: { strength: 2, defense: 2 },\n    Titanic: { strength: 4, defense: 2 },\n    Unholy: { 'magic damage': 1, 'holy defense': 1 },\n    Blessed: { 'holy damage': 1, absorb: 1 },\n    Adept: { evasion: 1, counter: 1, defense: 1, strength: 1 },\n    ...this.basicSubtypes,\n    ...this.rareSubtypes,\n  };\n\n\n  perks: { [type: string]: { [attr: string]: number; }; } = {\n    Piercing: { hp: 15, strength: 1, defense: 1, evasion: 1, 'bonus damage': 1, },\n    Blessed: { hp: 15, absorb: 1, defense: 1, regen: 1, 'holy damage': 1, },\n    Enchanted: { hp: 15, defense: 1, evasion: 1 },\n    Clockwork: { hp: 15, defense: 1, speed: 2, evasion: 1 },\n    Phantasmal: { hp: 25, defense: 1, evasion: 4 },\n    Cosmic: { hp: 30, defense: 3, evasion: 3, strength: 3 },\n    Imperious: { hp: 40, defense: 4, 'magic damage': 3, speed: 3 },\n    // Obsidian: { hp: 15, defense: 1, speed: 2, evasion: 1 },\n    // Provocative: { hp: 50, defense: 5, evasion: 3, 'bonus damage': 4, 'magic damage': 3, speed: 3 },\n    // Challenging: { hp: 150, defense: 20, strength: 2, regen: 1, speed: 1, 'bonus damage': 5, evasion: 1 }\n  };\n  monsterIds = new Sequence();\n\n  difficulty = 1; // global multiplier on monster stats\n\n  generateBasicMonster(creature: Person) {\n    let base = sample(Object.keys(this.basicCreatures))\n    let type = randomInteger(0, 20) > 16 ? sample(Object.keys(this.basicSubtypes)) : 'Common';\n    // let type = 'Common'\n    // creature.name = `${type} ${base} (${this.monsterIds.next})`;\n    const name = type === 'Common' ? base : [type, base].join(' ');\n    creature.name = name\n    // creature.things.add(5 + Math.floor(0.05 * cr * cr), 'hp')\n    const crFactor = 1\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.subtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n  }\n\n  generate(creature: Person, cr: number = 1) {\n    if (cr <= 6) { this.generateBasicMonster(creature); return }\n    // console.log(\"generate monster with cr \" + cr);\n    // const simpleCreatures = ['Snake', 'Blob', 'Bat', 'Wisp']\n    let base = sample(Object.keys(this.challengingCreatures)) //cr <= 10 ? sample(Object.keys(this.basicCreatures)) : sample(Object.keys(this.challengingCreatures));\n\n\n    let type = randomInteger(0, 20) > 16 ? sample(Object.keys(this.basicSubtypes)) : 'Common';\n\n    // all subtypes..\n    if (cr >= 20 && randomInteger(0, 20) > 19) { type = sample(Object.keys(this.subtypes)); }\n\n    // all bases\n    if (cr >= 25 && randomInteger(0, 20) > 19) { base = sample(Object.keys(this.bestiary)); }\n\n    const name = type === 'Common' ? base : [type, base].join(' ');\n    creature.name = `${name} (${this.monsterIds.next})`;\n    const adjustedCr = 0.0015 * cr * cr;\n    // creature.things.add(1 + cr + Math.floor(100 * adjustedCr), 'hp')\n\n    const crFactor = this.difficulty + adjustedCr * 2;\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.subtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    creature.things.add(creature.things.count('hp'), 'max hp');\n    if (cr >= 15) {\n      creature.things.add(randomInteger(1, cr/2), 'defense');\n      creature.things.add(randomInteger(1, cr/2), 'strength');\n    }\n    if (cr >= 25) {\n      creature.things.add(randomInteger(1, cr/2), 'evasion');\n      creature.things.add(randomInteger(1, cr/2), 'counter');\n    }\n    if (cr >= 35) {\n      creature.things.add(randomInteger(1, cr/2), 'magic damage');\n      creature.things.add(randomInteger(1, cr/2), 'chain chance');\n    }\n    if (cr >= 45) {\n      creature.things.add(randomInteger(1, cr/2), 'holy damage');\n      creature.things.add(randomInteger(1, cr/2), 'reflect');\n    }\n  }\n\n  generateBoss(creature: Person, cr: number = 1) {\n    const base = sample(Object.keys(this.bosses));\n    const type = sample(Object.keys(this.rareSubtypes));\n    const perk = sample(Object.keys(this.perks));\n    const name = [perk, type, base].join(' ');\n    creature.name = name; // `${name} (${this.monsterIds.next})`\n    const crFactor = this.difficulty + 0.01 * cr;\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.rareSubtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.perks[perk]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    creature.things.add(creature.things.count('hp'), 'max hp');\n  }\n}\n","import { Person } from \"../../ecosphere/types\";\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\";\nimport { sample } from \"../../ecosphere/utils/sample\";\n\nexport class PlayerHandbook {\n  static levelCost(level: number) {\n    // throw new Error(\"Method not implemented.\");\n    return Math.floor(Math.pow(2, 5+level))\n  }\n  // okay, i guess give them the class as a perk... then each level up we can check + bump one of the class\n  // nice to have: sick multi-classing\n  static characterClasses: { [name: string]: { attributes: { [attr: string]: number; }; traits: string[]; }; } = {\n    Fighter: {\n      attributes: {\n        hp: 12,\n        strength: 1,\n        defense: 1,\n        speed: 0,\n        'bonus damage': 0,\n        'chain chance': 0,\n        'max chain': 0,\n      },\n      traits: ['Fitness', 'Combat Veteran']\n    },\n    // Knight: { attributes: { hp: 15, strength: 2, defense: 2, counter: 0, 'max chain': 0, 'chain chance': 0 }, traits: ['Medic'] },\n    // Mage: { attributes: { 'magic damage': 2, 'magic defense': 1, 'holy defense': 0 }, traits: ['Focus'] },\n    // Cleric: { attributes: { heal: 1, 'holy damage': 0, 'holy defense': 0 }, traits: ['Holy Symbol'] },\n    // Monk: { attributes: { hp: 5, 'reflect': 0, defense: 1, 'magic defense': 0, 'hp per step': 0 }, traits: ['Faith'] },\n    // Thief: { attributes: { hp: 10, speed: 1, evasion: 1, counter: 1, 'gold per kill': 0 }, traits: ['Swiftness'] },\n  };\n\n  static attributes: { [attrGroup: string]: string[]; } = {\n    // basic: [\n    // ],\n    common: [\n      'max hp',\n\n      // 'hp per victory',\n      // 'hp per day',\n      // 'hp per step',\n      // 'xp per kill',\n      // 'xp per li',\n      // 'xp per victory',\n      // 'xp per day', //'gold per li'\n      // 'gold per victory',\n      // 'xp per step',\n      // 'gold per day'\n      // 'gold per day',\n      // 'hp per day', // 'gold per day'\n      // 'max hp', 'xp per victory', 'hp per day', 'gold per day', 'xp per li', \n    ],\n    uncommon: [\n      // 'xp per victory',\n      // 'gold per victory',\n      'hp per victory'\n    ],\n    rare: [\n      'hp per day',\n      // 'evasion',\n      // 'crit damage',\n      // 'xp per step',\n      // 'max chain', //'hp per step'\n    ],\n    epic: [\n      'hp per step',\n      // 'xp per day', 'gold per step',\n      // 'xp per day', //'gold per li'\n      // 'counter',\n      // 'crit chance',\n    ],\n    legendary: [\n      'hp per kill',\n      // 'xp per kill',\n      // 'xp per li',\n      // 'xp per victory',\n      // 'counter',\n      // 'evasion',\n      // 'defense',\n      // 'strength',\n      // 'magic damage',\n      // 'holy damage',\n      // 'bonus damage',\n      // 'reflect',\n      // 'heal',\n      // 'damage to all',\n      // 'chain chance',\n    ],\n  };\n\n  // some perks benefits the effective value of a stat by adding % bonus per rank\n  static perkBenefits: { [perk: string]: { [attr: string]: number; }; } = {\n    'Cloaking Robe of Elvenkind': { 'magic damage': 0.05, 'magic defense': 0.5, evasion: 0.25, 'holy defense': 0.05 },\n    'Combat Veteran': { strength: 0.05, defense: 0.05, counter: 0.05, evasion: 0.05, 'crit damage': 0.05, 'bonus damage': 0.05, },\n    'Fine Raiment': { 'magic damage': 0.1, 'magic defense': 0.2, defense: 0.15, evasion: 0.1 },\n    'Holy Symbol': { 'holy damage': 0.5, 'holy defense': 0.15, heal: 0.1, regen: 0.1 },\n    'Royal Armorer': { defense: 0.5, 'holy defense': 0.25, 'magic defense': 0.25, evasion: 0.25 },\n    // Barbarian: { 'bonus damage': 0.5, 'crit damage': 0.05, strength: 0.15, 'chain chance': 0.1, 'max chain': 0.1 },\n    Brutality: { strength: 0.5, speed: 0.25, 'bonus damage': 0.25, 'max chain': 0.1 },\n    Counterweight: { counter: 0.5, evasion: 0.1, 'crit damage': 0.05, 'max chain': 0.1 },\n    Efferverscence: { regen: 0.25, counter: 0.25, 'crit damage': 0.25, 'holy defense': 0.25, 'max chain': 0.25 },\n    Efficacious: { counter: 0.1, evasion: 0.1, 'bonus damage': 0.1, strength: 0.1, defense: 0.1, 'magic defense': 0.1, heal: 0.1 },\n    Opalescence: { reflect: 0.2, absorb: 0.2, evasion: 0.2, defense: 0.2, regen: 0.2, heal: 0.2 },\n    Ethereal: { 'magic damage': 0.25, 'magic defense': 0.25, evasion: 0.5, defense: 0.25 },\n    Faith: { 'holy damage': 0.25, 'holy defense': 0.5, heal: 0.25, regen: 0.1 },\n    Finesse: { 'crit chance': 0.25, 'crit damage': 0.15, 'max chain': 0.05, 'chain chance': 0.1 },\n    Fitness: { strength: 0.1, defense: 0.1, speed: 0.1, evasion: 0.1, counter: 0.1, regen: 0.1 },\n    Fluidity: { 'crit chance': 0.1, 'crit damage': 0.1, evasion: 0.1, counter: 0.1, speed: 0.1 },\n    Dexterity: { defense: 0.25, 'magic defense': 0.1, speed: 0.1, evasion: 0.1, 'chain chance': 0.1 },\n    Precision: { speed: 0.1, 'crit damage': 0.25, evasion: 0.05, 'max chain': 0.1 },\n    Swiftness: { speed: 0.2, counter: 0.15, 'crit chance': 0.15, defense: 0.1 },\n    Rapidity: { speed: 0.5, counter: 0.1, 'crit damage': 0.25, evasion: 0.1 },\n    Medic: { heal: 0.5, regen: 0.1, absorb: 0.1, defense: 0.1 },\n    Vitality: { strength: 0.1, speed: 0.25, regen: 0.5, heal: 0.1 },\n    Whirlwind: { 'chain chance': 0.5, 'max chain': 0.5, 'damage to all': 0.5, 'bonus damage': 0.1 },\n    Focus: { 'magic damage': 0.5, 'magic defense': 0.25, 'holy damage': 0.1, 'holy defense': 0.5 },\n    Iridescence: { 'magic damage': 0.5, 'holy damage': 0.5, 'bonus damage': 0.5, 'damage to all': 0.5 },\n    Concentration: { 'magic defense': 0.25, 'holy defense': 0.5, defense: 0.1, evasion: 0.1, counter: 0.1 },\n    Salvation: { 'holy damage': 0.5, 'holy defense': 0.2, defense: 0.1, reflect: 0.1, absorb: 0.1 },\n  };\n\n  static perks: { [perkGroup: string]: string[]; } = {\n    common: [\n      'Fitness',\n      'Finesse',\n      'Rapidity',\n      'Precision',\n      'Medic',\n      'Focus', // +10% to magic dmg per rank\n    ],\n    uncommon: [\n      'Concentration',\n      'Swiftness',\n      'Fluidity',\n      'Faith',\n      'Combat Veteran',\n      'Efficacious', // small bonuses to many skills\n    ],\n    rare: [\n      'Dexterity',\n      // 'Barbarian',\n      'Brutality',\n      'Ethereal',\n      'Perspicuous',\n      'Vitality', // boost to regen\n    ],\n    epic: [\n      'Iridescence',\n      'Fine Raiment',\n      'Royal Armorer',\n      'Whirlwind', // bonus % to chain chance + damage to all\n    ],\n    legendary: [\n      'Salvation',\n      'Eternal Victory',\n      'Perfectionist',\n      'Effervescence', // decent bonuses to many skills\n      'Opalescence',\n    ]\n  };\n\n  static generate(hero: Person, characterClass: string) {\n    const baseStartingHp = 10;\n    hero.traits.add(1, characterClass)\n    hero.things.add(baseStartingHp, 'hp')\n    hero.things.add(1, 'strength')\n    hero.things.add(1, 'speed')\n    // hero.things.add(randomInteger(1,4), 'evasion')\n    // hero.things.add(randomInteger(1,4), 'counter')\n    const template = this.characterClasses[characterClass];\n    Object.keys(template.attributes).forEach(attr => {\n      const amount = template.attributes[attr]\n      hero.things.add(amount, attr)\n    });\n    (template.traits).forEach(trait => hero.traits.add(1, trait))\n    // hero.things.add(2000, 'xp per li')\n    hero.things.add(15, 'xp per victory')\n    // hero.things.add(1, 'gold per day')\n    // hero.things.add(Math.floor(baseStartingHp * 0.75), 'hp per victory')\n    hero.things.add(Math.floor(baseStartingHp * 1.2), 'max hp')\n    hero.traits.add(4, 'Potion of Life')\n    hero.things.add(1, 'level')\n    for (let i=0; i<4; i++) {\n      this.levelUp(hero)\n    }\n\n    hero.meters = {\n      'health': () => { return { value: hero.things.count('hp'), max: hero.things.count('max hp')}},\n      // 'next level': () =>  {\n      //   return { value: hero.things.count('xp'), max: this.levelCost(hero.things.count('level')) }\n      // }\n    }\n  }\n\n  static levelUp(pc: Person) {\n    const attributeBoosts: { [key: string]: number; } = {\n      // basic: 13,\n      common: 8, // randomInteger(3, 5),\n      uncommon: 5, //randomInteger(2, 3),\n      rare: 3, //randomInteger(1, 2),\n      epic: 2, //randomInteger(0, 1),\n      legendary: 1 //randomInteger(0, 1),\n    };\n\n    Object.keys(this.attributes).forEach(rarity => {\n      for (let i = 0; i < attributeBoosts[rarity]; i++) {\n        const levelAttr = sample(this.attributes[rarity]);\n        if (levelAttr) {\n        const amount = 1; //randomInteger(1,2)\n          pc.things.add(amount, levelAttr);\n          // console.log(`${levelAttr} improves by ${amount}`);\n        }\n      }\n    });\n\n    const perkLevels: { [key: string]: number; } = {\n      common: 5,\n      uncommon: 7,\n      rare: 9,\n      epic: 11,\n      legendary: 13,\n    };\n\n    Object.keys(this.perks).forEach(rarity => {\n      if (pc.things.count('level') % perkLevels[rarity] === 0) {\n        const perk = sample(this.perks[rarity]);\n        if (perk) {\n          console.log(`Gain a rank in ${perk} (${rarity})`);\n          pc.traits.add(1, perk);\n        }\n      }\n    });\n\n    // const classBonuses = PlayerHandbook.characterClasses\n    if (pc.things.count('level') % 3 === 0) {\n      // const classes=[]\n      pc.traits.list().forEach((trait) => {\n        // console.log(trait)\n        if (Object.keys(this.characterClasses).includes(trait.name)) {\n        //   // it's a pc class\n          Object.entries(this.characterClasses[trait.name].attributes).forEach(([attr, value]) => {\n            if (value >= 0 && randomInteger(0,12) > 8) {\n            // if (value === 0) { if (randomInteger(0,12) < 2) return }\n              const amount = value > 0 ? randomInteger(1, Math.max(1,value)) : 1\n              console.log(`${attr} improves by ${amount} (${trait.name})`);\n              pc.things.add(amount, attr)\n            }\n          })\n        }\n      })\n      // trait\n    }\n  }\n}\n","import { boundMethod } from \"autobind-decorator\"\nimport { List, Sequence } from \"../../collections\"\nimport { Community } from \"../../ecosphere/Community\"\nimport Model from \"../../ecosphere/Model\"\nimport { EvolvingStocks, ManageStocks, Person } from \"../../ecosphere/types\"\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\"\nimport { sample } from \"../../ecosphere/utils/sample\"\nimport { where } from \"../../ecosphere/utils/where\"\nimport { MonsterManual } from \"./MonsterManual\"\nimport { PlayerHandbook } from \"./PlayerHandbook\"\n\n// try to keep magic numbers here?\nclass DungeonMasterGuide {\n  static durations = { round: 104, day: 7000 }\n}\n\n// type SimpleEvent = { at: number }\ntype EventCommon = { id: number, at: number }\ntype EnemyInjured = EventCommon & { kind: 'enemy-injured', enemyName: string, amount: number }\ntype TurnStarted = EventCommon & { kind: 'turn-started' }\ntype Event = EnemyInjured | TurnStarted\nclass Arena extends Model {\n  events = new List<Event>()\n  // emit(event: Event, title?: string, message?: string) {\n    // if (title) { console.log(title) } //\"EVENT\", event)\n  eventIds = new Sequence()\n  enemyInjured(name: string, amount: number) {\n    this.events.add({\n      id: this.eventIds.next,\n      kind: 'enemy-injured',\n      enemyName: name,\n      amount,\n      at: this.ticks\n    })\n      // : `${name} took ${amount} damage`, description: message, kind: event.kind, at: this.ticks })\n  }\n\n  turnStarted() {\n    this.events.add({ id: this.eventIds.next, kind: 'turn-started', at: this.ticks })\n  }\n\n  constructor() {\n    super('The Arena')\n    const globals = [ 'day', 'step', 'li', 'gil', 'kill', 'victory', 'death', 'tpk' ]\n    globals.forEach(resource => this.resources.create(resource))\n    this.people.create('Adventurers')\n    this.spawnHero('Fighter')\n    // this.spawnHero('Cleric')\n    // this.spawnHero(sample(['Monk', 'Mage'])) \n    // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses)))\n    Object.keys(PlayerHandbook.characterClasses).forEach(characterClass => {\n      this.actions.create({ name: `Hire ${characterClass}`, act: () => this.spawnHero(characterClass) })\n    })\n    this.actions.create({ name: `Hire Party`, act: () => {\n      for (let i=0; i<3; i++) {\n        this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n      }\n      // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n      // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n    }})\n    this.people.create('Enemies')\n    // enemies.obscured = true // only show names? really want hp -- more granular/whitelist?\n    this.spawnEnemyParty()\n    this.evolve(this.tick)\n  }\n\n  metrics = {\n    'challenge rating': () => this.challengeRating,\n    // 'damage per tick': () => this.damagePerTick,\n    // turns: () => this.recent('turn-started').length,\n  }\n\n  heroIds = new Sequence()\n  @boundMethod\n  spawnHero(characterClass: string) {\n    const name = `${characterClass} (${this.heroIds.next})`;\n    const hero = this.party.create(name)\n    PlayerHandbook.generate(hero, characterClass)\n  }\n\n  get challengeRating() {\n    if (this.party.count === 0) return -1;\n    const totalLevels = this.party.list().map(adv => adv.things.count('level')).reduce((a, b) => a + b)\n    const cr = 1 \n      + (this.resources.count('step')/1250)\n      + (this.resources.count('day')/14)\n      + (this.party.count) \n      + (totalLevels / this.party.count);\n    return Math.floor(cr);\n  }\n\n  private recent(kind: string): Event[] { return this.recentEvents.filter(where('kind', kind)) }\n\n  metricGrain = 150 //DungeonMasterGuide.durations.round\n  get damagePerTick() {\n    const enemyInjuries: EnemyInjured[] = this.recent('enemy-injured') as EnemyInjured[]\n    // const turns = 1 + this.recent('turn-started').length //this.recentEvents.filter(where('kind', 'turn-started')).length\n    const totalInjuryAmount = enemyInjuries.map((injury: EnemyInjured) => injury.amount).reduce((a, b) => a + b, 0)\n    return (Math.floor(\n      totalInjuryAmount / this.metricGrain //Math.floor(totalInjuryAmount / this.metricGrain)\n    ))\n  }\n\n  get recentEvents() {\n    return this.events.items.filter(e => e.at > this.ticks-this.metricGrain)\n  }\n\n  manual = new MonsterManual()\n\n  @boundMethod\n  spawnEnemyParty() {\n    if (this.party.count === 0) return;\n\n    for (let i = 0; i < randomInteger(1,2+this.party.count); i++) {\n      const enemy = this.enemies.create('new enemy')\n      this.manual.generate(enemy, this.challengeRating)\n    }\n\n    // if (randomInteger(0,12) > 11) {\n    //   const enemy = this.enemies.create('new big enemy')\n    //   this.manual.generateBoss(enemy, this.challengeRating)\n    // }\n  }\n\n  get party() { return this.people.lookup('Adventurers') }\n  get enemies() { return this.people.lookup('Enemies') }\n\n  private injure(defender: Person, amount: number, aggressor: Person, reflected: boolean = false) {\n    const damage = Math.floor( Math.min(defender.things.count('hp'), amount) )\n    if (damage <= 0) return;\n\n    defender.things.remove(damage, 'hp')\n    if (this.enemies.list().includes(defender)) {\n      this.enemyInjured(defender.name, damage)\n    }\n\n    console.log(`${aggressor.name} hit ${defender.name} for ${damage}!`)\n    const absorb = Math.min(this.effective(aggressor, 'absorb'), damage)\n    if (absorb > 0) {\n      const absorption = randomInteger(0,absorb) \n      console.log(`${aggressor.name} absorbed ${absorption} hp!`)\n      this.heal(aggressor, absorption)\n    }\n    if (defender.things.count('hp') > 0) {\n      const reflect = Math.min(this.effective(defender, 'reflect'), damage)\n      if (reflect > 0 && !reflected) {\n        console.log(`${defender.name} reflected ${reflect} damage!`)\n        this.injure(aggressor, reflect, defender, true)\n      }\n      const counter = this.effective(defender, 'counter')\n      if (randomInteger(0,100) < counter) {\n        console.log(`${defender.name} counter-attacked against ${aggressor.name}!`)\n        this.strike(defender, aggressor)\n      }\n    }\n  }\n\n  private effective(person: Person, attribute: string) {\n    const base = person.things.count(attribute)\n    if (base === 0) return 0;\n    let multiplier = 1;\n    Object.keys(PlayerHandbook.perkBenefits).forEach(perk => {\n      const benefits = PlayerHandbook.perkBenefits[perk]\n      const benefitAttrs = Object.keys(benefits)\n      if (benefitAttrs.includes(attribute)) {\n        const ranks = person.traits.count(perk)\n        if (ranks > 0) {\n          const benefit = benefits[attribute] * ranks\n          multiplier += benefit\n        }\n      }\n    })\n    const value = Math.floor(base * multiplier);\n    return value\n  }\n\n  private strike(aggressor: Person, defender: Person) {\n    const holyDefense = this.effective(defender, 'holy defense')\n    const holyDamage = Math.max(0, this.effective(aggressor, 'holy damage') - holyDefense)\n    const magicDefense = this.effective(defender, 'magic defense')\n    const magicDamage = Math.max(0, this.effective(aggressor, 'magic damage') - magicDefense)\n    let physicalDamage = 0;\n    let criticalStrike = false;\n    const evade = 1 + this.effective(defender, 'evasion')\n    const hitRoll = randomInteger(0,100)\n    const hit = hitRoll > Math.min(95, evade * 2)\n    if (hit) {\n      const defense = this.effective(defender, 'defense')\n      const baseDamage = Math.max(1,this.effective(aggressor, 'strength') - defense)\n      const bonus = this.effective(aggressor, 'bonus damage')\n      const critChance = 1 + this.effective(aggressor, 'crit chance')\n      criticalStrike = randomInteger(0,100) < Math.max(50, critChance * 2)\n      if (criticalStrike) {\n        console.log(`${aggressor.name} landed a critical strike on ${defender.name}!`)\n      }\n      physicalDamage = criticalStrike \n        ? baseDamage + bonus + randomInteger(1, this.effective(aggressor, 'crit damage'))\n        : randomInteger(1, baseDamage) + bonus\n    }\n    const overallDamage = magicDamage + physicalDamage + holyDamage\n    if (overallDamage > 0) {\n      this.injure(defender, overallDamage, aggressor)\n    } else {\n      console.log(`${aggressor.name} swung for ${defender.name} but missed!`)\n    }\n  }\n\n  attack(aggressors: Community, defenders: Community) {\n    aggressors.list().forEach(aggressor => {\n      const baseSpeed = 12;\n      const aggSpeed = Math.min(baseSpeed, aggressor.things.count('speed'))\n      const speed = 1+Math.floor(Math.max(baseSpeed - aggSpeed, 0))\n      if (this.ticks % speed === 0) {\n        const damageAll = this.effective(aggressor, 'damage to all')\n        if (damageAll > 0) {\n          defenders.list().forEach(defender => {\n            const damage = randomInteger(1, damageAll)\n            this.injure(defender, damage, aggressor)\n          })\n        }\n\n        // normal attack\n        const defender = sample(defenders.list()) // todo attack-weakest policy..\n        if (defender) {\n          let done = false;\n          const hit = () => this.strike(aggressor, defender)\n\n          hit()\n          const chainChance = this.effective(aggressor, 'chain chance')\n          const maxChain = 1 + this.effective(aggressor, 'max chain')\n          let chain = 0\n          while (!done && chain++ < maxChain) {\n            let chainRoll = randomInteger(0,100)\n            if (chainRoll < chainChance) {\n              console.log(`...and swung again (${chain} times)!`)\n              hit()\n            }\n          }\n        }\n      }\n    })\n  }\n\n  heal(healee: Person, amount: number) {\n    const hp = healee.things.count('hp')\n    const maxHp = healee.things.count('max hp')\n    const maxHeal = maxHp - hp\n    const heal = Math.min(maxHeal, amount)\n    healee.things.add(Math.floor(heal), 'hp')\n  }\n\n  per(unit: string) {\n    this.party.list().forEach(adventurer => {\n      const xp = this.effective(adventurer, `xp per ${unit}`)\n                * (1 + 0.1 * adventurer.traits.count('Perspicuous'))\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n      adventurer.things.add(Math.floor(xp), 'xp')\n\n      const gil = this.effective(adventurer, `gold per ${unit}`)\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n      this.resources.add(Math.floor(gil), 'gil')\n\n      if (adventurer.things.count('hp') < adventurer.things.count('max hp')) {\n        const hp = this.effective(adventurer, `hp per ${unit}`)\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n        this.heal(adventurer, hp)\n      }\n    })\n  }\n\n  private round() {\n    this.per('round')\n    this.party.list().forEach(adventurer => {\n      const regen = this.effective(adventurer, 'regen')\n      this.heal(adventurer, regen)\n      if (adventurer.things.count('heal')) {\n        this.party.list().forEach(healee => {\n            const health = this.effective(adventurer, 'heal')\n            this.heal(healee, randomInteger(1,health))\n        })\n      }\n\n      if (adventurer.traits.count('Potion of Life') > 0 &&\n          adventurer.things.count('hp') < 0.35 * adventurer.things.count('max hp')) {\n        console.log(`${adventurer.name} drank a potion of life!`)\n        adventurer.traits.remove(1, 'Potion of Life')\n        const health = 30 + randomInteger(1, 12) + this.effective(adventurer, 'heal')\n        this.heal(adventurer, health)\n      }\n    })\n\n    this.enemies.list().forEach(enemy => {\n      this.heal(enemy, this.effective(enemy, 'regen'))\n    })\n  }\n\n  @boundMethod\n  tick({ resources }: EvolvingStocks, t: number) {\n    this.party.list().forEach(adventurer => {\n      const level = adventurer.things.count('level')\n      const levelCost = PlayerHandbook.levelCost(level) \n      if (adventurer.things.count('xp') > levelCost) {\n        adventurer.things.remove(levelCost, 'xp')\n        adventurer.things.add(1, 'level')\n        console.log(`${adventurer.name} level up!`)\n        PlayerHandbook.levelUp(adventurer)\n      }\n    })\n\n    if (t % DungeonMasterGuide.durations.round === 0) {\n      this.round()\n    }\n\n    if (t % DungeonMasterGuide.durations.day === 0) {\n      resources.add(1, 'day')\n      this.per('day')\n    }\n\n    if (this.enemies.count === 0 && this.party.count > 0) {\n      if (t % 5 === 0) {\n        this.resources.add(1, 'step')\n        this.per('step')\n        if (this.resources.count('step') % 500 === 0) {\n          resources.add(1, 'li')\n          this.per('li')\n          // store..\n          const items = [\n            'Potion of Life', // heals ~25 at 50% hp\n            'Healing Salve',\n          ]\n          const rareItems = [\n            'Shell Matrix', // functionally -- resurrect charges (w/ limitations)\n            'Cloaking Robe of Elvenkind', // large % bonus to evade\n            'Counterweight' // large % bonus to counter chance\n          ]\n          const stock = randomInteger(0,20) > 19 ? rareItems : items\n          while (this.resources.count('gil') > 1000) {\n            // give items to leader\n            let recipient = sample(this.party.list()) //[0]\n            recipient.traits.add(1, sample(stock))\n            this.resources.remove(1000, 'gil')\n          }\n        }\n\n        const encounterChance = 60 + this.resources.count('li') + this.party.count\n        const randomEncounter = randomInteger(0,100) > encounterChance\n        if (randomEncounter) { //randomInteger(0,100) > 86) {\n          this.spawnEnemyParty()\n          this.per('encounter')\n        }\n      }\n\n       \n    } else {\n      this.turnStarted()\n      this.per('turn')\n      this.attack(this.party, this.enemies)\n      this.attack(this.enemies, this.party)\n      this.mortalityCheck(resources)\n    }\n  }\n\n  private mortalityCheck(resources: ManageStocks) {\n    this.party.list().forEach(adventurer => {\n      if (adventurer.things.count('hp') <= 0) {\n        if (adventurer.traits.count('Eternal Victory') > 0) {\n          this.heal(adventurer, 200)\n          adventurer.traits.remove(1, 'Eternal Victory')\n        } else if (adventurer.traits.count('Healing Salve') > 0) {\n          this.heal(adventurer, 100)\n          adventurer.traits.remove(1, 'Healing Salve')\n        } else if (adventurer.traits.count('Shell Matrix') > 0) {\n          this.heal(adventurer, 50)\n          adventurer.things.add(150, 'magic hp')\n          adventurer.traits.remove(1, 'Shell Matrix')\n        } else {\n          this.per('death')\n          this.party.destroy(adventurer.name)\n          resources.add(1, 'death')\n          console.log(`${adventurer.name} was slain!`)\n          if (this.party.count === 0) {\n            this.per('tpk')\n            resources.add(1, 'tpk')\n            console.log(\"The party has fallen... The quest is lost.\")\n          }\n        }\n      }\n    })\n\n    this.enemies.list().forEach(enemy => {\n      if (enemy.things.count('hp') <= 0) {\n        this.per('kill')\n        this.enemies.destroy(enemy.name)\n        resources.add(1, 'kill')\n        console.log(`${enemy.name} was slain!`)\n        if (this.enemies.count === 0) {\n          this.per(\"victory\")\n          resources.add(1, 'victory')\n          console.log(\"The party was victorious! The quest continues...\")\n          return\n        }\n      }\n    })\n  }\n}\n\nconst arena = new Arena()\nexport default arena\n","import { boundMethod } from 'autobind-decorator'\nimport { List, Sequence } from '../collections'\nimport { Collection } from '../ecosphere/Collection';\nimport Model from '../ecosphere/Model'\nimport { ManageStocks, Person, Recipe, TimeEvolution } from '../ecosphere/types'\nimport { randomInteger } from '../ecosphere/utils/randomInteger';\nimport { unique } from '../ecosphere/utils/unique';\nimport { where } from '../ecosphere/utils/where';\n\ntype Currency = number\ntype Order = { [itemName: string]: number }\ntype Bill = { id: number, order: Order, price: Currency, account: Receivable }\ninterface Receivable {\n  receive(items: any[], bill: Bill): Currency\n}\n\ntype EventKind = 'order:fulfilled'\ntype Event = { id: number, name: string, description: string, at: number, kind: EventKind }\nexport class Factory extends Model {\n  events = new Collection<Event>()\n  emit(event: EventKind, title?: string, message?: string) {\n    // if (title) { console.log(title) } //\"EVENT\", event)\n    this.events.create({ name: title, description: message, kind: event, at: this.ticks })\n  }\n  private bills = new List<Bill>()\n\n  metrics = {\n    'Production Speed': () => this.deliveryRate,\n    'Total Fulfillments': () => this.fulfillmentEvents.length,\n    'Orders In Queue': () => this.bills.count\n  }\n\n  metricGrain = 100\n  get deliveryRate() {\n    return this.recentEvents.filter(where('kind', 'order:fulfilled')).length / this.metricGrain\n  }\n\n  get recentEvents() {\n    return this.events.list().filter(e => e.at > this.ticks-this.metricGrain)\n  }\n\n  get fulfillmentEvents() {\n    return this.events.list().filter(where('kind', 'order:fulfilled'))\n  }\n\n  constructor(\n    name: string,\n  ) {\n    super(`${name} Factory`)\n  }\n\n  product(name: string, consumes: { [resourceName: string]: number }) {\n    this.actions.create({ name: `Order ${name}`, act: ({ count, deliverTo }: { count: number, deliverTo: Receivable }) => {\n      this.order(count || 20, name, deliverTo || { receive: () => {\n        return 1;\n      }})\n    }})\n\n    this.resources.create(name)\n    this.workers.recipes.create({ name, produces: { [name]: 1 }, consumes });\n  }\n\n  @boundMethod\n  reboot() {\n    this.reset()\n    this.people.create('Workers')\n    this.bills.clear()\n    this.evolve(this.evolution)\n    this.policies.create({ name: 'FIFO', manage: () => {\n        const firstUnfulfilled = this.unfulfilled(this.bills.first)[0]\n        const produceUnfulfilled = this.workers.recipes.lookup(firstUnfulfilled)\n        if (produceUnfulfilled) {\n          this.workers.list().forEach(worker => this.produce(worker, produceUnfulfilled))\n        }\n    }})\n    this.policies.create({ name: 'Round Robin', manage: () => {\n        const allBillsRequested = unique(this.bills.items.flatMap(bill => {\n          return this.unfulfilled(bill)\n        }))\n        this.workers.list().forEach((worker, i) => {\n          const nextUnfulfilled = allBillsRequested[(i % (allBillsRequested.length))]\n          const produceUnfulfilled = this.workers.recipes.lookup(nextUnfulfilled)\n          if (produceUnfulfilled) {\n            this.produce(worker, produceUnfulfilled)\n          }\n        })\n    }})\n\n    this.choose('FIFO')\n  }\n\n  unfulfilled(bill?: Bill) {\n    if (bill === undefined) { return [] }\n    let orderItemNames = Object.keys(bill.order)\n    let unfulfilled: string[] = []\n    orderItemNames.forEach(item => {\n      let order = bill.order[item]\n      let amount = this.resources.count(item)\n      if (amount < order) {\n        unfulfilled.push(item)\n      }\n    })\n    // console.log(\"Unfulfilled from bill: \" + inspect(bill.order))\n    return unfulfilled\n  }\n\n  produce = (worker: Person, recipe: Recipe) => {\n    if (this.canProduce(recipe)) {\n      this.workers.jobs.set(worker, recipe)\n    } else {\n      if (recipe.consumes) {\n        const required: string[] = []\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          // do we have enough of the resource?\n          if (this.resources.count(resource) < amount) {\n            required.push(resource)\n          }\n        })\n\n        let requirement = required[randomInteger(0,required.length)]; // could sample here..\n        // need to find a recipe that produces requirement\n        let producingRequirement: Recipe | null =  null\n        this.workers.recipes.each(recipe => {\n          if (recipe.produces[requirement]) {\n            producingRequirement = recipe\n          }\n        })\n        if (producingRequirement) {\n        //  this.workers.jobs.set(worker, producingRequirement)\n          this.produce(worker, producingRequirement)\n        }\n      }\n    }\n  }\n\n  missingRequirements = (recipe: Recipe) => {\n    const missing: string[] = []\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (this.resources.count(resource) < amount) {\n          missing.push(resource)\n        }\n      })\n    }\n    return missing\n  }\n\n  canProduce = (recipe: Recipe) => {\n    let mayProduce = true\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (this.resources.count(resource) < amount) {\n          mayProduce = false\n        }\n      })\n    }\n    return mayProduce\n  }\n\n  evolution: TimeEvolution = ({ resources }) => {\n    this.manage(resources) \n    if (this.bills.count > 0) {\n      this.workers.work({ resources })\n    }\n  }\n\n  orderIds = new Sequence()\n  order(count: number, itemName: string, account: Receivable): Bill {\n    const bill: Bill = {\n      id: this.orderIds.next,\n      order: { [itemName]: count },\n      account,\n      price: count\n    }\n    this.bills.add(bill)\n    return bill\n  }\n\n  get workers() { return this.people.lookup('Workers') }\n  private manage(resources: ManageStocks) {\n    if (this.bills.count === 0) return;\n\n    // const bill = this.bills.first;\n    this.bills.each(bill => {\n      const orderItemNames = Object.keys(bill.order)\n      const unfilled = this.unfulfilled(bill)\n      const allFulfilled = unfilled.length === 0\n\n      if (allFulfilled) {\n        bill.account.receive([], bill)\n        orderItemNames.forEach(item => {\n          this.resources.remove(bill.order[item], item)\n        })\n        this.bills.remove(bill)\n        this.emit('order:fulfilled', `An order for ${orderItemNames.join(',')} has been fulfilled`)\n      }\n    })\n\n    if (this.currentPolicy) {\n      this.currentPolicy.manage()\n    } else {\n      console.warn(\"No labor policy selected!\")\n    }\n  }\n}\n","export function unique(arr: any[]) {\n  var u = {}, a = [];\n  for (var i = 0, l = arr.length; i < l; ++i) {\n    if (!u.hasOwnProperty(arr[i])) {\n      a.push(arr[i]);\n      // @ts-ignore\n      u[arr[i]] = 1;\n    }\n  }\n  return a;\n}\n","import { Sequence } from '../collections';\nimport { Factory } from './Factory';\n\nconst ids = new Sequence()\n  const factory = new Factory('Zep');\n  factory.reboot();\n  factory.product('Soles', {});\n  factory.product('Laces', {});\n  factory.product('Socks', {});\n  factory.product('Shoes', { 'Soles': 2, 'Laces': 2 });\n  factory.product('Hat', {});\n  factory.product('Belt', {});\n  factory.product('Underwear', {});\n  factory.product('Pants', {});\n  factory.product('Outfit', { 'Pants': 1, 'Belt': 1, 'Hat': 1, 'Socks': 1, 'Shoes': 1 });\n  const managers = factory.people.create('Management')\n  managers.create('Operations Chief');\n  managers.create('Plant Manager');\n  // factory.workers.create('Engineer')\n  factory.machines.create('Robot')\n\n  factory.actions.create({ name: 'Spawn Worker', act: () => { factory.workers.create(`Employee #${ids.next}`); } });\n  export default factory;\n","\nexport const capitalize = (word: string) => word.replace(/^\\w/, c => c.toUpperCase()) \nexport const titleize = (str: string) => str.split(' ').map(word => capitalize(word)).join(' ');\n","import { StringGeneratorSequence } from \"../collections/Sequence\";\nimport { ISequence } from \"../collections/types\";\nimport { titleize, capitalize } from \"./utils/capitalize\";\nimport { choose, sample } from \"./utils/sample\";\n\nconst concepts = [\n  'earth', 'sky',\n  'mountain', 'hill', 'valley', 'peak', 'mound', 'point', 'mountain-chain',\n  'isle', \n  'sea', 'lake', 'bay', 'pool', 'harbor',\n  'forest',\n  'river', 'glen', 'stream',\n  // barrow, downs, gulch ...\n\n  'land', 'place', 'realm', 'region',\n  'peoples', 'kingdom',\n  'road', 'path',\n  'haven', 'fortress', 'prison', 'citadel', 'stronghold', 'tower', 'garden',\n  // modifiers..\n  'ever-', '-less', 'at-',\n  // masculine/feminine suffices\n  '-person', '-man', '-son', '-woman', '-maid', '-daughter',\n  // relations\n  'friend', 'foe', 'lord', 'slave', 'king', 'queen', 'prince', 'princess',\n\n  // ...aspects...\n  'light', 'shadow', 'shade',\n  'sun', 'moon', 'stars',\n  'day', 'night', 'spark', 'starlight', 'firmament',\n  // weather\n  'mist', 'snow', 'wind', 'rain', 'cloud', //'hail',\n  'rainbow', 'dew', 'frost',\n  // metals...\n  'tin', 'iron', 'silver', 'gold', \n\n  // cut, delve, hew, till, hunt...?\n\n  // shades, hues...\n  'white', 'black', 'gray', 'red', 'blue', 'green', 'orange',\n  // ...animals,\n  'dragons', 'elephants',\n  'bears', 'birds', 'horses', 'snakes', 'wolves',\n\n  // tame animals..\n  'hounds',\n\n  // birds in particular...\n  'swans', 'eagles', 'nightingales',\n\n  // ...elements,\n  'ice', 'fire', 'earth', 'water',\n\n  // quasi-elements...\n  'embers', 'steam', 'magma', 'radiance',\n  'soot', 'ash', 'salt', 'void',\n\n  // ...times of day\n  'morning', 'evening', 'dusk', 'noon', 'afternoon', 'midnight',\n  // trees\n  'willow', 'pine', 'cherry', 'oak', 'spruce', 'birch', 'elm', 'holly',\n  // flowers\n  'rose', 'daisy', 'poppy', 'dandelion', 'lily',\n  // seasons\n  'autumn', 'winter', 'spring', 'summer',\n  // moods\n  'dread', 'horror', 'awe', 'joy', 'sorrow', 'gloom',\n  // food\n  'apple', 'honey', 'bread', 'elderberry', 'wine', 'fish',\n  // natural substances..\n  'wax',\n  // 'nut',\n\n\n  // adjectives...\n  'tall', 'deep', 'lofty', 'lonely',\n  'great', 'large', 'small', 'tiny',\n  'narrow', 'wide', 'sharp', 'giant',\n  'quick', 'pale',\n\n  'golden', 'holy', 'fortunate', 'dusty', 'beautiful',\n  'fell', 'cloudy', 'secret', 'sweet', 'bold',\n  'splendid', 'abundant', 'sparkling',\n\n  // animal aspects...\n  'horns', 'fangs', 'claws',\n\n  // gemstones...\n  // 'emerald', 'ruby',\n\n  // more abstract things...\n  'love', 'dream',\n  'music', 'silence', 'divine',\n\n  'fate', 'thought', 'speech', 'skill',\n  'tomorrow',\n\n  'spirit',\n  'tyranny', 'freedom',\n\n  'magic',\n\n  // bodily substances\n  'blood', 'tears', \n\n  // created things...\n  'jewel', 'ship', 'needle', 'bell', 'candle',\n\n  // clothes\n  'mantle', 'veil', // 'garment'\n\n\n  // questing...\n  'journey', 'treasure', 'battle', 'smith',\n] as const;\n\nexport type Concept = typeof concepts[number];\nexport const theConcepts: Concept[] = concepts as unknown as Concept[]\ntype Lexeme = string\nexport type Vocabulary = {[key in Concept]: Lexeme}\n\nexport class Dictionary {\n  constructor(\n    public languageName: string,\n    protected vocabulary: Vocabulary,\n    protected enhanceTranslation?: (input: string) => string\n  ) {}\n\n  // todo support more 'syntax'\n  // (at least recognizing 'x of y', where x + y are translated 'first'...)\n  // (also -less should just modify the immediately preceding word)\n  translate(...concepts: Concept[]): Lexeme {\n    let translation = concepts.reduce((acc, concept, index) => {\n      let word = this.vocabulary[concept]\n      acc = acc.trim()\n      let space = true\n      if (acc.endsWith('-') || acc.endsWith('*')) {\n        space = false; acc = acc.substring(0, acc.length-1)\n      }\n      if (index > 0 && (word.startsWith('-') || word.startsWith('*'))) {\n        space = false; word = word.substring(1, word.length) //replaceAll('-', '')\n      }\n      // if (word.startsWith(acc[acc.length-1])) { space = false; acc = acc.substring(0, acc.length - 1) }\n\n      let elements = [acc, word]\n      if (concept.startsWith('-')) {\n        space = false;\n        // if (word.endsWith('-')) {\n        //   word = word.replaceAll('-', '')\n        //   // elements = [word, acc]\n        // }\n      }\n      return elements.join(space ? ' ' : '')\n    }, '')\n\n    translation = translation.replaceAll('-', '')\n    // okay, need to map these irregulars to a process...\n    \n    let result = this.enhanceTranslation\n      ? this.enhanceTranslation(translation)\n      : translation\n    return titleize(result) //titleize(translation)\n  }\n\n  name = (...ideas: Concept[]) => (...descriptors: Concept[]) => {\n    let notion = capitalize(ideas.join('-'))\n    let description = capitalize(descriptors.join('-'))\n    let form = `${description} ${notion}`\n    if (description.endsWith('s')) { form = `${description}' ${notion}`}\n    let translation = `${this.translate(\n      ...ideas,\n      ...descriptors,\n      )}`;\n    return [ \n      form,\n      translation\n    ]\n  }\n\n  nameInverse = (...ideas: Concept[]) => (...descriptors: Concept[]) => {\n    let notion = capitalize(ideas.join('-'))\n    let description = capitalize(descriptors.join('-'))\n    let form = `${description} ${notion}`\n    if (description.endsWith('s')) { form = `${description}' ${notion}`}\n    let translation = `${this.translate(\n      ...descriptors,\n      ...ideas,\n      )}`;\n    return [ \n      form,\n      translation\n    ]\n  }\n\n}\n\n\nexport class DictionarySequence\n     extends StringGeneratorSequence\n  implements ISequence<string> {\n    private notions: Concept[]\n  constructor(\n    private dictionary: Dictionary,\n    private invertOrder: boolean = false,\n    ...notions: Concept[]\n  ) {\n    super()\n    this.notions = notions\n  }\n\n  generate(): string {\n    console.log(`Generate ${this.notions.join('/')} using ${this.dictionary.languageName} dictionary...`)\n    const ideas: Concept[] = choose(1, theConcepts);\n    const inventName = this.invertOrder\n      ? this.dictionary.nameInverse(sample(this.notions))\n      : this.dictionary.name(sample(this.notions))\n    const [significance, name] = inventName(...ideas)\n    return `${name} (${significance})`\n  }\n}\n\n// move this stuff outside? \n// todo ... hard to construct full dict from scratch!\n// want some kind of system for assembling the dictionary from\n// (reasonably small number) roots\n// eg if beauty (gezi) then => beatuiful (geziel) .. \n// but more generally reveal the 'concept algebra' of the ideas\nexport type Roots = {\n  man: string\n  woman: string\n  son: string\n  daughter: string\n  crown: string\n  place: string\n  sleep: string\n  great: string\n  small: string\n  beauty: string\n  tree: string\n  flower: string\n  water: string\n  cove: string\n  safe: string\n  light: string\n  shadow: string\n  one: string\n  many: string\n  joy: string\n  sorrow: string\n  heart: string\n  bitter: string\n  sweet: string\n  point: string\n  heat: string\n  cold: string\n  tall: string\n  deep: string\n  bell: string\n  mound: string\n  run: string\n  sing: string\n  way: string\n  no: string\n  at: string\n  eat: string\n  drink: string\n  air: string\n  good: string\n  bad: string\n  quick: string\n  slow: string\n  time: string\n  cut: string\n  all: string\n  hard: string\n  soft: string\n  color: string\n  ore: string\n  wing: string\n  snake: string\n  horse: string\n  bear: string\n  elephant: string\n  dog: string\n  wild: string\n  fear: string\n  death: string\n  sound: string\n  tooth: string\n  wood: string\n  over: string\n  high: string\n  coat: string\n  face: string\n  fight: string\n  mere: string\n  strong: string\n}\n\n// try to support building the 150+ word dictionary from\n// smaller set of root words?\n// ensures some internal consistency too?\nconst assembleDictionary = (name: string, roots: Roots, replacements: { [key: string]: string } = {}): Dictionary => {\n  const {\n    man, woman, son, daughter,\n    crown, place, tree, sleep, flower,\n    beauty, // valor,\n    great, small,\n    water, cove,\n    safe,\n    // cloud,\n    // star,\n    light, shadow,\n    one, many,\n    joy, sorrow,\n    sweet, bitter,\n    point, \n    heat, cold,\n    tall, deep,\n    bell, mound,\n\n    run, sing, way,\n    // forever,\n    no, at, eat, drink,\n    good, bad,\n    quick, slow,\n    time, air,\n    cut,\n    all,\n    hard, soft,\n    color, ore,\n    wing,\n    snake, horse, bear, elephant, dog,\n    wild,\n    fear,\n    death,\n    sound,\n    tooth,\n    heart,\n    wood,\n    over,\n    high,\n    coat,\n    fight,\n    face,\n    mere,\n    strong,\n  } = roots\n\n  // const kernel = {\n  //   sweet: good + taste,\n  //   bitter: bad + taste,\n  // }\n\n  const basics = {\n    '-person': man,\n    '-man': man,\n    '-woman': woman,\n    '-maid': small + woman,\n    '-son': son,\n    '-daughter': daughter,\n\n    mantle: over + coat,\n    veil: over + face,\n\n    star: soft + light,\n    daisy: bell + flower,\n    poppy: sleep + flower,\n    dandelion: crown + flower,\n    willow: sorrow + tree,\n    cherry: good + tree,\n    spruce: sweet + tree,\n    pine: bitter + tree,\n    birch: small + tree,\n    elm: tall + tree,\n    oak: hard + tree,\n    holly: joy + tree,\n    king: crown + man,\n    queen: crown + woman,\n    sea: great + water,\n    lake: water + place,\n    pool: water + mere,\n    bay: cove + place,\n    harbor: safe + cove,\n    haven: safe + place,\n    // mist: water + cloud,\n    forest: many + tree + place,\n    people: many + man + woman,\n    ice: bitter + cold,\n    prison: bitter + sorrow + place,\n    jewel: small + beauty,\n    needle: bitter + point,\n    candle: heat + point,\n    hill: small + mound + place,\n    mountain: great + mound + place,\n    valley: small + deep + place,\n    peak: great + point + place,\n    mound: mound + place,\n    land: many + man + place,\n    lofty: great + high,\n    sky: great + high + over,\n    low: small + one,\n    river: water + run + way,\n    isle: deep + water + place,\n    wine: joy + drink,\n    honey: sweet + drink,\n    apple: small + eat,\n    bread: good + eat,\n    elderberry: safe + eat,\n    fish: small + quick,\n    harvest: tree + man + cut,\n    night: shadow + time,\n    garden: flower + place,\n    // strong: great + hard,\n    // giant: great + tall,\n    vault: deep + cut + place,\n\n    white: light + color,\n    black: shadow + color,\n    green: tree + color,\n    red: heat + color,\n    blue: cold + color,\n\n    morning: light + time,\n    evening: shadow + time,\n    noon: high + light,\n    fire: heat + light,\n\n    tin: soft + ore,\n    silver: beauty + ore,\n    gold: deep + ore,\n\n    bird: quick + wing,\n    birds: good + wing,\n    horses: horse,\n    elephants: elephant,\n    bears: bear,\n    snakes: snake,\n    wolves: wild + dog,\n    hounds: good + dog,\n    // gray: light + shadow + color, 'red', 'blue', 'green', 'orange',\n    large: tall + great,\n    tiny: small + small,\n    thirst: no + drink,\n    wax: slow + soft,\n\n    fortunate: great + good,\n    beautiful: great + beauty,\n    silence: no + sound,\n\n    music: man + woman + sing,\n\n    abundant: many + many,\n    // sparkling: run + light,\n    teeth: many + tooth,\n    battle: many + man + fight,\n  }\n\n  const {\n    fire, red,\n    vault, star, night, ice, harvest, river, mountain, valley,\n    king, land, lofty, sky, low, people, '-person': person,\n    white, black, morning, evening, noon, bird,\n    large, thirst, silence, music, teeth, battle,\n  } = basics\n\n  const intermediate = {\n    dragons: strong + wing + snake,\n    swans: beauty + bird,\n    eagles: lofty + bird,\n    nightingales: evening + bird,\n    iron: strong + ore,\n    dusk: morning + evening,\n    gray: white + black,\n    orange: harvest + color,\n    afternoon: deep + noon,\n    midnight: deep + evening,\n    lily: star + flower,\n    rose: red + flower,\n    divine: great + king,\n    princess: king + daughter,\n    prince: king + son,\n    kingdom: king + people + place,\n    fortress: king + safe + place, \n    citadel: many + people + place,\n    stronghold: safe + people + deep + place,\n    tower: tall + over,\n    'mountain-chain': many + mountain + place,\n    friend: sweet + person,\n    foe: bitter + person,\n    lord: lofty + person,\n    slave: low + person,\n    rain: sky + water,\n    earth: many + land,\n    glen: river + valley,\n    stream: small + river,\n    realm: one + valley + place,\n    region: many + river + land,\n    peoples: people + people,\n    road: all + person + way,\n    path: run + way,\n    shade: deep + shadow,\n    sun: sky + light,\n    moon: night + light,\n    autumn: harvest + time,\n    winter: bitter + time,\n    spring: flower + time,\n    summer: strong + heat + time,\n    cloud: sky + water,\n    cloudy: all + sky + water,\n    'ever-': all + time,\n    '-less': no,\n    'at-': at,\n    stars: many + star,\n    day: light + sky + time,\n    starlight: star + light,\n    spark: strong + fire,\n    snow: sky + cold,\n    mist: soft + sky,\n    firmament: strong + vault,\n    wind: strong + air,\n    rainbow: many + color + sky,\n    frost: hard + ice,\n    dew: small + morning + water,\n    dread: fear + king,\n    lonely: one + at + mere,\n    giant: one + large + man,\n    awe: great + fear,\n    ash: fire + death,\n    steam: fire + water,\n    magma: fire + river,\n\n    dry: heat + thirst,\n    food: eat + harvest,\n    space: great + lofty,\n    dark: deep + shadow,\n    broad: deep + deep,\n    voice: person + music,\n    war: great + battle,\n    // was also thinking\n    // orange: fire + color,\n    // purple: red + blue, ....\n  } //= intermediate\n\n  const {\n    dread, ash, rainbow, dry, food, space, dark, broad, orange,\n    divine, voice, iron, spark, //music,\n    // frost, rainbow\n  } = intermediate\n\n  console.log('assemble!', { roots, basics, intermediate })\n\n  const vocab: Vocabulary = {\n    ...roots,\n    ...basics,\n    ...intermediate,\n    sparkling: many + spark,\n    horror: black + dread,\n    embers: fire + ash,\n    soot: black + ash,\n    radiance: rainbow + color,\n    salt: dry + food,\n    void: no + space,\n    gloom: dark + black,\n    narrow: river + valley + place,\n    wide: broad + land,\n    sharp: dread + point,\n    pale: soft + white,\n    golden: white + orange + beauty,\n    holy: divine + joy,\n    dusty: dry + soft,\n    fell: cold + fear,\n    secret: dark + silence,\n    bold: strong + voice,\n    splendid: rainbow + light,\n    horns: many + dread + point,\n    claws: bad + point,\n    fangs: dread + teeth,\n    love: heart + person,\n    dream: sleep + music,\n    fate: divine + fire,\n    speech: many + voice,\n    tomorrow: time + time,\n    spirit: light + divine,\n    tyranny: bad + king,\n    magic: divine + spark,\n    thought: light + time,\n    skill: good + person,\n    freedom: strong + people,\n    blood: red + water,\n    tears: sorrow + water,\n    ship: water + wood,\n    journey: place + time + person,\n    treasure: good + joy,\n    smith: iron + person,\n\n    /**\n     *\n     avalon: magic + island / green + island\n     child: small + person\n     dungeon: dark + stone\n     citadel: castle + high / castle + city\n     fortress: castle + strong\n     throne: high + seat\n\n     aelves: light + people\n     orkh: dark + people\n\n     dwarrow: stone + people\n     men: lake + people\n     heflen: under + hill + people\n     fae: beautiful + people\n\n     gnomes: deep + people\n     colossi: giant + people\n\n     */\n    \n    \n    // grievous: heavy + sorrow\n    // joy: holy + happiness\n    // harsh: bitter + sharp\n    // hollow: soft + place [ i prefer low + place ? ]\n\n  }\n  console.log(\"FULL VOCAB\", { vocab })\n  return new Dictionary(name, vocab, (input: string) => {\n    Object.keys(replacements).forEach(key => {\n      if (input.includes(key)) {\n        input = input.replaceAll(key, replacements[key])\n      }\n    })\n    return input\n  })\n}\n\nexport { assembleDictionary }\n","// dwarrow-folk\nimport { assembleDictionary, Dictionary, Roots } from \"../../ecosphere/Dictionary\";\nconst khuzdulRoots: Roots = {\n  tree: 'an',\n  woman: 'lor',\n  man: 'nar',\n  mound: 'tell',\n  quick: 'e',\n  time: 'eon',\n  over: 'o-',\n  at: 'e-',\n\n  bitter: 'ral',\n  beauty: 'egl',\n  high: 'i',\n  wing: 'l',\n  safe: '-ond',\n\n  place: '-', \n  // place: 'ë',\n\n  great: 'g',\n  hard: 'ekh',\n  strong: 'l',\n  heat: 'aúr',\n  light: 'ie',\n  daughter: 'en',\n  deep: 't', //grim',\n\n  water: 'ul',\n  many: 'g',\n  cold: 'ksa',\n\n  one: 'er',\n  mere: 'sëa',\n\n  all: 'er',\n  wood: 'taf',\n  cut: 'kh',\n  crown: 'lï',\n  run: 'r',\n  sorrow: 'uj',\n  joy: 'je',\n  no: 'u-',\n  sing: 'ina',\n  fear: 'ga',\n  tooth: 'tur',\n  color: 'o',\n\n  fight: 'klak',\n  air: 'ur',\n  bad: 'nu',\n  bear: 'gruw',\n  bell: 'du',\n  cove: 'cof',\n  death: 'lun',\n  dog: 'hu',\n  drink: 'le',\n  eat: 'zu',\n  elephant: 'ofan',\n  flower: 'ela',\n  good: 'lu',\n  heart: 'eru',\n  horse: 'raph',\n  ore: 'im',\n  point: '-el',\n  shadow: 'al',\n  sleep: 'ol',\n  small: 'i',\n  snake: 'lug',\n  soft: 'i',\n  son: 'on',\n  sweet: 'hl',\n  tall: 'mu-',\n  way: 'eh',\n  wild: 'pel',\n  sound: 'ada',\n  face: 'vih',\n  coat: 'reth',\n\n  slow: 'ikshu',\n}\n\n// todo add some vocab too? shield -- skjald\n// and override: oak -- eik\nconst khuzdul: Dictionary = assembleDictionary('Khuzdul',\n  khuzdulRoots,\n  {\n  // 'varl': 'l',\n  'gll': 'll',\n  'ienen': 'ien',\n  'gg': 'eg',\n  // 'noa': 'na',\n  'rr': 'r',\n  // 'aa': 'a',\n  // 'glt': 'gut',\n  // 'gn': 'n',\n  'ii': 'ī',\n  'īen': 'ilien',\n  'aúri': 'uthi',\n  'lll': 'lup',\n  'ythe': 'eri',\n  'dgn': 'ng',\n  'nn': 'n',\n  'arort': 'uir',\n  'ieno': 'eo',\n  'rlly': 'a',\n  \n  'aa': 'a',\n  // 'thien': 'eth',\n  // 'ii': 'ié',\n  // 'iao': 'eo',\n  // 'rl': 'lin',\n  // 'gg': 'ph',\n  // 'eul': 'uil',\n  // 'gn': 'kn',\n  // 'gv': 'gev',\n  // 'gg': 'kh',\n  // '-': ''\n})\n\nexport default khuzdul;\n","import { Dictionary, Vocabulary } from \"../../ecosphere/Dictionary\";\n\n// see https://eldamo.org/content/vocabulary-indexes/vocabulary-words-ns.html\nexport const Sindarin: Vocabulary = {\n  // was confusing to try to do this one b/c of the order!\n  '-less': 'uv-',\n\n  'ever-': 'ui-', // 'ever-dusk' --> evendim\n  'at-': 'ad-',\n\n  // fem/masculine suffices\n  '-person': '-we',\n  '-man': '-on',\n  '-son': '-ion',\n\n  '-woman': '-ien',\n  '-maid': '-wen',\n  '-daughter': '-iell',\n\n  'mountain-chain': '-orodrim',\n\n  abundant: 'ovor',\n  afternoon: 'avnedhor',\n  apple: 'orf',\n  autumn: 'iarvas-', \n  awe: 'anwar',\n  battle: 'dagor',\n  bay: 'côf', //'-iâ',\n  bears: 'graw',\n  beautiful: 'bain',\n  bell: 'nell',\n  birch: 'hwinn*',\n  birds: 'aewen',\n  black: 'morn',\n  blood: 'sereg',\n  blue: 'luin-',\n  bold: 'beren',\n  bread: '-bas',\n  candle: 'lígu',\n  cherry: 'aebin*',\n  citadel: 'ost-',\n  claws: 'gamp-',\n  cloudy: 'fanui',\n  daisy: 'eirien',\n  dandelion: 'orchen',\n  day: 'or-',\n  deep: 'nûr-',\n  dew: 'mîdh-',\n  divine: 'ballean',\n  dragons: 'amlug',\n  dread: 'gost',\n  dream: 'ôl',\n  dusk: 'moth-',\n  dusty: 'astren*',\n  eagles: 'thoron',\n  earth: '-amar',\n  elderberry: 'gwennod',\n  elephants: 'annabon',\n  elm: 'alaf',\n  evening: 'aduial',\n  fangs: 'caraxë',\n  fate: 'amarth',\n  fell: 'delu', // deadly\n  fire: 'nor-', //'naur-',\n  firmament: 'menel*',\n  fish: 'lhim',\n  foe: '-coth',\n  forest: 'taur*',\n  fortress: 'garth-',\n  fortunate: 'alwed',\n  freedom: 'leinas',\n  friend: '-mellon',\n  frost: 'nais',\n  giant: 'noroth',\n  glen: 'imlad', // dell\n  gloom: 'dim-',\n  gold: 'malt-',\n  golden: 'glóriel',\n  gray: 'thind-',\n  great: 'beleg-',\n  green: 'calen-',\n  harbor: 'hûb',\n  haven: '-lond*',\n  hill: '-amon', // tun\n  holy: 'aer',\n  honey: 'glî',\n  horns: 'rais',\n  horror: 'angoss-',\n  horses: 'roch',\n  ice: 'hel-',\n  iron: 'ang-',\n  isle: 'tol',\n  jewel: 'mîr',\n  journey: 'ledh-',\n  joy: 'glass-',\n  king: 'aran',\n  kingdom: 'arnad',\n  lake: 'ael',\n  land: '-dor-',\n  large: 'daer',\n  light: 'ea',\n  lily: 'loth',\n  lofty: 'raud',\n  lonely: 'air*',\n  lord: '-gon',\n  love: 'mîl',\n  magic: 'lûth',\n  mantle: 'col-',\n  midnight: 'fuin',\n  mist: 'hith-',\n  moon: 'ithil',\n  morning: '-aur',\n  mound: 'coro-',\n  mountain: 'ered',\n  music: '-linnas',\n  narrow: 'agor-',\n  needle: 'aeglin',\n  night: 'dû',\n  nightingales: 'dúlin*',\n  noon: 'nedhor',\n  oak: 'doron*',\n  orange: 'culuin',\n  pale: 'nim-',\n  path: 'lant',\n  peak: 'aegnas', // see point, needle\n  peoples: 'li-',\n  pine: 'thon*',\n  place: 'sa-',\n  point: 'til',\n  pool: 'lîn',\n  poppy: 'lurloss-',\n  prison: '-band',\n  quick: 'lim',\n  rain: 'ross-',\n  rainbow: 'ninniach',\n  realm: '-arthor',\n  red: 'caran-',\n  region: 'gardh',\n  river: '-rant',\n  road: 'men',\n  rose: 'merin*',\n  sea: '-geaer', //'mer',\n  secret: 'dolen*',\n  shade: 'gwath',\n  shadow: '-lum', // 'gwath', //dûl',\n  sharp: 'crisg-',\n  ship: 'cair*',\n  silence: 'dhín-',\n  silver: 'celeb-',\n  skill: 'curu-',\n  sky: '-ell',\n  slave: 'mûl',\n  small: 'cidinn*',\n  smith: '-tan',\n  snakes: 'lŷg',\n  snow: 'loss-',\n  sorrow: 'nîr',\n  spark: 'tinu-',\n  sparkling: 'míriel',\n  speech: 'paeth*',\n  spirit: 'fëa-',\n  splendid: 'claur-',\n  spring: 'ethuil',\n  spruce: 'ecthelorn*',\n  starlight: 'gilith',\n  stars: '-ngil',\n  stream: 'sîr',\n  stronghold: '-gothrond',\n  summer: 'llairë', //aer',\n  sun: 'anor*',\n  swans: 'alqua',\n  sweet: 'laich',\n  tall: \"ta-\", //nd-\",\n  tears: 'nirnaeth',\n  thought: 'nauth*',\n  tin: '-ladog',\n  tiny: 'tithen*',\n  tomorrow: 'abor',\n  tower: 'barad-',\n  treasure: 'maen*',\n  tyranny: 'thang',\n  valley: 'nan', // vale; see glen(-imlad)\n  veil: 'fân',\n  water: 'nin',\n  wax: 'lîg',\n  white: 'nique-',\n  wide: '-land',\n  willow: 'tathar*',\n  wind: 'gwae',\n  wine: 'miru',\n  winter: 'rhîw',\n  holly: 'ereg*',\n  garden: 'sant',\n  queen: 'bereth',\n  prince: 'ernil',\n  princess: 'brethil',\n  cloud: 'fan',\n  hounds: 'hû',\n  wolves: 'draug',\n  embers: 'iûl',\n  soot: 'ast',\n  ash: 'lith',\n  salt: 'sing',\n  void: 'gaw',\n  steam: 'tuim',\n  magma: 'orodu',\n  radiance: 'aglar',\n  // hail: 'ai',\n}\n\nconst replacements = {\n  'uwen': 'uviel',\n  'db': 'v',\n  'dc': 'g',\n  'nc': 'g',\n  'uie': 'uvie',\n  'airt': 'írd',\n  // 'aire': 'ere',\n  'ir': 'er',\n  'ln': 'len',\n  'ean': 'ónë',\n  'fn': 'van',\n  'rngil': 'rgil*',\n  'nn': 'n',\n  'egdor': 'egion',\n  'ororo': 'oro',\n}\nconst dashBeginnings: { [begin: string]: string } = { 'ng': 'a' }\n\nconst dashEndings: { [end: string]: string } = {\n  'ss': 'ë',\n  'n': 'iath',\n  'lt': 'hen',\n  'll': 'l',\n}\n\nconst starEndings: { [end: string]: string } = {\n  'er': 'essëa',\n  // 'er': 'essëa',\n  'r': 'iand',\n  'on': 'ion',\n  'il': 'ion',\n  // 'eg': 'ion',\n  'd': 'ë',\n}\n\nconst simpleEnhance = (tx: string) => {\n  tx = tx.split(' ').map(word => {\n    if (word.startsWith('-')) {\n      word = word.substring(1, word.length)\n      Object.keys(dashBeginnings).forEach(beginning => {\n        if (word.startsWith(beginning)) {\n          word = dashBeginnings[beginning] + word\n        }\n      })\n    }\n    if (word.endsWith('-')) {\n      word = word.substring(0, word.length - 1)\n      Object.keys(dashEndings).forEach(ending => {\n        if (word.endsWith(ending)) {\n          word += dashEndings[ending]\n        }\n      })\n    }\n\n    Object.entries(replacements).forEach(([search, replace]) => {\n      word = word.replaceAll(search, replace)\n    })\n\n    if (word.endsWith('*')) {\n      word = word.replaceAll('*', '')\n      Object.keys(starEndings).forEach(ending => {\n        if (word.endsWith(ending)) {\n          word += starEndings[ending]\n        }\n      })\n    }\n\n    // hmmm\n    word.replaceAll('*', '')\n    return word\n  }).join(' ')\n  return tx\n}\n\nconst Aelvic = new Dictionary(\"Aelvic (Neo-Sindarin)\",  Sindarin,\n  (tx) => simpleEnhance(tx))\n  // (tx) => tx)\n  //enhance(tx))\nexport { Aelvic }\n","// todo thinking Common could be interesting\n// idea is to fill in the dictionary but choose \n// poetic wording where possible\n// (quality here depends on better solutions\n// for syntax / ordering / particles / etc too)\n\nimport { Dictionary, Vocabulary } from \"../../ecosphere/Dictionary\"\n\nconst westronVocab: Vocabulary = {\n  abundant: 'over',\n  afternoon: 'afternoon',\n  apple: 'apple',\n  autumn: 'fall', \n  awe: 'awe',\n  battle: 'war',\n  bay: 'cove', //'-iâ',\n  bears: 'bear',\n  beautiful: 'beautiful',\n  bell: 'bell',\n  birch: 'birce',\n  birds: 'birds',\n  black: 'blæc', //black',\n  blood: 'blood',\n  blue: 'blue',\n  bold: 'bold',\n  bread: 'bread',\n  candle: 'candle',\n  cherry: 'cirse', // cherry',\n  citadel: 'city',\n  claws: 'claws',\n  cloudy: 'clouded',\n  daisy: 'woundwort',\n  dandelion: 'puffball',\n  day: 'day',\n  deep: 'deep',\n  dew: 'dew',\n  divine: 'godbearn',\n  dragons: 'fýrdraca', //wyrm //sky-serpent',\n  dread: 'bróga', //ghastly',\n  dream: 'dréam',\n  dusk: 'eventide',\n  dusty: 'dirty',\n\n  eagles: 'earn',\n  earth: 'land',\n  elderberry: 'elder',\n  elephants: 'oliphaunt',\n  elm: 'wahu',\n\n  evening: 'evendim',\n  fangs: 'fangs',\n  fate: 'fate',\n  fell: 'fell', // deadly\n  fire: 'bæl', //fire', //'naur-',\n  firmament: 'heavens',\n  fish: 'fish',\n  foe: '-feond', //enemy',\n  forest: 'woods',\n  fortress: 'hold',\n  fortunate: 'lucky',\n  freedom: 'freedom',\n  friend: 'friend',\n  frost: 'rime',\n  giant: 'colossus',\n  glen: 'dell', // dell\n  gloom: 'murk',\n  gold: 'gold',\n  golden: 'golden',\n  gray: 'græ',\n  great: 'great',\n  green: 'green',\n\n  harbor: 'hyth',\n  haven: '-port',\n  hill: 'dun', // tun\n  holy: 'hallowed',\n  honey: 'honey',\n  horns: 'horns',\n  horror: 'horror',\n  horses: 'horses',\n\n  ice: 'ice',\n  iron: 'ísen',\n  isle: 'īegland', //island',\n\n  jewel: 'jewel',\n  journey: 'quest',\n  joy: 'joy',\n  king: 'kenning',\n  kingdom: 'kenningdom',\n  lake: 'lac',\n  land: 'eäth',\n  large: 'large',\n  light: 'light',\n  lily: 'tigerlily',\n  lofty: 'lofty',\n  lonely: 'syndrig',\n\n  lord: '-lord',\n\n  love: 'love',\n  magic: 'rún', //charm',\n  mantle: 'hacele',\n  midnight: 'midnyght',\n  mist: 'misty',\n  moon: 'mone', // 'mōna',\n  morning: '-morn',\n  mound: 'tel-',\n  mountain: '-beorg',\n  music: 'dréamcræft', //-song',\n\n  narrow: 'narrow-',\n  needle: 'needle',\n  night: 'nyght',\n  nightingales: 'thrush',\n  noon: 'noon',\n  oak: 'eik',\n  orange: 'orenge',\n  pale: 'pale-',\n  path: 'brimlad',\n  peak: 'peak', // see point, needle\n  peoples: '-folk',\n\n  pine: 'pintreow',\n  place: '-stead',//bídung', //place',\n  point: '-gad',\n  pool: '-mere',\n  poppy: 'celandine',\n  prison: 'gaol', // 'carcern'\n\n  quick: 'fast',\n  rain: 'rainy',\n  rainbow: 'rainbow',\n\n  realm: '-ríce', //ward',\n  red: 'reod-',\n  region: '-guard',\n  river: '-ex',\n  road: 'road',\n  rose: 'róse',\n\n  sea: 'estmere', //'mer',\n  secret: 'secret',\n  shade: 'shade',\n  shadow: 'shadow', // 'gwath', //dûl',\n  sharp: 'sharp',\n  ship: 'ship',\n  silence: 'stige',\n  silver: 'seolfor',\n  skill: 'skill',\n  sky: 'sky',\n  slave: 'thrall',\n  small: 'small*',\n  smith: '-wright',\n  snakes: 'serpent',\n  snow: 'snow-',\n  sorrow: 'sorrow',\n  spark: 'ysl', //spark-',\n  sparkling: 'sparkling',\n  speech: 'speech*',\n  spirit: 'arodnes-',\n  splendid: 'splendid-',\n  spring: 'spring',\n  spruce: 'sæppe',\n  starlight: 'starlight',\n  stars: 'steorra', //star',\n  stream: 'river',\n  stronghold: '-fæsten',\n  summer: 'sumor', //aer',\n  sun: 'sun*',\n  swans: 'swan',\n  sweet: 'sweet',\n\n  tall: \"brant-\", //nd-\",\n  tears: 'tears',\n  thought: 'thought*',\n  tin: '-tin',\n  tiny: 'littel*',\n  tomorrow: 'morrow',\n  tower: 'tower-',\n  treasure: 'prize*',\n  tyranny: 'mánbealu',\n\n  valley: '-vale',\n  veil: 'veil',\n  water: 'water',\n  wax: 'wax',\n  white: 'albe',\n  wide: 'wide',\n  willow: 'willow',\n  wind: 'wind',\n  wine: 'wine',\n  winter: 'winter',\n  holly: 'holen-',\n  garden: 'garden',\n  queen: 'queen',\n  prince: 'prince',\n  princess: 'princess',\n  cloud: 'cloud',\n  hounds: 'hund',\n  wolves: 'wulf',\n  embers: 'ysl', //embers',\n  soot: 'soot',\n  ash: 'ash',\n  salt: 'salt',\n  void: 'space',\n  steam: 'steam',\n  magma: 'lava',\n  radiance: 'glæm', //brilliance',\n\n  '-less': 'no-',\n  'ever-': 'even-', // 'ever-dusk' --> evendim\n  'at-': 'upon-',\n\n  // fem/masculine suffices\n  '-person': '-person',\n  '-man': '-man',\n  '-son': '-ing',\n\n  '-woman': '-wiman',\n  '-maid': '-mæden', //maid',\n  '-daughter': '-dohtor',\n  \n\n  'mountain-chain': 'beorgstede',\n\n\n}\n\nconst Westron = new Dictionary('Common', westronVocab)\n\nexport default Westron\n","import { boundMethod } from \"autobind-decorator\";\nimport { Concept, theConcepts } from \"../ecosphere/Dictionary\";\nimport Model from \"../ecosphere/Model\";\nimport { createMoiety, createPerson, Memory, Person } from \"../ecosphere/types\";\nimport { capitalize } from \"../ecosphere/utils/capitalize\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { choose, sample } from \"../ecosphere/utils/sample\";\nimport Khuzdul from \"./Languages/Khuzdul\";\nimport { Aelvic } from \"./Languages/Sindarin\";\nimport Westron from \"./Languages/Westron\";\n\nconst generatePerson = () => {\n  const moiety = createMoiety('A Social Group')\n  const gender = sample(['male', 'female'])\n  let suffices: Concept[] = gender === 'male'\n    ? ['-person', '-man', '-son']\n    : ['-woman', '-maid', '-daughter']\n  let concepts: Concept[] = choose(randomInteger(1,2), theConcepts)\n  let nameElements: Concept[] = [\n    ...concepts,\n    ...(randomInteger(0, 12) > 9 ? [sample(suffices)] : []),\n  ]\n  \n  let dicts = [ Aelvic, Khuzdul, Westron ]\n  let name = sample(dicts).translate(...nameElements).trim()\n  // const firstName = sample(gender === 'male' ? [ 'Sam', 'Eric', 'Ted', 'Jones' ] : ['Sarah', 'Edna', 'Terri', 'Rosa'])\n  // const lastName = sample(['Smith', 'Lever', 'Token', 'Switch', 'Agent', 'Op'])\n  const significance = (concepts.map(n => capitalize(n)).reverse().join('-')).trim(); //.replaceAll('-', ''));\n\n  const person = createPerson(\n    (name === significance\n      ? name\n      : name + ' (' +  significance + ')'),\n    moiety\n    )\n  return person\n}\nclass Citizen extends Model {\n  subject: Person = generatePerson()\n\n  constructor() {\n    super('Citizen');\n\n    // this.people.create('Friends')\n    // this.people.create('Rivals')\n    // this.people.create('Peers')\n    // this.people.create('Family')\n\n    // this.resources.create('Happiness')\n    // this.resources.create('Money')\n    // this.resources.create('Money')\n\n    this.actions.create({ name: 'New', act: () => {\n      this.subject = generatePerson() \n    }})\n\n    this.evolve(this.evolution)\n  }\n\n  @boundMethod\n  evolution() {}\n\n  // metrics = { age: () => this.subject.age, }\n  notes = {\n    'current date': () => this.date.description,\n    'name': () => this.subject.name,\n    'agility': () => this.subject.body.agility,\n    'beauty': () => this.subject.soul.beauty,\n    'charm': () => this.subject.soul.charm,\n    'cunning': () => this.subject.body.cunning,\n    'depth': () => this.subject.mind.depth,\n    'education': () => this.subject.mind.education,\n    'empathy': () => this.subject.soul.empathy,\n    'guile': () => this.subject.body.guile,\n    'insight': () => this.subject.mind.insight,\n    'integrity': () => this.subject.soul.integrity,\n    'knowledge': () => this.subject.kind.knowledge,\n    'power': () => this.subject.kind.power,\n    'personality': () => this.subject.mind.personality,\n    'resolve': () => this.subject.soul.resolve,\n    'sophistication': () => this.subject.kind.sophistication,\n    'spirit': () => this.subject.body.spirit,\n    'strength': () => this.subject.body.strength,\n    'tech': () => this.subject.kind.tech,\n    'valor': () => this.subject.mind.valor,\n    'wealth': () => this.subject.kind.wealth,\n    'wit': () => this.subject.soul.wit,\n    // 'bio': () => this.subject.memory.list().map(this.describeMemory).join('... '),\n  }\n\n  describeMemory(memory: Memory) {\n    return `I remember ${memory.description}`\n  }\n\n  // @boundMethod\n  get date() {\n    let time = this.ticks || 0\n    let secondInterval = 0.1;\n    let seconds = Math.floor(time / secondInterval);\n\n    let second = seconds%60\n    let minute = Math.floor(seconds/60)%60\n    let hour = Math.floor(seconds/(60*60))%24\n    let day = Math.floor(seconds / (60 * 60 * 24));\n    // let week = Math.floor(seconds / (60 * 60 * 24 * 7));\n    // let month = Math.floor(seconds / (60 * 60 * 24 * 7 * 4));\n    // let year = Math.floor(seconds / (60 * 60 * 24 * 365));\n\n    let dayOfWeek = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'][day % 7];\n\n    return {\n      dayOfWeek,\n      description: `${dayOfWeek} ${String(hour).padStart(2,'0')}:${String(minute).padStart(2,'0')}:${String(second).padStart(2,'0')}`\n    }\n  }\n}\n\nexport default new Citizen();\n","export type Tiles = string[][]\n\nconst first = <T>(arr: T[], pred: (x: T) => boolean): T => {\n  return arr.filter(pred)[0]\n  // return arr[0]\n}\n\nexport class Board {\n  private tiles: Tiles = []\n\n  view({ overlays }: { overlays: Board[] } = { overlays: []}): Tiles {\n    let viewTiles: Tiles = []\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        viewTiles[y] = viewTiles[y] || []\n        let overlay = overlays.length > 0 && first(overlays, o => {\n          let v = o.at(x,y); return v !== '' && v !== undefined\n          // return o.at(x,y) !== undefined\n        })\n        viewTiles[y][x] = (overlay && overlay.at(x,y))\n                       || this.at(x,y)\n                       || '_'\n      }\n    }\n    return viewTiles;\n  }\n\n  constructor(public width: number, public height: number) {}\n\n  // clear = (x0: string, y0: number, width: number, height: number) => {}\n\n  write = (character: string, x0: number, y0: number) => {\n    let x = x0;\n    let y = y0;\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = character;\n  }\n\n  erase(x: number, y: number) {\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = ''\n    // throw new Error(\"Method not implemented.\")\n  }\n  \n  drawBox = (char: string, x0: number, y0: number, width: number, height: number, filled?: boolean) => {\n    let x1 = x0 + width; let y1 = y0 + height;\n    for (let x = x0; x <= x1; x++) {\n      for (let y = y0; y <= y1; y++) {\n        if (x === x0 || y === y0 || x === x1 || y === y1) {\n          this.write(char, x, y)\n        } else {\n          if (filled) {\n            this.write(char, x, y)\n          }\n        }\n      }\n    }\n  }\n\n  // get width() { return this.tiles && this.tiles[0] && this.tiles[0].length }\n  // get height() { return this.tiles.length }\n\n  at(x: number, y: number) { //}, defaultValue: string = '') {\n    // if (x >= 0 && x <= this.width && y >= 0 && y <= this.height) {\n      const x0 = x % this.width\n      const y0 = y % this.height\n      if (this.tiles[y0]) {\n        return this.tiles[y0][x0]\n      }\n    // } \n    // return defaultValue\n  }\n\n\n  each(fn: (x: number, y: number, value: string) => void) {\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        fn(x,y,this.at(x,y) || '')\n      }\n    }\n  }\n\n  neighbors(x: number, y: number): string[] {\n    const at = ([x, y]: [ number, number ]) => this.at(x,y) || '' // || defaultValue\n    // let neighbors: string[] = [\n    //   at(x-1,y-1), at(x,y-1), at(x+1,y-1),\n    //   // at(x-1,y)  , at(x,y),   at(x+1,y),\n    //   at(x-1,y)  ,   at(x+1,y),\n    //   at(x-1,y+1), at(x,y+1), at(x+1,y+1),\n    // ]\n    return Board.neighborPositions(x,y).map(at) //neighbors\n  }\n\n  static neighborPositions(x: number, y: number): [number, number][] {\n    return [\n      [x-1,y-1], [x,y-1], [x+1,y-1],\n      [x-1,y  ], [x+1,y],\n      [x-1,y+1], [x,y+1], [x+1,y+1],\n    ]\n  }\n\n  step(eachCell: (val: string, neighbors: string[], position: [number, number]) => string, defaultValue: string = ''): Tiles {\n    // const ignored = ['*']\n    // console.log(\"Board.step -- start\")\n    let newTiles: Tiles = []\n    this.tiles = this.tiles || []\n    const at = (x: number, y: number) => this.at(x,y) || defaultValue\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        let currentValue = at(x,y)\n        if (currentValue !== undefined) {\n          // if (ignored.includes(currentValue)) { continue }\n          let neighbors: string[] = this.neighbors(x,y)\n          // [\n          //   at(x-1,y-1), at(x,y-1), at(x+1,y-1),\n          //   at(x-1,y)  , at(x,y),   at(x+1,y),\n          //   at(x-1,y+1), at(x,y+1), at(x+1,y+1),\n          // ]\n          const newCell = eachCell(currentValue, neighbors, [x,y])\n          newTiles[y] = newTiles[y] || []\n          newTiles[y][x] = newCell\n        }\n      }\n    }\n    this.tiles = newTiles\n    return newTiles\n  }\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\n\nclass Building extends Model {\n  width = 80\n  height = 36\n  board: Board = new Board(this.width, this.height)\n  get tiles() { return this.board.view() }\n\n  constructor() {\n    super(\"Perfect Blue Buildings\")\n    this.evolve(this.evolution)\n    // this.board.drawBox('*', 0, 0, 5, 5) //this.width-2, this.height-2)\n\n  }\n\n  building() {\n    let width = randomInteger(2,8)\n    let height = randomInteger(2,3)\n    this.board.drawBox('#', randomInteger(1, this.width - width - 1),\n                            randomInteger(1, this.height - height - 1),\n                            width, height)\n  }\n\n  @boundMethod\n  evolution() {\n    this.building()\n    \n    // this.board.write(sample(['a','b','c']), randomInteger(), 2)\n  }\n}\nconst buildingMaker = new Building()\nexport default buildingMaker;\n","export const clamp = (value: number, min: number, max: number) =>\n  Math.min(Math.max(value, min),max)\n","export const distance = (a: [number, number], b: [number, number]) => {\n  let dx = Math.abs(a[0] - b[0]);\n  let dy = Math.abs(a[1] - b[1]);\n  return Math.sqrt(dx * dx + dy * dy)\n}\n","import { NameSequence } from \"../collections/Sequence\";\nimport { Board } from \"./Board\";\nimport { any } from \"./utils/any\";\nimport { clamp } from \"./utils/clamp\";\nimport { distance } from \"./utils/distance\";\nimport { randomInteger } from \"./utils/randomInteger\";\nimport { sample } from \"./utils/sample\";\nimport { times } from \"./utils/times\";\nexport class Heightmap {\n  map: Board = new Board(this.width, this.height);\n  seaLevel = 5\n\n  constructor(public width: number, public height: number) { }\n\n  at(x: number, y: number): number { return parseInt(this.map.at(x,y) || '0', 10) }\n\n  apply(fn: (val: number, neighbors: number[], average: number, position: [number, number]) => number[], rate: number = 1000) {\n    this.map.step((val: string, neighbors: string[], position: [number, number]) => {\n      if (randomInteger(0, 1000) <= rate) {\n        let value = parseInt(val || '0', 10);\n        let neighborValues = neighbors.map(neighbor => parseInt(neighbor || '0', 10));\n        let neighborSum = neighborValues.reduce((a, b) => a + b, 0)\n        let localAverage = Math.floor(\n          (neighborSum + value) / (neighbors.length + 1)\n        );\n        let average = localAverage;\n        let values = fn(value, neighborValues, average, position);\n        let newVal = clamp(sample(values), 0, 9);\n        return String(newVal);\n      } else { return val; }\n    });\n  }\n\n  smooth = () => {\n    this.apply((value, ns, average) => {\n      // cleanup coastlines\n      let above = ns.filter(n => n >= this.seaLevel).length;\n      if (above >= 5 && value < this.seaLevel) { return [value + 1] }\n      else if (above < 4 && value >= this.seaLevel) { return [value - 1] }\n      if (value < average - 1) { return [ value, value + 1, Math.floor((value + average) / 2) ]}\n      if (value > average + 1) { return [ value, value - 1, Math.floor((value + average) / 2) ]}\n      return [ value, ]\n    })\n  };\n\n\n  flow = () => {\n    this.apply((value, ns, average) => {\n      if (value >= average) { return [value] }\n      let immediate = [ns[1], ns[3], ns[5], ns[7]]\n      let max = Math.max(...immediate)\n      let above = ns.filter(n => n >= this.seaLevel).length;\n      if (above >= 7 && value < this.seaLevel) { return [this.seaLevel, this.seaLevel + 1] }\n      if (above === 0) { return [value, value+1, value+2] }\n      return [\n        // max + 2,\n        // max + 1,\n        // max,\n        // value,\n        max,\n        max - 1,\n        // max - 2,\n        // max - 5,\n        // value + 1,\n        // Math.min(...ns)+1,\n        // value - 1,\n        // ...ns.filter(n => n >= this.groundLevel)\n      ]\n    });\n  };\n\n  erode = (rate = 1000) => {\n    this.apply((value, ns, average) => {\n      if (value < average) { return [value] }\n      return [\n        value,\n        // value - 1,\n        // value - 2,\n        // average - 1,\n        // Math.floor((value + average) / 2),\n        Math.min(...ns)\n        // value-1,\n        // Math.ceil(value/2),\n        // // value, average, Math.min(...ns),\n        // Math.round((value+average)/2)\n      ]\n    }, rate)\n  };\n\n  extrude = (positions: [number, number][]) => {\n    positions.forEach(pos => {\n      let h = parseInt(this.map.at(...pos) || '0', 10)\n      let val = clamp(h+randomInteger(-1,7),0,9);\n      if (pos) { this.map.write(String(val), ...pos); }\n    })\n  };\n\n  intrude = (positions: [number, number][], depth: number = 1) => {\n    positions.forEach(pos => {\n      let h = parseInt(this.map.at(...pos) || '9', 10)\n      let val = clamp(h-randomInteger(-1,7),0,9);\n      if (pos) { this.map.write(String(val), ...pos); }\n    })\n  };\n\n  bombard = (intensity: number = 1) => {\n    let radius = randomInteger(1,4+randomInteger(0,intensity));\n    let impactSite: [number, number] = [ randomInteger(1, this.width-1), randomInteger(1, this.height-1) ]\n    const distanceToImpact = (pos: [number, number]) => distance(pos, impactSite)\n    let craterPositions: [number, number][] = []\n    let craterEdge: [number, number][] = []\n    for (let x=0; x < this.width; x++) {\n      for(let y = 0; y < this.height; y++) {\n        let d = Math.round(distanceToImpact([x,y]))\n        if (Math.abs(d - radius) < 1) {\n          craterEdge.push([x,y])\n        } else if (d < radius) {\n          craterPositions.push([x,y])\n        }\n      }\n    }\n    this.intrude(craterPositions);\n    this.extrude(craterEdge);\n  }\n\n  orogeny = (mountains: [number, number][]) => {\n    const d100 = randomInteger(0,100)\n    if (d100 < 16) this.extrude(mountains)\n    times(4, this.flow)\n  }\n\n  geoform = (hades: boolean, mountains: [number, number][]) => {\n    const d100 = randomInteger(0,100)\n    if (hades) {\n      this.orogeny(mountains)\n      this.erode()\n      if (d100 < 32) { this.bombard(36); }\n    } else {\n      this.smooth()\n      // if (d100 < 24) this.smooth()\n      if (d100 < 16) times(2, () => this.bombard(7) )\n      this.flow()\n      // this.erode(4)\n    }\n  };\n\n  componentNames = new NameSequence()\n\n  components(\n    consider: (value: number, ns: number[]) => boolean,\n  ): { [component: string]: [number, number][] } {\n    let componentMap: { [component: string]: [number, number][] } = {}\n    this.map.each((x, y, val) => {\n      let ns = this.map.neighbors(x,y).map(n => parseInt(n, 10))\n      // ns.splice(5,1)\n      // apply\n      if (!!consider(parseInt(val, 10), ns)) {\n        // do we belong to an existing region? (adjacency)\n        let existingComponentNames = Object.keys(componentMap).filter(component => {\n          // are any of the points in r adjacent to this one?\n          let adjacent = any(componentMap[component], ([x1,y1]) => {\n            return distance([x,y], [x1,y1]) <= Math.sqrt(2)\n          })\n          return adjacent\n        })\n        if (existingComponentNames.length > 0) {\n          let firstAdjacentComponentName = existingComponentNames[0]\n          componentMap[firstAdjacentComponentName].push([x,y])\n          if (existingComponentNames.length > 1) {\n            // merge all regions...\n            existingComponentNames.forEach(component => {\n              // delete that region + add to first region\n              if (component !== firstAdjacentComponentName) {\n                componentMap[firstAdjacentComponentName] = [\n                  ...componentMap[firstAdjacentComponentName],\n                  ...componentMap[component],\n                ]\n                delete componentMap[component]\n              }\n            })\n          }\n        } else {\n          // invent a new region\n          let component = this.componentNames.next;\n          componentMap[component] = [[x,y]]\n        }\n      }\n    })\n    return componentMap\n  }\n\n  regions = () => this.components(val => val >= this.seaLevel)\n  waterways = () => this.components(val => val < this.seaLevel)\n  ranges = () => this.components(val => val >= 8)\n\n  // okay so literal inverse of this would be valleys?\n  // really -- want to confirm the entire frontier is above ground level..\n  // otherwise a beach or mesa or something ...\n  valleys = () => {\n    let level = this.seaLevel\n    return this.components((val,ns) => (val === level || val === level + 1 || val === level + 2)\n                                    && ((ns.reduce((a,b) => a + b, 0) / ns.length) >= level)\n    )\n  }\n\n  // interesting, bays are similar to valleys -- but inverse, we *don't* want enclosed areas (lakes)\n  bays = () => {\n    let level = 4 //this.seaLevel - 1\n    return this.components(v => v === level || v === level - 1)\n    //(val) => val === level || val === level - 1)) // || val === level - 2))\n                                    // && ((ns.reduce((a,b) => a + b, 0) / ns.length) <= level + 1)\n    // )\n  }\n                                           \n // could also detect trenches?? poetically 'deeps'?\n}\n","export const any = <T>(list: Array<T>, pred: (value: T) => boolean) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i])) {\n      return true\n    }\n  }\n  return false\n}\n\nexport const all = <T>(list: Array<T>, pred: (value: T) => boolean) => {\n  for (let i = 0; i < list.length; i++) {\n    if (!pred(list[i])) {\n      return false\n    }\n  }\n  return true\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { EvolvingStocks } from \"../ecosphere/types\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { construct } from \"../ecosphere/utils/replicate\";\nimport { sample } from \"../ecosphere/utils/sample\";\nimport { Heightmap } from \"../ecosphere/Heightmap\";\n// import { MarkovGenerator } from \"../ecosphere/utils/MarkovGenerator\";\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\n// import cityNames from '!!raw-loader!./data/cities.txt';\n// eslint-disable-next-line import/no-webpack-loader-syntax\n// import seaNames from '!!raw-loader!./data/seas.txt';\n// eslint-disable-next-line import/no-webpack-loader-syntax\n// import rangeNames from '!!raw-loader!./data/ranges.txt';\n\nimport { DictionarySequence } from \"../ecosphere/Dictionary\";\nimport { Aelvic } from \"./Languages/Sindarin\";\n\n// const markov = (lines: string) => new MarkovSequence(lines.split(\"\\n\"))\nclass Linguist {\n  static names = {\n    places: new DictionarySequence(Aelvic, true, 'land'), //'realm', 'haven', 'place'),\n    regions: new DictionarySequence(Aelvic, false, 'isle'),\n    waterways: new DictionarySequence(Aelvic, false, 'sea', 'lake', 'water', 'pool'),\n    ranges: new DictionarySequence(Aelvic, true, 'mountain-chain'),\n    mountains:  new DictionarySequence(Aelvic, false, 'mountain'),\n    // peaks 'peak', 'tower'),\n    // hills: 'hill', 'mound' ...\n    valleys: new DictionarySequence(Aelvic, false, 'valley'),\n    bays: new DictionarySequence(Aelvic, false, 'bay')\n  }\n \n  // static describeWaterwaySize(area: number) {\n  //   if (area > 200) { return 'Ocean' }\n  //   if (area > 100) { return 'Sea' }\n  //   if (area > 50) { return 'Lake' }\n  //   if (area > 25) { return 'Pool' }\n  //   return 'Pond'\n  // }\n\n  // static describeRegionSize(area: number) {\n  //   if (area > 400) { return 'Supercontinent' }\n  //   if (area > 200) { return 'Continent' }\n  //   if (area > 100) { return 'Island' }\n  //   if (area > 50) { return 'Isle' }\n  //   return 'Point'\n  // }\n\n  // static describeRangeSize(area: number) {\n  //   if (area > 8) { return 'Range' }\n  //   if (area > 3) { return 'Mountains' }\n  //   return 'Peak'\n  // }\n\n  // cache names...\n  private waterwayNames: { [rawWaterbodyName: string]: string } = {}\n  private regionNames:   { [rawRegionName: string]: string } = {}\n  private rangeNames:    { [rawRangeName: string]: string } = {}\n  private valleyNames:   { [rawValleyName: string]: string } = {}\n  private bayNames:      { [rawBayName: string]: string } = {}\n\n  nameWaterway(rawWaterbodyName: string, _area: number) {\n    if (this.waterwayNames[rawWaterbodyName] === undefined) {\n      this.waterwayNames[rawWaterbodyName] = Linguist.names.waterways.next\n    }\n    return this.waterwayNames[rawWaterbodyName]\n  }\n\n  nameRegion(rawRegionName: string, _area: number) {\n    if (this.regionNames[rawRegionName] === undefined) {\n      this.regionNames[rawRegionName] = sample([\n        Linguist.names.regions,\n        Linguist.names.places\n      ]).next\n    }\n    return this.regionNames[rawRegionName]\n  }\n\n  nameRange(rawRangeName: string, _area: number): string | undefined {\n    if (this.rangeNames[rawRangeName] === undefined) {\n      this.rangeNames[rawRangeName] = sample([\n        Linguist.names.ranges,\n        Linguist.names.mountains\n      ]).next\n    }\n    return this.rangeNames[rawRangeName]\n  }\n\n  nameValley(rawValleyName: string, _area: number): string | undefined {\n    if (this.valleyNames[rawValleyName] === undefined) {\n      this.valleyNames[rawValleyName] = Linguist.names.valleys.next\n    }\n    return this.valleyNames[rawValleyName]\n  }\n\n  nameBay(rawBayName: string, area: number): string | undefined {\n    // throw new Error(\"Method not implemented.\");\n    if (this.bayNames[rawBayName] === undefined) {\n      this.bayNames[rawBayName] = Linguist.names.bays.next\n    }\n    return this.bayNames[rawBayName]\n  }\n}\nclass Cartographer {\n  private linguist = new Linguist()\n  private _waterways: { [rawWaterbodyName: string]: [number, number][] } = {}\n  private _regions: { [rawRegionName: string]: [number, number][] } = {}\n  private _ranges: { [rawRangeName: string]: [number, number][] } = {}\n  private _valleys: { [rawValleyName: string]: [number, number][] } = {}\n  private _bays: { [rawBayName: string]: [number, number][] } = {}\n\n  constructor(private world: WorldMap) {}\n\n  reset() {\n    this._regions = {}\n    this._waterways = {}\n    this._ranges = {}\n    this._valleys = {}\n    this._bays = {}\n  }\n\n  // cache heightmap regions + names..\n  get regions() {\n    if (Object.keys(this._regions).length === 0) {\n      this._regions = this.world.elevation.regions()\n    }\n    return this._regions\n  }\n\n  identifyRegion(x: number, y: number): string | undefined {\n    const rawRegionName = Object.keys(this.regions).find(region =>\n      this.regions[region].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rawRegionName) {\n      let area = this.regions[rawRegionName].length\n      return this.linguist.nameRegion(rawRegionName, area)\n    }\n  }\n\n  get waterways() {\n    if (Object.keys(this._waterways).length === 0) {\n      this._waterways = this.world.elevation.waterways()\n    }\n    return this._waterways\n  }\n\n  identifyWaterway(x: number, y: number): string | undefined {\n    const rawWaterbodyName = Object.keys(this.waterways).find(waterway =>\n      this.waterways[waterway].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rawWaterbodyName) {\n      let area = this.waterways[rawWaterbodyName].length\n      return this.linguist.nameWaterway(rawWaterbodyName, area)\n    }\n  }\n\n  identifyRegionOrWaterway(x: number, y: number): string | undefined {\n    return this.identifyRegion(x,y)\n        || this.identifyWaterway(x,y)\n        || '(err: unknown region/waterway)'\n  }\n\n  get ranges() {\n    if (Object.keys(this._ranges).length === 0) {\n      this._ranges = this.world.elevation.ranges()\n    }\n    return this._ranges\n  }\n\n  identifyRange(x: number, y: number): string | undefined {\n    const rangeName = Object.keys(this.ranges).find(range =>\n      this.ranges[range].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rangeName) {\n      const area = this.ranges[rangeName].length\n      return this.linguist.nameRange(rangeName, area)\n    }\n  }\n\n  get valleys() {\n    if (Object.keys(this._valleys).length === 0) {\n      this._valleys = this.world.elevation.valleys()\n    }\n    return this._valleys\n  }\n\n  identifyValley(x: number, y: number): string | undefined {\n    const valleyName = Object.keys(this.valleys).find(valley =>\n      this.valleys[valley].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (valleyName) {\n      const area = this.valleys[valleyName].length\n      return this.linguist.nameValley(valleyName, area)\n    }\n  }\n\n  get bays() {\n    if (Object.keys(this._bays).length === 0) {\n      this._bays = this.world.elevation.bays()\n      console.log(\"Found bays\", this._bays)\n    }\n    return this._bays\n  }\n\n  identifyBay(x: number, y: number): string | undefined {\n    const bayName = Object.keys(this.bays).find(bay =>\n      this.bays[bay].find(([x0,y0]: [number, number]) => x===x0 && y===y0)\n    ) || null\n\n    if (bayName) {\n      // console.log(\"Found a bay!\", { bayName })\n      const area = this.bays[bayName].length\n      return this.linguist.nameBay(bayName, area)\n    }\n  }\n\n  // identifyFeature -- mountain range / valley / bay / ...\n  identifyFeatures(x: number, y: number): string | undefined {\n    if (this.world.aeon === 'Hadean' || this.world.aeon === 'Archean') {\n      return '(Cartography requires calmer aeon...)'\n    }    \n    return this.identifyRange(x,y)\n        || this.identifyValley(x,y)\n        || this.identifyBay(x,y)\n        || ''\n  }\n\n\n  // identifyMountain, identifyRiver\n  // identify -- include all single point features (mountains, rivers, ...'arrows'?)\n}\n\ntype Aeon = 'Hadean' | 'Archean' | 'Proterozoic'\nclass WorldMap extends Model {\n  notes = { aeon: () => this.aeon }\n\n  get aeon(): Aeon {\n    let eon: Aeon = 'Hadean';\n    if (this.ticks >= this.mapgenTicks / 2) { eon = 'Archean' }\n    if (this.ticks > this.mapgenTicks) { eon = 'Proterozoic' }\n    return eon;\n  }\n  // aeons = ['Hadean', 'Archean', 'Proterozoic', 'Pharezoic']\n\n  // todo highlight/indicate..\n  // pushpins = { mountains: { 'Everwhite (Peak of Tears)': [10, 10] } }\n\n  width = 90 //20\n  height = 25 //35\n\n  private mapgenTicks = 40\n  elevation: Heightmap = new Heightmap(this.width, this.height)\n  private terrain: Board = new Board(this.width, this.height)\n  // private vegetation: Board = new Board(this.width, this.height)\n\n  private mountainSpots: [number, number][] = []\n  private areaPercent = Math.floor(this.area / 100);\n\n  get tiles() { return this.elevation.map.view({ overlays: [\n    // this.vegetation,\n    // this.terrain,\n    // this.elevation.binaryImage(),\n    // this.elevation.transform(),\n  ] }) }\n\n  @boundMethod\n  tileInspect(x: number, y: number) {\n    const elevation = this.elevation.at(x,y) || 0\n    const li = Math.round(3600 * ( elevation - 4 ) / 5280)\n    const elevationMessage = li === 0 ? 'At sea level' : `${Math.abs(li)} li ${li >= 0 ? 'above' : 'below'} sea level`\n    if (this.aeon === 'Hadean' || this.aeon === 'Archean') {\n      return elevationMessage\n    }\n\n    const region = this.cartographer.identifyRegionOrWaterway(x,y)\n    const features = this.cartographer.identifyFeatures(x,y)\n    return [ features, region, elevationMessage ].filter(Boolean).join(' / ')\n    \n    //`${features} / ${region} / ${elevationMessage}`\n  }\n\n  protected cartographer = new Cartographer(this)\n\n  tileColors = {\n    // terrain\n    // land\n    '.':  'lightgreen',\n\n    // sea\n    '~': 'midnightblue',\n    ',': 'navy',\n\n    // vegetation...\n    '\\'': 'darkgreen',\n\n    // elevation map\n    '0': 'black',\n    // '1': 'white',\n\n    // heightmap\n    '1': 'black',\n    '2': 'navy',\n    '3': 'midnightblue',\n    '4': 'deepskyblue',\n    '5': 'moccasin',\n    '6': 'forestgreen',\n    '7': 'darkgreen',\n    '8': 'darkslategray',\n    '9': 'gray',\n  }\n\n  // todo profiles? islands/continents/ocean/grasslands/mountains\n\n  constructor() {\n    super(\"Overworld\")\n    this.evolve(this.evolution)\n    this.actions.create({ name: 'Geoform', act: () => {\n      this.ticks = 0\n      this.cartographer.reset()\n      // this.cartographer._regions = {}\n      // this.cartographer._waterways = {}\n    }});\n    // this.reboot()\n  }\n\n  @boundMethod\n  randomPosition(): [number, number] {\n    let x = randomInteger(0, this.width)\n    let y = randomInteger(0, this.height)\n    return [x, y]\n  }\n\n  @boundMethod\n  randomPositionAlongLine(a: [number,number], b: [number,number], jitter: number = 3): [number, number] {\n    let [ax,ay] = a;\n    let [bx,by] = b;\n    let [dx,dy] = [ Math.abs(ax-bx), Math.abs(ay-by) ]\n    if (dx === 0) {\n      // it's vertical so... any points on this column\n      let y = randomInteger(0, this.height)\n      let x = ax\n      return [x, y]\n    } else if (dy === 0) {\n      let x = randomInteger(0, this.width)\n      let y = ay\n      return [x, y]\n    } else {\n      let slope = dy / dx; // rise over run\n      // so eg ay = slope * ax + b\n      //       -b = (slope * ax) - ay\n      //       b = -((slope * ax) - ay)\n      let y0 = (-((slope * ax) - ay))\n      let x = Math.floor(randomInteger(0, this.width))\n      let y = Math.floor((slope * x) + y0)\n      let j = jitter || 1;\n      return [x + randomInteger(-j,j),y + randomInteger(-j,j)]\n    }\n  }\n\n  genHeightmap(t: number) {\n    if (this.mountainSpots.length === 0) {\n      let targetSpotCount = Math.floor(10 * this.areaPercent)\n      let [a,b] = [ this.randomPosition(), this.randomPosition() ]\n      let spots = construct(() => this.randomPositionAlongLine(a,b), targetSpotCount, false)\n      this.mountainSpots = spots\n    }\n\n    this.elevation.geoform(this.aeon === 'Hadean', this.mountainSpots)\n\n    // if (t > 0 && t % this.mapgenTicks === 0) {\n    //   console.log(\"[worldgen] hadean + archean aeons complete\")\n    // }\n\n    // this.elevation.map.drawBox('0', 0, 0, this.width, this.height)\n    // this.elevation.map.drawBox('0', 1, 1, this.width-2, this.height-2)\n  }\n\n  buildTerrain() {\n    this.terrain.each((x,y,_value) => {\n      let height = parseInt(this.elevation.map.at(x,y) || '0')\n      if (height >= 9) {\n        this.terrain.write(\"^\", x, y)\n      } else if (height <= 4) {\n        this.terrain.write(sample([\"~\", ',']), x, y)\n      } else {\n        this.terrain.write('.',x,y)\n      }\n    })\n  }\n\n  // growVegetation() {\n  //   this.vegetation.step((val, _neighbors) => {\n  //     if (val === \"'\") {\n  //       if (_neighbors.length >= 2) { //} || _neighbors.length <= 6) {\n  //         return \"'\"\n  //       }\n  //     } else {\n  //       if (_neighbors.length === 3) {\n  //         return \"'\"\n  //       }\n  //     }\n  //     return ''\n  //   })\n  //   this.vegetation.each((x,y,value) => {\n  //     let h = parseInt(this.elevation.map.at(x,y) || '0')\n  //     // autogenesis\n  //     if (h <= 4 || h >= 8) { this.vegetation.erase(x, y) }\n  //     else if (value === '' && randomInteger(0,100) > 98) {\n  //       if (h >= 4 && h < 8) {\n  //         this.vegetation.write(\"'\", x, y)\n  //       }\n  //     }\n  //   })\n  // }\n\n  get area() { return this.width * this.height }\n\n  @boundMethod\n  evolution({ resources }: EvolvingStocks, t: number) {\n    if (t > 0) {\n      if (t % 100 === 0) { console.log(\"The world is \" + (t / 100) + \" million years old\") }\n      if (t <= this.mapgenTicks) { this.genHeightmap(t) }\n    }\n  }\n}\nconst worldMapMaker = new WorldMap()\nexport default worldMapMaker;\n\n","import { Avernus } from \"./Avernus\"\nimport arena from \"./Arena\"\n// import { Society } from \"./Society\"\nimport zep from \"./zep\"\nimport Citizen from \"./Citizen\"\nimport Building from \"./Building\"\nimport worldMapMaker from \"./WorldMap\"\nimport Language from \"./Language\"\n\nconst models = [\n  Language,\n  worldMapMaker,\n  Building,\n  arena,\n  zep,\n  Avernus,\n  Citizen,\n  // Society,\n]\n\nexport default models\n\n","import { Concept, Dictionary } from \"../ecosphere/Dictionary\"\nimport { Model } from \"../ecosphere/Model\"\nimport Khuzdul from \"./Languages/Khuzdul\"\nimport { Aelvic } from \"./Languages/Sindarin\"\nimport Westron from \"./Languages/Westron\"\n// import { Celestial } from \"./Languages/Celestial\"\nclass Language extends Model {\n  constructor(private dictionary: Dictionary) {\n    super(`Language Explorer`)\n    this.actions.create({ name: 'Westron', act: () => this.dictionary = Westron })\n    this.actions.create({ name: 'Sindarin', act: () => this.dictionary = Aelvic })\n    this.actions.create({ name: 'Khuzdul', act: () => this.dictionary = Khuzdul })\n    // todo :)\n    // this.actions.create({ name: 'Primordial', act: () => this.dictionary = Celestial })\n  }\n\n  t = (...concepts: Concept[]) => this.dictionary.translate(...concepts)\n  notes = {\n    '\"Nightingale\"': () => this.t('spark', '-maid'),\n    'Lonely Isle': () => this.t('isle', 'lonely'),\n    'Haven of the Gods': () => this.t('at-', 'divine'),\n    'Swan Haven': () => this.t('swans', 'haven'),\n    'Star-Eagle': () => this.t('eagles', 'stars'),\n    'Land of Pines': () => this.t('land', 'pine'),\n    'Mound of Summer': () => this.t('mound', 'summer'),\n    'Mountains of Tyranny': () => this.t('tyranny', 'mountain-chain'),\n    'Magic Woman': () => this.t('magic', '-woman'),\n    'Fire Stronghold': () => this.t('fire', 'stronghold'),\n    'Grey-Mantle': () => this.t('gray', 'mantle'),\n    'Iron Prison': () => this.t('iron', 'prison'),\n    'Icy Fangs': () => this.t('ice', 'fangs'),\n    'Pale-horn Mountains': () => this.t('mountain', 'pale', 'horns'),\n    'Silver River': () => this.t('silver', 'river'),\n    'Ever-White': () => this.t('ever-', 'snow'),\n    'Tall White Point': () => this.t('tall', 'white', 'point'),\n    'Mist-Needle': () => this.t('mist', 'needle'),\n    'Mist-Shadow': () => this.t('mist', 'shadow'),\n    'Dark Foe': () => this.t('black', 'foe'),\n    'Spirit of Fire': () => this.t('spirit', 'fire'),\n    'Shipmaker': () => this.t('ship', 'smith'),\n    'Land of Holly': () => this.t('holly', 'land'),\n    '--': () => '...',\n\n    /// other examples (not necessarily from beleriand)\n    'Pathless Sea': () => this.t('-less', 'path', 'sea'),\n    'Dragon': () => this.t('dragons'),\n    'Star-Music': () => this.t('stars', 'music'),\n    'Hills of Evendim': () => this.t('hill', 'evening'),\n    'Mere of Shadows': () => this.t('pool', 'shadow'),\n    'Vale of Nightingales': () => this.t('valley', 'nightingales'),\n    'Dewy Region': () => this.t('dew', 'region'),\n    'Star Hill': () => this.t('hill', 'stars'),\n    'Golden Hill': () => this.t('hill', 'golden'),\n    'Gold Mountain': () => this.t('mountain', 'gold'),\n    'Elephant Hill': () => this.t('hill', 'elephants'),\n    'Silent Land': () => this.t('land', 'silence'),\n    'Star Bay': () => this.t('bay', 'stars'),\n    'Bell-Star': () => this.t('bell', 'stars'),\n    'Saturday': () => this.t('day', 'stars'),\n    // ...Object.fromEntries(descriptiveIdeas.map(idea => {\n    //   let [name, significance] = this.dictionary.nameMountain(idea);\n    //   return [name, () => significance] // `Mount ${capitalize(idea)}`, () => this.dictionary.nameMountain(idea)[1]])\n    // }))\n  }\n}\n\nexport default new Language(Khuzdul);\n\n","\nimport './App.css';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelSelector } from './ModelSelector';\nimport models from './examples';\n\ntype ApplicationProps = {\n  model: IModel\n}\n\nfunction App({ model: initialModel }: ApplicationProps) {\n\n  return <div className=\"App\">\n    {/* @ts-ignore */}\n    <ModelSelector models={models} initialModel={initialModel} />\n  </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport models from './examples';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App model={models[0]} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}