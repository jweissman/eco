{"version":3,"sources":["ecosphere/utils/where.ts","ecosphere/utils/isString.ts","collections/Map.ts","collections/List.ts","ecosphere/utils/randomInteger.ts","ecosphere/utils/times.ts","ecosphere/utils/sample.ts","ecosphere/utils/MarkovGenerator.ts","ecosphere/utils/replicate.ts","collections/Sequence.ts","ecosphere/Stocks.ts","ecosphere/Registry.ts","ecosphere/Delta.ts","ecosphere/Model/Simulation.ts","ecosphere/Collection.ts","ecosphere/types/index.ts","ecosphere/Population.ts","ecosphere/Community.ts","ecosphere/Model/Model.ts","ecosphere/Model/presentItem.tsx","ecosphere/View/Tile.tsx","ecosphere/View/presentCommunity.tsx","ecosphere/View/presentIndividual.tsx","ecosphere/View/ModelView.tsx","ecosphere/Model/index.ts","ModelPresenter.tsx","useModel.tsx","ModelSelector.tsx","ecosphere/utils/capitalize.ts","ecosphere/Dictionary.ts","examples/Languages/Khuzdul.ts","examples/Languages/Sindarin.ts","examples/Languages/Westron.ts","examples/Citizen.ts","ecosphere/Board.ts","ecosphere/utils/clamp.ts","ecosphere/utils/distance.ts","ecosphere/Heightmap.ts","ecosphere/utils/any.ts","examples/WorldMap.ts","examples/Language.ts","examples/index.ts","App.tsx","index.tsx"],"names":["where","key","value","it","isString","String","KeyMap","idFor","nameFor","lookup","_data","k","v","this","namesAndValues","Object","entries","map","Number","fromEntries","List","items","count","length","push","filter","item","cb","forEach","fn","Error","randomInteger","min","max","Math","floor","random","times","n","results","i","sample","ts","choose","MarkovGenerator","ngrams","beginnings","text","beginning","substring","gram","next","charAt","hasOwnProperty","current","output","trim","construct","flatten","arrays","Array","apply","concat","Sequence","NameSequence","nameRoots","nameCount","array","replicate","join","StringGeneratorSequence","baseItems","generatedItems","result","generate","attempts","includes","order","generator","feed","boundMethod","StockManager","stocks","stockId","amount","add","name","remove","list","lookupById","Stocks","elements","ids","storage","attrs","attributes","has","manage","id","theEntity","setAmount","element","find","matching","create","flatMap","manageAll","Registry","popCtor","populations","species","values","x","theSpecies","population","populationList","pop","Delta","model","getStocks","changes","baseline","_store","Simulation","ticks","tracking","dynamics","e","flux","target","report","source","theDelta","manager","_delta","theFlows","flow","table","entry","t","flows","each","dynamism","changed","flowsReport","delta","updated","deltaAmount","Collection","pick","d100","animalIds","createAnimal","kind","age","guile","health","spirit","cunning","agility","strength","moietyIds","createMoiety","wealth","sophistication","power","knowledge","tech","personId","human","size","createPerson","moiety","inventory","traits","body","mind","insight","depth","education","disposition","valor","personality","soul","wit","empathy","integrity","beauty","charm","resolve","currency","things","meters","memory","SetHelper","set","populationIds","Population","individuals","Set","theList","individual","first","theIndividual","newborn","doomed","destroy","newborns","birth","doneFor","death","build","delete","Community","moieties","obscured","recipes","jobs","Map","worker","inventories","person","get","personAttrs","resources","recipe","produce","mayProduce","consumes","resource","produces","Model","people","machines","animals","metrics","notes","actions","policies","currentPolicy","clear","actionName","args","action","act","policyName","policy","presentItem","deltas","title","className","Tile","children","presentCommunity","community","work","itemNames","thing","meterName","measure","htmlFor","style","paddingRight","width","height","low","high","optimum","sort","a","b","display","trait","BoardTable","tiles","tileColors","tileInspect","useState","inspecting","setInspecting","message","fontFamily","cursor","row","y","cell","color","backgroundColor","onMouseEnter","onMouseLeave","ModelView","modelName","communities","lastChanges","board","folks","keys","startsWith","textAlign","colSpan","minWidth","fontSize","view","ModelPresenter","send","step","onClick","type","checked","onChange","useModel","initialModel","setModel","setLastChanges","delay","setDelay","shouldStep","shouldSend","doSend","shouldManage","doManage","command","setCommand","setPolicy","useEffect","isModel","callback","savedCallback","useRef","tick","setInterval","clearInterval","useInterval","performSend","performChoose","maybeModel","AssemblyPresenter","assembly","models","theModel","ModelSelector","options","placeholder","capitalize","word","replace","c","toUpperCase","titleize","str","split","theConcepts","Dictionary","languageName","vocabulary","enhanceTranslation","ideas","notion","descriptors","description","form","endsWith","translation","translate","nameInverse","concepts","reduce","acc","concept","index","space","replaceAll","DictionarySequence","dictionary","invertOrder","notions","console","log","significance","khuzdul","roots","vocabOverrides","replacements","man","woman","son","daughter","crown","place","tree","sleep","flower","great","small","water","cove","safe","light","shadow","one","many","joy","sorrow","sweet","bitter","point","heat","cold","tall","deep","bell","mound","run","sing","way","no","at","eat","drink","good","bad","quick","slow","time","air","cut","all","hard","soft","ore","wing","snake","horse","bear","elephant","dog","wild","fear","sound","tooth","heart","wood","over","fight","face","mere","strong","basics","veil","star","daisy","poppy","dandelion","willow","cherry","spruce","pine","birch","elm","oak","holly","king","queen","sea","lake","pool","bay","harbor","haven","forest","ice","prison","jewel","needle","candle","hill","mountain","valley","peak","land","lofty","sky","river","isle","wine","honey","apple","bread","elderberry","fish","harvest","night","garden","vault","white","black","green","red","blue","morning","evening","noon","fire","tin","silver","gold","bird","birds","horses","elephants","bears","snakes","wolves","hounds","large","tiny","thirst","wax","fortunate","beautiful","silence","music","abundant","teeth","battle","intermediate","dragons","swans","eagles","nightingales","iron","dusk","gray","orange","afternoon","midnight","lily","rose","divine","princess","prince","kingdom","fortress","citadel","stronghold","tower","friend","foe","lord","slave","rain","earth","glen","stream","realm","region","peoples","road","path","shade","sun","moon","autumn","winter","spring","summer","cloud","cloudy","stars","day","starlight","spark","snow","mist","firmament","wind","rainbow","frost","dew","dread","lonely","giant","awe","ash","steam","magma","dry","food","dark","broad","voice","war","vocab","sparkling","horror","embers","soot","radiance","salt","void","gloom","narrow","wide","sharp","pale","golden","holy","dusty","fell","secret","bold","splendid","horns","claws","fangs","love","dream","fate","speech","tomorrow","tyranny","magic","thought","skill","freedom","blood","tears","ship","journey","treasure","smith","input","assembleDictionary","mantle","horn","icy","vale","dashBeginnings","dashEndings","starEndings","Aelvic","tx","ending","search","simpleEnhance","Westron","generatePerson","suffices","nameElements","Khuzdul","reverse","nameMeaning","subject","evolve","evolution","seconds","second","minute","hour","dayOfWeek","padStart","arr","pred","Board","write","character","x0","y0","drawBox","char","filled","x1","y1","overlays","viewTiles","overlay","o","undefined","neighborPositions","eachCell","defaultValue","newTiles","currentValue","neighbors","newCell","clamp","distance","dx","abs","dy","sqrt","Heightmap","seaLevel","smooth","ns","average","above","immediate","erode","rate","extrude","positions","pos","h","parseInt","val","intrude","bombard","intensity","radius","impactSite","distanceToImpact","craterPositions","craterEdge","d","round","orogeny","mountains","geoform","hades","componentNames","regions","components","waterways","ranges","valleys","level","bays","position","neighborValues","neighbor","neighborSum","localAverage","newVal","consider","componentMap","existingComponentNames","component","any","firstAdjacentComponentName","Linguist","waterwayNames","regionNames","rangeNames","valleyNames","bayNames","rawWaterbodyName","_area","names","rawRegionName","places","rawRangeName","rawValleyName","rawBayName","area","Cartographer","world","linguist","_waterways","_regions","_ranges","_valleys","_bays","elevation","nameRegion","waterway","nameWaterway","identifyRegion","identifyWaterway","rangeName","range","nameRange","valleyName","nameValley","bayName","nameBay","aeon","identifyRange","identifyValley","identifyBay","WorldMap","mapgenTicks","terrain","mountainSpots","areaPercent","cartographer","reset","eon","li","elevationMessage","identifyRegionOrWaterway","identifyFeatures","Boolean","jitter","ax","ay","bx","by","slope","j","targetSpotCount","randomPosition","spots","randomPositionAlongLine","_value","genHeightmap","worldMapMaker","Language","Citizen","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dee4f06a.chunk.js","sourcesContent":["export function where(key: string, value: any) {\n  return (it: any) => it[key] === value;\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n","import { IMap } from \"./types\";\nexport class KeyMap<K, V> implements IMap<K, V> {\n  _data: { [id: number]: V; } = {};\n  constructor(\n    private idFor: (k: K) => number,\n    private nameFor: (k: K) => string,\n    private lookup: (id: number) => K,\n  ) { }\n  set(k: K, v: V) { this._data[this.idFor(k)] = v; }\n  get(k: K): V { return this._data[this.idFor(k)]; }\n  get report(): { [name: string]: V } {\n    const namesAndValues = Object.entries(this._data)\n      .map(([k, v]) => [this.nameFor(this.lookup(Number(k))), v]);\n    return Object.fromEntries(namesAndValues);\n  }\n}\n","//\n\nimport { IList } from \"./types\";\n\nexport class List<T> implements IList<T> {\n  items: T[] = [];\n  protected get it() { return this.items; }\n  get first(): T { return this.items[0]; }\n  get last(): T { return this.items[this.count - 1]; }\n  get count(): number { return this.items.length; }\n  add(it: T) { this.items.push(it); }\n  remove(it: T) { this.items = this.items.filter(item => item !== it); }\n  each(cb: (it: T) => any) { this.items.forEach(cb); }\n  clear() { this.items = []; }\n  map<U>(fn: (it: T) => any): U[] { return this.items.map(fn) }\n\n  get sample(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n","export function randomInteger(min: number, max: number) {\n  // return min + Math.floor(Math.random() * (max - min));\n  let result = Math.floor(Math.random() * (max - min + 1) + min)\n  // console.log(\"Random integer between \" + min + \" and \" + max + \": \" + result)\n  return result\n}\n","\nexport function times<T>(n: number, fn: (...args: any) => T): T[] {\n  let results: any[] = []\n  for (let i = 0; i < n; i++) { results.push(fn()) }\n  return results\n}\n","import { randomInteger } from \"./randomInteger\";\nimport { times } from \"./times\";\n\nfunction sample<T>(ts: T[]): T {\n  let i = randomInteger(0,ts.length-1)\n  return ts[i];\n}\n\nfunction choose<T>(n: number, ts: T[]): T[] {\n  return times(n, () => sample(ts))\n}\n\nexport { sample, choose }\n","import { sample } from \"./sample\";\n\n// A MarkovGenerate object\nexport class MarkovGenerator {\n  // n - Order (or length) of each ngram\n  // max - What is the maximum amount we will generate?\n  constructor(private n: number, private max: number) {}\n\n  // An object as dictionary\n  // each ngram is the key, a list of possible next elements are the values\n  private ngrams: { [key: string]: string[] } = {};\n  // A separate array of possible beginnings to generated text\n  private beginnings: string[] = [];\n\n  // A function to feed in text to the markov chain\n  feed(text: string) {\n\n    // Discard this line if it's too short\n    if (text.length < this.n) {\n      return false;\n    }\n\n    // Store the first ngram of this line\n    let beginning = text.substring(0, this.n);\n    this.beginnings.push(beginning);\n\n    // Now let's go through everything and create the dictionary\n    for (var i = 0; i < text.length - this.n; i++) {\n      let gram = text.substring(i, i + this.n);\n      let next = text.charAt(i + this.n);\n      // Is this a new one?\n      if (!this.ngrams.hasOwnProperty(gram)) {\n        this.ngrams[gram] = [];\n      }\n      // Add to the list\n      this.ngrams[gram].push(next);\n    }\n  }\n\n  // Generate a text from the information ngrams\n  generate(): string {\n\n    // Get a random  beginning\n    let current = sample(this.beginnings) //.choice();\n    let output = current;\n\n    // Generate a new token max number of times\n    for (var i = 0; i < this.max; i++) {\n      // If this is a valid ngram\n      if (this.ngrams.hasOwnProperty(current)) {\n        // What are all the possible next tokens\n        let possible_next = this.ngrams[current];\n        // Pick one randomly\n        let next = sample(possible_next) //.choice();\n        // Add to the output\n        output += next;\n        // Get the last N entries of the output; we'll use this to look up\n        // an ngram in the next iteration of the loop\n        current = output.substring(output.length - this.n, output.length);\n      } else {\n        break;\n      }\n    }\n    // Here's what we got!\n    return output.trim();\n  }\n}\n","export function construct(fn: () => any, times: number, flatten?: boolean) {\n  // Create an array of size \"n\" with undefined values\n  var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  arrays = arrays.map(fn) //() => fn()) //() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  if (flatten) {\n  return [].concat.apply([], arrays);\n  } else {\n    return arrays;\n  }\n\n}\n\nexport function replicate(array: Array<any>, times: number) {\n  return construct(() => array, times)\n  // Create an array of size \"n\" with undefined values\n  // var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  // arrays = arrays.map(() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  // return [].concat.apply([], arrays);\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { MarkovGenerator } from \"../ecosphere/utils/MarkovGenerator\";\nimport { replicate } from \"../ecosphere/utils/replicate\";\nimport { ISequence } from \"./types\";\n\nexport class Sequence implements ISequence<number> {\n  count = 0;\n  get next(): number { return this.count++; }\n}\n\n// give a infinite list of distinct string names from\n// the alphabet with trailing single-quotes ('prime')\n// giving A, B, C,..., Y, Z then A', B', C', ... A'', B'', C'' ....\nexport class NameSequence implements ISequence<String> {\n  // next: string;\n  private nameRoots = [\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\n    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z',\n    //'a', 'b', 'c', 'd', 'e'\n  ]\n  private nameCount = new Sequence()\n  get next() {\n    let n = this.nameCount.next\n    return this.nameRoots[n % this.nameRoots.length]\n         + (replicate([\"'\"], n).join(''))\n  }\n}\n\nexport abstract class StringGeneratorSequence implements ISequence<string> {\n  baseItems: string[] = []\n  generatedItems: string[] = []\n  abstract generate(): string \n  get next(): string {\n    let result = this.generate()\n    let attempts = 0\n\n    while (\n      (\n        this.baseItems.includes(result)\n        || this.generatedItems.includes(result)\n      )\n      && attempts++ < 100\n    ) {\n      result = this.generate()\n    }\n    this.generatedItems.push(result)\n    return result\n  }\n}\n\nexport class MarkovSequence\n     extends StringGeneratorSequence\n  implements ISequence<string> {\n  generator: MarkovGenerator\n  constructor(private items: string[], order = 2, max = 10) {\n    super()\n    this.generator = new MarkovGenerator(order, max)\n    this.items.forEach(this.feed)\n  }\n\n  @boundMethod\n  feed(it: string) {\n    this.baseItems.push(it);\n    this.generator.feed(it);\n  }\n\n  generate(): string { return this.generator.generate(); }\n}\n","import { BasicEntity } from \"./types/BasicEntity\";\nimport { boundMethod } from 'autobind-decorator'\nimport { where } from \"./utils/where\";\nimport { isString } from \"./utils/isString\";\nimport { ManageStock, ManageStocks } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass StockManager<T extends BasicEntity> implements ManageStock<T> {\n  constructor(private stocks: Stocks<T>, private stockId: number) {}\n  add(amount: number): void { return this.stocks.add(amount, this.name) }\n  remove(amount: number): void { return this.stocks.remove(amount, this.name) }\n  get list(): T[] { return this.stocks.list() }\n  get count(): number { return this.stocks.count(this.name) }\n  get name() { return this.item.name }\n  get item(): T { return this.stocks.lookupById(this.stockId) }\n}\n\nexport class Stocks<T extends BasicEntity> {\n  private ids: Sequence = new Sequence()\n  private storage: { [key: number]: number; } = {}\n\n  constructor(\n    public name: string,\n    private elements: T[] = []\n  ) { }\n\n  @boundMethod\n  list() { return this.elements }\n\n  get _store() { return this.storage }\n\n  public clear() { this.elements = []; this.storage = {} }\n\n  public create(name: string): ManageStock<T>\n  public create(attributes: { name: string } & Omit<T, 'id' | 'name'>): ManageStock<T>\n  /** Create a new type of element to store */\n  @boundMethod\n  public create(attrs: any) {\n    let name: string | null = null;\n    let attributes: Partial<T> = {}\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    if (isString(name) && this.has(name)) {\n      return this.manage(name);\n    }\n    if (!isString(name)) { throw new Error(\"Name must be a string\") }\n    // const elementIds: number[] = this.list().map(({ id }) => id);\n    const id = this.ids.next; //Math.max(0, ...elementIds) + 1;\n    const theEntity: T = { id, name, ...attributes } as T\n    this.list().push(theEntity);\n    const manage: ManageStock<T> = this.manage(name as string)\n    return manage\n  }\n\n  @boundMethod\n  add(amount: number, name: string) {\n    this.setAmount(name, this.count(name) + amount);\n  }\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.setAmount(name, this.count(name) - amount);\n  }\n\n  @boundMethod\n  zero(name: string): void {\n    this.setAmount(name, 0);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    const element: T = this.lookup(name);\n    const amount = this.storage[element.id] || 0;\n    return amount;\n  }\n\n  has(name: string): boolean {\n    const matching = this.elements.find(where('name', name))\n    return !!matching;\n  }\n\n  @boundMethod\n  lookupById(id: number): T {\n    const matching = this.elements.find(where('id', id))\n    if (matching) {\n      return matching as T;\n    }\n    throw new Error(`No such ${this.name} with id ${id}`);\n  }\n\n  lookup(name: string): T {\n    const matching = this.elements.find(where('name', name))\n    if (matching) {\n      return matching as T;\n    } else {\n      return this.create(name).item\n    }\n  }\n\n  get report(): (T & { amount: number })[] {\n    const items: T[] = this.list()\n    const table = items.flatMap((item: T) => {\n      const id = Number(item.id)\n      const amount = this.storage[id] || 0\n      return { ...item, amount }\n    })\n    return table\n  }\n\n  manage(name: string): ManageStock<T> {\n    return new StockManager<T>(this, this.lookup(name).id)\n  }\n\n  manageAll(): ManageStocks {\n    const { add, remove, count } = this\n    return { add, remove, count, list: () => this.elements }\n  }\n\n  get manager() { return this.manageAll() }\n\n  private setAmount(name: string, amount: number): void {\n    const element: T = this.lookup(name);\n    this.storage[element.id] = amount;\n  }\n}\n","import { Population } from \"./Population\";\nimport { BasicEntity } from \"./types/BasicEntity\";\nimport { Entity, ManageStocks } from \"./types\";\nimport { boundMethod } from \"autobind-decorator\";\n\n// eg map animal (species) names to populations of individual animals...\n\nexport class Registry<U extends BasicEntity, T extends Entity<U>, Pop extends Population<U,T>> {\n  populations: { [species: string]: Pop } = {};\n  species: { [species: string]: U } = {}\n  constructor(\n    public name: string,\n    public popCtor: new (name: string, specie: U) => Pop\n  ) {}\n\n  clear() {\n    this.populations = {}\n  }\n\n  @boundMethod\n  lookup(name: string): Pop {\n    if (this.has(name)) {\n      return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${name}'`);\n    }\n  }\n\n  @boundMethod\n  lookupById(id: number): U { //Population<U,T> {\n    const matching = Object.values(this.species).find(x => x.id === id)\n    if (matching) { //this.has(name)) {\n      return matching\n      // return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${id}'`);\n    }\n  }\n\n  has(name: string): boolean {\n    return this.populations.hasOwnProperty(name);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    return this.lookup(name).count;\n  }\n\n  @boundMethod\n  list(): U[] {\n    return Object.values(this.species)\n  }\n\n  listByName(name: string): T[] {\n    return this.lookup(name).list();\n  }\n\n  @boundMethod\n  create(name: string, species?: Omit<U, 'name' | 'id'>): Pop { //Population<U,T> {\n    if (this.has(name)) {\n      return this.lookup(name);\n    }\n    let theSpecies: U = { ...species, name, id: this.list().length+1 } as unknown as U; // species.kind points back to name...\n    let population: Pop = new this.popCtor(name, theSpecies);\n    this.populations[name] = population;\n    this.species[name] = theSpecies;\n    return population;\n  }\n\n  get populationList(): Population<U,T>[] { return Object.values(this.populations)}\n\n  get report() {\n    const pops = this.populationList.flatMap((population: Population<U,T>) => {\n      const pop = population\n      if (pop.count > 0) {\n        return { name: pop.name, amount: pop.count}\n      } else {\n        return []\n      }\n    })\n    return pops\n  };\n\n  @boundMethod\n  add(amount: number, name: string): void {\n    this.lookup(name).add(amount)\n  };\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.lookup(name).remove(amount)\n  };\n\n  manageAll(): ManageStocks {\n    const { add, remove, count, list } = this\n    return { add, remove, count, list }\n  }\n  get manager() { return this.manageAll() }\n}\n","import { Model } from \"./Model\";\nimport { Registry } from \"./Registry\";\nimport { Stocks } from \"./Stocks\";\nexport type DeltaSource = Stocks<any> | Registry<any, any, any> \n//<U extends BasicEntity, T extends Entity<U>> = Stocks<T> | Registry<U,T>\nexport type DeltaSourceManager = { add: Function, remove: Function, count: Function, list: Function }\nexport class Delta {\n  public changes: Stocks<any>;\n  constructor(public model: any, public getStocks: (model: Model) => DeltaSource) {\n    let baseline = this.getStocks(model)\n    this.changes = new Stocks(`${baseline.name} (delta)`, baseline.list());\n  }\n  get storage() { return this.changes._store }\n  // evolve(t: number): Delta {\n  //   let stocks = this.getStocks(this.model)\n  //   const flow = { [stocks.name]: stocks.manageAll() }\n  //   this.model.dynamics.each(dynamism => dynamism(flow, t));\n  //   return this;\n  // }\n}\n","import { List } from \"../../collections\";\nimport { Delta, DeltaSource } from \"../Delta\";\nimport { Entity, EvolvingStocks, TimeEvolution } from \"../types\";\nimport { ISimulation } from \"./ISimulation\";\n\nexport abstract class Simulation implements ISimulation {\n  protected ticks: number = 0;\n  protected tracking: string[] = []\n  public dynamics = new List<TimeEvolution>()\n  constructor(public name: string) { }\n  public evolve(e: TimeEvolution) { this.dynamics.add(e) }\n  public step() { return this.flux(this.ticks++) }\n\n  public get report() {\n    return Object.fromEntries(this.tracking.map(target =>\n      [target, (this as any)[target].report]\n    ))\n  }\n\n  private flow(target: string) {\n    const source = (this as any)[target]\n    const theDelta = new Delta(this, (model) => (model as any)[target])\n    const { add, remove } = theDelta.changes.manager\n    const { list, count, lookupById } = source\n    return { lookupById, _delta: theDelta, add, remove, list, count }\n  }\n  \n  private flows(): { [key: string]: { _delta: Delta, lookupById: Function, add: Function } } {\n    const theFlows: {[key: string]: any} = {}\n    this.tracking.forEach(target => theFlows[target] = this.flow(target))\n    return theFlows\n  }\n\n  private flowsReport(flow: { [s: string]: any }) {\n    const table: { [key: string]: any } = {}\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = flow._delta\n      table[name] = Object.fromEntries(\n        Object\n          .entries(theDelta.storage)\n          .map(entry => {\n            const [id, amount] = entry\n            const name = flow.lookupById(Number(id)).name\n            return [ name, amount ]\n          })\n      )\n    })\n    return table\n  }\n\n  private flux(t: number) {\n    const flow: EvolvingStocks = this.flows() as any as EvolvingStocks\n    this.dynamics.each(dynamism => dynamism(flow, t));\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = (flow as any)._delta\n      this.apply(theDelta, name)\n    })\n    return { changed: this.flowsReport(flow) }\n  }\n\n  private apply(delta: Delta, target: string) {\n    const source: DeltaSource = (this as any)[target] as DeltaSource\n    const manager = source.manager\n    const list = manager.list()\n    const { storage: updated } = delta;\n    const changed: { [elementName: string]: number; } = {};\n    list.forEach((item: Entity<any>) => {\n      if (updated[item.id]) {\n        const deltaAmount = updated[item.id];\n        manager.add(deltaAmount, item.name);\n        changed[item.name] = deltaAmount;\n      }\n    });\n    return { changed };\n  }\n}\n","import { List, Sequence } from \"../collections\";\nimport { IList } from \"../collections/types\";\nimport { BasicEntity } from \"./types/BasicEntity\";\n\nclass Collection<T extends BasicEntity> extends List<T> implements IList<T> {\n  list() { return this.items }\n  private ids = new Sequence()\n  get names(): string[] {\n    // throw new Error('Method not implemented.');\n    return this.items.map(item => item.name)\n  }\n  // private get ids() { return this.it.map(({ id }) => id) }\n  create(attributes: Partial<T>): T {\n    const id = this.ids.next;\n    const theEntity: T = { id, ...attributes } as unknown as T;\n    this.items.push(theEntity);\n    return theEntity\n  }\n\n  lookup(name: string) {\n    return this.items.find(it => it.name === name)\n  }\n}\n\nexport { Collection }\n","import { Sequence } from \"../../collections\"\nimport { Collection } from \"../Collection\"\nimport { Stocks } from \"../Stocks\"\nimport { randomInteger } from \"../utils/randomInteger\"\nimport { sample } from \"../utils/sample\"\nimport { BasicEntity } from \"./BasicEntity\"\n\nexport type Substance = BasicEntity\nexport type Entity<T> = BasicEntity & { kind: T }\n\nexport type Quality = 'terrible' | 'poor' | 'adequate' | 'good' | 'excellent'\ntype Size = 'fine' | 'small' | 'medium' | 'large' | 'huge'\nexport type Species = BasicEntity & {\n  name: string\n  size?: Size\n  fitness?: Quality\n}\n\nexport type Individual<T> = Entity<T> & {\n  age: number // maybe simpler to do bornAt?\n}\n\nexport type Creature<T> = Individual<T> & {\n  health: 'dying' | 'unwell' | 'flourishing' | 'triumphant'\n}\n\nfunction pick<T>(elements: T[]): T {\n  const d100 = randomInteger(0,100)\n  if (d100 > 95) {\n    return elements[3]\n  } else if (d100 < 5) {\n    return elements[0]\n  }\n\n  return sample([elements[1], elements[2]])\n}\n\ntype Spirit = 'languorous' | 'vigorous' | 'impetuous' | 'ferocious'\ntype Strength = 'weak' | 'robust' | 'mighty' | 'indomitable'\ntype Cunning = 'foolish' | 'sly' | 'crafty' | 'manipulative'\n//'dim' | 'attentive' | 'creative' | 'ingenious'\ntype Agility = 'clumsy' | 'nimble' | 'spry' | 'balletic'\ntype Guile = 'transparent' | 'convincing' | 'beguiling' | 'insidious'\n\nexport type Animal = Creature<Species> & {\n  spirit: Spirit\n  strength: Strength\n  cunning: Cunning\n  guile: Guile\n  agility: Agility\n}\n\n\nconst animalIds = new Sequence()\nexport const createAnimal = (name: string, species: Species): Animal => {\n  return {\n    id: animalIds.next,\n    name,\n    kind: species,\n    age: 0,\n    guile: pick([ 'transparent', 'convincing', 'beguiling', 'insidious' ]),\n    health: pick(['dying', 'unwell', 'flourishing', 'triumphant']),\n    spirit: pick(['languorous', 'vigorous', 'impetuous', 'ferocious']),\n    cunning: pick(['foolish', 'sly', 'crafty', 'manipulative']),\n    agility: pick(['clumsy', 'nimble', 'spry', 'balletic']),\n    strength: pick(['weak', 'robust', 'mighty', 'indomitable']),\n  }\n}\n\n// major demographic groupings -- moieties (maybe *this* should be called a Community??)\ntype Wealth = 'impoverished' | 'well-off' | 'luxuriant' | 'decadent'\ntype Sophistication = 'unpretentious' | 'savvy' | 'urbane' | 'sleek'\ntype Power = 'inconsequential' | 'marginal' | 'influential' | 'sovereign'\ntype Knowledge = 'clueless' | 'well-informed' | 'wise' | 'prescient'\ntype Technology = 'lost' | 'primitive' | 'archaic' | 'advanced'\n\nexport type Moiety = BasicEntity & {\n  wealth: Wealth\n  sophistication: Sophistication\n  power: Power\n  knowledge: Knowledge\n  tech: Technology\n}\n\nconst moietyIds = new Sequence()\nexport const createMoiety = (name: string): Moiety => {\n  const wealth: Wealth = pick([ 'impoverished', 'well-off', 'luxuriant', 'decadent' ])\n  const sophistication: Sophistication = pick([ 'unpretentious', 'savvy', 'urbane', 'sleek' ])\n  const power: Power = pick([ 'inconsequential', 'marginal', 'influential', 'sovereign' ])\n  const knowledge: Knowledge = pick([ 'clueless', 'well-informed', 'wise', 'prescient' ])\n  const tech: Technology = pick([ 'lost', 'primitive', 'archaic', 'advanced' ])\n  return { id: moietyIds.next, name, wealth, sophistication, power, knowledge, tech }\n}\n\ntype Body = Animal\n\ntype Insight = 'dense' | 'intuitive' | 'incisive' | 'brilliant'\ntype Depth = 'superficial' | 'substantial' | 'profound' | 'inscrutable'\ntype Education = 'unlettered' | 'literate' | 'tutored' | 'well-read'\ntype Disposition = 'dismal' | 'hopeful' | 'propitious' | 'roseate'\ntype Valor = 'timid' | 'bold' | 'courageous' | 'fearless'\ntype Personality = 'bland' | 'charismatic' | 'captivating' | 'magnetic' \n\ntype Mind = {\n  insight: Insight\n  depth: Depth\n  education: Education\n  disposition: Disposition\n  valor: Valor\n  personality: Personality\n}\n\nexport const createMind = (): Mind => {\n  const insight: Insight = pick([ 'dense', 'intuitive', 'incisive', 'brilliant' ])\n  const depth: Depth = pick([ 'superficial', 'substantial', 'profound', 'inscrutable' ])\n  const education: Education = pick([ 'unlettered', 'literate', 'tutored', 'well-read' ])\n  const disposition: Disposition = pick([ 'dismal', 'hopeful', 'propitious', 'roseate' ])\n  const valor: Valor = pick([ 'timid', 'bold', 'courageous', 'fearless' ])\n  const personality: Personality = pick([ 'bland', 'magnetic', 'charismatic', 'captivating' ])\n  return { insight, depth, education, disposition, valor, personality }\n}\n\ntype Wit = 'slow' | 'clever' | 'biting' | 'savage'\ntype Empathy = 'sadistic' | 'generous' | 'benevolent' | 'selfless'\ntype Integrity = 'uncertain' | 'sound' | 'solid' | 'incorruptible'\ntype Beauty = 'ugly' | 'fair' | 'radiant' | 'resplendent'\ntype Charm  = 'repulsive' | 'inoffensive' | 'affable' | 'likeable'\ntype Resolve = 'vacillating' | 'steadfast' | 'intrepid' | 'relentless'\n\ntype Soul = {\n  wit: Wit\n  empathy: Empathy\n  integrity: Integrity\n  beauty: Beauty\n  charm: Charm\n  resolve: Resolve\n}\n\nexport const createSoul = (): Soul => {\n  const wit: Wit = pick([ 'slow', 'clever', 'biting', 'savage' ])\n  const empathy: Empathy = pick([ 'sadistic', 'generous', 'benevolent', 'selfless' ])\n  const integrity: Integrity = pick([ 'uncertain', 'sound', 'solid', 'incorruptible' ])\n  const beauty: Beauty = pick([ 'ugly', 'fair', 'radiant', 'resplendent' ])\n  const charm: Charm = pick([ 'repulsive', 'inoffensive', 'affable', 'likeable' ])\n  const resolve: Resolve = pick([ 'vacillating', 'steadfast', 'intrepid', 'relentless' ])\n  \n  return { wit, empathy, integrity, beauty, charm, resolve }\n}\n\n// type Category = BasicEntity\n// type Item = Entity<Category> & {}\n// type Event = BasicEntity\n// type Incident = Entity<Incident>\n\n// export type Trait = { id: number, name: string, rank: 0 | 1 | 2 | 3 | 4 | 5 }\nexport type Memory = { id: number, name: string, description: string }\n\nexport type Person = Individual<Moiety> & {\n  body: Body\n  mind: Mind\n  soul: Soul\n\n\n  // ie within my moiety, I am (thought of as)...\n  // rank: 'commoner' | 'wellborn'\n  // title?: string\n  // reputation: 'unknown' | 'worthy' | 'adored' | 'revered'\n\n  // individually...\n  things: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n  // stats: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n\n  currency: number\n  traits: ManageStocks // IList<Trait>\n\n  // things to draw meters for..\n  meters: { [meterName: string]: Function }\n  memory: Collection<Memory>\n  // philosophy?: Ideology\n  // destiny: 'doomed' | 'commonplace' | 'exceptional' | 'free'\n}\n\nconst personId = new Sequence()\nconst human: Species = { id: -1, name: 'Human Being', size: 'medium' }\nexport const createPerson = (name: string, moiety: Moiety): Person => {\n\n  const inventory = new Stocks<any>(`${name}'s Things`)\n  const traits = new Stocks<any>(`${name}'s Traits`)\n  // const state = new Stocks<any>(`${name}'s State`)\n    // personAttrs.things = inventory.manageAll()\n  return {\n    id: personId.next,\n    kind: moiety,\n    // kind: createMoiety()\n    name,\n    age: 0,\n    body: createAnimal(name, human),\n    mind: createMind(),\n    soul: createSoul(),\n    // rank: 'commoner',\n    // reputation: 'unknown',\n    currency: 0,\n    things: inventory.manageAll(),\n    traits: traits.manageAll(),\n    // stats: state.manageAll()\n    // things: new M\n    meters: {},\n    memory: new Collection<Memory>(),\n  }\n\n}\n\n// const person = (): Person => {\n//   const newPerson: Person = {\n//     id: personId.next()\n//   }\n//   return newPerson\n// }\n\nexport type Recipe = BasicEntity & {\n  produces: { [resourceName: string]: number }\n  consumes?: { [resourceName: string]: number }\n  requiresMachine?: string\n}\n\nexport type Machine = BasicEntity\n\n// export type Task = BasicEntity & {\n//   machine?: string\n//   recipe: string\n// }\n\n// type ManageList = {}\n\nexport type ManageStocks = {\n  add: (amount: number, name: string) => void,\n  remove: (amount: number, name: string) => void,\n  count: (name: string) => number,\n  list: () => any[]\n}\n\nexport type ManageStock<T> = {\n  add: (amount: number) => void,\n  remove: (amount: number) => void,\n  count: number,\n  item: T\n}\n\nexport type ManagePopulation<T> = {\n  count: number\n  birth: (name: string) => T\n  death: (name: string) => T\n  add: (amount: number) => T[]\n  remove: (amount: number) => T[]\n}\n\nexport type ManagePopulationRegistry<T> = {\n  lookup: (name: string) => ManagePopulation<T>\n}\n\n// todo rename\nexport interface EvolvingStocks {\n  [key: string]: ManageStocks\n}\nexport type TimeEvolution = (evolution: EvolvingStocks, ticks: number) => void\n\nexport type StepResult = {\n  changed: { \n    [groupName: string]: { [elementName: string]: number }\n  }\n}\n\n// todo move these model/sim things somewhere else???\nexport type Action = { id: number, name: string, act: Function }\nexport type Policy = { id: number, name: string, manage: Function }\n","import { isString } from \"./utils/isString\";\nimport { boundMethod } from \"autobind-decorator\";\nimport { Entity } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass SetHelper {\n  static first<T>(set: Set<T>): T { return set.values().next().value }\n}\n\n// a collection of named individuals...\nconst populationIds: Sequence = new Sequence()\nexport class Population<Specie, Dividual extends Entity<Specie>> {\n  public id = populationIds.next\n  private ids: Sequence = new Sequence()\n  constructor(\n    public name: string,\n    public species?: Specie,\n    protected individuals: Set<Dividual> = new Set(),\n  ) {}\n\n  list() { \n    const theList: Dividual[] = []\n    this.individuals.forEach(individual => theList.push(individual))\n    return theList;\n  }\n  get count() { return this.individuals.size }\n  get first() { \n    return SetHelper.first(this.individuals)\n   }\n  public lookup(name: string): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.name === name) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with name '${name}' in the population of ${this.name}`)\n  }\n\n  @boundMethod\n  public lookupById(id: number): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.id === id) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with id ${id} in the population of ${this.name}`)\n  };\n\n  public birth(name: string = `${this.name} ${this.count}`): Dividual {\n    const newborn = this.create(name)\n    return newborn\n  }\n\n  @boundMethod\n  public death(name?: string): Dividual {\n    if (name) {\n      const doomed = this.destroy(name)\n      if (doomed) {\n        return doomed\n      }\n    } else {\n      const doomed = this.first\n      if (doomed) {\n        this.destroy(doomed.name)\n        return doomed\n      }\n    }\n    throw new Error(\"Population already empty!\")\n  }\n\n  public add(amount: number) {\n    const newborns = []\n    for (let i = 0; i < amount; i++) {\n      newborns.push(this.birth())\n    }\n    return newborns\n  }\n\n  public remove(amount: number) {\n    const doneFor = []\n    for (let i = 0; i < Math.min(this.count, amount); i++) {\n      doneFor.push(this.death(this.first.name))\n    }\n    return doneFor\n  }\n\n  protected build(attrs: any) {\n    let name = null;\n    let attributes: Partial<Dividual> = {};\n    // console.log(attrs)\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    \n    const id = this.ids.next; //Math.max(0, ...this.ids) + 1;\n    const theIndividual: Dividual = { id, name, ...attributes } as unknown as Dividual;\n    return theIndividual;\n  }\n\n\n  public create(name: string): Dividual;\n  public create(attrs: Partial<Dividual>): Dividual;\n  @boundMethod\n  public create(attrs: any) {\n    const theIndividual: Dividual = this.build(attrs)\n    this.individuals.add(theIndividual);\n    return theIndividual;\n  }\n\n  public destroy(name: string): Dividual;\n  @boundMethod\n  public destroy(name: string) {\n    const theIndividual: Dividual = this.lookup(name)\n    this.individuals.delete(theIndividual);\n    return theIndividual;\n  }\n\n  get report() {\n    return Object.fromEntries(this.list().map(individual => {\n      return [individual.id, individual.name];\n    }))\n  }\n}\n","import { List, Map } from '../collections';\nimport { Recipe, Moiety, Person, ManageStocks, createPerson, createMoiety } from \"./types\";\nimport { Population } from \"./Population\";\nimport { Collection } from \"./Collection\";\nimport { boundMethod } from 'autobind-decorator';\n\nexport class Community extends Population<Moiety, Person> {\n  moieties: List<Moiety> = new List<Moiety>();\n  obscured: boolean = false // don't display details\n   \n  public recipes = new Collection<Recipe>();\n  public jobs = new Map<Person, Recipe>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  );\n\n  public inventories = new Map<Person, ManageStocks>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  )\n\n  get report(): { [personName: string]: string; } {\n    const entries = this.list()\n      .map(person => [person.id, (this.jobs.get(person) || {name: '?'}).name]);\n    return Object.fromEntries(entries);\n  }\n\n  // okay if we need to override create + build inventories let's do it ??\n  public create(name: string): Person;\n  public create(attrs: Partial<Person>): Person;\n  @boundMethod\n  public create(attrs: any) {\n    const personAttrs = super.build(attrs);\n    const { name, age } = personAttrs;\n    const person: Person = createPerson(name, createMoiety(`${name}'s Gens`)) //, this.species)\n    person.age = age\n    this.individuals.add(person)\n    return person\n  }\n\n  // people have inventories...\n  // and maybe they've declared what they want\n\n  // measureTime(time: number): HumanCalendar {}\n\n  // trade({ resources })\n\n  work({ resources }: { resources: { add: Function; remove: Function; count: Function; }; }): void {\n    const { report } = this.jobs;\n    Object.entries(report).forEach(([_workerName, recipe]: [string, Recipe]) => {\n      this.produce(recipe, resources);\n    });\n  }\n  \n  private produce(recipe: Recipe, resources: { add: Function; remove: Function; count: Function; }) {\n    if (this.mayProduce(recipe, resources)) {\n      if (recipe.consumes) {\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          resources.remove(amount, resource);\n        });\n      }\n      Object.entries(recipe.produces).forEach(([resource, amount]) => {\n        resources.add(amount, resource);\n      });\n    }\n  }\n\n  private mayProduce(recipe: Recipe, resources: { count: Function; }) {\n    let mayProduce = true;\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (resources.count(resource) < amount) {\n          mayProduce = false;\n        }\n      });\n    }\n    return mayProduce;\n  }\n\n}\n","import { Substance, Machine, Animal, Species, Action, Policy, Moiety, Person } from \"../types\"\nimport { Stocks } from \"../Stocks\"\nimport { Registry } from \"../Registry\"\nimport { Simulation } from \"./Simulation\"\nimport { IModel } from \"./IModel\"\nimport { Collection } from \"../Collection\"\nimport { Community } from \"../Community\"\nimport { Population } from \"../Population\"\nimport { Tiles } from \"../Board\"\n\ntype Fauna = Population<Species, Animal>\nexport class Model extends Simulation implements IModel  {\n  tracking = [ 'animals', 'resources' ]\n  get tiles(): Tiles { return [] }\n\n  public people = new Registry<Moiety, Person, Community>('people', Community)\n  public resources = new Stocks<Substance>('resources')\n  public machines  = new Stocks<Machine>('machines')\n  public animals   = new Registry<Species, Animal, Fauna>('wildlife', Population)\n\n  reset() {\n    this.resources.clear()\n    this.machines.clear()\n    this.animals.clear()\n    this.people.clear()\n    this.dynamics.clear()\n  }\n\n  // measurements\n  public metrics: { [name: string]: () => number } = {}\n  public notes: { [name: string]: () => string } = {}\n\n  // interactive elements\n  public actions: Collection<Action> = new Collection<Action>()\n  public policies: Collection<Policy> = new Collection<Policy>()\n\n  send(actionName: string, args: any): void {\n    const action = this.actions.lookup(actionName)\n\n    if (action) {\n      action.act(args)\n    } else {\n      throw new Error(`No such action ${actionName}`)\n    }\n  }\n\n  currentPolicy: Policy | undefined\n  choose(policyName: string): void {\n    // console.log(\"[Model.choose]\", policyName)\n    const policy = this.policies.lookup(policyName)\n    if (policy) {\n      this.currentPolicy = policy\n    } else {\n      throw new Error(`No such policy ${policyName}`)\n    }\n  }\n\n  public step() {\n    if (this.currentPolicy) {\n      // console.log(\"MANAGING\", { policy: this.currentPolicy })\n      this.currentPolicy.manage()\n    }\n    return super.step()\n  }\n}\n\nexport default Model;\n","import { prettyAmount } from \"../utils/prettyAmount\";\n\nexport function presentItem(deltas?: { [elementName: string]: number; }) {\n  return ({ name, amount }: { name: string; amount: number; }) => {\n    const delta = deltas && deltas[name];\n    return <li key={name} title={name} className='Item'>\n      <span className='Title' data-testid='Name'>{name}</span>\n      <span data-testid='Count'>\n        {prettyAmount(amount)}\n      </span>\n      <span data-testid='Delta'>\n        {delta}\n      </span>\n    </li>;\n  };\n}\n","export function Tile({ children, title }: { children?: React.ReactNode; title: string; }) {\n  return <div className='Tile' title={title}>\n    {/* <h5 className='Title'>{title}</h5> */}\n    {children}\n  </div>;\n}\n","import { Tile } from \"./Tile\";\nimport { Community } from \"../Community\";\nimport { presentIndividual } from \"./presentIndividual\";\n\n\nexport function presentCommunity(community: Community) {\n  return <Tile title={community.name} key={community.id}>\n    <ul aria-label='People'>\n      {community.obscured ? community.list().map(individual => <li key={individual.id}>{individual.name}</li>)\n                          : community.list().map(presentIndividual(community.report))}\n    </ul>\n  </Tile>;\n}\n","import { ManageStocks } from \"../types\";\n\n\nexport function presentIndividual(work: { [key: number]: string; }) {\n  return ({ id, name, things, traits, meters }: {\n    id: number;\n    name: string;\n    things: ManageStocks;\n    traits: ManageStocks;\n    meters: { [key: string]: Function }\n  }) => {\n    const itemNames = things.list().map(thing => thing.name);\n    return <li key={id} title={name} className='Item'>\n      <div className='Title' data-testid='Name'>{name}</div>\n      {Object.entries(meters).map(([meterName, measure]) => {\n        const { value, max } = measure()\n        return <div className='Meter' data-testid={meterName}>\n          <label htmlFor={meterName} style={{paddingRight: 10}}>{meterName}:</label>\n          <meter id={meterName}\n                 style={{ width: 130, height: 14 }}\n                 min=\"0\" max={max}\n                 low={max * 0.33} high={max * 0.66} optimum={max * 0.8}\n                 value={value}>\n              at {value}/{max}\n          </meter>\n        </div>\n      })}\n      {work[id] && work[id] !== '?' && <span data-testid='Status'>{work[id]}</span>}\n      {itemNames.length > 0 && <div className='Subitems' data-testid='Inventory'>\n        <ul>\n          {itemNames.sort((a,b) => a > b ? 1 : -1).map(it => <li key={it} style={{\n              ...(things.count(it) === 0 ? { display: 'none' } : {})\n            }}>\n            {it} <span data-testid={it}  className='Count'>{things.count(it)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      {traits.list().length > 0 && <div className='Traits' data-testid='Trait Ranks'>\n        <ul>\n          {traits.list().map(trait => <li key={trait.id} style={{\n              ...(traits.count(trait.name) === 0 ? { display: 'none' } : {})\n            }}>\n            {trait.name} <span data-testid={trait.name}>{traits.count(trait.name)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      \n    </li>;\n  };\n}\n","import React, { useState } from 'react';\n\n// import { Suspense, useState } from \"react\";\n// import { Canvas } from \"@react-three/fiber\";\nimport ReactTooltip from 'react-tooltip';\n\nimport { Machine, Moiety, Person } from \"../types\";\nimport { LastDelta } from \"../../ModelPresenter\";\nimport { presentItem } from \"../Model/presentItem\";\nimport { Tile } from \"./Tile\";\nimport { presentCommunity } from \"./presentCommunity\";\nimport { Population } from \"../Population\";\nimport { Community } from \"../Community\";\n\n// import './View.css';\n// import { Scene } from \"./Heightmap/Scene\";\n\nexport type ModelViewProps = {\n  modelName: string;\n  items: { name: string; amount: number; }[];\n  animals: { name: string; amount: number }[];\n  communities: Population<Moiety, Person>[];\n  machines: Machine[];\n  lastChanges: LastDelta;\n  metrics: { [name: string]: number };\n  notes: { [name: string]: string };\n  board: IBoard\n}\n\n// const ViewHeightmap = ({ fullscreen }: { fullscreen: boolean }) => <>\n//   <Canvas style={{ height: fullscreen ? '100vh' : 'inherit' }} camera={{ zoom: 40, position: [0, 0, 500] }}>\n//     <Suspense\n//       fallback={<div className=\"loading\">Loading</div>}\n//     >\n//     </Suspense>\n//     <Scene />\n//   </Canvas>\n// </>\n \n\ninterface IBoard { tiles: string[][], tileColors: { [tile: string]: string }, tileInspect: (x: number, y: number) => string}\n\n\nconst BoardTable = ({ tiles, tileColors, tileInspect }: IBoard) => {\n  const [inspecting, setInspecting] = useState([-1,-1]);\n  const message = inspecting[0] > 0 && inspecting[1] > 0\n    ? tileInspect(inspecting[0], inspecting[1])\n    : <>--</>\n\n  return <div>\n    <ReactTooltip />\n    {/* <ViewHeightmap fullscreen={true} /> */}\n    <table style={{\n      fontFamily: '\"Source Code Pro\", \"Fira Code\", \"Inconsolata\", Menlo, Monaco, \"Courier New\", monospace',\n      cursor: 'pointer',\n    }}>\n      <tbody>\n        {tiles.map((row: string[], y: number) =>\n          <tr key={`row-${y}`}>\n            {row.map((cell: string, x: number) =>\n              <td\n                style={{\n                  // highlight cell errors..\n                  // color: tileInspect(x,y).match(/error/) ? 'red' : tileColors[cell],\n                  // maxWidth: '4px',\n                  // maxHeight: '2px',\n                  color: tileColors[cell],\n                  backgroundColor: inspecting[0] === x && inspecting[1] === y ? 'gray': 'black'\n                }}\n                key={`cell-${x}-${y}}`}\n                onMouseEnter={() => setInspecting([x,y])}\n                onMouseLeave={() => setInspecting([-1,-1])}\n                data-tip={inspecting[0] === x && inspecting[1] === y ? message : ''}\n                // data-html\n              >{cell}</td>\n            )}\n          </tr>\n        )}\n      </tbody>\n    </table>\n  </div>\n}\n\nexport function ModelView({\n  modelName,\n  items,\n  // individuals,\n  communities,\n  machines,\n  animals,\n  lastChanges,\n  metrics,\n  notes,\n  board,\n  // work\n}: ModelViewProps) {\n  const folks = (communities as Community[]).map(presentCommunity)\n  // console.log({ community: communities[0].list() })\n  return <div className='Model'>\n    {/* <ViewHeightmap /> */}\n    <h4 aria-label='Model Title' style={{display: 'none'}}>{modelName}</h4>\n    {board.tiles.length > 0 && <BoardTable {...board} />}\n    {items.length > 0 && (<Tile title='Items'>\n      <ul aria-label='Resources'>\n        {items.map(presentItem(lastChanges.resources))}\n      </ul>\n    </Tile>)}\n    {animals.length > 0 && (\n      <Tile title='Animals'>\n        <ul aria-label='Animals'>\n          {animals.map(presentItem(lastChanges.animals))}\n        </ul>\n      </Tile>)}\n      {communities.length > 0 && <div title='Individuals' style={{display: 'flex'}}>{folks}</div>}\n    {machines.length > 0 && <Tile title='Machines'>\n      <ul>\n        {machines.map(({ name }) => <li key={name}>{name}</li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(metrics).length > 0 && <Tile title='Metrics'>\n      <ul>\n        {Object.entries(metrics).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Count'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(notes).length > 0 && <div title='Notes'>\n    <table>\n      <tbody>\n      {/* <tr> */}\n        {\n          Object.entries(notes).map(([name, value]) => name.startsWith('*')\n            ? (\n                <tr key={name} style={{textAlign: 'center'}}>\n                  <td colSpan={3}>\n                    <b>{value}</b>\n                  </td>\n                </tr>\n              )\n            : (\n                <tr key={name}>\n                  <td title={name} key={name} style={{textAlign: 'right', color: 'gray' }}>\n                    {name}\n                  </td>\n                  <td style={{width: '4px'}}></td>\n                  <td style={{ minWidth: '180px', textAlign: 'left', fontSize: '15pt' }}>\n                    <span data-testid='Description'>\n                      {value}\n                    </span>\n                  </td>\n                </tr>\n              )\n          )\n        }\n\n    </tbody>\n    </table>\n      {/* </tr> */}\n    </div>}\n  </div>;\n}\n","import { Model } from './Model';\nimport { IModel } from './IModel';\nimport { ModelView } from '../View/ModelView';\nexport { Model, ModelView }\nexport type { IModel }\nexport default Model\n","// import { IAssembly } from './ecosphere/Assembly';\nimport { ModelView } from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\n\nexport type LastDelta = { [group: string]: { [element: string]: number }}\n\ntype ModelPresenterProps = {\n  model: IModel\n  step: Function \n  send: Function\n  choose: Function\n  lastChanges: LastDelta\n}\n\nconst view = (model: IModel, lastChanges: LastDelta) => {\n  const { actions, resources, people, machines, animals, metrics, notes, tiles, tileColors } = model;\n\n  const props = {\n    modelName: model.name,\n    items: resources.report,\n    communities: people.populationList, //.populations,\n    // individuals: people.list(),\n    // work: people.report,\n    machines: machines.list(),\n    animals: animals.report,\n    actions: actions.list(),\n    metrics: Object.fromEntries(\n      Object.entries(metrics).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    notes: Object.fromEntries(\n      Object.entries(notes).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    lastChanges,\n    board: { tiles: tiles || [], tileColors: tileColors || {}, tileInspect: (model.tileInspect || (() => '--')) }\n  }\n\n  return props\n}\n\nexport function ModelPresenter({ model, send, choose, step, lastChanges }: ModelPresenterProps) {\n  return <>\n    <div aria-label='View'>\n      <ModelView {...view(model, lastChanges)} />\n    </div>\n\n    <div aria-label='Controls'>\n      <span title='Run' style={{display: 'none'}}>\n        <button onClick={() => step(true)}>Step</button>\n      </span>\n\n      <span title='Actions'>\n        {model.actions.list().map(({ name }) => <button title={name} key={name} onClick={() => send(name)}>\n          {name}\n        </button>)}\n      </span>\n\n      {model.policies.count > 0 && <div className='Policy' title='Policies'>\n        {/* <h5>Policies</h5> */}\n        {model.policies.list().map(({ name }) => <label key={name}><input\n          type='radio'\n          checked={model.currentPolicy?.name === name}\n          title={name}\n          key={name}\n          onChange={() => choose(name)}\n        />\n        {name}\n        </label>)}\n      </div>}\n    </div>\n  </>;\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { LastDelta } from './ModelPresenter';\nimport { isModel } from './ModelSelector';\n\nexport type ModelAPI = {\n  model: IModel | IAssembly\n  setModel(model: IModel | IAssembly): void\n  step: Function,\n  lastChanges: LastDelta,\n  send: (actionName: string, args: any) => void,\n  choose: (policyName: string, args: any) => void,\n  setDelay: (milliseconds: number) => void\n}\n\n// ticks per sec\n// const ticksPerSecond = (n: number) => n > 0 ? Math.floor(1000 / n) : 1\n// const speeds = {slow: 10, fast: 25, faster: 50, fastest: 80};\nexport function useModel(initialModel: IModel | IAssembly): ModelAPI { //model: IModel = new Model('Hello World')): ModelAPI {\n  const [model, setModel] = useState(initialModel) //new Model('Hello World'))\n\n  const [lastChanges, setLastChanges] = useState({} as LastDelta)\n  const isTest = process.env.NODE_ENV === 'test'\n  const [delay, setDelay] = useState(isTest ? 5000 : 2) //ticksPerSecond(speeds.slow));\n\n  const [shouldStep, step] = useState(false);\n  const [shouldSend, doSend] = useState(false);\n  const [shouldManage, doManage] = useState(false)\n\n  const performStep = () => { step(true); };\n  const [command, setCommand] = useState('')\n  const [policy, setPolicy] = useState('')\n\n  useEffect(() => {\n    if (shouldSend) {\n      if (command && isModel(model)) { model.send(command, {}) }\n      doSend(false)\n    }\n  }, [command, model, shouldSend]);\n\n  useEffect(() => {\n    if (shouldManage) {\n      if (policy && isModel(model)) { model.choose(policy, {}) }\n      doManage(false)\n    }\n  }, [policy, model, shouldManage]);\n\n  const performSend = (actionName: string, args: any) => {\n    setCommand(actionName)\n    doSend(true)\n  }\n\n  const performChoose = (policyName: string, args: any) => {\n    // console.log(\"CHOOSE\", policyName)\n    setPolicy(policyName)\n    doManage(true)\n  }\n\n  useEffect(() => {\n    if (shouldStep && isModel(model)) {\n      let { changed } = model.step();\n      step(false);\n      setLastChanges(changed);\n    }\n  }, [shouldStep, model]);\n\n  useInterval(() => step(true), delay); \n\n  return {\n    model,\n    step: performStep,\n    lastChanges: lastChanges as LastDelta,\n    send: (actionName: string, args: any) => performSend(actionName, args), \n    choose: (policyName: string, args: any) => performChoose(policyName, args),\n    setDelay,\n    setModel,\n  };\n}\n\nfunction useInterval(callback: any, delay: number) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      // @ts-ignore\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport Model from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelPresenter } from './ModelPresenter';\nimport { useModel } from './useModel';\n\nexport const isModel = (maybeModel: IModel | IAssembly): maybeModel is IModel => {\n  return maybeModel instanceof Model;\n}\n\nconst AssemblyPresenter: React.FC<{ assembly: IAssembly }> = ({ assembly }) => {\n  return <>{assembly.models.items.map((theModel: IModel) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { step, send, choose, lastChanges, model } = useModel(theModel);\n    return <>\n    <h4>{theModel.name}</h4>\n    <ModelPresenter\n             key={model.name}\n             step={step}\n             send={send}\n             model={model as IModel}\n             choose={choose}\n             lastChanges={lastChanges}\n           />\n           </>\n  })}</>\n}\n\nexport function ModelSelector({ initialModel, models }: {\n  initialModel: IModel;\n  models: (IModel | IAssembly)[];\n}) {\n  const { step, send, choose, lastChanges, model, setModel } = useModel(initialModel);\n  return <>\n    <Dropdown\n      options={models.map(model => model.name)}\n      onChange={({ value }) => {\n        const theModel = models.find((model: IModel | IAssembly) => model.name === value);\n        if (theModel) { setModel(theModel); }\n      }}\n      value={model.name}\n      placeholder=\"Select a model\" />\n    {isModel(model) ? <ModelPresenter\n                       step={step}\n                       send={send}\n                       model={model}\n                       choose={choose}\n                       lastChanges={lastChanges} />\n                    : <AssemblyPresenter assembly={model} />}\n  </>;\n}\n","\nexport const capitalize = (word: string) => word.replace(/^\\w/, c => c.toUpperCase()) \nexport const titleize = (str: string) => str.split(' ').map(word => capitalize(word)).join(' ');\n","import { StringGeneratorSequence } from \"../collections/Sequence\";\nimport { ISequence } from \"../collections/types\";\nimport { titleize, capitalize } from \"./utils/capitalize\";\nimport { choose, sample } from \"./utils/sample\";\n\nconst concepts = [\n  'earth', 'sky',\n  'mountain', 'hill', 'valley', 'peak', 'mound', 'point', 'mountain-chain',\n  'isle', \n  'sea', 'lake', 'bay', 'pool', 'harbor',\n  'forest',\n  'river', 'glen', 'stream',\n  // barrow, downs, gulch ...\n\n  'land', 'place', 'realm', 'region',\n  'peoples', 'kingdom',\n  'road', 'path',\n  'haven', 'fortress', 'prison', 'citadel', 'stronghold', 'tower', 'garden',\n  // modifiers..\n  'ever-', '-less', 'at-',\n  // masculine/feminine suffices\n  '-person', '-man', '-son', '-woman', '-maid', '-daughter',\n  // relations\n  'friend', 'foe', 'lord', 'slave', 'king', 'queen', 'prince', 'princess',\n\n  // ...aspects...\n  'light', 'shadow', 'shade',\n  'sun', 'moon', 'stars',\n  'day', 'night', 'spark', 'starlight', 'firmament',\n  // weather\n  'mist', 'snow', 'wind', 'rain', 'cloud', //'hail',\n  'rainbow', 'dew', 'frost',\n  // metals...\n  'tin', 'iron', 'silver', 'gold', \n\n  // cut, delve, hew, till, hunt...?\n\n  // shades, hues...\n  'white', 'black', 'gray', 'red', 'blue', 'green', 'orange',\n  // ...animals,\n  'dragons', 'elephants',\n  'bears', 'birds', 'horses', 'snakes', 'wolves',\n\n  // tame animals..\n  'hounds',\n\n  // birds in particular...\n  'swans', 'eagles', 'nightingales',\n\n  // ...elements,\n  'ice', 'fire', 'earth', 'water',\n\n  // quasi-elements...\n  'embers', 'steam', 'magma', 'radiance',\n  'soot', 'ash', 'salt', 'void',\n\n  // ...times of day\n  'morning', 'evening', 'dusk', 'noon', 'afternoon', 'midnight',\n  // trees\n  'willow', 'pine', 'cherry', 'oak', 'spruce', 'birch', 'elm', 'holly',\n  // flowers\n  'rose', 'daisy', 'poppy', 'dandelion', 'lily',\n  // seasons\n  'autumn', 'winter', 'spring', 'summer',\n  // moods\n  'dread', 'horror', 'awe', 'joy', 'sorrow', 'gloom',\n  // food\n  'apple', 'honey', 'bread', 'elderberry', 'wine', 'fish',\n  // natural substances..\n  'wax',\n  // 'nut',\n\n\n  // adjectives...\n  'tall', 'deep', 'lofty', 'lonely',\n  'great', 'large', 'small', 'tiny',\n  'narrow', 'wide', 'sharp', 'giant',\n  'quick', 'pale',\n\n  'golden', 'holy', 'fortunate', 'dusty', 'beautiful',\n  'fell', 'cloudy', 'secret', 'sweet', 'bold',\n  'splendid', 'abundant', 'sparkling',\n\n  // animal aspects...\n  'horns', 'fangs', 'claws',\n\n  // gemstones...\n  // 'emerald', 'ruby',\n\n  // more abstract things...\n  'love', 'dream',\n  'music', 'silence', 'divine',\n\n  'fate', 'thought', 'speech', 'skill',\n  'tomorrow',\n\n  'spirit',\n  'tyranny', 'freedom',\n\n  'magic',\n\n  // bodily substances\n  'blood', 'tears', \n\n  // created things...\n  'jewel', 'ship', 'needle', 'bell', 'candle',\n\n  // clothes\n  'mantle', 'veil', // 'garment'\n\n\n  // questing...\n  'journey', 'treasure', 'battle', 'smith',\n] as const;\n\nexport type Concept = typeof concepts[number];\nexport const theConcepts: Concept[] = concepts as unknown as Concept[]\ntype Lexeme = string\nexport type Vocabulary = {[key in Concept]: Lexeme}\n\nexport class Dictionary {\n  constructor(\n    public languageName: string,\n    protected vocabulary: Vocabulary,\n    protected enhanceTranslation?: (input: string) => string\n  ) {}\n\n  // todo support more 'syntax'\n  // (at least recognizing 'x of y', where x + y are translated 'first'...)\n  // (also -less should just modify the immediately preceding word)\n  translate(...concepts: Concept[]): Lexeme {\n    let translation = concepts.reduce((acc, concept, index) => {\n      let word = this.vocabulary[concept]\n      acc = acc.trim()\n      let space = true\n      if (acc.endsWith('-') || acc.endsWith('*')) {\n        space = false; acc = acc.substring(0, acc.length-1)\n      }\n      if (index > 0 && (word.startsWith('-') || word.startsWith('*'))) {\n        space = false; word = word.substring(1, word.length) //replaceAll('-', '')\n      }\n      // if (word.startsWith(acc[acc.length-1])) { space = false; acc = acc.substring(0, acc.length - 1) }\n\n      let elements = [acc, word]\n      if (concept.startsWith('-')) {\n        space = false;\n        // if (word.endsWith('-')) {\n        //   word = word.replaceAll('-', '')\n        //   // elements = [word, acc]\n        // }\n      }\n      return elements.join(space ? ' ' : '')\n    }, '')\n\n    translation = translation.replaceAll('-', '')\n    // okay, need to map these irregulars to a process...\n    \n    let result = this.enhanceTranslation\n      ? this.enhanceTranslation(translation)\n      : translation\n    return titleize(result) //titleize(translation)\n  }\n\n  name = (...ideas: Concept[]) => (...descriptors: Concept[]) => {\n    let notion = capitalize(ideas.join('-'))\n    let description = capitalize(descriptors.join('-'))\n    let form = `${description} ${notion}`\n    if (description.endsWith('s')) { form = `${description}' ${notion}`}\n    let translation = `${this.translate(\n      ...ideas,\n      ...descriptors,\n      )}`;\n    return [ \n      form,\n      translation\n    ]\n  }\n\n  nameInverse = (...ideas: Concept[]) => (...descriptors: Concept[]) => {\n    let notion = capitalize(ideas.join('-'))\n    let description = capitalize(descriptors.join('-'))\n    let form = `${description} ${notion}`\n    if (description.endsWith('s')) { form = `${description}' ${notion}`}\n    let translation = `${this.translate(\n      ...descriptors,\n      ...ideas,\n      )}`;\n    return [ \n      form,\n      translation\n    ]\n  }\n\n}\n\n\nexport class DictionarySequence\n     extends StringGeneratorSequence\n  implements ISequence<string> {\n    private notions: Concept[]\n  constructor(\n    private dictionary: Dictionary,\n    private invertOrder: boolean = false,\n    ...notions: Concept[]\n  ) {\n    super()\n    this.notions = notions\n  }\n\n  generate(): string {\n    console.log(`Generate ${this.notions.join('/')} using ${this.dictionary.languageName} dictionary...`)\n    const ideas: Concept[] = choose(1, theConcepts);\n    const inventName = this.invertOrder\n      ? this.dictionary.nameInverse(sample(this.notions))\n      : this.dictionary.name(sample(this.notions))\n    const [significance, name] = inventName(...ideas)\n    return `${name} (${significance})`\n  }\n}\n\n// move this stuff outside? \n// todo ... hard to construct full dict from scratch!\n// want some kind of system for assembling the dictionary from\n// (reasonably small number) roots\n// eg if beauty (gezi) then => beatuiful (geziel) .. \n// but more generally reveal the 'concept algebra' of the ideas\nexport type Roots = {\n  man: string\n  woman: string\n  son: string\n  daughter: string\n  crown: string\n  place: string\n  sleep: string\n  great: string\n  small: string\n  beauty: string\n  tree: string\n  flower: string\n  water: string\n  cove: string\n  safe: string\n  light: string\n  shadow: string\n  one: string\n  many: string\n  joy: string\n  sorrow: string\n  heart: string\n  bitter: string\n  sweet: string\n  point: string\n  heat: string\n  cold: string\n  tall: string\n  deep: string\n  bell: string\n  mound: string\n  run: string\n  sing: string\n  way: string\n  no: string\n  at: string\n  eat: string\n  drink: string\n  air: string\n  good: string\n  bad: string\n  quick: string\n  slow: string\n  time: string\n  cut: string\n  all: string\n  hard: string\n  soft: string\n  color: string\n  ore: string\n  wing: string\n  snake: string\n  horse: string\n  bear: string\n  elephant: string\n  dog: string\n  wild: string\n  fear: string\n  death: string\n  sound: string\n  tooth: string\n  wood: string\n  over: string\n  high: string\n  mantle: string\n  face: string\n  fight: string\n  mere: string\n  strong: string\n}\n\n// try to support building the 150+ word dictionary from\n// smaller set of root words?\n// ensures some internal consistency too?\nconst assembleDictionary = (\n  name: string,\n  roots: Roots,\n  vocabOverrides: Partial<Vocabulary>,\n  replacements: { [key: string]: string } = {}\n): Dictionary => {\n  const {\n    man, woman, son, daughter,\n    crown, place, tree, sleep, flower,\n    beauty, // valor,\n    great, small,\n    water, cove,\n    safe,\n    // cloud,\n    // star,\n    light, shadow,\n    one, many,\n    joy, sorrow,\n    sweet, bitter,\n    point, \n    heat, cold,\n    tall, deep,\n    bell, mound,\n\n    run, sing, way,\n    // forever,\n    no, at, eat, drink,\n    good, bad,\n    quick, slow,\n    time, air,\n    cut,\n    all,\n    hard, soft,\n    color, ore,\n    wing,\n    snake, horse, bear, elephant, dog,\n    wild,\n    fear,\n    death,\n    sound,\n    tooth,\n    heart,\n    wood,\n    over,\n    high,\n    // mantle,\n    fight,\n    face,\n    mere,\n    strong,\n  } = roots\n\n  // const kernel = {\n  //   sweet: good + taste,\n  //   bitter: bad + taste,\n  // }\n\n  const basics = {\n    '-person': man,\n    '-man': man,\n    '-woman': woman,\n    '-maid': small + woman,\n    '-son': son,\n    '-daughter': daughter,\n\n    // mantle: over + coat,\n    veil: over + face,\n\n    star: soft + light,\n    daisy: bell + flower,\n    poppy: sleep + flower,\n    dandelion: crown + flower,\n    willow: sorrow + tree,\n    cherry: good + tree,\n    spruce: sweet + tree,\n    pine: bitter + tree,\n    birch: small + tree,\n    elm: tall + tree,\n    oak: hard + tree,\n    holly: joy + tree,\n    king: crown + man,\n    queen: crown + woman,\n    sea: great + water,\n    lake: water + place,\n    pool: water + mere,\n    bay: cove + place,\n    harbor: safe + cove,\n    haven: safe + place,\n    // mist: water + cloud,\n    forest: many + tree + place,\n    people: many + man + woman,\n    ice: bitter + cold,\n    prison: bitter + sorrow + place,\n    jewel: small + beauty,\n    needle: bitter + point,\n    candle: heat + point,\n    hill: small + mound + place,\n    mountain: great + mound + place,\n    valley: small + deep + place,\n    peak: great + point + place,\n    mound: mound + place,\n    land: many + man + place,\n    lofty: great + high,\n    sky: great + high + over,\n    low: small + one,\n    river: water + run + way,\n    isle: deep + water + place,\n    wine: joy + drink,\n    honey: sweet + drink,\n    apple: small + eat,\n    bread: good + eat,\n    elderberry: safe + eat,\n    fish: small + quick,\n    harvest: tree + man + cut,\n    night: shadow + time,\n    garden: flower + place,\n    // strong: great + hard,\n    // giant: great + tall,\n    vault: deep + cut + place,\n\n    white: light + color,\n    black: shadow + color,\n    green: tree + color,\n    red: heat + color,\n    blue: cold + color,\n\n    morning: light + time,\n    evening: shadow + time,\n    noon: high + light,\n    fire: heat + light,\n\n    tin: soft + ore,\n    silver: beauty + ore,\n    gold: deep + ore,\n\n    bird: quick + wing,\n    birds: good + wing,\n    horses: horse,\n    elephants: elephant,\n    bears: bear,\n    snakes: snake,\n    wolves: wild + dog,\n    hounds: good + dog,\n    // gray: light + shadow + color, 'red', 'blue', 'green', 'orange',\n    large: tall + great,\n    tiny: small + small,\n    thirst: no + drink,\n    wax: slow + soft,\n\n    fortunate: great + good,\n    beautiful: great + beauty,\n    silence: no + sound,\n\n    music: man + woman + sing,\n\n    abundant: many + many,\n    // sparkling: run + light,\n    teeth: many + tooth,\n    battle: many + man + fight,\n  }\n\n  const {\n    fire, red,\n    vault, star, night, ice, harvest, river, mountain, valley,\n    king, land, lofty, sky, low, people, '-person': person,\n    white, black, morning, evening, noon, bird,\n    large, thirst, silence, music, teeth, battle,\n  } = basics\n\n  const intermediate = {\n    dragons: strong + wing + snake,\n    swans: beauty + bird,\n    eagles: lofty + bird,\n    nightingales: evening + bird,\n    iron: strong + ore,\n    dusk: morning + evening,\n    gray: white + black,\n    orange: harvest + color,\n    afternoon: deep + noon,\n    midnight: deep + evening,\n    lily: star + flower,\n    rose: red + flower,\n    divine: great + king,\n    princess: king + daughter,\n    prince: king + son,\n    kingdom: king + people + place,\n    fortress: king + safe + place, \n    citadel: many + people + place,\n    stronghold: safe + people + deep + place,\n    tower: tall + over,\n    'mountain-chain': many + mountain + place,\n    friend: sweet + person,\n    foe: bitter + person,\n    lord: lofty + person,\n    slave: low + person,\n    rain: sky + water,\n    earth: many + land,\n    glen: river + valley,\n    stream: small + river,\n    realm: one + valley + place,\n    region: many + river + land,\n    peoples: people + people,\n    road: all + person + way,\n    path: run + way,\n    shade: deep + shadow,\n    sun: sky + light,\n    moon: night + light,\n    autumn: harvest + time,\n    winter: bitter + time,\n    spring: flower + time,\n    summer: strong + heat + time,\n    cloud: sky + water,\n    cloudy: all + sky + water,\n    'ever-': all + time,\n    '-less': no,\n    'at-': at,\n    stars: many + star,\n    day: light + sky + time,\n    starlight: star + light,\n    spark: strong + fire,\n    snow: sky + cold,\n    mist: soft + sky,\n    firmament: strong + vault,\n    wind: strong + air,\n    rainbow: many + color + sky,\n    frost: hard + ice,\n    dew: small + morning + water,\n    dread: fear + king,\n    lonely: one + at + mere,\n    giant: one + large + man,\n    awe: great + fear,\n    ash: fire + death,\n    steam: fire + water,\n    magma: fire + river,\n\n    dry: heat + thirst,\n    food: eat + harvest,\n    space: great + lofty,\n    dark: deep + shadow,\n    broad: deep + deep,\n    voice: person + music,\n    war: great + battle,\n    // was also thinking\n    // orange: fire + color,\n    // purple: red + blue, ....\n  } //= intermediate\n\n  const {\n    dread, ash, rainbow, dry, food, space, dark, broad, orange,\n    divine, voice, iron, spark, //music,\n    // frost, rainbow\n  } = intermediate\n\n  console.log('assemble!', { roots, basics, intermediate })\n\n  const vocab: Vocabulary = {\n    ...roots,\n    ...basics,\n    ...intermediate,\n    sparkling: many + spark,\n    horror: black + dread,\n    embers: fire + ash,\n    soot: black + ash,\n    radiance: rainbow + color,\n    salt: dry + food,\n    void: no + space,\n    gloom: dark + black,\n    narrow: river + valley + place,\n    wide: broad + land,\n    sharp: dread + point,\n    pale: soft + white,\n    golden: white + orange + beauty,\n    holy: divine + joy,\n    dusty: dry + soft,\n    fell: cold + fear,\n    secret: dark + silence,\n    bold: strong + voice,\n    splendid: rainbow + light,\n    horns: many + dread + point,\n    claws: bad + point,\n    fangs: dread + teeth,\n    love: heart + person,\n    dream: sleep + music,\n    fate: divine + fire,\n    speech: many + voice,\n    tomorrow: time + time,\n    spirit: light + divine,\n    tyranny: bad + king,\n    magic: divine + spark,\n    thought: light + time,\n    skill: good + person,\n    freedom: strong + people,\n    blood: red + water,\n    tears: sorrow + water,\n    ship: water + wood,\n    journey: place + time + person,\n    treasure: good + joy,\n    smith: iron + person,\n\n    ...vocabOverrides,\n\n    /**\n     *\n     avalon: magic + island / green + island\n     child: small + person\n     dungeon: dark + stone\n     citadel: castle + high / castle + city\n     fortress: castle + strong\n     throne: high + seat\n\n     aelves: light + people\n     orkh: dark + people\n\n     dwarrow: stone + people\n     men: lake + people\n     heflen: under + hill + people\n     fae: beautiful + people\n\n     gnomes: deep + people\n     colossi: giant + people\n\n     */\n    \n    \n    // grievous: heavy + sorrow\n    // joy: holy + happiness\n    // harsh: bitter + sharp\n    // hollow: soft + place [ i prefer low + place ? ]\n\n  }\n  // console.log(\"FULL VOCAB\", { vocab })\n  return new Dictionary(name, vocab, (input: string) => {\n    Object.keys(replacements).forEach(key => {\n      if (input.includes(key)) {\n        input = input.replaceAll(key, replacements[key])\n      }\n    })\n    return input\n  })\n}\n\nexport { assembleDictionary }\n","// dwarrow-folk\nimport { assembleDictionary, Dictionary, Roots } from \"../../ecosphere/Dictionary\";\nconst khuzdulRoots: Roots = {\n  shadow: 'um', //skado', //umbr', //fusk',\n\n  tree: 'an',\n  woman: 'llwyn',\n  man: 'nor', //il',\n  mound: 'hæð',\n  // on',\n  quick: 'e',\n  time: 'enor',\n  over: 'on-',\n  at: 'e-',\n\n  bitter: 'd', //mere, ',\n  beauty: 'ari',\n  high: 'l',\n  wing: 'l',\n  safe: '-ond',\n\n  place: '-', \n  // place: 'ë',\n\n  great: 'h',\n  hard: 'ekh',\n  strong: 'ell',\n  heat: 'euth',\n  light: 'ie',\n  daughter: 'enne',\n  deep: 't', //grim',\n\n  water: 'ul',\n  many: 'o',\n  cold: 'í',\n\n  one: 'er',\n  mere: 'sëa',\n\n  all: 'er',\n  wood: 'taf',\n  cut: 'k',\n  crown: 'lï',\n  run: 'r',\n  sorrow: 'uj',\n  joy: 'je',\n  no: 'u-',\n  sing: 'ina',\n  fear: 'ga',\n  tooth: 'tur',\n  color: 'o',\n\n  fight: 'klak',\n  air: 'ur',\n  bad: 'nu',\n  bear: 'gruw', // bero\n  bell: 'du',\n  cove: 'cof',\n  death: 'lun',\n  dog: 'hu',\n  drink: 'le',\n  eat: 'zu',\n  elephant: 'elefant',\n  flower: 'ela',\n  good: 'lu',\n  heart: 'eru',\n  horse: 'raph',\n  ore: 'im',\n  point: '-el',\n  sleep: 'ol',\n  small: 'i',\n  snake: 'lug',\n  soft: 'i',\n  son: 'on',\n  sweet: 'hl',\n  tall: 'mu-',\n  way: 'eh',\n  wild: 'pel',\n  sound: 'ada',\n  face: 'vih',\n  mantle: 'mötull', //re',\n  slow: 'ikshu',\n}\n\nconst khuzdulVocab = {\n  horn: 'horn',\n  summer: 'sumar',\n  prison: 'fengsel',\n  iron: 'jern',\n  holly: 'kristtorn',\n  land: 'jord',\n  mountain: 'fell', //'fjell',\n  'mountain-chain': 'fellkjede',\n  peak: 'felltindr',\n  bay: 'vik-',\n  stars: '-sterne',\n  silence: '-stille',\n  silver: 'sølv',\n  river: 'elv',\n  ice: 'yses', //is',\n  icy: 'iskald',\n  fangs: 'hoggtann',\n  dragons: 'drager',\n  giant: 'kjempe',\n  hill: 'høyde',\n  golden: 'gyllen',\n  gold: 'gull',\n  music: 'musikk',\n  pine: 'furu',\n  eagles: 'orn-',\n  gray: 'grå-',\n  fire: 'brann-',\n  stronghold: 'fort',\n  tyranny: 'grusomhet',\n  nightingales: 'nattergal',\n  vale: 'dal',\n  valley: 'dalr',\n  magic: 'seith',\n  '-woman': 'víf',\n}\n\n// todo add some vocab too? shield -- skjald\n// and override: oak -- eik\nconst khuzdul: Dictionary = assembleDictionary('Khuzdul',\n  khuzdulRoots,\n  khuzdulVocab,\n  {\n    'eillwyn': 'enne',\n    'llent': 'lion',\n    'laú': 'lû',\n    // 'eille': 'ye',\n    'ielle': 'we',\n    'oo': 'œ',\n    'ieo': 'a',\n    'ii': 'ī', //ié',\n    'ilel': 'iel',\n    'lel': 'iliel',\n    'nillut': 'nt',\n    'lll': 'l',\n    'nina': 'on',\n    // 'onenor': 'inion',\n    'oul': 'il',\n    'aa': 'a',\n    // 'nn': 'm',\n    'ilo': 'e',\n    'ndon': 'ine',\n    'eillio': 'eo',\n    'iegh': 'gÿl',\n    'igh': 'g',\n\n    // 'll': 'l',\n    'tie': 'tion',\n    'onl': 'lÿ',\n    'ïni': 'iel',\n    'milk': 'mel',\n    'ee': 'e',\n    'ilr': 'ul',\n    'eghl': 'elen',\n  // 'varl': 'l',\n  // 'gll': 'll',\n  // 'ienen': 'ien',\n  // 'gg': 'eg',\n  // // 'noa': 'na',\n  // 'rr': 'r',\n  // // 'aa': 'a',\n  // // 'glt': 'gut',\n  // // 'gn': 'n',\n  // 'ii': 'ī',\n  // 'īen': 'ilien',\n  // 'aúri': 'uthi',\n  // 'lll': 'lup',\n  // 'ythe': 'eri',\n  // 'dgn': 'ng',\n  // 'nn': 'n',\n  // 'arort': 'uir',\n  // 'ieno': 'eo',\n  // 'rlly': 'a',\n  \n  // 'aa': 'a',\n  // 'thien': 'eth',\n  // 'iao': 'eo',\n  // 'rl': 'lin',\n  // 'gg': 'ph',\n  // 'eul': 'uil',\n  // 'gn': 'kn',\n  // 'gv': 'gev',\n  // 'gg': 'kh',\n  // '-': ''\n})\n\nexport default khuzdul;\n","import { Dictionary, Vocabulary } from \"../../ecosphere/Dictionary\";\n\n// see https://eldamo.org/content/vocabulary-indexes/vocabulary-words-ns.html\nexport const Sindarin: Vocabulary = {\n  // was confusing to try to do this one b/c of the order!\n  '-less': 'uv-',\n\n  'ever-': 'ui-', // 'ever-dusk' --> evendim\n  'at-': 'ad-',\n\n  // fem/masculine suffices\n  '-person': '-we',\n  '-man': '-on',\n  '-son': '-ion',\n\n  '-woman': '-ien',\n  '-maid': '-wen',\n  '-daughter': '-iell',\n\n  'mountain-chain': '-orodrim',\n\n  abundant: 'ovor',\n  afternoon: 'avnedhor',\n  apple: 'orf',\n  autumn: 'iarvas-', \n  awe: 'anwar',\n  battle: 'dagor',\n  bay: 'côf', //'-iâ',\n  bears: 'graw',\n  beautiful: 'bain',\n  bell: 'nell',\n  birch: 'hwinn*',\n  birds: 'aewen',\n  black: 'morn',\n  blood: 'sereg',\n  blue: 'luin-',\n  bold: 'beren',\n  bread: '-bas',\n  candle: 'lígu',\n  cherry: 'aebin*',\n  citadel: 'ost-',\n  claws: 'gamp-',\n  cloudy: 'fanui',\n  daisy: 'eirien',\n  dandelion: 'orchen',\n  day: 'or-',\n  deep: 'nûr-',\n  dew: 'mîdh-',\n  divine: 'ballean',\n  dragons: 'amlug',\n  dread: 'gost',\n  dream: 'ôl',\n  dusk: 'moth-',\n  dusty: 'astren*',\n  eagles: 'thoron',\n  earth: '-amar',\n  elderberry: 'gwennod',\n  elephants: 'annabon',\n  elm: 'alaf',\n  evening: 'aduial',\n  fangs: 'caraxë',\n  fate: 'amarth',\n  fell: 'delu', // deadly\n  fire: 'nor-', //'naur-',\n  firmament: 'menel*',\n  fish: 'lhim',\n  foe: '-coth',\n  forest: 'taur*',\n  fortress: 'garth-',\n  fortunate: 'alwed',\n  freedom: 'leinas',\n  friend: '-mellon',\n  frost: 'nais',\n  giant: 'noroth',\n  glen: 'imlad', // dell\n  gloom: 'dim-',\n  gold: 'malt-',\n  golden: 'glóriel',\n  gray: 'thind-',\n  great: 'beleg-',\n  green: 'calen-',\n  harbor: 'hûb',\n  haven: '-lond*',\n  hill: '-amon', // tun\n  holy: 'aer',\n  honey: 'glî',\n  horns: 'rais',\n  horror: 'angoss-',\n  horses: 'roch',\n  ice: 'hel-',\n  iron: 'ang-',\n  isle: 'tol',\n  jewel: 'mîr',\n  journey: 'ledh-',\n  joy: 'glass-',\n  king: 'aran',\n  kingdom: 'arnad',\n  lake: 'ael',\n  land: '-dor-',\n  large: 'daer',\n  light: 'ea',\n  lily: 'loth',\n  lofty: 'raud',\n  lonely: 'air*',\n  lord: '-gon',\n  love: 'mîl',\n  magic: 'lûth',\n  mantle: 'col-',\n  midnight: 'fuin',\n  mist: 'hith-',\n  moon: 'ithil',\n  morning: '-aur',\n  mound: 'coro-',\n  mountain: 'ered',\n  music: '-linnas',\n  narrow: 'agor-',\n  needle: 'aeglin',\n  night: 'dû',\n  nightingales: 'dúlin*',\n  noon: 'nedhor',\n  oak: 'doron*',\n  orange: 'culuin',\n  pale: 'nim-',\n  path: 'lant',\n  peak: 'aegnas', // see point, needle\n  peoples: 'li-',\n  pine: 'thon*',\n  place: 'sa-',\n  point: 'til',\n  pool: 'lîn',\n  poppy: 'lurloss-',\n  prison: '-band',\n  quick: 'lim',\n  rain: 'ross-',\n  rainbow: 'ninniach',\n  realm: '-arthor',\n  red: 'caran-',\n  region: 'gardh',\n  river: '-rant',\n  road: 'men',\n  rose: 'merin*',\n  sea: '-geaer', //'mer',\n  secret: 'dolen*',\n  shade: 'gwath',\n  shadow: '-lum', // 'gwath', //dûl',\n  sharp: 'crisg-',\n  ship: 'cair*',\n  silence: 'dhín-',\n  silver: 'celeb-',\n  skill: 'curu-',\n  sky: '-ell',\n  slave: 'mûl',\n  small: 'cidinn*',\n  smith: '-tan',\n  snakes: 'lŷg',\n  snow: 'loss-',\n  sorrow: 'nîr',\n  spark: 'tinu-',\n  sparkling: 'míriel',\n  speech: 'paeth*',\n  spirit: 'fëa-',\n  splendid: 'claur-',\n  spring: 'ethuil',\n  spruce: 'ecthelorn*',\n  starlight: 'gilith',\n  stars: '-ngil',\n  stream: 'sîr',\n  stronghold: '-gothrond',\n  summer: 'llairë', //aer',\n  sun: 'anor*',\n  swans: 'alqua',\n  sweet: 'laich',\n  tall: \"ta-\", //nd-\",\n  tears: 'nirnaeth',\n  thought: 'nauth*',\n  tin: '-ladog',\n  tiny: 'tithen*',\n  tomorrow: 'abor',\n  tower: 'barad-',\n  treasure: 'maen*',\n  tyranny: 'thang',\n  valley: 'nan', // vale; see glen(-imlad)\n  veil: 'fân',\n  water: 'nin',\n  wax: 'lîg',\n  white: 'nique-',\n  wide: '-land',\n  willow: 'tathar*',\n  wind: 'gwae',\n  wine: 'miru',\n  winter: 'rhîw',\n  holly: 'ereg*',\n  garden: 'sant',\n  queen: 'bereth',\n  prince: 'ernil',\n  princess: 'brethil',\n  cloud: 'fan',\n  hounds: 'hû',\n  wolves: 'draug',\n  embers: 'iûl',\n  soot: 'ast',\n  ash: 'lith',\n  salt: 'sing',\n  void: 'gaw',\n  steam: 'tuim',\n  magma: 'orodu',\n  radiance: 'aglar',\n  // hail: 'ai',\n}\n\nconst replacements = {\n  'uwen': 'uviel',\n  'db': 'v',\n  'dc': 'g',\n  'nc': 'g',\n  'uie': 'uvie',\n  'airt': 'írd',\n  // 'aire': 'ere',\n  'ir': 'er',\n  'ln': 'len',\n  'ean': 'ónë',\n  'fn': 'van',\n  'rngil': 'rgil*',\n  'nn': 'n',\n  'egdor': 'egion',\n  'ororo': 'oro',\n}\nconst dashBeginnings: { [begin: string]: string } = { 'ng': 'a' }\n\nconst dashEndings: { [end: string]: string } = {\n  'ss': 'ssë',\n  'n': 'iath',\n  'lt': 'hen',\n  'll': 'l',\n  // 'oss': ''\n}\n\nconst starEndings: { [end: string]: string } = {\n  'er': 'essëa',\n  // 'er': 'essëa',\n  'r': 'iand',\n  'on': 'ion',\n  'il': 'ion',\n  // 'eg': 'ion',\n  'd': 'ë',\n}\n\nconst simpleEnhance = (tx: string) => {\n  tx = tx.split(' ').map(word => {\n    if (word.startsWith('-')) {\n      word = word.substring(1, word.length)\n      Object.keys(dashBeginnings).forEach(beginning => {\n        if (word.startsWith(beginning)) {\n          word = dashBeginnings[beginning] + word\n        }\n      })\n    }\n    if (word.endsWith('-')) {\n      word = word.substring(0, word.length - 1)\n      Object.keys(dashEndings).forEach(ending => {\n        if (word.endsWith(ending)) {\n          word += dashEndings[ending]\n        }\n      })\n    }\n\n    Object.entries(replacements).forEach(([search, replace]) => {\n      word = word.replaceAll(search, replace)\n    })\n\n    if (word.endsWith('*')) {\n      word = word.replaceAll('*', '')\n      Object.keys(starEndings).forEach(ending => {\n        if (word.endsWith(ending)) {\n          word += starEndings[ending]\n        }\n      })\n    }\n\n    // hmmm\n    word.replaceAll('*', '')\n    return word\n  }).join(' ')\n  return tx\n}\n\nconst Aelvic = new Dictionary(\"Aelvic (Neo-Sindarin)\",  Sindarin,\n  (tx) => simpleEnhance(tx))\n  // (tx) => tx)\n  //enhance(tx))\nexport { Aelvic }\n","// todo thinking Common could be interesting\n// idea is to fill in the dictionary but choose \n// poetic wording where possible\n// (quality here depends on better solutions\n// for syntax / ordering / particles / etc too)\n\n// actually just doing old english now but it's still metal\n\nimport { Dictionary, Vocabulary } from \"../../ecosphere/Dictionary\"\n\n\nconst westronVocab: Vocabulary = {\n  abundant: 'over',\n  afternoon: 'afternoon',\n  apple: 'æppel', // apple',\n  autumn: 'hærfest', \n  awe: 'awe',\n  battle: 'feoht',\n  bay: 'berie', //'-iâ',\n  bears: 'bear',\n  beautiful: 'beautiful',\n  bell: 'cnyll', //bell',\n  birch: 'birce',\n  birds: 'bridd',\n  black: 'blæc', //black',\n  blood: 'blood',\n  blue: 'blue',\n  bold: 'bold',\n  bread: 'bread',\n  candle: 'candle',\n  cherry: 'cirse', // cherry',\n  citadel: 'city',\n  claws: 'claws',\n  cloudy: 'clouded',\n  daisy: 'woundwort',\n  dandelion: 'puffball',\n  day: 'day',\n  deep: 'deep',\n  dew: 'deaw',\n  divine: 'godbearn',\n  dragons: 'fýrdraca', //wyrm //sky-serpent',\n  dread: 'bróga', //ghastly',\n  dream: 'dréam',\n  dusk: 'eventide',\n  dusty: 'dirty',\n\n  eagles: 'earn',\n  earth: 'werdle',\n  elderberry: 'elder',\n  elephants: 'oliphaunt',\n  elm: 'wahu',\n\n  evening: 'evendim',\n  fangs: 'fon',\n  fate: 'fate',\n  fell: 'fell', // deadly\n  fire: 'fier', //bæl', //fire', //'naur-',\n  firmament: 'heuene-Rof', //heavens',\n  fish: 'fisc',\n  foe: '-feond', //enemy',\n  forest: 'woods',\n  fortress: 'hold',\n  fortunate: 'lucky',\n  freedom: 'freedom',\n  friend: 'friend',\n  frost: 'rime',\n  giant: 'ēoten', // colossus',\n  glen: 'dell', // dell\n  gloom: 'murk',\n  gold: 'gold',\n  golden: 'gylden',\n  gray: 'græ',\n  great: 'ærgod', // great',\n  green: 'grene',\n\n  harbor: 'hyth',\n  haven: '-port',\n  hill: 'dun', // tun\n  holy: 'hāliġ',\n  honey: 'huniġ',\n  horns: 'horns',\n  horror: 'fyrhtu',\n  horses: 'eoh',\n\n  ice: 'īs',\n  iron: 'ísen',\n  isle: 'īegland', //island',\n\n  jewel: 'siġel',\n  journey: 'faru',\n  joy: 'ġefēa', //joy',\n  king: 'kenning',\n  kingdom: 'kenningdom',\n  lake: 'lac',\n  land: 'lond', //eäth',\n  large: 'rum',\n  light: 'leoht',\n  lily: 'lilie',\n  lofty: 'lofty',\n  lonely: 'syndrig',\n\n  lord: '-lord',\n\n  love: 'love',\n  magic: 'rún', //charm',\n  mantle: 'hacele',\n  midnight: 'midnyght',\n  mist: 'mistur',\n  moon: 'mone', // 'mōna',\n  morning: '-morn',\n  mound: 'tel-',\n  mountain: 'munt-',\n  music: 'dréamcræft', //-song',\n\n  narrow: 'narrow-',\n  needle: 'needle',\n  night: 'nyght',\n  nightingales: 'stærlinc', //thrush',\n  noon: 'noon',\n  oak: 'eik',\n  orange: 'orenge',\n  pale: 'wann-',\n  path: 'brimlad',\n  peak: 'peak', // see point, needle\n  peoples: '-folk',\n\n  pine: 'pintreow',\n  place: '-stead',//bídung', //place',\n  point: '-gad',\n  pool: '-clæne', //mere',\n  poppy: 'celandine',\n  prison: 'gaol', // 'carcern'\n\n  quick: 'fast',\n  rain: 'rainy',\n  rainbow: 'rainbow',\n\n  realm: '-ríce', //ward',\n  red: 'reod-',\n  region: '-guard',\n  river: '-ex',\n  road: 'road',\n  rose: 'róse',\n\n  sea: 'estmere', //'mer',\n  secret: 'secret',\n  shade: 'sceadu',\n  shadow: 'sceaduwe', //shadow', // 'gwath', //dûl',\n  sharp: 'sharp',\n  ship: 'scip',\n  silence: 'stige',\n  silver: 'seolfor',\n  skill: 'skill',\n  sky: 'sky',\n  slave: 'thrall',\n  small: 'smæl',\n  smith: '-wyrhta',\n  snakes: 'serpent',\n  snow: 'snow-',\n  sorrow: 'sorrow',\n  spark: 'ysl', //spark-',\n  sparkling: 'sparkling',\n  speech: 'speech*',\n  spirit: 'arodnes-',\n  splendid: 'splendid-',\n  spring: 'spring',\n  spruce: 'sæppe',\n  starlight: 'starlight',\n  stars: '-steorra', //star',\n  stream: 'river',\n  stronghold: '-fæsten',\n  summer: 'sumor', //aer',\n  sun: 'sun*',\n  swans: 'swan',\n  sweet: 'sweet',\n\n  tall: \"brant-\", //nd-\",\n  tears: 'tears',\n  thought: 'thought*',\n  tin: '-zin',\n  tiny: 'tyne*',\n  tomorrow: 'morrow',\n  tower: 'tower-',\n  treasure: 'prize',\n  tyranny: 'mánbealu',\n\n  valley: 'dæl', //vale',\n  veil: 'veil',\n  water: 'water',\n  wax: 'wax',\n  white: 'albe', // hwit\n  wide: 'wide',\n  willow: 'willow',\n  wind: 'wind',\n  wine: '-win',\n  winter: 'winter',\n  holly: 'holen-',\n  garden: 'garden',\n  queen: 'queen',\n  prince: 'prince',\n  princess: 'princess',\n  cloud: 'walkne', //cloud',\n  hounds: 'hund',\n  wolves: 'wulf',\n  embers: 'ysl', //embers',\n  soot: 'soot',\n  ash: 'ash',\n  salt: 'salt',\n  void: 'space',\n  steam: 'stēam',\n  magma: 'lava',\n  radiance: 'glæm', //brilliance',\n\n  '-less': 'no-',\n  'ever-': 'even-', // 'ever-dusk' --> evendim\n  'at-': 'upon-',\n\n  // fem/masculine suffices\n  '-person': '-person',\n  '-man': '-man',\n  '-son': '-ing',\n\n  '-woman': '-wiman',\n  '-maid': '-mæden', //maid',\n  '-daughter': '-dohtor',\n  \n\n  'mountain-chain': 'beorgstede',\n\n\n}\n\nconst replacements: { [key: string]: string } = {\n  'lenlond': 'llin',\n}\n\nconst Westron = new Dictionary('Common', westronVocab, (input: string) => {\n  Object.keys(replacements).forEach(key => {\n    if (input.includes(key)) {\n      input = input.replaceAll(key, replacements[key])\n    }\n  })\n  return input\n})\n\nexport default Westron\n","import { boundMethod } from \"autobind-decorator\";\nimport { Concept, theConcepts } from \"../ecosphere/Dictionary\";\nimport Model from \"../ecosphere/Model\";\nimport { createMoiety, createPerson, Memory, Person } from \"../ecosphere/types\";\nimport { capitalize } from \"../ecosphere/utils/capitalize\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { choose, sample } from \"../ecosphere/utils/sample\";\nimport Khuzdul from \"./Languages/Khuzdul\";\nimport { Aelvic } from \"./Languages/Sindarin\";\nimport Westron from \"./Languages/Westron\";\n\nconst generatePerson = () => {\n  const moiety = createMoiety('A Social Group')\n  const gender = sample(['male', 'female'])\n  let suffices: Concept[] = gender === 'male'\n    ? ['-person', '-man', '-son']\n    : ['-woman', '-maid', '-daughter']\n  let concepts: Concept[] = choose(randomInteger(1,2), theConcepts)\n  let nameElements: Concept[] = [\n    ...concepts,\n    ...(randomInteger(0, 12) > 9 ? [sample(suffices)] : []),\n  ]\n  \n  let dicts = [ Aelvic, Khuzdul, Westron ]\n  let name = sample(dicts).translate(...nameElements).trim()\n  // const firstName = sample(gender === 'male' ? [ 'Sam', 'Eric', 'Ted', 'Jones' ] : ['Sarah', 'Edna', 'Terri', 'Rosa'])\n  // const lastName = sample(['Smith', 'Lever', 'Token', 'Switch', 'Agent', 'Op'])\n  const significance = (concepts.map(n => capitalize(n)).reverse().join('-')).trim(); //.replaceAll('-', ''));\n\n  const person = createPerson(\n    (name === significance\n      ? name\n      : name + ' (' +  significance + ')'),\n    moiety\n    )\n  return { person, nameMeaning: significance }\n}\nclass Citizen extends Model {\n  subject: Person\n  nameMeaning: string\n\n  constructor() {\n    super('Citizen');\n\n    const { person, nameMeaning } = generatePerson() \n    this.subject = person\n    this.nameMeaning = nameMeaning\n\n    // this.people.create('Friends')\n    // this.people.create('Rivals')\n    // this.people.create('Peers')\n    // this.people.create('Family')\n\n    // this.resources.create('Happiness')\n    // this.resources.create('Money')\n    // this.resources.create('Money')\n\n    this.actions.create({ name: 'New', act: () => {\n      const { person, nameMeaning } = generatePerson() \n      this.subject = person //generatePerson() \n      this.nameMeaning = nameMeaning\n    }})\n\n    this.evolve(this.evolution)\n  }\n\n  @boundMethod\n  evolution() {}\n\n  // metrics = { age: () => this.subject.age, }\n  notes = {\n    // 'current date': () => this.date.description,\n    '*name': () => this.subject.name,\n    // [this.subject.name]: () => this.nameMeaning,\n    'agility': () => this.subject.body.agility,\n    'beauty': () => this.subject.soul.beauty,\n    'charm': () => this.subject.soul.charm,\n    'cunning': () => this.subject.body.cunning,\n    'depth': () => this.subject.mind.depth,\n    'education': () => this.subject.mind.education,\n    'empathy': () => this.subject.soul.empathy,\n    'guile': () => this.subject.body.guile,\n    'insight': () => this.subject.mind.insight,\n    'integrity': () => this.subject.soul.integrity,\n    'knowledge': () => this.subject.kind.knowledge,\n    'power': () => this.subject.kind.power,\n    'personality': () => this.subject.mind.personality,\n    'resolve': () => this.subject.soul.resolve,\n    'sophistication': () => this.subject.kind.sophistication,\n    'spirit': () => this.subject.body.spirit,\n    'strength': () => this.subject.body.strength,\n    'tech': () => this.subject.kind.tech,\n    'valor': () => this.subject.mind.valor,\n    'wealth': () => this.subject.kind.wealth,\n    'wit': () => this.subject.soul.wit,\n    // 'bio': () => this.subject.memory.list().map(this.describeMemory).join('... '),\n  }\n\n  describeMemory(memory: Memory) {\n    return `I remember ${memory.description}`\n  }\n\n  // @boundMethod\n  get date() {\n    let time = this.ticks || 0\n    let secondInterval = 0.1;\n    let seconds = Math.floor(time / secondInterval);\n\n    let second = seconds%60\n    let minute = Math.floor(seconds/60)%60\n    let hour = Math.floor(seconds/(60*60))%24\n    let day = Math.floor(seconds / (60 * 60 * 24));\n    // let week = Math.floor(seconds / (60 * 60 * 24 * 7));\n    // let month = Math.floor(seconds / (60 * 60 * 24 * 7 * 4));\n    // let year = Math.floor(seconds / (60 * 60 * 24 * 365));\n\n    let dayOfWeek = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'][day % 7];\n\n    return {\n      dayOfWeek,\n      description: `${dayOfWeek} ${String(hour).padStart(2,'0')}:${String(minute).padStart(2,'0')}:${String(second).padStart(2,'0')}`\n    }\n  }\n}\n\nexport default new Citizen();\n","export type Tiles = string[][]\n\nconst first = <T>(arr: T[], pred: (x: T) => boolean): T => {\n  return arr.filter(pred)[0]\n  // return arr[0]\n}\n\nexport class Board {\n  private tiles: Tiles = []\n\n  view({ overlays }: { overlays: Board[] } = { overlays: []}): Tiles {\n    let viewTiles: Tiles = []\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        viewTiles[y] = viewTiles[y] || []\n        let overlay = overlays.length > 0 && first(overlays, o => {\n          let v = o.at(x,y); return v !== '' && v !== undefined\n          // return o.at(x,y) !== undefined\n        })\n        viewTiles[y][x] = (overlay && overlay.at(x,y))\n                       || this.at(x,y)\n                       || '_'\n      }\n    }\n    return viewTiles;\n  }\n\n  constructor(public width: number, public height: number) {}\n\n  // clear = (x0: string, y0: number, width: number, height: number) => {}\n\n  write = (character: string, x0: number, y0: number) => {\n    let x = x0;\n    let y = y0;\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = character;\n  }\n\n  erase(x: number, y: number) {\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = ''\n    // throw new Error(\"Method not implemented.\")\n  }\n  \n  drawBox = (char: string, x0: number, y0: number, width: number, height: number, filled?: boolean) => {\n    let x1 = x0 + width; let y1 = y0 + height;\n    for (let x = x0; x <= x1; x++) {\n      for (let y = y0; y <= y1; y++) {\n        if (x === x0 || y === y0 || x === x1 || y === y1) {\n          this.write(char, x, y)\n        } else {\n          if (filled) {\n            this.write(char, x, y)\n          }\n        }\n      }\n    }\n  }\n\n  // get width() { return this.tiles && this.tiles[0] && this.tiles[0].length }\n  // get height() { return this.tiles.length }\n\n  at(x: number, y: number) { //}, defaultValue: string = '') {\n    // if (x >= 0 && x <= this.width && y >= 0 && y <= this.height) {\n      const x0 = x % this.width\n      const y0 = y % this.height\n      if (this.tiles[y0]) {\n        return this.tiles[y0][x0]\n      }\n    // } \n    // return defaultValue\n  }\n\n\n  each(fn: (x: number, y: number, value: string) => void) {\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        fn(x,y,this.at(x,y) || '')\n      }\n    }\n  }\n\n  neighbors(x: number, y: number): string[] {\n    const at = ([x, y]: [ number, number ]) => this.at(x,y) || '' // || defaultValue\n    // let neighbors: string[] = [\n    //   at(x-1,y-1), at(x,y-1), at(x+1,y-1),\n    //   // at(x-1,y)  , at(x,y),   at(x+1,y),\n    //   at(x-1,y)  ,   at(x+1,y),\n    //   at(x-1,y+1), at(x,y+1), at(x+1,y+1),\n    // ]\n    return Board.neighborPositions(x,y).map(at) //neighbors\n  }\n\n  static neighborPositions(x: number, y: number): [number, number][] {\n    return [\n      [x-1,y-1], [x,y-1], [x+1,y-1],\n      [x-1,y  ], [x+1,y],\n      [x-1,y+1], [x,y+1], [x+1,y+1],\n    ]\n  }\n\n  step(eachCell: (val: string, neighbors: string[], position: [number, number]) => string, defaultValue: string = ''): Tiles {\n    // const ignored = ['*']\n    // console.log(\"Board.step -- start\")\n    let newTiles: Tiles = []\n    this.tiles = this.tiles || []\n    const at = (x: number, y: number) => this.at(x,y) || defaultValue\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        let currentValue = at(x,y)\n        if (currentValue !== undefined) {\n          // if (ignored.includes(currentValue)) { continue }\n          let neighbors: string[] = this.neighbors(x,y)\n          // [\n          //   at(x-1,y-1), at(x,y-1), at(x+1,y-1),\n          //   at(x-1,y)  , at(x,y),   at(x+1,y),\n          //   at(x-1,y+1), at(x,y+1), at(x+1,y+1),\n          // ]\n          const newCell = eachCell(currentValue, neighbors, [x,y])\n          newTiles[y] = newTiles[y] || []\n          newTiles[y][x] = newCell\n        }\n      }\n    }\n    this.tiles = newTiles\n    return newTiles\n  }\n}\n","export const clamp = (value: number, min: number, max: number) =>\n  Math.min(Math.max(value, min),max)\n","export const distance = (a: [number, number], b: [number, number]) => {\n  let dx = Math.abs(a[0] - b[0]);\n  let dy = Math.abs(a[1] - b[1]);\n  return Math.sqrt(dx * dx + dy * dy)\n}\n","import { NameSequence } from \"../collections/Sequence\";\nimport { Board } from \"./Board\";\nimport { any } from \"./utils/any\";\nimport { clamp } from \"./utils/clamp\";\nimport { distance } from \"./utils/distance\";\nimport { randomInteger } from \"./utils/randomInteger\";\nimport { sample } from \"./utils/sample\";\nimport { times } from \"./utils/times\";\nexport class Heightmap {\n  map: Board = new Board(this.width, this.height);\n  seaLevel = 5\n\n  constructor(public width: number, public height: number) { }\n\n  at(x: number, y: number): number { return parseInt(this.map.at(x,y) || '0', 10) }\n\n  apply(fn: (val: number, neighbors: number[], average: number, position: [number, number]) => number[], rate: number = 1000) {\n    this.map.step((val: string, neighbors: string[], position: [number, number]) => {\n      if (randomInteger(0, 1000) <= rate) {\n        let value = parseInt(val || '0', 10);\n        let neighborValues = neighbors.map(neighbor => parseInt(neighbor || '0', 10));\n        let neighborSum = neighborValues.reduce((a, b) => a + b, 0)\n        let localAverage = Math.floor(\n          (neighborSum + value) / (neighbors.length + 1)\n        );\n        let average = localAverage;\n        let values = fn(value, neighborValues, average, position);\n        let newVal = clamp(sample(values), 0, 9);\n        return String(newVal);\n      } else { return val; }\n    });\n  }\n\n  smooth = () => {\n    this.apply((value, ns, average) => {\n      // cleanup coastlines\n      let above = ns.filter(n => n >= this.seaLevel).length;\n      if (above >= 5 && value < this.seaLevel) { return [value + 1] }\n      else if (above < 4 && value >= this.seaLevel) { return [value - 1] }\n      if (value < average - 1) { return [ value, value + 1, Math.floor((value + average) / 2) ]}\n      if (value > average + 1) { return [ value, value - 1, Math.floor((value + average) / 2) ]}\n      return [ value, ]\n    })\n  };\n\n\n  flow = () => {\n    this.apply((value, ns, average) => {\n      if (value >= average) { return [value] }\n      let immediate = [ns[1], ns[3], ns[5], ns[7]]\n      let max = Math.max(...immediate)\n      let above = ns.filter(n => n >= this.seaLevel).length;\n      if (above >= 7 && value < this.seaLevel) { return [this.seaLevel, this.seaLevel + 1] }\n      if (above === 0) { return [value, value+1, value+2] }\n      return [\n        // max + 2,\n        // max + 1,\n        // max,\n        // value,\n        max,\n        max - 1,\n        // max - 2,\n        // max - 5,\n        // value + 1,\n        // Math.min(...ns)+1,\n        // value - 1,\n        // ...ns.filter(n => n >= this.groundLevel)\n      ]\n    });\n  };\n\n  erode = (rate = 1000) => {\n    this.apply((value, ns, average) => {\n      if (value < average) { return [value] }\n      return [\n        value,\n        // value - 1,\n        // value - 2,\n        // average - 1,\n        // Math.floor((value + average) / 2),\n        Math.min(...ns)\n        // value-1,\n        // Math.ceil(value/2),\n        // // value, average, Math.min(...ns),\n        // Math.round((value+average)/2)\n      ]\n    }, rate)\n  };\n\n  extrude = (positions: [number, number][]) => {\n    positions.forEach(pos => {\n      let h = parseInt(this.map.at(...pos) || '0', 10)\n      let val = clamp(h+randomInteger(-1,7),0,9);\n      if (pos) { this.map.write(String(val), ...pos); }\n    })\n  };\n\n  intrude = (positions: [number, number][], depth: number = 1) => {\n    positions.forEach(pos => {\n      let h = parseInt(this.map.at(...pos) || '9', 10)\n      let val = clamp(h-randomInteger(-1,7),0,9);\n      if (pos) { this.map.write(String(val), ...pos); }\n    })\n  };\n\n  bombard = (intensity: number = 1) => {\n    let radius = randomInteger(1,4+randomInteger(0,intensity));\n    let impactSite: [number, number] = [ randomInteger(1, this.width-1), randomInteger(1, this.height-1) ]\n    const distanceToImpact = (pos: [number, number]) => distance(pos, impactSite)\n    let craterPositions: [number, number][] = []\n    let craterEdge: [number, number][] = []\n    for (let x=0; x < this.width; x++) {\n      for(let y = 0; y < this.height; y++) {\n        let d = Math.round(distanceToImpact([x,y]))\n        if (Math.abs(d - radius) < 1) {\n          craterEdge.push([x,y])\n        } else if (d < radius) {\n          craterPositions.push([x,y])\n        }\n      }\n    }\n    this.intrude(craterPositions);\n    this.extrude(craterEdge);\n  }\n\n  orogeny = (mountains: [number, number][]) => {\n    const d100 = randomInteger(0,100)\n    if (d100 < 16) this.extrude(mountains)\n    times(4, this.flow)\n  }\n\n  geoform = (hades: boolean, mountains: [number, number][]) => {\n    const d100 = randomInteger(0,100)\n    if (hades) {\n      this.orogeny(mountains)\n      this.erode()\n      if (d100 < 32) { this.bombard(36); }\n    } else {\n      this.smooth()\n      // if (d100 < 24) this.smooth()\n      if (d100 < 16) times(2, () => this.bombard(7) )\n      this.flow()\n      // this.erode(4)\n    }\n  };\n\n  componentNames = new NameSequence()\n\n  components(\n    consider: (value: number, ns: number[]) => boolean,\n  ): { [component: string]: [number, number][] } {\n    let componentMap: { [component: string]: [number, number][] } = {}\n    this.map.each((x, y, val) => {\n      let ns = this.map.neighbors(x,y).map(n => parseInt(n, 10))\n      // ns.splice(5,1)\n      // apply\n      if (!!consider(parseInt(val, 10), ns)) {\n        // do we belong to an existing region? (adjacency)\n        let existingComponentNames = Object.keys(componentMap).filter(component => {\n          // are any of the points in r adjacent to this one?\n          let adjacent = any(componentMap[component], ([x1,y1]) => {\n            return distance([x,y], [x1,y1]) <= Math.sqrt(2)\n          })\n          return adjacent\n        })\n        if (existingComponentNames.length > 0) {\n          let firstAdjacentComponentName = existingComponentNames[0]\n          componentMap[firstAdjacentComponentName].push([x,y])\n          if (existingComponentNames.length > 1) {\n            // merge all regions...\n            existingComponentNames.forEach(component => {\n              // delete that region + add to first region\n              if (component !== firstAdjacentComponentName) {\n                componentMap[firstAdjacentComponentName] = [\n                  ...componentMap[firstAdjacentComponentName],\n                  ...componentMap[component],\n                ]\n                delete componentMap[component]\n              }\n            })\n          }\n        } else {\n          // invent a new region\n          let component = this.componentNames.next;\n          componentMap[component] = [[x,y]]\n        }\n      }\n    })\n    return componentMap\n  }\n\n  regions = () => this.components(val => val >= this.seaLevel)\n  waterways = () => this.components(val => val < this.seaLevel)\n  ranges = () => this.components(val => val >= 8)\n\n  // okay so literal inverse of this would be valleys?\n  // really -- want to confirm the entire frontier is above ground level..\n  // otherwise a beach or mesa or something ...\n  valleys = () => {\n    let level = this.seaLevel\n    return this.components((val,ns) => (val === level || val === level + 1 || val === level + 2)\n                                    && ((ns.reduce((a,b) => a + b, 0) / ns.length) >= level)\n    )\n  }\n\n  // interesting, bays are similar to valleys -- but inverse, we *don't* want enclosed areas (lakes)\n  bays = () => {\n    let level = 4 //this.seaLevel - 1\n    return this.components(v => v === level || v === level - 1)\n    //(val) => val === level || val === level - 1)) // || val === level - 2))\n                                    // && ((ns.reduce((a,b) => a + b, 0) / ns.length) <= level + 1)\n    // )\n  }\n                                           \n // could also detect trenches?? poetically 'deeps'?\n}\n","export const any = <T>(list: Array<T>, pred: (value: T) => boolean) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i])) {\n      return true\n    }\n  }\n  return false\n}\n\nexport const all = <T>(list: Array<T>, pred: (value: T) => boolean) => {\n  for (let i = 0; i < list.length; i++) {\n    if (!pred(list[i])) {\n      return false\n    }\n  }\n  return true\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { EvolvingStocks } from \"../ecosphere/types\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { construct } from \"../ecosphere/utils/replicate\";\nimport { sample } from \"../ecosphere/utils/sample\";\nimport { Heightmap } from \"../ecosphere/Heightmap\";\n// import { MarkovGenerator } from \"../ecosphere/utils/MarkovGenerator\";\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\n// import cityNames from '!!raw-loader!./data/cities.txt';\n// eslint-disable-next-line import/no-webpack-loader-syntax\n// import seaNames from '!!raw-loader!./data/seas.txt';\n// eslint-disable-next-line import/no-webpack-loader-syntax\n// import rangeNames from '!!raw-loader!./data/ranges.txt';\n\nimport { DictionarySequence } from \"../ecosphere/Dictionary\";\nimport { Aelvic } from \"./Languages/Sindarin\";\n\n// const markov = (lines: string) => new MarkovSequence(lines.split(\"\\n\"))\nclass Linguist {\n  static names = {\n    places: new DictionarySequence(Aelvic, true, 'land'), //'realm', 'haven', 'place'),\n    regions: new DictionarySequence(Aelvic, false, 'isle'),\n    waterways: new DictionarySequence(Aelvic, false, 'sea', 'lake', 'water', 'pool'),\n    ranges: new DictionarySequence(Aelvic, true, 'mountain-chain'),\n    mountains:  new DictionarySequence(Aelvic, false, 'mountain'),\n    // peaks 'peak', 'tower'),\n    // hills: 'hill', 'mound' ...\n    valleys: new DictionarySequence(Aelvic, false, 'valley'),\n    bays: new DictionarySequence(Aelvic, false, 'bay')\n  }\n \n  // static describeWaterwaySize(area: number) {\n  //   if (area > 200) { return 'Ocean' }\n  //   if (area > 100) { return 'Sea' }\n  //   if (area > 50) { return 'Lake' }\n  //   if (area > 25) { return 'Pool' }\n  //   return 'Pond'\n  // }\n\n  // static describeRegionSize(area: number) {\n  //   if (area > 400) { return 'Supercontinent' }\n  //   if (area > 200) { return 'Continent' }\n  //   if (area > 100) { return 'Island' }\n  //   if (area > 50) { return 'Isle' }\n  //   return 'Point'\n  // }\n\n  // static describeRangeSize(area: number) {\n  //   if (area > 8) { return 'Range' }\n  //   if (area > 3) { return 'Mountains' }\n  //   return 'Peak'\n  // }\n\n  // cache names...\n  private waterwayNames: { [rawWaterbodyName: string]: string } = {}\n  private regionNames:   { [rawRegionName: string]: string } = {}\n  private rangeNames:    { [rawRangeName: string]: string } = {}\n  private valleyNames:   { [rawValleyName: string]: string } = {}\n  private bayNames:      { [rawBayName: string]: string } = {}\n\n  nameWaterway(rawWaterbodyName: string, _area: number) {\n    if (this.waterwayNames[rawWaterbodyName] === undefined) {\n      this.waterwayNames[rawWaterbodyName] = Linguist.names.waterways.next\n    }\n    return this.waterwayNames[rawWaterbodyName]\n  }\n\n  nameRegion(rawRegionName: string, _area: number) {\n    if (this.regionNames[rawRegionName] === undefined) {\n      this.regionNames[rawRegionName] = sample([\n        Linguist.names.regions,\n        Linguist.names.places\n      ]).next\n    }\n    return this.regionNames[rawRegionName]\n  }\n\n  nameRange(rawRangeName: string, _area: number): string | undefined {\n    if (this.rangeNames[rawRangeName] === undefined) {\n      this.rangeNames[rawRangeName] = sample([\n        Linguist.names.ranges,\n        Linguist.names.mountains\n      ]).next\n    }\n    return this.rangeNames[rawRangeName]\n  }\n\n  nameValley(rawValleyName: string, _area: number): string | undefined {\n    if (this.valleyNames[rawValleyName] === undefined) {\n      this.valleyNames[rawValleyName] = Linguist.names.valleys.next\n    }\n    return this.valleyNames[rawValleyName]\n  }\n\n  nameBay(rawBayName: string, area: number): string | undefined {\n    // throw new Error(\"Method not implemented.\");\n    if (this.bayNames[rawBayName] === undefined) {\n      this.bayNames[rawBayName] = Linguist.names.bays.next\n    }\n    return this.bayNames[rawBayName]\n  }\n}\nclass Cartographer {\n  private linguist = new Linguist()\n  private _waterways: { [rawWaterbodyName: string]: [number, number][] } = {}\n  private _regions: { [rawRegionName: string]: [number, number][] } = {}\n  private _ranges: { [rawRangeName: string]: [number, number][] } = {}\n  private _valleys: { [rawValleyName: string]: [number, number][] } = {}\n  private _bays: { [rawBayName: string]: [number, number][] } = {}\n\n  constructor(private world: WorldMap) {}\n\n  reset() {\n    this._regions = {}\n    this._waterways = {}\n    this._ranges = {}\n    this._valleys = {}\n    this._bays = {}\n  }\n\n  // cache heightmap regions + names..\n  get regions() {\n    if (Object.keys(this._regions).length === 0) {\n      this._regions = this.world.elevation.regions()\n    }\n    return this._regions\n  }\n\n  identifyRegion(x: number, y: number): string | undefined {\n    const rawRegionName = Object.keys(this.regions).find(region =>\n      this.regions[region].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rawRegionName) {\n      let area = this.regions[rawRegionName].length\n      return this.linguist.nameRegion(rawRegionName, area)\n    }\n  }\n\n  get waterways() {\n    if (Object.keys(this._waterways).length === 0) {\n      this._waterways = this.world.elevation.waterways()\n    }\n    return this._waterways\n  }\n\n  identifyWaterway(x: number, y: number): string | undefined {\n    const rawWaterbodyName = Object.keys(this.waterways).find(waterway =>\n      this.waterways[waterway].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rawWaterbodyName) {\n      let area = this.waterways[rawWaterbodyName].length\n      return this.linguist.nameWaterway(rawWaterbodyName, area)\n    }\n  }\n\n  identifyRegionOrWaterway(x: number, y: number): string | undefined {\n    return this.identifyRegion(x,y)\n        || this.identifyWaterway(x,y)\n        || '(err: unknown region/waterway)'\n  }\n\n  get ranges() {\n    if (Object.keys(this._ranges).length === 0) {\n      this._ranges = this.world.elevation.ranges()\n    }\n    return this._ranges\n  }\n\n  identifyRange(x: number, y: number): string | undefined {\n    const rangeName = Object.keys(this.ranges).find(range =>\n      this.ranges[range].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (rangeName) {\n      const area = this.ranges[rangeName].length\n      return this.linguist.nameRange(rangeName, area)\n    }\n  }\n\n  get valleys() {\n    if (Object.keys(this._valleys).length === 0) {\n      this._valleys = this.world.elevation.valleys()\n    }\n    return this._valleys\n  }\n\n  identifyValley(x: number, y: number): string | undefined {\n    const valleyName = Object.keys(this.valleys).find(valley =>\n      this.valleys[valley].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (valleyName) {\n      const area = this.valleys[valleyName].length\n      return this.linguist.nameValley(valleyName, area)\n    }\n  }\n\n  get bays() {\n    if (Object.keys(this._bays).length === 0) {\n      this._bays = this.world.elevation.bays()\n      console.log(\"Found bays\", this._bays)\n    }\n    return this._bays\n  }\n\n  identifyBay(x: number, y: number): string | undefined {\n    const bayName = Object.keys(this.bays).find(bay =>\n      this.bays[bay].find(([x0,y0]: [number, number]) => x===x0 && y===y0)\n    ) || null\n\n    if (bayName) {\n      // console.log(\"Found a bay!\", { bayName })\n      const area = this.bays[bayName].length\n      return this.linguist.nameBay(bayName, area)\n    }\n  }\n\n  // identifyFeature -- mountain range / valley / bay / ...\n  identifyFeatures(x: number, y: number): string | undefined {\n    if (this.world.aeon === 'Hadean' || this.world.aeon === 'Archean') {\n      return '(Cartography requires calmer aeon...)'\n    }    \n    return this.identifyRange(x,y)\n        || this.identifyValley(x,y)\n        || this.identifyBay(x,y)\n        || ''\n  }\n\n\n  // identifyMountain, identifyRiver\n  // identify -- include all single point features (mountains, rivers, ...'arrows'?)\n}\n\ntype Aeon = 'Hadean' | 'Archean' | 'Proterozoic'\nclass WorldMap extends Model {\n  notes = { aeon: () => this.aeon }\n\n  get aeon(): Aeon {\n    let eon: Aeon = 'Hadean';\n    if (this.ticks >= this.mapgenTicks / 2) { eon = 'Archean' }\n    if (this.ticks > this.mapgenTicks) { eon = 'Proterozoic' }\n    return eon;\n  }\n  // aeons = ['Hadean', 'Archean', 'Proterozoic', 'Pharezoic']\n\n  // todo highlight/indicate..\n  // pushpins = { mountains: { 'Everwhite (Peak of Tears)': [10, 10] } }\n\n  width = 160 //20\n  height = 40 //35\n\n  private mapgenTicks = 40\n  elevation: Heightmap = new Heightmap(this.width, this.height)\n  private terrain: Board = new Board(this.width, this.height)\n  // private vegetation: Board = new Board(this.width, this.height)\n\n  private mountainSpots: [number, number][] = []\n  private areaPercent = Math.floor(this.area / 100);\n\n  get tiles() { return this.elevation.map.view({ overlays: [\n    // this.vegetation,\n    // this.terrain,\n    // this.elevation.binaryImage(),\n    // this.elevation.transform(),\n  ] }) }\n\n  @boundMethod\n  tileInspect(x: number, y: number) {\n    const elevation = this.elevation.at(x,y) || 0\n    const li = Math.round(3600 * ( elevation - 4 ) / 5280)\n    const elevationMessage = li === 0 ? 'At sea level' : `${Math.abs(li)} li ${li >= 0 ? 'above' : 'below'} sea level`\n    if (this.aeon === 'Hadean' || this.aeon === 'Archean') {\n      return elevationMessage\n    }\n\n    const region = this.cartographer.identifyRegionOrWaterway(x,y)\n    const features = this.cartographer.identifyFeatures(x,y)\n    return [ features, region, elevationMessage ].filter(Boolean).join(' / ')\n    \n    //`${features} / ${region} / ${elevationMessage}`\n  }\n\n  protected cartographer = new Cartographer(this)\n\n  tileColors = {\n    // terrain\n    // land\n    '.':  'lightgreen',\n\n    // sea\n    '~': 'midnightblue',\n    ',': 'navy',\n\n    // vegetation...\n    '\\'': 'darkgreen',\n\n    // elevation map\n    '0': 'black',\n    // '1': 'white',\n\n    // heightmap\n    '1': 'black',\n    '2': 'navy',\n    '3': 'midnightblue',\n    '4': 'deepskyblue',\n    '5': 'moccasin',\n    '6': 'forestgreen',\n    '7': 'darkgreen',\n    '8': 'darkslategray',\n    '9': 'gray',\n  }\n\n  // todo profiles? islands/continents/ocean/grasslands/mountains\n\n  constructor() {\n    super(\"Overworld\")\n    this.evolve(this.evolution)\n    this.actions.create({ name: 'Geoform', act: () => {\n      this.ticks = 0\n      this.cartographer.reset()\n      // this.cartographer._regions = {}\n      // this.cartographer._waterways = {}\n    }});\n    // this.reboot()\n  }\n\n  @boundMethod\n  randomPosition(): [number, number] {\n    let x = randomInteger(0, this.width)\n    let y = randomInteger(0, this.height)\n    return [x, y]\n  }\n\n  @boundMethod\n  randomPositionAlongLine(a: [number,number], b: [number,number], jitter: number = 3): [number, number] {\n    let [ax,ay] = a;\n    let [bx,by] = b;\n    let [dx,dy] = [ Math.abs(ax-bx), Math.abs(ay-by) ]\n    if (dx === 0) {\n      // it's vertical so... any points on this column\n      let y = randomInteger(0, this.height)\n      let x = ax\n      return [x, y]\n    } else if (dy === 0) {\n      let x = randomInteger(0, this.width)\n      let y = ay\n      return [x, y]\n    } else {\n      let slope = dy / dx; // rise over run\n      // so eg ay = slope * ax + b\n      //       -b = (slope * ax) - ay\n      //       b = -((slope * ax) - ay)\n      let y0 = (-((slope * ax) - ay))\n      let x = Math.floor(randomInteger(0, this.width))\n      let y = Math.floor((slope * x) + y0)\n      let j = jitter || 1;\n      return [x + randomInteger(-j,j),y + randomInteger(-j,j)]\n    }\n  }\n\n  genHeightmap(t: number) {\n    if (this.mountainSpots.length === 0) {\n      let targetSpotCount = Math.floor(10 * this.areaPercent)\n      let [a,b] = [ this.randomPosition(), this.randomPosition() ]\n      let spots = construct(() => this.randomPositionAlongLine(a,b), targetSpotCount, false)\n      this.mountainSpots = spots\n    }\n\n    this.elevation.geoform(this.aeon === 'Hadean', this.mountainSpots)\n\n    // if (t > 0 && t % this.mapgenTicks === 0) {\n    //   console.log(\"[worldgen] hadean + archean aeons complete\")\n    // }\n\n    // this.elevation.map.drawBox('0', 0, 0, this.width, this.height)\n    // this.elevation.map.drawBox('0', 1, 1, this.width-2, this.height-2)\n  }\n\n  buildTerrain() {\n    this.terrain.each((x,y,_value) => {\n      let height = parseInt(this.elevation.map.at(x,y) || '0')\n      if (height >= 9) {\n        this.terrain.write(\"^\", x, y)\n      } else if (height <= 4) {\n        this.terrain.write(sample([\"~\", ',']), x, y)\n      } else {\n        this.terrain.write('.',x,y)\n      }\n    })\n  }\n\n  // growVegetation() {\n  //   this.vegetation.step((val, _neighbors) => {\n  //     if (val === \"'\") {\n  //       if (_neighbors.length >= 2) { //} || _neighbors.length <= 6) {\n  //         return \"'\"\n  //       }\n  //     } else {\n  //       if (_neighbors.length === 3) {\n  //         return \"'\"\n  //       }\n  //     }\n  //     return ''\n  //   })\n  //   this.vegetation.each((x,y,value) => {\n  //     let h = parseInt(this.elevation.map.at(x,y) || '0')\n  //     // autogenesis\n  //     if (h <= 4 || h >= 8) { this.vegetation.erase(x, y) }\n  //     else if (value === '' && randomInteger(0,100) > 98) {\n  //       if (h >= 4 && h < 8) {\n  //         this.vegetation.write(\"'\", x, y)\n  //       }\n  //     }\n  //   })\n  // }\n\n  get area() { return this.width * this.height }\n\n  @boundMethod\n  evolution({ resources }: EvolvingStocks, t: number) {\n    if (t > 0) {\n      if (t % 100 === 0) { console.log(\"The world is \" + (t / 100) + \" million years old\") }\n      if (t <= this.mapgenTicks) { this.genHeightmap(t) }\n    }\n  }\n}\nconst worldMapMaker = new WorldMap()\nexport default worldMapMaker;\n\n","import { Concept, Dictionary } from \"../ecosphere/Dictionary\"\nimport { Model } from \"../ecosphere/Model\"\nimport Khuzdul from \"./Languages/Khuzdul\"\nimport { Aelvic } from \"./Languages/Sindarin\"\nimport Westron from \"./Languages/Westron\"\n// import { Celestial } from \"./Languages/Celestial\"\nclass Language extends Model {\n  constructor(private dictionary: Dictionary) {\n    super(`Language Explorer`)\n    this.actions.create({ name: 'Westron', act: () => this.dictionary = Westron })\n    this.actions.create({ name: 'Sindarin', act: () => this.dictionary = Aelvic })\n    this.actions.create({ name: 'Khuzdul', act: () => this.dictionary = Khuzdul })\n    // todo :)\n    // this.actions.create({ name: 'Primordial', act: () => this.dictionary = Celestial })\n  }\n\n  t = (...concepts: Concept[]) => this.dictionary.translate(...concepts)\n  notes = {\n    '\"Nightingale\"': () => this.t('spark', '-maid'),\n    'Lonely Isle': () => this.t('isle', 'lonely'),\n    'Haven of the Gods': () => this.t('at-', 'divine'),\n    'Swan Haven': () => this.t('swans', 'haven'),\n    'Star-Eagle': () => this.t('eagles', 'stars'),\n    'Land of Pines': () => this.t('land', 'pine'),\n    'Mound of Summer': () => this.t('mound', 'summer'),\n    'Mountains of Tyranny': () => this.t('tyranny', 'mountain-chain'),\n    'Magic Woman': () => this.t('magic', '-woman'),\n    'Fire Stronghold': () => this.t('fire', 'stronghold'),\n    'Grey-Mantle': () => this.t('gray', 'mantle'),\n    'Iron Prison': () => this.t('iron', 'prison'),\n    'Icy Fangs': () => this.t('ice', 'fangs'),\n    // 'Pale-horn Mountains': () => this.t('mountain', 'pale', 'horns'),\n    'Silver River': () => this.t('silver', 'river'),\n    'Ever-White': () => this.t('ever-', 'snow'),\n    'Tall White Point': () => this.t('tall', 'white', 'point'),\n    // 'Mist-Needle': () => this.t('mist', 'needle'),\n    // 'Mist-Shadow': () => this.t('mist', 'shadow'),\n    'Dark Foe': () => this.t('black', 'foe'),\n    'Spirit of Fire': () => this.t('spirit', 'fire'),\n    // 'Shipmaker': () => this.t('ship', 'smith'),\n    // 'Land of Holly': () => this.t('holly', 'land'),\n    // '--': () => '...',\n\n    /// other examples (not necessarily from beleriand)\n    'Pathless Sea': () => this.t('-less', 'path', 'sea'),\n    'Star-Music': () => this.t('stars', 'music'),\n    // 'Hills of Evendim': () => this.t('hill', 'evening'),\n    // 'Mere of Shadows': () => this.t('pool', 'shadow'),\n    // 'Vale of Nightingales': () => this.t('valley', 'nightingales'),\n    // 'Dewy Region': () => this.t('dew', 'region'),\n    // 'Star Hill': () => this.t('hill', 'stars'),\n    'Golden Hill': () => this.t('hill', 'golden'),\n    // 'Gold Mountain': () => this.t('mountain', 'gold'),\n    // 'Elephant Hill': () => this.t('hill', 'elephants'),\n    // 'Silent Land': () => this.t('land', 'silence'),\n    // 'Star Bay': () => this.t('bay', 'stars'),\n    // 'Bell-Star': () => this.t('bell', 'stars'),\n    // 'Saturday': () => this.t('day', 'stars'),\n    // various vocab...\n    // 'Dragon': () => this.t('dragons'),\n    // 'Giant': () => this.t('giant'),\n    // ...Object.fromEntries(descriptiveIdeas.map(idea => {\n    //   let [name, significance] = this.dictionary.nameMountain(idea);\n    //   return [name, () => significance] // `Mount ${capitalize(idea)}`, () => this.dictionary.nameMountain(idea)[1]])\n    // }))\n  }\n}\n\nexport default new Language(Khuzdul);\n\n","// import { Avernus } from \"./Avernus\"\n// import arena from \"./Arena\"\n// import { Society } from \"./Society\"\n// import zep from \"./zep\"\nimport Citizen from \"./Citizen\"\n// import Building from \"./Building\"\nimport worldMapMaker from \"./WorldMap\"\nimport Language from \"./Language\"\n\nconst models = [\n  worldMapMaker,\n  Citizen,\n  Language,\n  // Building,\n  // arena,\n  // zep,\n  // Avernus,\n  // Society,\n]\n\nexport default models\n\n","\nimport './App.css';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelSelector } from './ModelSelector';\nimport models from './examples';\n\ntype ApplicationProps = {\n  model: IModel\n}\n\nfunction App({ model: initialModel }: ApplicationProps) {\n\n  return <div className=\"App\">\n    {/* @ts-ignore */}\n    <ModelSelector models={models} initialModel={initialModel} />\n  </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport models from './examples';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App model={models[0]} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}