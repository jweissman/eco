{"version":3,"sources":["ecosphere/utils/where.ts","ecosphere/utils/isString.ts","collections/Map.ts","collections/List.ts","collections/Sequence.ts","ecosphere/Stocks.ts","ecosphere/Registry.ts","ecosphere/Delta.ts","ecosphere/Model/Simulation.ts","ecosphere/Collection.ts","ecosphere/utils/randomInteger.ts","ecosphere/utils/sample.ts","ecosphere/types/index.ts","ecosphere/Population.ts","ecosphere/Community.ts","ecosphere/Model/Model.ts","ecosphere/Model/presentItem.tsx","ecosphere/View/Tile.tsx","ecosphere/View/presentCommunity.tsx","ecosphere/View/presentIndividual.tsx","ecosphere/View/ModelView.tsx","ecosphere/Model/index.ts","ModelPresenter.tsx","useModel.tsx","ModelSelector.tsx","examples/Avernus.ts","examples/Arena/MonsterManual.ts","examples/Arena/PlayerHandbook.ts","examples/Arena/index.ts","examples/Factory.ts","ecosphere/utils/unique.ts","examples/zep.tsx","examples/Citizen.ts","ecosphere/Board.ts","examples/Building.tsx","ecosphere/utils/replicate.ts","ecosphere/utils/clamp.ts","ecosphere/utils/times.ts","ecosphere/Heightmap.ts","ecosphere/utils/markov.ts","examples/WorldMap.ts","examples/index.ts","App.tsx","index.tsx"],"names":["where","key","value","it","isString","String","KeyMap","idFor","nameFor","lookup","_data","k","v","this","namesAndValues","Object","entries","map","Number","fromEntries","List","items","count","length","push","filter","item","cb","forEach","fn","Error","Sequence","StockManager","stocks","stockId","amount","add","name","remove","list","lookupById","Stocks","elements","ids","storage","attrs","attributes","has","manage","id","next","theEntity","setAmount","element","find","matching","create","flatMap","manageAll","boundMethod","Registry","popCtor","populations","species","values","x","hasOwnProperty","theSpecies","population","populationList","pop","Delta","model","getStocks","changes","baseline","_store","Simulation","ticks","tracking","dynamics","e","flux","target","report","source","theDelta","manager","_delta","theFlows","flow","table","entry","t","flows","each","dynamism","apply","changed","flowsReport","delta","updated","deltaAmount","Collection","randomInteger","min","max","Math","floor","random","sample","ts","animalIds","createAnimal","kind","age","health","spirit","cunning","agility","strength","moietyIds","createMoiety","wealth","sophistication","power","knowledge","personId","human","size","createPerson","moiety","inventory","traits","body","mind","insight","depth","education","disposition","soul","wit","empathy","integrity","beauty","currency","things","meters","memory","SetHelper","set","populationIds","Population","individuals","Set","theList","individual","first","theIndividual","newborn","doomed","destroy","newborns","i","birth","doneFor","death","build","delete","Community","moieties","obscured","recipes","jobs","Map","worker","inventories","person","get","personAttrs","resources","recipe","produce","mayProduce","consumes","resource","produces","Model","people","machines","animals","metrics","notes","actions","policies","currentPolicy","clear","actionName","args","action","act","policyName","policy","presentItem","deltas","title","className","data-testid","Tile","children","presentCommunity","community","aria-label","work","itemNames","thing","meterName","measure","htmlFor","style","paddingRight","width","height","low","high","optimum","sort","a","b","display","trait","BoardTable","tiles","tileColors","tileInspect","useState","inspecting","setInspecting","message","flexDirection","fontFamily","fontSize","cursor","row","y","cell","color","backgroundColor","onMouseEnter","onMouseLeave","ModelView","modelName","communities","lastChanges","board","folks","keys","view","ModelPresenter","send","choose","step","onClick","type","checked","onChange","useModel","initialModel","setModel","setLastChanges","delay","setDelay","shouldStep","shouldSend","doSend","shouldManage","doManage","command","setCommand","setPolicy","useEffect","isModel","callback","savedCallback","useRef","current","tick","setInterval","clearInterval","useInterval","performSend","performChoose","maybeModel","AssemblyPresenter","assembly","models","theModel","ModelSelector","options","placeholder","give","recipient","supplier","n","world","miner","minter","smelter","fisherman","mineGold","smeltGold","mintCoin","evolve","MonsterManual","basicCreatures","Fragment","hp","evasion","Light","Fog","reflect","Aura","speed","Shadow","Wisp","Filament","counter","Voice","absorb","defense","Nothing","regen","challengingCreatures","Fiendling","Gremlin","Goblin","Kobold","Orc","uncommonCreatures","Rat","Bat","Snake","Blob","Bear","Ghost","Rogue","Troll","Giant","bosses","Priest","heal","Vampire","Drake","Lich","extraplanar","Demon","Angel","Archdemon","Dracolith","Archangel","dragons","rareCreatures","Leviathan","bestiary","basicSubtypes","Hostile","Intimidating","Nimble","Quick","Timid","Spry","Dancing","Vigilant","Relentless","Armored","Hardened","Benevolent","Protective","Snarling","Emboldened","Floating","Crystalline","Glinting","Mobile","Coldsnap","Blinding","Noxious","rareSubtypes","Voracious","Vicious","Vexatious","Arrogant","Querulous","Adventurous","Questing","Silvered","Mirrored","Aggressive","Dominating","Swift","Accelerated","Elusive","Reluctant","Hidden","Invisible","Imperceptible","Regrowing","Hydra","Fortified","Angelic","Prismatic","Pugnacious","Augmented","Skillful","Skeletal","Undead","Zombie","Favored","Fiendish","Fierce","Opalescent","Cruel","Vortex","evade","Luminous","Defiant","Devious","Draconic","subtypes","Common","Evasive","Retaliatory","Inspired","Infused","Radiant","Resplendent","Heavy","Titanic","Unholy","Blessed","Adept","perks","Piercing","Enchanted","Clockwork","Phantasmal","Cosmic","Imperious","monsterIds","difficulty","creature","base","join","cr","generateBasicMonster","adjustedCr","crFactor","perk","PlayerHandbook","level","pow","hero","characterClass","template","characterClasses","attr","baseStartingHp","levelUp","pc","attributeBoosts","common","uncommon","rare","epic","legendary","rarity","levelAttr","perkLevels","console","log","includes","Fighter","perkBenefits","Brutality","Counterweight","Efferverscence","Efficacious","Opalescence","Ethereal","Faith","Finesse","Fitness","Fluidity","Dexterity","Precision","Swiftness","Rapidity","Medic","Vitality","Whirlwind","Focus","Iridescence","Concentration","Salvation","DungeonMasterGuide","durations","round","day","arena","events","eventIds","challengeRating","heroIds","metricGrain","manual","spawnHero","spawnEnemyParty","enemyName","at","party","generate","totalLevels","adv","reduce","recentEvents","totalInjuryAmount","recent","injury","enemy","enemies","defender","aggressor","reflected","damage","enemyInjured","effective","absorption","injure","strike","attribute","multiplier","benefits","ranks","benefit","holyDefense","holyDamage","magicDefense","magicDamage","physicalDamage","criticalStrike","baseDamage","bonus","critChance","overallDamage","aggressors","defenders","aggSpeed","damageAll","hit","chainChance","maxChain","chain","healee","maxHeal","unit","adventurer","xp","gil","per","levelCost","stock","encounterChance","turnStarted","attack","mortalityCheck","Factory","bills","deliveryRate","fulfillmentEvents","canProduce","workers","required","requirement","producingRequirement","missingRequirements","missing","evolution","orderIds","event","description","deliverTo","order","receive","reset","firstUnfulfilled","unfulfilled","produceUnfulfilled","allBillsRequested","arr","u","l","unique","bill","nextUnfulfilled","undefined","orderItemNames","itemName","account","price","emit","warn","factory","reboot","product","managers","generatePerson","gender","firstName","lastName","subject","date","describeMemory","time","seconds","second","minute","hour","dayOfWeek","padStart","pred","Board","write","character","x0","y0","drawBox","char","filled","x1","y1","overlays","viewTiles","overlay","o","eachCell","defaultValue","newTiles","currentValue","neighbors","newCell","buildingMaker","building","construct","times","flatten","arrays","Array","concat","clamp","distance","dx","abs","dy","sqrt","Heightmap","groundLevel","smooth","ns","average","above","immediate","erode","extrude","positions","pos","h","parseInt","val","intrude","bombard","intensity","radius","impactSite","distanceToImpact","craterPositions","craterEdge","d","orogeny","mountains","geoform","hades","d100","regionNames","regionCount","generateRegionName","array","replicate","rate","position","neighborValues","neighbor","neighborSum","localAverage","newVal","threshold","binary","regionMap","existingRegionNames","regionName","any","firstAdjacentRegionName","newRegion","MarkovGenerator","ngrams","beginnings","text","beginning","substring","gram","charAt","output","Cartographer","continentNamer","regions","placeNames","split","feed","aeon","elevation","mapgenTicks","terrain","mountainSpots","areaPercent","area","cartographer","'","eon","li","elevationMessage","identifyRegion","ax","ay","bx","by","slope","targetSpotCount","randomPosition","spots","randomPositionAlongLine","_value","genHeightmap","Building","zep","Avernus","Citizen","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.216b2cf0.chunk.js","sourcesContent":["export function where(key: string, value: any) {\n  return (it: any) => it[key] === value;\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n","import { IMap } from \"./types\";\nexport class KeyMap<K, V> implements IMap<K, V> {\n  _data: { [id: number]: V; } = {};\n  constructor(\n    private idFor: (k: K) => number,\n    private nameFor: (k: K) => string,\n    private lookup: (id: number) => K,\n  ) { }\n  set(k: K, v: V) { this._data[this.idFor(k)] = v; }\n  get(k: K): V { return this._data[this.idFor(k)]; }\n  get report(): { [name: string]: V } {\n    const namesAndValues = Object.entries(this._data)\n      .map(([k, v]) => [this.nameFor(this.lookup(Number(k))), v]);\n    return Object.fromEntries(namesAndValues);\n  }\n}\n","//\n\nimport { IList } from \"./types\";\n\nexport class List<T> implements IList<T> {\n  items: T[] = [];\n  protected get it() { return this.items; }\n  get first(): T { return this.items[0]; }\n  get last(): T { return this.items[this.count - 1]; }\n  get count(): number { return this.items.length; }\n  add(it: T) { this.items.push(it); }\n  remove(it: T) { this.items = this.items.filter(item => item !== it); }\n  each(cb: (it: T) => any) { this.items.forEach(cb); }\n  clear() { this.items = []; }\n  map<U>(fn: (it: T) => any): U[] { return this.items.map(fn) }\n\n  get sample(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n","import { ISequence } from \"./types\";\n\nexport class Sequence implements ISequence<number> {\n  count = 0;\n  get next(): number { return this.count++; }\n}\n","import { BasicEntity } from \"./types/BasicEntity\";\nimport { boundMethod } from 'autobind-decorator'\nimport { where } from \"./utils/where\";\nimport { isString } from \"./utils/isString\";\nimport { ManageStock, ManageStocks } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass StockManager<T extends BasicEntity> implements ManageStock<T> {\n  constructor(private stocks: Stocks<T>, private stockId: number) {}\n  add(amount: number): void { return this.stocks.add(amount, this.name) }\n  remove(amount: number): void { return this.stocks.remove(amount, this.name) }\n  get list(): T[] { return this.stocks.list() }\n  get count(): number { return this.stocks.count(this.name) }\n  get name() { return this.item.name }\n  get item(): T { return this.stocks.lookupById(this.stockId) }\n}\n\nexport class Stocks<T extends BasicEntity> {\n  private ids: Sequence = new Sequence()\n  private storage: { [key: number]: number; } = {}\n\n  constructor(\n    public name: string,\n    private elements: T[] = []\n  ) { }\n\n  @boundMethod\n  list() { return this.elements }\n\n  get _store() { return this.storage }\n\n  public clear() { this.elements = []; this.storage = {} }\n\n  public create(name: string): ManageStock<T>\n  public create(attributes: { name: string } & Omit<T, 'id' | 'name'>): ManageStock<T>\n  /** Create a new type of element to store */\n  @boundMethod\n  public create(attrs: any) {\n    let name: string | null = null;\n    let attributes: Partial<T> = {}\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    if (isString(name) && this.has(name)) {\n      return this.manage(name);\n    }\n    if (!isString(name)) { throw new Error(\"Name must be a string\") }\n    // const elementIds: number[] = this.list().map(({ id }) => id);\n    const id = this.ids.next; //Math.max(0, ...elementIds) + 1;\n    const theEntity: T = { id, name, ...attributes } as T\n    this.list().push(theEntity);\n    const manage: ManageStock<T> = this.manage(name as string)\n    return manage\n  }\n\n  @boundMethod\n  add(amount: number, name: string) {\n    this.setAmount(name, this.count(name) + amount);\n  }\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.setAmount(name, this.count(name) - amount);\n  }\n\n  @boundMethod\n  zero(name: string): void {\n    this.setAmount(name, 0);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    const element: T = this.lookup(name);\n    const amount = this.storage[element.id] || 0;\n    return amount;\n  }\n\n  has(name: string): boolean {\n    const matching = this.elements.find(where('name', name))\n    return !!matching;\n  }\n\n  @boundMethod\n  lookupById(id: number): T {\n    const matching = this.elements.find(where('id', id))\n    if (matching) {\n      return matching as T;\n    }\n    throw new Error(`No such ${this.name} with id ${id}`);\n  }\n\n  lookup(name: string): T {\n    const matching = this.elements.find(where('name', name))\n    if (matching) {\n      return matching as T;\n    } else {\n      return this.create(name).item\n    }\n  }\n\n  get report(): (T & { amount: number })[] {\n    const items: T[] = this.list()\n    const table = items.flatMap((item: T) => {\n      const id = Number(item.id)\n      const amount = this.storage[id] || 0\n      return { ...item, amount }\n    })\n    return table\n  }\n\n  manage(name: string): ManageStock<T> {\n    return new StockManager<T>(this, this.lookup(name).id)\n  }\n\n  manageAll(): ManageStocks {\n    const { add, remove, count } = this\n    return { add, remove, count, list: () => this.elements }\n  }\n\n  get manager() { return this.manageAll() }\n\n  private setAmount(name: string, amount: number): void {\n    const element: T = this.lookup(name);\n    this.storage[element.id] = amount;\n  }\n}\n","import { Population } from \"./Population\";\nimport { BasicEntity } from \"./types/BasicEntity\";\nimport { Entity, ManageStocks } from \"./types\";\nimport { boundMethod } from \"autobind-decorator\";\n\n// eg map animal (species) names to populations of individual animals...\n\nexport class Registry<U extends BasicEntity, T extends Entity<U>, Pop extends Population<U,T>> {\n  populations: { [species: string]: Pop } = {};\n  species: { [species: string]: U } = {}\n  constructor(\n    public name: string,\n    public popCtor: new (name: string, specie: U) => Pop\n  ) {}\n\n  clear() {\n    this.populations = {}\n  }\n\n  @boundMethod\n  lookup(name: string): Pop {\n    if (this.has(name)) {\n      return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${name}'`);\n    }\n  }\n\n  @boundMethod\n  lookupById(id: number): U { //Population<U,T> {\n    const matching = Object.values(this.species).find(x => x.id === id)\n    if (matching) { //this.has(name)) {\n      return matching\n      // return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${id}'`);\n    }\n  }\n\n  has(name: string): boolean {\n    return this.populations.hasOwnProperty(name);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    return this.lookup(name).count;\n  }\n\n  @boundMethod\n  list(): U[] {\n    return Object.values(this.species)\n  }\n\n  listByName(name: string): T[] {\n    return this.lookup(name).list();\n  }\n\n  @boundMethod\n  create(name: string, species?: Omit<U, 'name' | 'id'>): Pop { //Population<U,T> {\n    if (this.has(name)) {\n      return this.lookup(name);\n    }\n    let theSpecies: U = { ...species, name, id: this.list().length+1 } as unknown as U; // species.kind points back to name...\n    let population: Pop = new this.popCtor(name, theSpecies);\n    this.populations[name] = population;\n    this.species[name] = theSpecies;\n    return population;\n  }\n\n  get populationList(): Population<U,T>[] { return Object.values(this.populations)}\n\n  get report() {\n    const pops = this.populationList.flatMap((population: Population<U,T>) => {\n      const pop = population\n      if (pop.count > 0) {\n        return { name: pop.name, amount: pop.count}\n      } else {\n        return []\n      }\n    })\n    return pops\n  };\n\n  @boundMethod\n  add(amount: number, name: string): void {\n    this.lookup(name).add(amount)\n  };\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.lookup(name).remove(amount)\n  };\n\n  manageAll(): ManageStocks {\n    const { add, remove, count, list } = this\n    return { add, remove, count, list }\n  }\n  get manager() { return this.manageAll() }\n}\n","import { Model } from \"./Model\";\nimport { Registry } from \"./Registry\";\nimport { Stocks } from \"./Stocks\";\nexport type DeltaSource = Stocks<any> | Registry<any, any, any> \n//<U extends BasicEntity, T extends Entity<U>> = Stocks<T> | Registry<U,T>\nexport type DeltaSourceManager = { add: Function, remove: Function, count: Function, list: Function }\nexport class Delta {\n  public changes: Stocks<any>;\n  constructor(public model: any, public getStocks: (model: Model) => DeltaSource) {\n    let baseline = this.getStocks(model)\n    this.changes = new Stocks(`${baseline.name} (delta)`, baseline.list());\n  }\n  get storage() { return this.changes._store }\n  // evolve(t: number): Delta {\n  //   let stocks = this.getStocks(this.model)\n  //   const flow = { [stocks.name]: stocks.manageAll() }\n  //   this.model.dynamics.each(dynamism => dynamism(flow, t));\n  //   return this;\n  // }\n}\n","import { List } from \"../../collections\";\nimport { Delta, DeltaSource } from \"../Delta\";\nimport { Entity, EvolvingStocks, TimeEvolution } from \"../types\";\nimport { ISimulation } from \"./ISimulation\";\n\nexport abstract class Simulation implements ISimulation {\n  protected ticks: number = 0;\n  protected tracking: string[] = []\n  public dynamics = new List<TimeEvolution>()\n  constructor(public name: string) { }\n  public evolve(e: TimeEvolution) { this.dynamics.add(e) }\n  public step() { return this.flux(this.ticks++) }\n\n  public get report() {\n    return Object.fromEntries(this.tracking.map(target =>\n      [target, (this as any)[target].report]\n    ))\n  }\n\n  private flow(target: string) {\n    const source = (this as any)[target]\n    const theDelta = new Delta(this, (model) => (model as any)[target])\n    const { add, remove } = theDelta.changes.manager\n    const { list, count, lookupById } = source\n    return { lookupById, _delta: theDelta, add, remove, list, count }\n  }\n  \n  private flows(): { [key: string]: { _delta: Delta, lookupById: Function, add: Function } } {\n    const theFlows: {[key: string]: any} = {}\n    this.tracking.forEach(target => theFlows[target] = this.flow(target))\n    return theFlows\n  }\n\n  private flowsReport(flow: { [s: string]: any }) {\n    const table: { [key: string]: any } = {}\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = flow._delta\n      table[name] = Object.fromEntries(\n        Object\n          .entries(theDelta.storage)\n          .map(entry => {\n            const [id, amount] = entry\n            const name = flow.lookupById(Number(id)).name\n            return [ name, amount ]\n          })\n      )\n    })\n    return table\n  }\n\n  private flux(t: number) {\n    const flow: EvolvingStocks = this.flows() as any as EvolvingStocks\n    this.dynamics.each(dynamism => dynamism(flow, t));\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = (flow as any)._delta\n      this.apply(theDelta, name)\n    })\n    return { changed: this.flowsReport(flow) }\n  }\n\n  private apply(delta: Delta, target: string) {\n    const source: DeltaSource = (this as any)[target] as DeltaSource\n    const manager = source.manager\n    const list = manager.list()\n    const { storage: updated } = delta;\n    const changed: { [elementName: string]: number; } = {};\n    list.forEach((item: Entity<any>) => {\n      if (updated[item.id]) {\n        const deltaAmount = updated[item.id];\n        manager.add(deltaAmount, item.name);\n        changed[item.name] = deltaAmount;\n      }\n    });\n    return { changed };\n  }\n}\n","import { List, Sequence } from \"../collections\";\nimport { IList } from \"../collections/types\";\nimport { BasicEntity } from \"./types/BasicEntity\";\n\nclass Collection<T extends BasicEntity> extends List<T> implements IList<T> {\n  list() { return this.items }\n  private ids = new Sequence()\n  get names(): string[] {\n    // throw new Error('Method not implemented.');\n    return this.items.map(item => item.name)\n  }\n  // private get ids() { return this.it.map(({ id }) => id) }\n  create(attributes: Partial<T>): T {\n    const id = this.ids.next;\n    const theEntity: T = { id, ...attributes } as unknown as T;\n    this.items.push(theEntity);\n    return theEntity\n  }\n\n  lookup(name: string) {\n    return this.items.find(it => it.name === name)\n  }\n}\n\nexport { Collection }\n","export function randomInteger(min: number, max: number) {\n  // return min + Math.floor(Math.random() * (max - min));\n  let result = Math.floor(Math.random() * (max - min + 1) + min)\n  // console.log(\"Random integer between \" + min + \" and \" + max + \": \" + result)\n  return result\n}\n","import { randomInteger } from \"./randomInteger\";\n\nexport function sample<T>(ts: T[]): T {\n  let i = randomInteger(0,ts.length-1)\n  return ts[i]; //randomInteger(0,ts.length-1)]\n\n}\n","import { Sequence } from \"../../collections\"\nimport { Collection } from \"../Collection\"\nimport { Stocks } from \"../Stocks\"\nimport { sample } from \"../utils/sample\"\nimport { BasicEntity } from \"./BasicEntity\"\n\nexport type Substance = BasicEntity\nexport type Entity<T> = BasicEntity & { kind: T }\n\nexport type Quality = 'terrible' | 'poor' | 'adequate' | 'good' | 'excellent'\ntype Size = 'fine' | 'small' | 'medium' | 'large' | 'huge'\nexport type Species = BasicEntity & {\n  name: string\n  size?: Size\n  fitness?: Quality\n}\n\nexport type Individual<T> = Entity<T> & {\n  age: number // maybe simpler to do bornAt?\n}\n\nexport type Creature<T> = Individual<T> & {\n  health: 'dying' | 'unwell' | 'flourishing' | 'triumphant'\n}\n\nexport type Animal = Creature<Species> & {\n  spirit: 'languorous' | 'vigorous' | 'impetuous' | 'ferocious'\n  strength: 'weak' | 'robust' | 'mighty' | 'indomitable'\n  cunning:  'dim' | 'attentive' | 'creative' | 'ingenious'\n  agility:  'clumsy' | 'nimble' | 'spry' | 'balletic'\n}\n\nconst animalIds = new Sequence()\nexport const createAnimal = (name: string, species: Species): Animal => {\n  return {\n    id: animalIds.next,\n    name,\n    kind: species,\n    age: 0,\n    health: sample(['dying', 'unwell', 'flourishing', 'triumphant']),\n    spirit: sample(['languorous', 'vigorous', 'impetuous', 'ferocious']),\n    cunning: sample(['dim', 'attentive', 'creative', 'ingenious']),\n    agility: sample(['clumsy', 'nimble', 'spry', 'balletic']),\n    strength: sample(['weak', 'robust', 'mighty', 'indomitable']),\n  }\n}\n\n// major demographic groupings -- moieties (maybe *this* should be called a Community??)\ntype Wealth = 'impoverished' | 'well-off' | 'luxuriant' | 'decadent'\ntype Sophistication = 'unpretentious' | 'savvy' | 'urbane' | 'sleek'\ntype Power = 'inconsequential' | 'marginal' | 'influential' | 'sovereign'\ntype Knowledge = 'clueless' | 'well-informed' | 'wise' | 'prescient'\n\nexport type Moiety = BasicEntity & {\n  wealth: Wealth\n  sophistication: Sophistication\n  power: Power\n  knowledge: Knowledge\n}\n\nconst moietyIds = new Sequence()\nexport const createMoiety = (name: string): Moiety => {\n  const wealth: Wealth = sample([ 'impoverished', 'well-off', 'luxuriant', 'decadent' ])\n  const sophistication: Sophistication = sample([ 'unpretentious', 'savvy', 'urbane', 'sleek' ])\n  const power: Power = sample([ 'inconsequential', 'marginal', 'influential', 'sovereign' ])\n  const knowledge: Knowledge = sample([ 'clueless', 'well-informed', 'wise', 'prescient' ])\n  return { id: moietyIds.next, name, wealth, sophistication, power, knowledge }\n}\n\ntype Body = Animal\n\ntype Insight = 'dense' | 'intuitive' | 'incisive' | 'brilliant'\ntype Depth = 'superficial' | 'substantial' | 'profound' | 'inscrutable'\ntype Education = 'unlettered' | 'literate' | 'tutored' | 'well-read'\ntype Disposition = 'dismal' | 'hopeful' | 'propitious' | 'roseate'\ntype Mind = {\n  insight: Insight\n  depth: Depth\n  education: Education\n  disposition: Disposition\n}\n\nexport const createMind = (): Mind => {\n  const insight: Insight = sample([ 'dense', 'intuitive', 'incisive', 'brilliant' ])\n  const depth: Depth = sample([ 'superficial', 'substantial', 'profound', 'inscrutable' ])\n  const education: Education = sample([ 'unlettered', 'literate', 'tutored', 'well-read' ])\n  const disposition: Disposition = sample([ 'dismal', 'hopeful', 'propitious', 'roseate' ])\n  return { insight, depth, education, disposition }\n}\n\ntype Wit = 'slow' | 'clever' | 'biting' | 'savage'\ntype Empathy = 'sadistic' | 'generous' | 'benevolent' | 'selfless'\ntype Integrity = 'uncertain' | 'sound' | 'solid' | 'incorruptible'\ntype Beauty = 'ugly' | 'fair' | 'radiant' | 'resplendent'\ntype Soul = {\n  wit: Wit\n  empathy: Empathy\n  integrity: Integrity\n  beauty: Beauty\n}\n\nexport const createSoul = (): Soul => {\n  const wit: Wit = sample([ 'slow', 'clever', 'biting', 'savage' ])\n  const empathy: Empathy = sample([ 'sadistic', 'generous', 'benevolent', 'selfless' ])\n  const integrity: Integrity = sample([ 'uncertain', 'sound', 'solid', 'incorruptible' ])\n  const beauty: Beauty = sample([ 'ugly', 'fair', 'radiant', 'resplendent' ])\n  return { wit, empathy, integrity, beauty }\n}\n\n// type Category = BasicEntity\n// type Item = Entity<Category> & {}\n// type Event = BasicEntity\n// type Incident = Entity<Incident>\n\n// export type Trait = { id: number, name: string, rank: 0 | 1 | 2 | 3 | 4 | 5 }\nexport type Memory = { id: number, name: string, description: string }\n\nexport type Person = Individual<Moiety> & {\n  body: Body\n  mind: Mind\n  soul: Soul\n\n\n  // ie within my moiety, I am (thought of as)...\n  // rank: 'commoner' | 'wellborn'\n  // title?: string\n  // reputation: 'unknown' | 'worthy' | 'adored' | 'revered'\n\n  // individually...\n  things: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n  // stats: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n\n  currency: number\n  traits: ManageStocks // IList<Trait>\n\n  // things to draw meters for..\n  meters: { [meterName: string]: Function }\n  memory: Collection<Memory>\n  // philosophy?: Ideology\n  // destiny: 'doomed' | 'commonplace' | 'exceptional' | 'free'\n}\n\nconst personId = new Sequence()\nconst human: Species = { id: -1, name: 'Human Being', size: 'medium' }\nexport const createPerson = (name: string, moiety: Moiety): Person => {\n\n  const inventory = new Stocks<any>(`${name}'s Things`)\n  const traits = new Stocks<any>(`${name}'s Traits`)\n  // const state = new Stocks<any>(`${name}'s State`)\n    // personAttrs.things = inventory.manageAll()\n  return {\n    id: personId.next,\n    kind: moiety,\n    // kind: createMoiety()\n    name,\n    age: 0,\n    body: createAnimal(name, human),\n    mind: createMind(),\n    soul: createSoul(),\n    // rank: 'commoner',\n    // reputation: 'unknown',\n    currency: 0,\n    things: inventory.manageAll(),\n    traits: traits.manageAll(),\n    // stats: state.manageAll()\n    // things: new M\n    meters: {},\n    memory: new Collection<Memory>(),\n  }\n\n}\n\n// const person = (): Person => {\n//   const newPerson: Person = {\n//     id: personId.next()\n//   }\n//   return newPerson\n// }\n\nexport type Recipe = BasicEntity & {\n  produces: { [resourceName: string]: number }\n  consumes?: { [resourceName: string]: number }\n  requiresMachine?: string\n}\n\nexport type Machine = BasicEntity\n\n// export type Task = BasicEntity & {\n//   machine?: string\n//   recipe: string\n// }\n\n// type ManageList = {}\n\nexport type ManageStocks = {\n  add: (amount: number, name: string) => void,\n  remove: (amount: number, name: string) => void,\n  count: (name: string) => number,\n  list: () => any[]\n}\n\nexport type ManageStock<T> = {\n  add: (amount: number) => void,\n  remove: (amount: number) => void,\n  count: number,\n  item: T\n}\n\nexport type ManagePopulation<T> = {\n  count: number\n  birth: (name: string) => T\n  death: (name: string) => T\n  add: (amount: number) => T[]\n  remove: (amount: number) => T[]\n}\n\nexport type ManagePopulationRegistry<T> = {\n  lookup: (name: string) => ManagePopulation<T>\n}\n\n// todo rename\nexport interface EvolvingStocks {\n  [key: string]: ManageStocks\n}\nexport type TimeEvolution = (evolution: EvolvingStocks, ticks: number) => void\n\nexport type StepResult = {\n  changed: { \n    [groupName: string]: { [elementName: string]: number }\n  }\n}\n\n// todo move these model/sim things somewhere else???\nexport type Action = { id: number, name: string, act: Function }\nexport type Policy = { id: number, name: string, manage: Function }\n","import { isString } from \"./utils/isString\";\nimport { boundMethod } from \"autobind-decorator\";\nimport { Entity } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass SetHelper {\n  static first<T>(set: Set<T>): T { return set.values().next().value }\n}\n\n// a collection of named individuals...\nconst populationIds: Sequence = new Sequence()\nexport class Population<Specie, Dividual extends Entity<Specie>> {\n  public id = populationIds.next\n  private ids: Sequence = new Sequence()\n  constructor(\n    public name: string,\n    public species?: Specie,\n    protected individuals: Set<Dividual> = new Set(),\n  ) {}\n\n  list() { \n    const theList: Dividual[] = []\n    this.individuals.forEach(individual => theList.push(individual))\n    return theList;\n  }\n  get count() { return this.individuals.size }\n  get first() { \n    return SetHelper.first(this.individuals)\n   }\n  public lookup(name: string): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.name === name) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with name '${name}' in the population of ${this.name}`)\n  }\n\n  @boundMethod\n  public lookupById(id: number): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.id === id) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with id ${id} in the population of ${this.name}`)\n  };\n\n  public birth(name: string = `${this.name} ${this.count}`): Dividual {\n    const newborn = this.create(name)\n    return newborn\n  }\n\n  @boundMethod\n  public death(name?: string): Dividual {\n    if (name) {\n      const doomed = this.destroy(name)\n      if (doomed) {\n        return doomed\n      }\n    } else {\n      const doomed = this.first\n      if (doomed) {\n        this.destroy(doomed.name)\n        return doomed\n      }\n    }\n    throw new Error(\"Population already empty!\")\n  }\n\n  public add(amount: number) {\n    const newborns = []\n    for (let i = 0; i < amount; i++) {\n      newborns.push(this.birth())\n    }\n    return newborns\n  }\n\n  public remove(amount: number) {\n    const doneFor = []\n    for (let i = 0; i < Math.min(this.count, amount); i++) {\n      doneFor.push(this.death(this.first.name))\n    }\n    return doneFor\n  }\n\n  protected build(attrs: any) {\n    let name = null;\n    let attributes: Partial<Dividual> = {};\n    // console.log(attrs)\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    \n    const id = this.ids.next; //Math.max(0, ...this.ids) + 1;\n    const theIndividual: Dividual = { id, name, ...attributes } as unknown as Dividual;\n    return theIndividual;\n  }\n\n\n  public create(name: string): Dividual;\n  public create(attrs: Partial<Dividual>): Dividual;\n  @boundMethod\n  public create(attrs: any) {\n    const theIndividual: Dividual = this.build(attrs)\n    this.individuals.add(theIndividual);\n    return theIndividual;\n  }\n\n  public destroy(name: string): Dividual;\n  @boundMethod\n  public destroy(name: string) {\n    const theIndividual: Dividual = this.lookup(name)\n    this.individuals.delete(theIndividual);\n    return theIndividual;\n  }\n\n  get report() {\n    return Object.fromEntries(this.list().map(individual => {\n      return [individual.id, individual.name];\n    }))\n  }\n}\n","import { List, Map } from '../collections';\nimport { Recipe, Moiety, Person, ManageStocks, createPerson, createMoiety } from \"./types\";\nimport { Population } from \"./Population\";\nimport { Collection } from \"./Collection\";\nimport { boundMethod } from 'autobind-decorator';\n\nexport class Community extends Population<Moiety, Person> {\n  moieties: List<Moiety> = new List<Moiety>();\n  obscured: boolean = false // don't display details\n   \n  public recipes = new Collection<Recipe>();\n  public jobs = new Map<Person, Recipe>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  );\n\n  public inventories = new Map<Person, ManageStocks>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  )\n\n  get report(): { [personName: string]: string; } {\n    const entries = this.list()\n      .map(person => [person.id, (this.jobs.get(person) || {name: '?'}).name]);\n    return Object.fromEntries(entries);\n  }\n\n  // okay if we need to override create + build inventories let's do it ??\n  public create(name: string): Person;\n  public create(attrs: Partial<Person>): Person;\n  @boundMethod\n  public create(attrs: any) {\n    const personAttrs = super.build(attrs);\n    const { name, age } = personAttrs;\n    const person: Person = createPerson(name, createMoiety(`${name}'s Gens`)) //, this.species)\n    person.age = age\n    this.individuals.add(person)\n    return person\n  }\n\n  // people have inventories...\n  // and maybe they've declared what they want\n\n  // measureTime(time: number): HumanCalendar {}\n\n  // trade({ resources })\n\n  work({ resources }: { resources: { add: Function; remove: Function; count: Function; }; }): void {\n    const { report } = this.jobs;\n    Object.entries(report).forEach(([_workerName, recipe]: [string, Recipe]) => {\n      this.produce(recipe, resources);\n    });\n  }\n  \n  private produce(recipe: Recipe, resources: { add: Function; remove: Function; count: Function; }) {\n    if (this.mayProduce(recipe, resources)) {\n      if (recipe.consumes) {\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          resources.remove(amount, resource);\n        });\n      }\n      Object.entries(recipe.produces).forEach(([resource, amount]) => {\n        resources.add(amount, resource);\n      });\n    }\n  }\n\n  private mayProduce(recipe: Recipe, resources: { count: Function; }) {\n    let mayProduce = true;\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (resources.count(resource) < amount) {\n          mayProduce = false;\n        }\n      });\n    }\n    return mayProduce;\n  }\n\n}\n","import { Substance, Machine, Animal, Species, Action, Policy, Moiety, Person } from \"../types\"\nimport { Stocks } from \"../Stocks\"\nimport { Registry } from \"../Registry\"\nimport { Simulation } from \"./Simulation\"\nimport { IModel } from \"./IModel\"\nimport { Collection } from \"../Collection\"\nimport { Community } from \"../Community\"\nimport { Population } from \"../Population\"\nimport { Tiles } from \"../Board\"\n\ntype Fauna = Population<Species, Animal>\nexport class Model extends Simulation implements IModel  {\n  tracking = [ 'animals', 'resources' ]\n  get tiles(): Tiles { return [] }\n\n  public people = new Registry<Moiety, Person, Community>('people', Community)\n  public resources = new Stocks<Substance>('resources')\n  public machines  = new Stocks<Machine>('machines')\n  public animals   = new Registry<Species, Animal, Fauna>('wildlife', Population)\n\n  reset() {\n    this.resources.clear()\n    this.machines.clear()\n    this.animals.clear()\n    this.people.clear()\n    this.dynamics.clear()\n  }\n\n  // measurements\n  public metrics: { [name: string]: () => number } = {}\n  public notes: { [name: string]: () => string } = {}\n\n  // interactive elements\n  public actions: Collection<Action> = new Collection<Action>()\n  public policies: Collection<Policy> = new Collection<Policy>()\n\n  send(actionName: string, args: any): void {\n    const action = this.actions.lookup(actionName)\n\n    if (action) {\n      action.act(args)\n    } else {\n      throw new Error(`No such action ${actionName}`)\n    }\n  }\n\n  currentPolicy: Policy | undefined\n  choose(policyName: string): void {\n    // console.log(\"[Model.choose]\", policyName)\n    const policy = this.policies.lookup(policyName)\n    if (policy) {\n      this.currentPolicy = policy\n    } else {\n      throw new Error(`No such policy ${policyName}`)\n    }\n  }\n\n  public step() {\n    if (this.currentPolicy) {\n      // console.log(\"MANAGING\", { policy: this.currentPolicy })\n      this.currentPolicy.manage()\n    }\n    return super.step()\n  }\n}\n\nexport default Model;\n","import { prettyAmount } from \"../utils/prettyAmount\";\n\nexport function presentItem(deltas?: { [elementName: string]: number; }) {\n  return ({ name, amount }: { name: string; amount: number; }) => {\n    const delta = deltas && deltas[name];\n    return <li key={name} title={name} className='Item'>\n      <span className='Title' data-testid='Name'>{name}</span>\n      <span data-testid='Count'>\n        {prettyAmount(amount)}\n      </span>\n      <span data-testid='Delta'>\n        {delta}\n      </span>\n    </li>;\n  };\n}\n","export function Tile({ children, title }: { children?: React.ReactNode; title: string; }) {\n  return <div className='Tile' title={title}>\n    <h5 className='Title'>{title}</h5>\n    {children}\n  </div>;\n}\n","import { Tile } from \"./Tile\";\nimport { Community } from \"../Community\";\nimport { presentIndividual } from \"./presentIndividual\";\n\n\nexport function presentCommunity(community: Community) {\n  return <Tile title={community.name} key={community.id}>\n    <ul aria-label='People'>\n      {community.obscured ? community.list().map(individual => <li key={individual.id}>{individual.name}</li>)\n                          : community.list().map(presentIndividual(community.report))}\n    </ul>\n  </Tile>;\n}\n","import { ManageStocks } from \"../types\";\n\n\nexport function presentIndividual(work: { [key: number]: string; }) {\n  return ({ id, name, things, traits, meters }: {\n    id: number;\n    name: string;\n    things: ManageStocks;\n    traits: ManageStocks;\n    meters: { [key: string]: Function }\n  }) => {\n    const itemNames = things.list().map(thing => thing.name);\n    return <li key={id} title={name} className='Item'>\n      <div className='Title' data-testid='Name'>{name}</div>\n      {Object.entries(meters).map(([meterName, measure]) => {\n        const { value, max } = measure()\n        return <div className='Meter' data-testid={meterName}>\n          <label htmlFor={meterName} style={{paddingRight: 10}}>{meterName}:</label>\n          <meter id={meterName}\n                 style={{ width: 130, height: 14 }}\n                 min=\"0\" max={max}\n                 low={max * 0.33} high={max * 0.66} optimum={max * 0.8}\n                 value={value}>\n              at {value}/{max}\n          </meter>\n        </div>\n      })}\n      {work[id] && work[id] !== '?' && <span data-testid='Status'>{work[id]}</span>}\n      {itemNames.length > 0 && <div className='Subitems' data-testid='Inventory'>\n        <ul>\n          {itemNames.sort((a,b) => a > b ? 1 : -1).map(it => <li key={it} style={{\n              ...(things.count(it) === 0 ? { display: 'none' } : {})\n            }}>\n            {it} <span data-testid={it}  className='Count'>{things.count(it)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      {traits.list().length > 0 && <div className='Traits' data-testid='Trait Ranks'>\n        <ul>\n          {traits.list().map(trait => <li key={trait.id} style={{\n              ...(traits.count(trait.name) === 0 ? { display: 'none' } : {})\n            }}>\n            {trait.name} <span data-testid={trait.name}>{traits.count(trait.name)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      \n    </li>;\n  };\n}\n","import { Machine, Moiety, Person } from \"../types\";\nimport { LastDelta } from \"../../ModelPresenter\";\nimport { presentItem } from \"../Model/presentItem\";\nimport './View.css';\nimport { Tile } from \"./Tile\";\nimport { presentCommunity } from \"./presentCommunity\";\nimport { Population } from \"../Population\";\nimport { Community } from \"../Community\";\nimport { useState } from \"react\";\n\nexport type ModelViewProps = {\n  modelName: string;\n  items: { name: string; amount: number; }[];\n  animals: { name: string; amount: number }[];\n  communities: Population<Moiety, Person>[];\n  machines: Machine[];\n  lastChanges: LastDelta;\n  metrics: { [name: string]: number }; //[ { name: string, value: number} ];\n  notes: { [name: string]: string }; //[ { name: string, value: number} ];\n  board: IBoard\n}\n\ninterface IBoard { tiles: string[][], tileColors: { [tile: string]: string }, tileInspect: (x: number, y: number) => string}\n\nconst BoardTable = ({ tiles, tileColors, tileInspect }: IBoard) => {\n  // const [isInspecting, setIsInspecting] = useState(false);\n  const [inspecting, setInspecting] = useState([-1,-1]);\n  const message = inspecting[0] > 0 && inspecting[1] > 0\n    ? tileInspect(inspecting[0], inspecting[1])\n    : <>--</>\n\n  return <div style={{ flexDirection: \"column\"}}>\n    <div>{message}</div>\n    <table style={{\n      // fontFamily: 'monospace',\n      fontFamily: '\"Source Code Pro\", \"Fira Code\", \"Inconsolata\", Menlo, Monaco, \"Courier New\", monospace',\n      // fontWeight: 'bold',\n      fontSize: '8pt',\n      cursor: 'pointer'\n    }}>\n      <tbody>\n        {tiles.map((row: string[], y: number) =>\n          <tr key={`row-${y}`}>\n            {row.map((cell: string, x: number) =>\n              <td style={{ color: tileColors[cell], backgroundColor: inspecting[0] === x && inspecting[1] === y ? 'gray': 'black'}}\n                  key={`cell-${x}-${y}}`}\n                  onMouseEnter={() => setInspecting([x,y])}\n                  onMouseLeave={() => setInspecting([-1,-1])}\n              >{cell}</td>\n            )}\n          </tr>\n        )}\n      </tbody>\n    </table>\n  </div>\n}\n\nexport function ModelView({\n  modelName,\n  items,\n  // individuals,\n  communities,\n  machines,\n  animals,\n  lastChanges,\n  metrics,\n  notes,\n  board,\n  // work\n}: ModelViewProps) {\n  const folks = (communities as Community[]).map(presentCommunity)\n  // console.log({ community: communities[0].list() })\n  return <div className='Model'>\n    <h4 aria-label='Model Title' style={{display: 'none'}}>{modelName}</h4>\n    {board.tiles.length > 0 && <BoardTable {...board} />}\n    {items.length > 0 && (<Tile title='Items'>\n      <ul aria-label='Resources'>\n        {items.map(presentItem(lastChanges.resources))}\n      </ul>\n    </Tile>)}\n    {animals.length > 0 && (\n      <Tile title='Animals'>\n        <ul aria-label='Animals'>\n          {animals.map(presentItem(lastChanges.animals))}\n        </ul>\n      </Tile>)}\n      {communities.length > 0 && <div title='Individuals' style={{display: 'flex'}}>{folks}</div>}\n    {machines.length > 0 && <Tile title='Machines'>\n      <ul>\n        {machines.map(({ name }) => <li key={name}>{name}</li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(metrics).length > 0 && <Tile title='Metrics'>\n      <ul>\n        {Object.entries(metrics).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Count'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(notes).length > 0 && <Tile title='Notes'>\n      <ul>\n        {Object.entries(notes).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Description'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n  </div>;\n}\n","import { Model } from './Model';\nimport { IModel } from './IModel';\nimport { ModelView } from '../View/ModelView';\nexport { Model, ModelView }\nexport type { IModel }\nexport default Model\n","// import { IAssembly } from './ecosphere/Assembly';\nimport { ModelView } from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\n\nexport type LastDelta = { [group: string]: { [element: string]: number }}\n\ntype ModelPresenterProps = {\n  model: IModel\n  step: Function \n  send: Function\n  choose: Function\n  lastChanges: LastDelta\n}\n\nconst view = (model: IModel, lastChanges: LastDelta) => {\n  const { actions, resources, people, machines, animals, metrics, notes, tiles, tileColors } = model;\n\n  const props = {\n    modelName: model.name,\n    items: resources.report,\n    communities: people.populationList, //.populations,\n    // individuals: people.list(),\n    // work: people.report,\n    machines: machines.list(),\n    animals: animals.report,\n    actions: actions.list(),\n    metrics: Object.fromEntries(\n      Object.entries(metrics).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    notes: Object.fromEntries(\n      Object.entries(notes).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    lastChanges,\n    board: { tiles: tiles || [], tileColors: tileColors || {}, tileInspect: (model.tileInspect || (() => '--')) }\n  }\n\n  return props\n}\n\nexport function ModelPresenter({ model, send, choose, step, lastChanges }: ModelPresenterProps) {\n  return <>\n    <div aria-label='View'>\n      <ModelView {...view(model, lastChanges)} />\n    </div>\n\n    <div aria-label='Controls'>\n      <span title='Run' style={{display: 'none'}}>\n        <button onClick={() => step(true)}>Step</button>\n      </span>\n\n      <span title='Actions'>\n        {model.actions.list().map(({ name }) => <button title={name} key={name} onClick={() => send(name)}>\n          {name}\n        </button>)}\n      </span>\n\n      {model.policies.count > 0 && <div className='Policy' title='Policies'>\n        {/* <h5>Policies</h5> */}\n        {model.policies.list().map(({ name }) => <label key={name}><input\n          type='radio'\n          checked={model.currentPolicy?.name === name}\n          title={name}\n          key={name}\n          onChange={() => choose(name)}\n        />\n        {name}\n        </label>)}\n      </div>}\n    </div>\n  </>;\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { LastDelta } from './ModelPresenter';\nimport { isModel } from './ModelSelector';\n\nexport type ModelAPI = {\n  model: IModel | IAssembly\n  setModel(model: IModel | IAssembly): void\n  step: Function,\n  lastChanges: LastDelta,\n  send: (actionName: string, args: any) => void,\n  choose: (policyName: string, args: any) => void,\n  setDelay: (milliseconds: number) => void\n}\n\n// ticks per sec\n// const ticksPerSecond = (n: number) => n > 0 ? Math.floor(1000 / n) : 1\n// const speeds = {slow: 10, fast: 25, faster: 50, fastest: 80};\nexport function useModel(initialModel: IModel | IAssembly): ModelAPI { //model: IModel = new Model('Hello World')): ModelAPI {\n  const [model, setModel] = useState(initialModel) //new Model('Hello World'))\n\n  const [lastChanges, setLastChanges] = useState({} as LastDelta)\n  const isTest = process.env.NODE_ENV === 'test'\n  const [delay, setDelay] = useState(isTest ? 5000 : 2) //ticksPerSecond(speeds.slow));\n\n  const [shouldStep, step] = useState(false);\n  const [shouldSend, doSend] = useState(false);\n  const [shouldManage, doManage] = useState(false)\n\n  const performStep = () => { step(true); };\n  const [command, setCommand] = useState('')\n  const [policy, setPolicy] = useState('')\n\n  useEffect(() => {\n    if (shouldSend) {\n      if (command && isModel(model)) { model.send(command, {}) }\n      doSend(false)\n    }\n  }, [command, model, shouldSend]);\n\n  useEffect(() => {\n    if (shouldManage) {\n      if (policy && isModel(model)) { model.choose(policy, {}) }\n      doManage(false)\n    }\n  }, [policy, model, shouldManage]);\n\n  const performSend = (actionName: string, args: any) => {\n    setCommand(actionName)\n    doSend(true)\n  }\n\n  const performChoose = (policyName: string, args: any) => {\n    // console.log(\"CHOOSE\", policyName)\n    setPolicy(policyName)\n    doManage(true)\n  }\n\n  useEffect(() => {\n    if (shouldStep && isModel(model)) {\n      let { changed } = model.step();\n      step(false);\n      setLastChanges(changed);\n    }\n  }, [shouldStep, model]);\n\n  useInterval(() => step(true), delay); \n\n  return {\n    model,\n    step: performStep,\n    lastChanges: lastChanges as LastDelta,\n    send: (actionName: string, args: any) => performSend(actionName, args), \n    choose: (policyName: string, args: any) => performChoose(policyName, args),\n    setDelay,\n    setModel,\n  };\n}\n\nfunction useInterval(callback: any, delay: number) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      // @ts-ignore\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport Model from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelPresenter } from './ModelPresenter';\nimport { useModel } from './useModel';\n\nexport const isModel = (maybeModel: IModel | IAssembly): maybeModel is IModel => {\n  return maybeModel instanceof Model;\n}\n\nconst AssemblyPresenter: React.FC<{ assembly: IAssembly }> = ({ assembly }) => {\n  return <>{assembly.models.items.map((theModel: IModel) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { step, send, choose, lastChanges, model } = useModel(theModel);\n    return <>\n    <h4>{theModel.name}</h4>\n    <ModelPresenter\n             key={model.name}\n             step={step}\n             send={send}\n             model={model as IModel}\n             choose={choose}\n             lastChanges={lastChanges}\n           />\n           </>\n  })}</>\n}\n\nexport function ModelSelector({ initialModel, models }: {\n  initialModel: IModel;\n  models: (IModel | IAssembly)[];\n}) {\n  const { step, send, choose, lastChanges, model, setModel } = useModel(initialModel);\n  return <>\n    <Dropdown\n      options={models.map(model => model.name)}\n      onChange={({ value }) => {\n        const theModel = models.find((model: IModel | IAssembly) => model.name === value);\n        if (theModel) { setModel(theModel); }\n      }}\n      value={model.name}\n      placeholder=\"Select a model\" />\n    {isModel(model) ? <ModelPresenter\n                       step={step}\n                       send={send}\n                       model={model}\n                       choose={choose}\n                       lastChanges={lastChanges} />\n                    : <AssemblyPresenter assembly={model} />}\n  </>;\n}\n","// import Model from \"../ecosphere/Model\"\n\nimport Model from \"../ecosphere/Model\"\nimport { Person } from \"../ecosphere/types\"\n\nconst give = (recipient: Person, supplier: Person, n: number, item: string) => {\n  supplier.things.remove(n, item)\n  recipient.things.add(n, item)\n}\n\nconst world = new Model('Avernus')\nconst { resources, animals, people } = world\nconst folks = people.create('Townspeople')\nconst { recipes, jobs } = folks\n\nanimals.create('Fish')\n// resources.create('Fish')\n\n\n// const king = people.create('Maurice')\nconst miner = folks.create('Goldstrom')\nconst minter = folks.create('Octavius')\nconst smelter = folks.create('Smeltmore')\n// //const sheriff = people.create('Donald')\n// const claydigger = people.create('Bartlett')\n// const artist = people.create('Joseph')\nconst fisherman = folks.create('Harold')\n// const chef = people.create('Jethro')\n// const merchant = people.create('Reginald')\n\n// //set inventory\n// merchant.things.add(50, 'Gold Coin')\n\n\n// //create global resources\n// animals.create('Swimming Fish')\n// animals.add(500, 'Swimming Fish')\nresources.create('Gold Ore')\nresources.create('Gold Deposit')\nresources.create('Gold Bar')\nresources.create('Gold Coin')\n\nresources.add(100000000, 'Gold Deposit')\n// resources.create('Clay Deposit')\n// resources.add(10000, 'Clay Deposit')\n\n//create produced goods\n\n\n\n//jobs\n\n// const kingGold = recipes.create({\n//   name: 'Taking Gold',\n//   produces: { 'King Gold': 1 },\n//   consumes: { 'Gold Coin': 1 },\n// })\n\nconst mineGold = recipes.create({\n  name: 'Mining Gold',\n  produces: { 'Gold Ore': 1 },\n  consumes: { 'Gold Deposit': 10 },\n})\n\nconst smeltGold = recipes.create({\n  name: 'Smelt Gold',\n  produces: { 'Gold Bar': 1 },\n  consumes: { 'Gold Ore': 10 }\n})\n\nconst mintCoin = recipes.create({\n  name: 'Minting Gold Coins',\n  produces: { 'Gold Coin': 10 },\n  consumes: { 'Gold Bar': 1 },\n})\n\n// const digClay = recipes.create({\n//   name: 'Digging Clay',\n//   produces: { 'Clay Brick': 1 },\n//   consumes: { 'Clay Deposit': 1 },\n// })\n\n// const castPot = recipes.create({\n//   name: 'Casting Pottery',\n//   produces: { 'Fine Pottery': 1 },\n//   consumes: { 'Clay Brick': 1 },\n// })\n\n// const catchFish = recipes.create({\n//   name: 'Catching Fish',\n//   produces: { 'Caught Fish': 1 },\n//   consumes: { 'Swimming Fish': 1 },\n// })\n\n// const cookFish = recipes.create({\n//     name: 'Cooking Fish',\n//     produces: { 'Cooked Fish': 1 },\n//     consumes: { 'Caught Fish': 1 },\n// })\n\n//Set Jobs\njobs.set(miner, mineGold)\njobs.set(minter, mintCoin)\njobs.set(smelter, smeltGold)\n// jobs.set(claydigger, digClay)\n// jobs.set(artist, castPot)\n// jobs.set(fisherman, cookFish)\n// jobs.set(chef, cookFish)\n\nworld.evolve(({ resources, animals }, t) => {\n  // animals.add(1, 'Swimming Fish')\n\n  folks.work({ resources })\n\n  // employment\n  if (t % 10 === 0) {\n    const thePeople = [miner, minter, smelter]\n    thePeople.forEach(person => {\n      person.things.add(1, 'Gold Coin')\n      resources.remove(1, 'Gold Coin')\n    })\n  }\n\n  // taxation\n  // if (t % 1000 === 0) {\n  //   resources.remove()\n  // }\n\n  // wildlife hunting + fishing\n  if (t % 10 === 0) { // \n    // huntWildlife('Fish')\n    fisherman.things.add(1, 'Fish')\n    animals.remove(1, 'Fish')\n  }\n\n  // trade\n  const thePeople = [miner, minter, smelter]\n  // const theGoods = ['Fish', ]\n  thePeople.forEach(person => {\n    if (fisherman.things.count('Fish') > 3 && person.things.count('Gold Coin') > 5) {\n      give(fisherman, person, 5, 'Gold Coin')\n      give(person, fisherman, 1, 'Fish')\n    }\n  })\n})\n\n\nexport {world as Avernus}\n","import { Sequence } from \"../../collections\";\nimport { Person } from \"../../ecosphere/types\";\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\";\nimport { sample } from \"../../ecosphere/utils/sample\";\n\nexport class MonsterManual {\n  basicCreatures = {\n    Fragment: { hp: 1, evasion: 95 },\n    Light: { hp: 24, evasion: 1 },\n    Fog: { hp: 26, evasion: 1, reflect: 10 },\n    Aura: { hp: 28, evasion: 1, speed: 1 },\n    Shadow: { hp: 38, evasion: 1, speed: 2 },\n    Wisp: { hp: 40, strength: 1, speed: 1, evasion: 1 },\n    Filament: { hp: 43, evasion: 1, speed: 1, counter: 1 },\n    Voice: { hp: 53, evasion: 1, speed: 1, counter: 1, absorb: 1, defense: 1 },\n    Nothing: { hp: 63, regen: 1, speed: 1, defense: 1, reflect: 1 },\n  };\n\n  challengingCreatures = {\n    // 'Gray Mote': { hp: 8, 'magic damage': 3 },\n    Fiendling: { hp: 12, 'holy damage': 1 }, //, speed: 1, counter: 1, evasion: 1 },\n    Gremlin: { hp: 22, speed: 1, counter: 1 }, // evasion: 1 },\n    Goblin: { hp: 30 },  //, 'magic damage': 1 },\n    Kobold: { hp: 40, strength: 1 }, // speed: 2 },\n    Orc: { hp: 48, strength: 1, speed: 1 }, //, counter: 1 },\n  }\n\n  uncommonCreatures = {\n    Rat: { hp: 14, strength: 1, speed: 3, evasion: 1 },\n    Bat: { hp: 18, strength: 2, speed: 2, evasion: 1, },\n    Snake: { hp: 15, strength: 3, speed: 2, evasion: 2, },\n    Blob: { hp: 24, strength: 2, speed: 1, evasion: 1 },\n    Bear: { hp: 30, strength: 3, speed: 2, evasion: 1 },\n    Ghost: { hp: 70, 'magic damage': 1, evasion: 1, counter: 1, speed: 1, absorb: 1, defense: 1 },\n    Rogue: { hp: 74, strength: 2, speed: 1, 'bonus damage': 2, evasion: 2, counter: 2 },\n    Troll: { hp: 83, strength: 2, speed: 2, regen: 1, counter: 1 },\n    Giant: { hp: 95, strength: 2, speed: 2, defense: 1, absorb: 1 },\n  };\n\n  bosses = {\n    Priest: { hp: 57, heal: 4, 'holy damage': 6, defense: 6, 'holy defense': 3, evasion: 2 },\n    Vampire: { hp: 84, strength: 2, speed: 3, 'magic damage': 1, absorb: 2, evasion: 2 },\n    Drake: { hp: 100, strength: 3, speed: 2, regen: 2, 'magic damage': 2, evasion: 2 },\n    Lich: { hp: 140, strength: 4, speed: 6, defense: 6, 'magic damage': 6, evasion: 6 },\n  };\n\n  extraplanar = {\n    Demon: { hp: 166, strength: 3, speed: 6, counter: 6, evasion: 6 },\n    Angel: { hp: 199, evasion: 2, absorb: 2, regen: 2, counter: 9, defense: 9, 'magic defense': 2, 'holy damage': 9 },\n    Archdemon: { hp: 366, absorb: 6, strength: 6, speed: 6, defense: 6, evasion: 6, 'magic damage': 6, 'holy damage': 16 },\n    Dracolith: { hp: 247, strength: 7, 'magic damage': 7, speed: 7, defense: 7, evasion: 7, counter: 7 },\n    Archangel: { hp: 299, absorb: 9, strength: 9, speed: 9, defense: 9, evasion: 9, 'magic defense': 9, 'holy defense': 9, 'holy damage': 99 },\n\n    'Brutal Light': { hp: 123, speed: 2, strength: 6, 'bonus damage': 5, evasion: 4 },\n    'Floating Sigil': { hp: 234, speed: 10, defense: 10, counter: 10 },\n    'Astral Filament': { hp: 1234, strength: 15, absorb: 10, evasion: 5, counter: 1, regen: 1 },\n    'Essence Sphere': { hp: 12345, 'magic damage': 12, 'holy damage': 12, 'bonus damage': 12 },\n  };\n\n  dragons = {\n    // ...and dragons :)\n    'Green Dragon': { hp: 900, strength: 5, speed: 8, defense: 4, 'magic damage': 16, evasion: 24 },\n    'Red Dragon': { hp: 1100, strength: 7, speed: 9, defense: 14, 'magic damage': 26, evasion: 34 },\n    'Blue Dragon': { hp: 2100, strength: 9, speed: 11, defense: 24, 'magic damage': 36, evasion: 44 },\n    'Golden Dragon': { hp: 2400, strength: 11, speed: 15, defense: 34, 'magic damage': 66, evasion: 55 },\n    'Black Dragon': { hp: 2900, strength: 11, speed: 15, defense: 34, 'magic damage': 66, evasion: 55 },\n    'Primordial Dragon': { hp: 3919, strength: 30, speed: 30, defense: 30, 'magic damage': 30, evasion: 30 },\n  };\n\n  rareCreatures = {\n    'Eldritch Lich': { hp: 2500, strength: 8, speed: 6, defense: 4, 'magic damage': 13, evasion: 5 },\n    'Primordial Vampire': { hp: 3800, strength: 3, speed: 10, defense: 10, 'holy defense': 10, 'magic defense': 10, 'magic damage': 3, evasion: 3, absorb: 4 },\n    Leviathan: { hp: 9999, strength: 10, speed: 10, defense: 25, evasion: 25, counter: 25 },\n    ...this.extraplanar,\n    ...this.dragons\n  };\n\n\n  bestiary: { [monster: string]: { [attr: string]: number; }; } = {\n    ...this.basicCreatures,\n    ...this.uncommonCreatures,\n    ...this.challengingCreatures,\n    ...this.rareCreatures,\n    ...this.bosses,\n  };\n\n  basicSubtypes = {\n    Hostile: { strength: 1 }, Intimidating: { strength: 2 },\n    Nimble: { speed: 1 }, Quick: { speed: 2 },\n    Timid: { evasion: 1 }, Spry: { evasion: 2 }, Dancing: { evasion: 3 },\n    Vigilant: { regen: 1 }, Relentless: { regen: 2 },\n    Armored: { defense: 1 }, Hardened: { defense: 2 },\n    Benevolent: { heal: 1 }, Protective: { heal: 2 },\n    Snarling: { counter: 1 },\n\n    Emboldened: { 'bonus damage': 1 },\n    Floating: { evasion: 1, speed: 1 },\n    Crystalline: { reflect: 1 },\n    Glinting: { reflect: 2 },\n    Mobile: { speed: 1 },\n    Coldsnap: { speed: 1, regen: 1 },\n    Blinding: { reflect: 1, absorb: 1 },\n    Noxious: { defense: 1, counter: 1, absorb: 1 },\n  };\n\n  rareSubtypes: { [type: string]: { [attr: string]: number; }; } = {\n    Voracious: { hp: 5, strength: 1, speed: 1 },\n    Vicious: { hp: 10, strength: 1, defense: 1 },\n    Vexatious: { hp: 15, counter: 1, evasion: 1 },\n    Arrogant: { hp: -5, evasion: 1, counter: 1, speed: 1 },\n    Querulous: { hp: -10, strength: 1, speed: 1, regen: 1, absorb: 1, defense: 1 },\n\n    Adventurous: { hp: 5, 'bonus damage': 2 },\n    Questing: { hp: 10, 'bonus damage': 3 },\n\n    Silvered: { reflect: 2 }, Mirrored: { reflect: 3 },\n    Aggressive: { strength: 3 }, Dominating: { strength: 4 },\n    Swift: { speed: 3 }, Accelerated: { speed: 4 },\n    Elusive: { evasion: 4 }, Reluctant: { evasion: 5 }, Hidden: { evasion: 6 }, Invisible: { evasion: 8 }, Imperceptible: { evasion: 15 },\n    Regrowing: { regen: 3 }, Hydra: { regen: 4 },\n    Fortified: { defense: 3 },\n    Angelic: { heal: 3, 'holy damage': 2 },\n    Prismatic: { reflect: 3, absorb: 2, evasion: 1 },\n    // Hardened: { defense: 3, strength: 1, evasion: 1 },\n    Pugnacious: { 'bonus damage': 1, evasion: 1, counter: 1 },\n\n    // Elusive: { evasion: 1, defense: 1, regen: 1 },\n    Augmented: { strength: 1, 'magic damage': 1, 'bonus damage': 1 },\n    Skillful: { defense: 1, strength: 1, speed: 1, evasion: 1, counter: 1 },\n    Skeletal: { hp: -1, evasion: 2, absorb: 1, regen: 1 },\n    Undead: { hp: -1, strength: 1, regen: 1, absorb: 1, speed: 1, evasion: 1 },\n    Zombie: { hp: -2, evasion: 1, regen: 2, strength: 1 },\n    Favored: { hp: 1, strength: 2, speed: 2, 'magic damage': 1, regen: 1, evasion: 1 },\n    Fiendish: { hp: 2, strength: 3, speed: 3, defense: 1, regen: 1, evasion: 2 },\n    Fierce: { hp: 2, strength: 4, speed: 4, defense: 2, absorb: 2, evasion: 3, },\n    Opalescent: { hp: 2, reflect: 4, absorb: 2, evasion: 2, counter: 2, heal: 2 },\n    Cruel: { hp: 3, strength: 5, speed: 5, 'magic damage': 3, 'bonus damage': 2, absorb: 3, regen: 1, evasion: 4 },\n\n    Vortex: { hp: 1, reflect: 10, absorb: 10, evade: 50, counter: 50 },\n    Shadow: { hp: 2, 'magic damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Luminous: { hp: 3, 'holy damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Defiant: { hp: 1, 'bonus damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Devious: { hp: 2, evasion: 2, counter: 20, absorb: 20 },\n    Draconic: { hp: 3, 'magic damage': 1, counter: 20, absorb: 20 },\n  };\n\n  subtypes: { [type: string]: { [attr: string]: number; }; } = {\n    Common: {},\n    Evasive: { evasion: 3, counter: 2 },\n    Retaliatory: { defense: 1, counter: 2 },\n    Inspired: { 'bonus damage': 1 },\n    Infused: { 'bonus damage': 2, 'magic damage': 1 },\n    Radiant: { 'holy damage': 1 },\n    Resplendent: { 'holy damage': 2, strength: 1, speed: 1 },\n    Heavy: { strength: 2, defense: 2 },\n    Titanic: { strength: 4, defense: 2 },\n    Unholy: { 'magic damage': 1, 'holy defense': 1 },\n    Blessed: { 'holy damage': 1, absorb: 1 },\n    Adept: { evasion: 1, counter: 1, defense: 1, strength: 1 },\n    ...this.basicSubtypes,\n    ...this.rareSubtypes,\n  };\n\n\n  perks: { [type: string]: { [attr: string]: number; }; } = {\n    Piercing: { hp: 15, strength: 1, defense: 1, evasion: 1, 'bonus damage': 1, },\n    Blessed: { hp: 15, absorb: 1, defense: 1, regen: 1, 'holy damage': 1, },\n    Enchanted: { hp: 15, defense: 1, evasion: 1 },\n    Clockwork: { hp: 15, defense: 1, speed: 2, evasion: 1 },\n    Phantasmal: { hp: 25, defense: 1, evasion: 4 },\n    Cosmic: { hp: 30, defense: 3, evasion: 3, strength: 3 },\n    Imperious: { hp: 40, defense: 4, 'magic damage': 3, speed: 3 },\n    // Obsidian: { hp: 15, defense: 1, speed: 2, evasion: 1 },\n    // Provocative: { hp: 50, defense: 5, evasion: 3, 'bonus damage': 4, 'magic damage': 3, speed: 3 },\n    // Challenging: { hp: 150, defense: 20, strength: 2, regen: 1, speed: 1, 'bonus damage': 5, evasion: 1 }\n  };\n  monsterIds = new Sequence();\n\n  difficulty = 1; // global multiplier on monster stats\n\n  generateBasicMonster(creature: Person) {\n    let base = sample(Object.keys(this.basicCreatures))\n    let type = randomInteger(0, 20) > 16 ? sample(Object.keys(this.basicSubtypes)) : 'Common';\n    // let type = 'Common'\n    // creature.name = `${type} ${base} (${this.monsterIds.next})`;\n    const name = type === 'Common' ? base : [type, base].join(' ');\n    creature.name = name\n    // creature.things.add(5 + Math.floor(0.05 * cr * cr), 'hp')\n    const crFactor = 1\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.subtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n  }\n\n  generate(creature: Person, cr: number = 1) {\n    if (cr <= 6) { this.generateBasicMonster(creature); return }\n    // console.log(\"generate monster with cr \" + cr);\n    // const simpleCreatures = ['Snake', 'Blob', 'Bat', 'Wisp']\n    let base = sample(Object.keys(this.challengingCreatures)) //cr <= 10 ? sample(Object.keys(this.basicCreatures)) : sample(Object.keys(this.challengingCreatures));\n\n\n    let type = randomInteger(0, 20) > 16 ? sample(Object.keys(this.basicSubtypes)) : 'Common';\n\n    // all subtypes..\n    if (cr >= 20 && randomInteger(0, 20) > 19) { type = sample(Object.keys(this.subtypes)); }\n\n    // all bases\n    if (cr >= 25 && randomInteger(0, 20) > 19) { base = sample(Object.keys(this.bestiary)); }\n\n    const name = type === 'Common' ? base : [type, base].join(' ');\n    creature.name = `${name} (${this.monsterIds.next})`;\n    const adjustedCr = 0.0015 * cr * cr;\n    // creature.things.add(1 + cr + Math.floor(100 * adjustedCr), 'hp')\n\n    const crFactor = this.difficulty + adjustedCr * 2;\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.subtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    creature.things.add(creature.things.count('hp'), 'max hp');\n    if (cr >= 15) {\n      creature.things.add(randomInteger(1, cr/2), 'defense');\n      creature.things.add(randomInteger(1, cr/2), 'strength');\n    }\n    if (cr >= 25) {\n      creature.things.add(randomInteger(1, cr/2), 'evasion');\n      creature.things.add(randomInteger(1, cr/2), 'counter');\n    }\n    if (cr >= 35) {\n      creature.things.add(randomInteger(1, cr/2), 'magic damage');\n      creature.things.add(randomInteger(1, cr/2), 'chain chance');\n    }\n    if (cr >= 45) {\n      creature.things.add(randomInteger(1, cr/2), 'holy damage');\n      creature.things.add(randomInteger(1, cr/2), 'reflect');\n    }\n  }\n\n  generateBoss(creature: Person, cr: number = 1) {\n    const base = sample(Object.keys(this.bosses));\n    const type = sample(Object.keys(this.rareSubtypes));\n    const perk = sample(Object.keys(this.perks));\n    const name = [perk, type, base].join(' ');\n    creature.name = name; // `${name} (${this.monsterIds.next})`\n    const crFactor = this.difficulty + 0.01 * cr;\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.rareSubtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.perks[perk]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    creature.things.add(creature.things.count('hp'), 'max hp');\n  }\n}\n","import { Person } from \"../../ecosphere/types\";\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\";\nimport { sample } from \"../../ecosphere/utils/sample\";\n\nexport class PlayerHandbook {\n  static levelCost(level: number) {\n    // throw new Error(\"Method not implemented.\");\n    return Math.floor(Math.pow(2, 5+level))\n  }\n  // okay, i guess give them the class as a perk... then each level up we can check + bump one of the class\n  // nice to have: sick multi-classing\n  static characterClasses: { [name: string]: { attributes: { [attr: string]: number; }; traits: string[]; }; } = {\n    Fighter: {\n      attributes: {\n        hp: 12,\n        strength: 1,\n        defense: 1,\n        speed: 0,\n        'bonus damage': 0,\n        'chain chance': 0,\n        'max chain': 0,\n      },\n      traits: ['Fitness', 'Combat Veteran']\n    },\n    // Knight: { attributes: { hp: 15, strength: 2, defense: 2, counter: 0, 'max chain': 0, 'chain chance': 0 }, traits: ['Medic'] },\n    // Mage: { attributes: { 'magic damage': 2, 'magic defense': 1, 'holy defense': 0 }, traits: ['Focus'] },\n    // Cleric: { attributes: { heal: 1, 'holy damage': 0, 'holy defense': 0 }, traits: ['Holy Symbol'] },\n    // Monk: { attributes: { hp: 5, 'reflect': 0, defense: 1, 'magic defense': 0, 'hp per step': 0 }, traits: ['Faith'] },\n    // Thief: { attributes: { hp: 10, speed: 1, evasion: 1, counter: 1, 'gold per kill': 0 }, traits: ['Swiftness'] },\n  };\n\n  static attributes: { [attrGroup: string]: string[]; } = {\n    // basic: [\n    // ],\n    common: [\n      'max hp',\n\n      // 'hp per victory',\n      // 'hp per day',\n      // 'hp per step',\n      // 'xp per kill',\n      // 'xp per li',\n      // 'xp per victory',\n      // 'xp per day', //'gold per li'\n      // 'gold per victory',\n      // 'xp per step',\n      // 'gold per day'\n      // 'gold per day',\n      // 'hp per day', // 'gold per day'\n      // 'max hp', 'xp per victory', 'hp per day', 'gold per day', 'xp per li', \n    ],\n    uncommon: [\n      // 'xp per victory',\n      // 'gold per victory',\n      'hp per victory'\n    ],\n    rare: [\n      'hp per day',\n      // 'evasion',\n      // 'crit damage',\n      // 'xp per step',\n      // 'max chain', //'hp per step'\n    ],\n    epic: [\n      'hp per step',\n      // 'xp per day', 'gold per step',\n      // 'xp per day', //'gold per li'\n      // 'counter',\n      // 'crit chance',\n    ],\n    legendary: [\n      'hp per kill',\n      // 'xp per kill',\n      // 'xp per li',\n      // 'xp per victory',\n      // 'counter',\n      // 'evasion',\n      // 'defense',\n      // 'strength',\n      // 'magic damage',\n      // 'holy damage',\n      // 'bonus damage',\n      // 'reflect',\n      // 'heal',\n      // 'damage to all',\n      // 'chain chance',\n    ],\n  };\n\n  // some perks benefits the effective value of a stat by adding % bonus per rank\n  static perkBenefits: { [perk: string]: { [attr: string]: number; }; } = {\n    'Cloaking Robe of Elvenkind': { 'magic damage': 0.05, 'magic defense': 0.5, evasion: 0.25, 'holy defense': 0.05 },\n    'Combat Veteran': { strength: 0.05, defense: 0.05, counter: 0.05, evasion: 0.05, 'crit damage': 0.05, 'bonus damage': 0.05, },\n    'Fine Raiment': { 'magic damage': 0.1, 'magic defense': 0.2, defense: 0.15, evasion: 0.1 },\n    'Holy Symbol': { 'holy damage': 0.5, 'holy defense': 0.15, heal: 0.1, regen: 0.1 },\n    'Royal Armorer': { defense: 0.5, 'holy defense': 0.25, 'magic defense': 0.25, evasion: 0.25 },\n    // Barbarian: { 'bonus damage': 0.5, 'crit damage': 0.05, strength: 0.15, 'chain chance': 0.1, 'max chain': 0.1 },\n    Brutality: { strength: 0.5, speed: 0.25, 'bonus damage': 0.25, 'max chain': 0.1 },\n    Counterweight: { counter: 0.5, evasion: 0.1, 'crit damage': 0.05, 'max chain': 0.1 },\n    Efferverscence: { regen: 0.25, counter: 0.25, 'crit damage': 0.25, 'holy defense': 0.25, 'max chain': 0.25 },\n    Efficacious: { counter: 0.1, evasion: 0.1, 'bonus damage': 0.1, strength: 0.1, defense: 0.1, 'magic defense': 0.1, heal: 0.1 },\n    Opalescence: { reflect: 0.2, absorb: 0.2, evasion: 0.2, defense: 0.2, regen: 0.2, heal: 0.2 },\n    Ethereal: { 'magic damage': 0.25, 'magic defense': 0.25, evasion: 0.5, defense: 0.25 },\n    Faith: { 'holy damage': 0.25, 'holy defense': 0.5, heal: 0.25, regen: 0.1 },\n    Finesse: { 'crit chance': 0.25, 'crit damage': 0.15, 'max chain': 0.05, 'chain chance': 0.1 },\n    Fitness: { strength: 0.1, defense: 0.1, speed: 0.1, evasion: 0.1, counter: 0.1, regen: 0.1 },\n    Fluidity: { 'crit chance': 0.1, 'crit damage': 0.1, evasion: 0.1, counter: 0.1, speed: 0.1 },\n    Dexterity: { defense: 0.25, 'magic defense': 0.1, speed: 0.1, evasion: 0.1, 'chain chance': 0.1 },\n    Precision: { speed: 0.1, 'crit damage': 0.25, evasion: 0.05, 'max chain': 0.1 },\n    Swiftness: { speed: 0.2, counter: 0.15, 'crit chance': 0.15, defense: 0.1 },\n    Rapidity: { speed: 0.5, counter: 0.1, 'crit damage': 0.25, evasion: 0.1 },\n    Medic: { heal: 0.5, regen: 0.1, absorb: 0.1, defense: 0.1 },\n    Vitality: { strength: 0.1, speed: 0.25, regen: 0.5, heal: 0.1 },\n    Whirlwind: { 'chain chance': 0.5, 'max chain': 0.5, 'damage to all': 0.5, 'bonus damage': 0.1 },\n    Focus: { 'magic damage': 0.5, 'magic defense': 0.25, 'holy damage': 0.1, 'holy defense': 0.5 },\n    Iridescence: { 'magic damage': 0.5, 'holy damage': 0.5, 'bonus damage': 0.5, 'damage to all': 0.5 },\n    Concentration: { 'magic defense': 0.25, 'holy defense': 0.5, defense: 0.1, evasion: 0.1, counter: 0.1 },\n    Salvation: { 'holy damage': 0.5, 'holy defense': 0.2, defense: 0.1, reflect: 0.1, absorb: 0.1 },\n  };\n\n  static perks: { [perkGroup: string]: string[]; } = {\n    common: [\n      'Fitness',\n      'Finesse',\n      'Rapidity',\n      'Precision',\n      'Medic',\n      'Focus', // +10% to magic dmg per rank\n    ],\n    uncommon: [\n      'Concentration',\n      'Swiftness',\n      'Fluidity',\n      'Faith',\n      'Combat Veteran',\n      'Efficacious', // small bonuses to many skills\n    ],\n    rare: [\n      'Dexterity',\n      // 'Barbarian',\n      'Brutality',\n      'Ethereal',\n      'Perspicuous',\n      'Vitality', // boost to regen\n    ],\n    epic: [\n      'Iridescence',\n      'Fine Raiment',\n      'Royal Armorer',\n      'Whirlwind', // bonus % to chain chance + damage to all\n    ],\n    legendary: [\n      'Salvation',\n      'Eternal Victory',\n      'Perfectionist',\n      'Effervescence', // decent bonuses to many skills\n      'Opalescence',\n    ]\n  };\n\n  static generate(hero: Person, characterClass: string) {\n    const baseStartingHp = 10;\n    hero.traits.add(1, characterClass)\n    hero.things.add(baseStartingHp, 'hp')\n    hero.things.add(1, 'strength')\n    hero.things.add(1, 'speed')\n    // hero.things.add(randomInteger(1,4), 'evasion')\n    // hero.things.add(randomInteger(1,4), 'counter')\n    const template = this.characterClasses[characterClass];\n    Object.keys(template.attributes).forEach(attr => {\n      const amount = template.attributes[attr]\n      hero.things.add(amount, attr)\n    });\n    (template.traits).forEach(trait => hero.traits.add(1, trait))\n    // hero.things.add(2000, 'xp per li')\n    hero.things.add(15, 'xp per victory')\n    // hero.things.add(1, 'gold per day')\n    // hero.things.add(Math.floor(baseStartingHp * 0.75), 'hp per victory')\n    hero.things.add(Math.floor(baseStartingHp * 1.2), 'max hp')\n    hero.traits.add(4, 'Potion of Life')\n    hero.things.add(1, 'level')\n    for (let i=0; i<4; i++) {\n      this.levelUp(hero)\n    }\n\n    hero.meters = {\n      'health': () => { return { value: hero.things.count('hp'), max: hero.things.count('max hp')}},\n      // 'next level': () =>  {\n      //   return { value: hero.things.count('xp'), max: this.levelCost(hero.things.count('level')) }\n      // }\n    }\n  }\n\n  static levelUp(pc: Person) {\n    const attributeBoosts: { [key: string]: number; } = {\n      // basic: 13,\n      common: 8, // randomInteger(3, 5),\n      uncommon: 5, //randomInteger(2, 3),\n      rare: 3, //randomInteger(1, 2),\n      epic: 2, //randomInteger(0, 1),\n      legendary: 1 //randomInteger(0, 1),\n    };\n\n    Object.keys(this.attributes).forEach(rarity => {\n      for (let i = 0; i < attributeBoosts[rarity]; i++) {\n        const levelAttr = sample(this.attributes[rarity]);\n        if (levelAttr) {\n        const amount = 1; //randomInteger(1,2)\n          pc.things.add(amount, levelAttr);\n          // console.log(`${levelAttr} improves by ${amount}`);\n        }\n      }\n    });\n\n    const perkLevels: { [key: string]: number; } = {\n      common: 5,\n      uncommon: 7,\n      rare: 9,\n      epic: 11,\n      legendary: 13,\n    };\n\n    Object.keys(this.perks).forEach(rarity => {\n      if (pc.things.count('level') % perkLevels[rarity] === 0) {\n        const perk = sample(this.perks[rarity]);\n        if (perk) {\n          console.log(`Gain a rank in ${perk} (${rarity})`);\n          pc.traits.add(1, perk);\n        }\n      }\n    });\n\n    // const classBonuses = PlayerHandbook.characterClasses\n    if (pc.things.count('level') % 3 === 0) {\n      // const classes=[]\n      pc.traits.list().forEach((trait) => {\n        // console.log(trait)\n        if (Object.keys(this.characterClasses).includes(trait.name)) {\n        //   // it's a pc class\n          Object.entries(this.characterClasses[trait.name].attributes).forEach(([attr, value]) => {\n            if (value >= 0 && randomInteger(0,12) > 8) {\n            // if (value === 0) { if (randomInteger(0,12) < 2) return }\n              const amount = value > 0 ? randomInteger(1, Math.max(1,value)) : 1\n              console.log(`${attr} improves by ${amount} (${trait.name})`);\n              pc.things.add(amount, attr)\n            }\n          })\n        }\n      })\n      // trait\n    }\n  }\n}\n","import { boundMethod } from \"autobind-decorator\"\nimport { List, Sequence } from \"../../collections\"\nimport { Community } from \"../../ecosphere/Community\"\nimport Model from \"../../ecosphere/Model\"\nimport { EvolvingStocks, ManageStocks, Person } from \"../../ecosphere/types\"\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\"\nimport { sample } from \"../../ecosphere/utils/sample\"\nimport { where } from \"../../ecosphere/utils/where\"\nimport { MonsterManual } from \"./MonsterManual\"\nimport { PlayerHandbook } from \"./PlayerHandbook\"\n\n// try to keep magic numbers here?\nclass DungeonMasterGuide {\n  static durations = { round: 104, day: 7000 }\n}\n\n// type SimpleEvent = { at: number }\ntype EventCommon = { id: number, at: number }\ntype EnemyInjured = EventCommon & { kind: 'enemy-injured', enemyName: string, amount: number }\ntype TurnStarted = EventCommon & { kind: 'turn-started' }\ntype Event = EnemyInjured | TurnStarted\nclass Arena extends Model {\n  events = new List<Event>()\n  // emit(event: Event, title?: string, message?: string) {\n    // if (title) { console.log(title) } //\"EVENT\", event)\n  eventIds = new Sequence()\n  enemyInjured(name: string, amount: number) {\n    this.events.add({\n      id: this.eventIds.next,\n      kind: 'enemy-injured',\n      enemyName: name,\n      amount,\n      at: this.ticks\n    })\n      // : `${name} took ${amount} damage`, description: message, kind: event.kind, at: this.ticks })\n  }\n\n  turnStarted() {\n    this.events.add({ id: this.eventIds.next, kind: 'turn-started', at: this.ticks })\n  }\n\n  constructor() {\n    super('The Arena')\n    const globals = [ 'day', 'step', 'li', 'gil', 'kill', 'victory', 'death', 'tpk' ]\n    globals.forEach(resource => this.resources.create(resource))\n    this.people.create('Adventurers')\n    this.spawnHero('Fighter')\n    // this.spawnHero('Cleric')\n    // this.spawnHero(sample(['Monk', 'Mage'])) \n    // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses)))\n    Object.keys(PlayerHandbook.characterClasses).forEach(characterClass => {\n      this.actions.create({ name: `Hire ${characterClass}`, act: () => this.spawnHero(characterClass) })\n    })\n    this.actions.create({ name: `Hire Party`, act: () => {\n      for (let i=0; i<3; i++) {\n        this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n      }\n      // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n      // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n    }})\n    this.people.create('Enemies')\n    // enemies.obscured = true // only show names? really want hp -- more granular/whitelist?\n    this.spawnEnemyParty()\n    this.evolve(this.tick)\n  }\n\n  metrics = {\n    'challenge rating': () => this.challengeRating,\n    // 'damage per tick': () => this.damagePerTick,\n    // turns: () => this.recent('turn-started').length,\n  }\n\n  heroIds = new Sequence()\n  @boundMethod\n  spawnHero(characterClass: string) {\n    const name = `${characterClass} (${this.heroIds.next})`;\n    const hero = this.party.create(name)\n    PlayerHandbook.generate(hero, characterClass)\n  }\n\n  get challengeRating() {\n    if (this.party.count === 0) return -1;\n    const totalLevels = this.party.list().map(adv => adv.things.count('level')).reduce((a, b) => a + b)\n    const cr = 1 \n      + (this.resources.count('step')/1250)\n      + (this.resources.count('day')/14)\n      + (this.party.count) \n      + (totalLevels / this.party.count);\n    return Math.floor(cr);\n  }\n\n  private recent(kind: string): Event[] { return this.recentEvents.filter(where('kind', kind)) }\n\n  metricGrain = 150 //DungeonMasterGuide.durations.round\n  get damagePerTick() {\n    const enemyInjuries: EnemyInjured[] = this.recent('enemy-injured') as EnemyInjured[]\n    // const turns = 1 + this.recent('turn-started').length //this.recentEvents.filter(where('kind', 'turn-started')).length\n    const totalInjuryAmount = enemyInjuries.map((injury: EnemyInjured) => injury.amount).reduce((a, b) => a + b, 0)\n    return (Math.floor(\n      totalInjuryAmount / this.metricGrain //Math.floor(totalInjuryAmount / this.metricGrain)\n    ))\n  }\n\n  get recentEvents() {\n    return this.events.items.filter(e => e.at > this.ticks-this.metricGrain)\n  }\n\n  manual = new MonsterManual()\n\n  @boundMethod\n  spawnEnemyParty() {\n    if (this.party.count === 0) return;\n\n    for (let i = 0; i < randomInteger(1,2+this.party.count); i++) {\n      const enemy = this.enemies.create('new enemy')\n      this.manual.generate(enemy, this.challengeRating)\n    }\n\n    // if (randomInteger(0,12) > 11) {\n    //   const enemy = this.enemies.create('new big enemy')\n    //   this.manual.generateBoss(enemy, this.challengeRating)\n    // }\n  }\n\n  get party() { return this.people.lookup('Adventurers') }\n  get enemies() { return this.people.lookup('Enemies') }\n\n  private injure(defender: Person, amount: number, aggressor: Person, reflected: boolean = false) {\n    const damage = Math.floor( Math.min(defender.things.count('hp'), amount) )\n    if (damage <= 0) return;\n\n    defender.things.remove(damage, 'hp')\n    if (this.enemies.list().includes(defender)) {\n      this.enemyInjured(defender.name, damage)\n    }\n\n    console.log(`${aggressor.name} hit ${defender.name} for ${damage}!`)\n    const absorb = Math.min(this.effective(aggressor, 'absorb'), damage)\n    if (absorb > 0) {\n      const absorption = randomInteger(0,absorb) \n      console.log(`${aggressor.name} absorbed ${absorption} hp!`)\n      this.heal(aggressor, absorption)\n    }\n    if (defender.things.count('hp') > 0) {\n      const reflect = Math.min(this.effective(defender, 'reflect'), damage)\n      if (reflect > 0 && !reflected) {\n        console.log(`${defender.name} reflected ${reflect} damage!`)\n        this.injure(aggressor, reflect, defender, true)\n      }\n      const counter = this.effective(defender, 'counter')\n      if (randomInteger(0,100) < counter) {\n        console.log(`${defender.name} counter-attacked against ${aggressor.name}!`)\n        this.strike(defender, aggressor)\n      }\n    }\n  }\n\n  private effective(person: Person, attribute: string) {\n    const base = person.things.count(attribute)\n    if (base === 0) return 0;\n    let multiplier = 1;\n    Object.keys(PlayerHandbook.perkBenefits).forEach(perk => {\n      const benefits = PlayerHandbook.perkBenefits[perk]\n      const benefitAttrs = Object.keys(benefits)\n      if (benefitAttrs.includes(attribute)) {\n        const ranks = person.traits.count(perk)\n        if (ranks > 0) {\n          const benefit = benefits[attribute] * ranks\n          multiplier += benefit\n        }\n      }\n    })\n    const value = Math.floor(base * multiplier);\n    return value\n  }\n\n  private strike(aggressor: Person, defender: Person) {\n    const holyDefense = this.effective(defender, 'holy defense')\n    const holyDamage = Math.max(0, this.effective(aggressor, 'holy damage') - holyDefense)\n    const magicDefense = this.effective(defender, 'magic defense')\n    const magicDamage = Math.max(0, this.effective(aggressor, 'magic damage') - magicDefense)\n    let physicalDamage = 0;\n    let criticalStrike = false;\n    const evade = 1 + this.effective(defender, 'evasion')\n    const hitRoll = randomInteger(0,100)\n    const hit = hitRoll > Math.min(95, evade * 2)\n    if (hit) {\n      const defense = this.effective(defender, 'defense')\n      const baseDamage = Math.max(1,this.effective(aggressor, 'strength') - defense)\n      const bonus = this.effective(aggressor, 'bonus damage')\n      const critChance = 1 + this.effective(aggressor, 'crit chance')\n      criticalStrike = randomInteger(0,100) < Math.max(50, critChance * 2)\n      if (criticalStrike) {\n        console.log(`${aggressor.name} landed a critical strike on ${defender.name}!`)\n      }\n      physicalDamage = criticalStrike \n        ? baseDamage + bonus + randomInteger(1, this.effective(aggressor, 'crit damage'))\n        : randomInteger(1, baseDamage) + bonus\n    }\n    const overallDamage = magicDamage + physicalDamage + holyDamage\n    if (overallDamage > 0) {\n      this.injure(defender, overallDamage, aggressor)\n    } else {\n      console.log(`${aggressor.name} swung for ${defender.name} but missed!`)\n    }\n  }\n\n  attack(aggressors: Community, defenders: Community) {\n    aggressors.list().forEach(aggressor => {\n      const baseSpeed = 12;\n      const aggSpeed = Math.min(baseSpeed, aggressor.things.count('speed'))\n      const speed = 1+Math.floor(Math.max(baseSpeed - aggSpeed, 0))\n      if (this.ticks % speed === 0) {\n        const damageAll = this.effective(aggressor, 'damage to all')\n        if (damageAll > 0) {\n          defenders.list().forEach(defender => {\n            const damage = randomInteger(1, damageAll)\n            this.injure(defender, damage, aggressor)\n          })\n        }\n\n        // normal attack\n        const defender = sample(defenders.list()) // todo attack-weakest policy..\n        if (defender) {\n          let done = false;\n          const hit = () => this.strike(aggressor, defender)\n\n          hit()\n          const chainChance = this.effective(aggressor, 'chain chance')\n          const maxChain = 1 + this.effective(aggressor, 'max chain')\n          let chain = 0\n          while (!done && chain++ < maxChain) {\n            let chainRoll = randomInteger(0,100)\n            if (chainRoll < chainChance) {\n              console.log(`...and swung again (${chain} times)!`)\n              hit()\n            }\n          }\n        }\n      }\n    })\n  }\n\n  heal(healee: Person, amount: number) {\n    const hp = healee.things.count('hp')\n    const maxHp = healee.things.count('max hp')\n    const maxHeal = maxHp - hp\n    const heal = Math.min(maxHeal, amount)\n    healee.things.add(Math.floor(heal), 'hp')\n  }\n\n  per(unit: string) {\n    this.party.list().forEach(adventurer => {\n      const xp = this.effective(adventurer, `xp per ${unit}`)\n                * (1 + 0.1 * adventurer.traits.count('Perspicuous'))\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n      adventurer.things.add(Math.floor(xp), 'xp')\n\n      const gil = this.effective(adventurer, `gold per ${unit}`)\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n      this.resources.add(Math.floor(gil), 'gil')\n\n      if (adventurer.things.count('hp') < adventurer.things.count('max hp')) {\n        const hp = this.effective(adventurer, `hp per ${unit}`)\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n        this.heal(adventurer, hp)\n      }\n    })\n  }\n\n  private round() {\n    this.per('round')\n    this.party.list().forEach(adventurer => {\n      const regen = this.effective(adventurer, 'regen')\n      this.heal(adventurer, regen)\n      if (adventurer.things.count('heal')) {\n        this.party.list().forEach(healee => {\n            const health = this.effective(adventurer, 'heal')\n            this.heal(healee, randomInteger(1,health))\n        })\n      }\n\n      if (adventurer.traits.count('Potion of Life') > 0 &&\n          adventurer.things.count('hp') < 0.35 * adventurer.things.count('max hp')) {\n        console.log(`${adventurer.name} drank a potion of life!`)\n        adventurer.traits.remove(1, 'Potion of Life')\n        const health = 30 + randomInteger(1, 12) + this.effective(adventurer, 'heal')\n        this.heal(adventurer, health)\n      }\n    })\n\n    this.enemies.list().forEach(enemy => {\n      this.heal(enemy, this.effective(enemy, 'regen'))\n    })\n  }\n\n  @boundMethod\n  tick({ resources }: EvolvingStocks, t: number) {\n    this.party.list().forEach(adventurer => {\n      const level = adventurer.things.count('level')\n      const levelCost = PlayerHandbook.levelCost(level) \n      if (adventurer.things.count('xp') > levelCost) {\n        adventurer.things.remove(levelCost, 'xp')\n        adventurer.things.add(1, 'level')\n        console.log(`${adventurer.name} level up!`)\n        PlayerHandbook.levelUp(adventurer)\n      }\n    })\n\n    if (t % DungeonMasterGuide.durations.round === 0) {\n      this.round()\n    }\n\n    if (t % DungeonMasterGuide.durations.day === 0) {\n      resources.add(1, 'day')\n      this.per('day')\n    }\n\n    if (this.enemies.count === 0 && this.party.count > 0) {\n      if (t % 5 === 0) {\n        this.resources.add(1, 'step')\n        this.per('step')\n        if (this.resources.count('step') % 500 === 0) {\n          resources.add(1, 'li')\n          this.per('li')\n          // store..\n          const items = [\n            'Potion of Life', // heals ~25 at 50% hp\n            'Healing Salve',\n          ]\n          const rareItems = [\n            'Shell Matrix', // functionally -- resurrect charges (w/ limitations)\n            'Cloaking Robe of Elvenkind', // large % bonus to evade\n            'Counterweight' // large % bonus to counter chance\n          ]\n          const stock = randomInteger(0,20) > 19 ? rareItems : items\n          while (this.resources.count('gil') > 1000) {\n            // give items to leader\n            let recipient = sample(this.party.list()) //[0]\n            recipient.traits.add(1, sample(stock))\n            this.resources.remove(1000, 'gil')\n          }\n        }\n\n        const encounterChance = 60 + this.resources.count('li') + this.party.count\n        const randomEncounter = randomInteger(0,100) > encounterChance\n        if (randomEncounter) { //randomInteger(0,100) > 86) {\n          this.spawnEnemyParty()\n          this.per('encounter')\n        }\n      }\n\n       \n    } else {\n      this.turnStarted()\n      this.per('turn')\n      this.attack(this.party, this.enemies)\n      this.attack(this.enemies, this.party)\n      this.mortalityCheck(resources)\n    }\n  }\n\n  private mortalityCheck(resources: ManageStocks) {\n    this.party.list().forEach(adventurer => {\n      if (adventurer.things.count('hp') <= 0) {\n        if (adventurer.traits.count('Eternal Victory') > 0) {\n          this.heal(adventurer, 200)\n          adventurer.traits.remove(1, 'Eternal Victory')\n        } else if (adventurer.traits.count('Healing Salve') > 0) {\n          this.heal(adventurer, 100)\n          adventurer.traits.remove(1, 'Healing Salve')\n        } else if (adventurer.traits.count('Shell Matrix') > 0) {\n          this.heal(adventurer, 50)\n          adventurer.things.add(150, 'magic hp')\n          adventurer.traits.remove(1, 'Shell Matrix')\n        } else {\n          this.per('death')\n          this.party.destroy(adventurer.name)\n          resources.add(1, 'death')\n          console.log(`${adventurer.name} was slain!`)\n          if (this.party.count === 0) {\n            this.per('tpk')\n            resources.add(1, 'tpk')\n            console.log(\"The party has fallen... The quest is lost.\")\n          }\n        }\n      }\n    })\n\n    this.enemies.list().forEach(enemy => {\n      if (enemy.things.count('hp') <= 0) {\n        this.per('kill')\n        this.enemies.destroy(enemy.name)\n        resources.add(1, 'kill')\n        console.log(`${enemy.name} was slain!`)\n        if (this.enemies.count === 0) {\n          this.per(\"victory\")\n          resources.add(1, 'victory')\n          console.log(\"The party was victorious! The quest continues...\")\n          return\n        }\n      }\n    })\n  }\n}\n\nconst arena = new Arena()\nexport default arena\n","import { boundMethod } from 'autobind-decorator'\nimport { List, Sequence } from '../collections'\nimport { Collection } from '../ecosphere/Collection';\nimport Model from '../ecosphere/Model'\nimport { ManageStocks, Person, Recipe, TimeEvolution } from '../ecosphere/types'\nimport { randomInteger } from '../ecosphere/utils/randomInteger';\nimport { unique } from '../ecosphere/utils/unique';\nimport { where } from '../ecosphere/utils/where';\n\ntype Currency = number\ntype Order = { [itemName: string]: number }\ntype Bill = { id: number, order: Order, price: Currency, account: Receivable }\ninterface Receivable {\n  receive(items: any[], bill: Bill): Currency\n}\n\ntype EventKind = 'order:fulfilled'\ntype Event = { id: number, name: string, description: string, at: number, kind: EventKind }\nexport class Factory extends Model {\n  events = new Collection<Event>()\n  emit(event: EventKind, title?: string, message?: string) {\n    // if (title) { console.log(title) } //\"EVENT\", event)\n    this.events.create({ name: title, description: message, kind: event, at: this.ticks })\n  }\n  private bills = new List<Bill>()\n\n  metrics = {\n    'Production Speed': () => this.deliveryRate,\n    'Total Fulfillments': () => this.fulfillmentEvents.length,\n    'Orders In Queue': () => this.bills.count\n  }\n\n  metricGrain = 100\n  get deliveryRate() {\n    return this.recentEvents.filter(where('kind', 'order:fulfilled')).length / this.metricGrain\n  }\n\n  get recentEvents() {\n    return this.events.list().filter(e => e.at > this.ticks-this.metricGrain)\n  }\n\n  get fulfillmentEvents() {\n    return this.events.list().filter(where('kind', 'order:fulfilled'))\n  }\n\n  constructor(\n    name: string,\n  ) {\n    super(`${name} Factory`)\n  }\n\n  product(name: string, consumes: { [resourceName: string]: number }) {\n    this.actions.create({ name: `Order ${name}`, act: ({ count, deliverTo }: { count: number, deliverTo: Receivable }) => {\n      this.order(count || 20, name, deliverTo || { receive: () => {\n        return 1;\n      }})\n    }})\n\n    this.resources.create(name)\n    this.workers.recipes.create({ name, produces: { [name]: 1 }, consumes });\n  }\n\n  @boundMethod\n  reboot() {\n    this.reset()\n    this.people.create('Workers')\n    this.bills.clear()\n    this.evolve(this.evolution)\n    this.policies.create({ name: 'FIFO', manage: () => {\n        const firstUnfulfilled = this.unfulfilled(this.bills.first)[0]\n        const produceUnfulfilled = this.workers.recipes.lookup(firstUnfulfilled)\n        if (produceUnfulfilled) {\n          this.workers.list().forEach(worker => this.produce(worker, produceUnfulfilled))\n        }\n    }})\n    this.policies.create({ name: 'Round Robin', manage: () => {\n        const allBillsRequested = unique(this.bills.items.flatMap(bill => {\n          return this.unfulfilled(bill)\n        }))\n        this.workers.list().forEach((worker, i) => {\n          const nextUnfulfilled = allBillsRequested[(i % (allBillsRequested.length))]\n          const produceUnfulfilled = this.workers.recipes.lookup(nextUnfulfilled)\n          if (produceUnfulfilled) {\n            this.produce(worker, produceUnfulfilled)\n          }\n        })\n    }})\n\n    this.choose('FIFO')\n  }\n\n  unfulfilled(bill?: Bill) {\n    if (bill === undefined) { return [] }\n    let orderItemNames = Object.keys(bill.order)\n    let unfulfilled: string[] = []\n    orderItemNames.forEach(item => {\n      let order = bill.order[item]\n      let amount = this.resources.count(item)\n      if (amount < order) {\n        unfulfilled.push(item)\n      }\n    })\n    // console.log(\"Unfulfilled from bill: \" + inspect(bill.order))\n    return unfulfilled\n  }\n\n  produce = (worker: Person, recipe: Recipe) => {\n    if (this.canProduce(recipe)) {\n      this.workers.jobs.set(worker, recipe)\n    } else {\n      if (recipe.consumes) {\n        const required: string[] = []\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          // do we have enough of the resource?\n          if (this.resources.count(resource) < amount) {\n            required.push(resource)\n          }\n        })\n\n        let requirement = required[randomInteger(0,required.length)]; // could sample here..\n        // need to find a recipe that produces requirement\n        let producingRequirement: Recipe | null =  null\n        this.workers.recipes.each(recipe => {\n          if (recipe.produces[requirement]) {\n            producingRequirement = recipe\n          }\n        })\n        if (producingRequirement) {\n        //  this.workers.jobs.set(worker, producingRequirement)\n          this.produce(worker, producingRequirement)\n        }\n      }\n    }\n  }\n\n  missingRequirements = (recipe: Recipe) => {\n    const missing: string[] = []\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (this.resources.count(resource) < amount) {\n          missing.push(resource)\n        }\n      })\n    }\n    return missing\n  }\n\n  canProduce = (recipe: Recipe) => {\n    let mayProduce = true\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (this.resources.count(resource) < amount) {\n          mayProduce = false\n        }\n      })\n    }\n    return mayProduce\n  }\n\n  evolution: TimeEvolution = ({ resources }) => {\n    this.manage(resources) \n    if (this.bills.count > 0) {\n      this.workers.work({ resources })\n    }\n  }\n\n  orderIds = new Sequence()\n  order(count: number, itemName: string, account: Receivable): Bill {\n    const bill: Bill = {\n      id: this.orderIds.next,\n      order: { [itemName]: count },\n      account,\n      price: count\n    }\n    this.bills.add(bill)\n    return bill\n  }\n\n  get workers() { return this.people.lookup('Workers') }\n  private manage(resources: ManageStocks) {\n    if (this.bills.count === 0) return;\n\n    // const bill = this.bills.first;\n    this.bills.each(bill => {\n      const orderItemNames = Object.keys(bill.order)\n      const unfilled = this.unfulfilled(bill)\n      const allFulfilled = unfilled.length === 0\n\n      if (allFulfilled) {\n        bill.account.receive([], bill)\n        orderItemNames.forEach(item => {\n          this.resources.remove(bill.order[item], item)\n        })\n        this.bills.remove(bill)\n        this.emit('order:fulfilled', `An order for ${orderItemNames.join(',')} has been fulfilled`)\n      }\n    })\n\n    if (this.currentPolicy) {\n      this.currentPolicy.manage()\n    } else {\n      console.warn(\"No labor policy selected!\")\n    }\n  }\n}\n","export function unique(arr: any[]) {\n  var u = {}, a = [];\n  for (var i = 0, l = arr.length; i < l; ++i) {\n    if (!u.hasOwnProperty(arr[i])) {\n      a.push(arr[i]);\n      // @ts-ignore\n      u[arr[i]] = 1;\n    }\n  }\n  return a;\n}\n","import { Sequence } from '../collections';\nimport { Factory } from './Factory';\n\nconst ids = new Sequence()\n  const factory = new Factory('Zep');\n  factory.reboot();\n  factory.product('Soles', {});\n  factory.product('Laces', {});\n  factory.product('Socks', {});\n  factory.product('Shoes', { 'Soles': 2, 'Laces': 2 });\n  factory.product('Hat', {});\n  factory.product('Belt', {});\n  factory.product('Underwear', {});\n  factory.product('Pants', {});\n  factory.product('Outfit', { 'Pants': 1, 'Belt': 1, 'Hat': 1, 'Socks': 1, 'Shoes': 1 });\n  const managers = factory.people.create('Management')\n  managers.create('Operations Chief');\n  managers.create('Plant Manager');\n  // factory.workers.create('Engineer')\n  factory.machines.create('Robot')\n\n  factory.actions.create({ name: 'Spawn Worker', act: () => { factory.workers.create(`Employee #${ids.next}`); } });\n  export default factory;\n","import { boundMethod } from \"autobind-decorator\";\nimport Model from \"../ecosphere/Model\";\nimport { createMoiety, createPerson, Memory, Person } from \"../ecosphere/types\";\nimport { sample } from \"../ecosphere/utils/sample\";\n\nconst generatePerson = () => {\n  const moiety = createMoiety('A Social Group')\n  const gender = sample(['male', 'female'])\n  const firstName = sample(gender === 'male' ? [ 'Sam', 'Eric', 'Ted', 'Jones' ] : ['Sarah', 'Edna', 'Terri', 'Rosa'])\n  const lastName = sample(['Smith', 'Lever', 'Token', 'Switch', 'Agent', 'Op'])\n  const person = createPerson(firstName + ' ' + lastName, moiety)\n  return person\n}\nclass Citizen extends Model {\n  subject: Person = generatePerson()\n\n  constructor() {\n    super('Citizen');\n\n    // this.people.create('Friends')\n    // this.people.create('Rivals')\n    // this.people.create('Peers')\n    // this.people.create('Family')\n\n    this.resources.create('Happiness')\n    this.resources.create('Money')\n    // this.resources.create('Money')\n\n    this.actions.create({ name: 'New', act: () => {\n      this.subject = generatePerson() \n    }})\n\n    this.evolve(this.evolution)\n  }\n\n  @boundMethod\n  evolution() {}\n\n  metrics = { age: () => this.subject.age, }\n  notes = {\n    'current date': () => this.date.description,\n    'name': () => this.subject.name,\n    'agility': () => this.subject.body.agility,\n    'beauty': () => this.subject.soul.beauty,\n    'cunning': () => this.subject.body.cunning,\n    'depth': () => this.subject.mind.depth,\n    'education': () => this.subject.mind.education,\n    'empathy': () => this.subject.soul.empathy,\n    'insight': () => this.subject.mind.insight,\n    'integrity': () => this.subject.soul.integrity,\n    'spirit': () => this.subject.body.spirit,\n    'strength': () => this.subject.body.strength,\n    'wit': () => this.subject.soul.wit,\n    'knowledge': () => this.subject.kind.knowledge,\n    'power': () => this.subject.kind.power,\n    'sophistication': () => this.subject.kind.sophistication,\n    'wealth': () => this.subject.kind.wealth,\n    'bio': () => this.subject.memory.list().map(this.describeMemory).join('... '),\n  }\n\n  describeMemory(memory: Memory) {\n    return `I remember ${memory.description}`\n  }\n\n  // @boundMethod\n  get date() {\n    let time = this.ticks || 0\n    let secondInterval = 0.1;\n    let seconds = Math.floor(time / secondInterval);\n\n    let second = seconds%60\n    let minute = Math.floor(seconds/60)%60\n    let hour = Math.floor(seconds/(60*60))%24\n    let day = Math.floor(seconds / (60 * 60 * 24));\n    // let week = Math.floor(seconds / (60 * 60 * 24 * 7));\n    // let month = Math.floor(seconds / (60 * 60 * 24 * 7 * 4));\n    // let year = Math.floor(seconds / (60 * 60 * 24 * 365));\n\n    let dayOfWeek = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'][day % 7];\n\n    return {\n      dayOfWeek,\n      description: `${dayOfWeek} ${String(hour).padStart(2,'0')}:${String(minute).padStart(2,'0')}:${String(second).padStart(2,'0')}`\n    }\n  }\n}\n\nexport default new Citizen();\n","export type Tiles = string[][]\n\nconst first = <T>(arr: T[], pred: (x: T) => boolean): T => {\n  return arr.filter(pred)[0]\n  // return arr[0]\n}\n\nexport class Board {\n  private tiles: Tiles = []\n\n  view({ overlays }: { overlays: Board[] } = { overlays: []}): Tiles {\n    let viewTiles: Tiles = []\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        viewTiles[y] = viewTiles[y] || []\n        let overlay = overlays.length > 0 && first(overlays, o => {\n          let v = o.at(x,y); return v !== '' && v !== undefined\n          // return o.at(x,y) !== undefined\n        })\n        viewTiles[y][x] = (overlay && overlay.at(x,y))\n                       || this.at(x,y)\n                       || '_'\n      }\n    }\n    return viewTiles;\n  }\n\n  constructor(public width: number, public height: number) {}\n\n  // clear = (x0: string, y0: number, width: number, height: number) => {}\n\n  write = (character: string, x0: number, y0: number) => {\n    let x = x0;\n    let y = y0;\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = character;\n  }\n\n  erase(x: number, y: number) {\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = ''\n    // throw new Error(\"Method not implemented.\")\n  }\n  \n  drawBox = (char: string, x0: number, y0: number, width: number, height: number, filled?: boolean) => {\n    let x1 = x0 + width; let y1 = y0 + height;\n    for (let x = x0; x <= x1; x++) {\n      for (let y = y0; y <= y1; y++) {\n        if (x === x0 || y === y0 || x === x1 || y === y1) {\n          this.write(char, x, y)\n        } else {\n          if (filled) {\n            this.write(char, x, y)\n          }\n        }\n      }\n    }\n  }\n\n  // get width() { return this.tiles && this.tiles[0] && this.tiles[0].length }\n  // get height() { return this.tiles.length }\n\n  at(x: number, y: number) { //}, defaultValue: string = '') {\n    // if (x >= 0 && x <= this.width && y >= 0 && y <= this.height) {\n      const x0 = x % this.width\n      const y0 = y % this.height\n      if (this.tiles[y0]) {\n        return this.tiles[y0][x0]\n      }\n    // } \n    // return defaultValue\n  }\n\n\n  each(fn: (x: number, y: number, value: string) => void) {\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        fn(x,y,this.at(x,y) || '')\n      }\n    }\n  }\n\n  step(eachCell: (val: string, neighbors: string[], position: [number, number]) => string, defaultValue: string = ''): Tiles {\n    // const ignored = ['*']\n    // console.log(\"Board.step -- start\")\n    let newTiles: Tiles = []\n    this.tiles = this.tiles || []\n    const at = (x: number, y: number) => this.at(x,y) || defaultValue\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        let currentValue = at(x,y)\n        if (currentValue !== undefined) {\n          // if (ignored.includes(currentValue)) { continue }\n          let neighbors: string[] = [\n            at(x-1,y-1), at(x,y-1), at(x+1,y-1),\n            at(x-1,y)  , at(x,y),   at(x+1,y),\n            at(x-1,y+1), at(x,y+1), at(x+1,y+1),\n          ]\n          const newCell = eachCell(currentValue, neighbors, [x,y])\n          newTiles[y] = newTiles[y] || []\n          newTiles[y][x] = newCell\n        }\n      }\n    }\n    this.tiles = newTiles\n    return newTiles\n  }\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\n\nclass Building extends Model {\n  width = 80\n  height = 36\n  board: Board = new Board(this.width, this.height)\n  get tiles() { return this.board.view() }\n\n  constructor() {\n    super(\"Perfect Blue Buildings\")\n    this.evolve(this.evolution)\n    // this.board.drawBox('*', 0, 0, 5, 5) //this.width-2, this.height-2)\n\n  }\n\n  building() {\n    let width = randomInteger(2,8)\n    let height = randomInteger(2,3)\n    this.board.drawBox('#', randomInteger(1, this.width - width - 1),\n                            randomInteger(1, this.height - height - 1),\n                            width, height)\n  }\n\n  @boundMethod\n  evolution() {\n    this.building()\n    \n    // this.board.write(sample(['a','b','c']), randomInteger(), 2)\n  }\n}\nconst buildingMaker = new Building()\nexport default buildingMaker;\n","export function construct(fn: () => any, times: number, flatten?: boolean) {\n  // Create an array of size \"n\" with undefined values\n  var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  arrays = arrays.map(fn) //() => fn()) //() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  if (flatten) {\n  return [].concat.apply([], arrays);\n  } else {\n    return arrays;\n  }\n\n}\n\nexport function replicate(array: Array<any>, times: number) {\n  return construct(() => array, times)\n  // Create an array of size \"n\" with undefined values\n  // var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  // arrays = arrays.map(() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  // return [].concat.apply([], arrays);\n}\n","export const clamp = (value: number, min: number, max: number) =>\n  Math.min(Math.max(value, min),max)\n","\nexport function times(n: number, fn: Function) { for (let i = 0; i < n; i++) { fn() } }\n","import { Sequence } from \"../collections\";\nimport { Board } from \"./Board\";\nimport { clamp } from \"./utils/clamp\";\nimport { randomInteger } from \"./utils/randomInteger\";\nimport { replicate } from \"./utils/replicate\";\nimport { sample } from \"./utils/sample\";\nimport { times } from \"./utils/times\";\n\nconst distance = (a: [number, number], b: [number, number]) => {\n  let dx = Math.abs(a[0] - b[0]);\n  let dy = Math.abs(a[1] - b[1]);\n  return Math.sqrt(dx * dx + dy * dy)\n}\n\n// const all = <T>(list: Array<T>, pred: (value: T, index: number) => boolean) => {\n//   // let matchesAll = true\n//   // list.forEach((value: T, index: number) => {\n//   //   if (!pred(value, index)) { matchesAll = false }}\n//   //   )\n//   // return matchesAll;\n\n//   for (let i = 0; i < list.length; i++) {\n//     if (!pred(list[i], i)) {\n//       return false\n//     }\n//   }\n//   return true\n// }\n\nconst any = <T>(list: Array<T>, pred: (value: T) => boolean) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i])) {\n      return true\n    }\n  }\n  return false\n  // let matchesAny = false\n  // list.forEach((value: T) => { if (pred(value)) { matchesAny = true }})\n  // return matchesAny;\n}\n\n// type Element = 0 | 1 | -1\n// type Morpheme = [number, number, number, number, number, number, number, number, number]\n// type Structure = Morpheme[]\n// const identity: Structure = [[ -1, -1, -1,\n//                                -1, 1, -1,\n//                                -1, -1, -1 ]];\n\n// const isolatedPoints: Structure = [\n//   [\n//      0,  0,  0,\n//      0,  1,  0,\n//      0,  0,  0,\n//   ],\n// ]\n\n// const edges: Structure = [\n//   [\n//      0,0,-1,\n//      0,1, 1,\n//     -1,1,-1,\n//   ],\n//   [\n//     -1,0,0,\n//      1,1,0,\n//     -1,1,-1,\n//   ],\n//   [\n//     -1,1,-1,\n//      1,1,0,\n//     -1,0,0,\n//   ],\n//   [\n//     -1,1,-1,\n//     0, 1,1,\n//     0, 0,-1,\n//   ]\n// ] \n\n// type LocalContext = { value: number, neighbors: number, average: number }\n// type Transform = (ctx: LocalContext) => number\nexport class Heightmap {\n  map: Board = new Board(this.width, this.height);\n  groundLevel = 5\n\n  constructor(public width: number, public height: number) { }\n\n  at(x: number, y: number): number { return parseInt(this.map.at(x,y) || '0', 10) }\n\n  apply(fn: (val: number, neighbors: number[], average: number, position: [number, number]) => number[], rate: number = 1000) {\n    this.map.step((val: string, neighbors: string[], position: [number, number]) => {\n      if (randomInteger(0, 1000) <= rate) { //return val; }\n        let value = parseInt(val || '0', 10);\n        // let trueNeighbors = neighbors.slice(4,1)\n        let neighborValues = neighbors.map(neighbor => parseInt(neighbor || '2', 10));\n        let neighborSum = neighborValues.reduce((a, b) => a + b, 0)\n        // if (neighborSum > 0) {\n        // console.log({ neighborSum })\n        // }\n        // let neighborAverage = Math.floor(\n        //   neighborSum / 8 //trueNeighbors.length\n        // );\n\n        let localAverage = Math.floor(\n          (neighborSum + value) / (neighbors.length + 1)\n        );\n        let average = localAverage;\n        let values = fn(value, neighborValues, average, position);\n        let newVal = clamp(sample(values), 0, 9);\n        return String(newVal);\n      } else { return val; }\n    });\n  }\n\n  smooth = () => {\n    this.apply((value, ns, average) => {\n      // cleanup coastlines\n      // let directs = [ns[1], ns[3], ns[5], ns[7]]\n      let above = ns.filter(n => n >= this.groundLevel).length;\n      if (above >= 5 && value < this.groundLevel) { return [value + 1] }\n      else if (above < 4 && value >= this.groundLevel) { return [value - 1] }\n      // else if (above <= 4) { return [\n      //   Math.floor((value + average) / 2),\n      // ]}\n      // if (above >= 8) {\n      //   return [value,average]\n      // }\n      // if (value === this.groundLevel) { return [ value ]}\n      // if (value < average) { return [ value, value + 1 ]}\n      // if (value > average) { return [ value, value - 1 ]}\n      if (value < average - 1) { return [ value, value + 1, Math.floor((value + average) / 2) ]}\n      if (value > average + 1) { return [ value, value - 1, Math.floor((value + average) / 2) ]}\n      \n      return [\n        value,\n        // value + 1,\n        // Math.floor((value + average) / 2),\n        // average\n      ]\n    })\n  };\n\n\n  flow = () => {\n    this.apply((value, ns, average) => {\n      if (value >= average) { return [value] }\n      let immediate = [ns[1], ns[3], ns[5], ns[7]]\n      let max = Math.max(...immediate)\n      // let min = Math.min(...immediate)\n\n      let above = ns.filter(n => n >= this.groundLevel).length;\n      if (above >= 6 && value < this.groundLevel) { return [this.groundLevel, this.groundLevel + 1] }\n      if (above === 0) { return [value] }\n\n      return [\n        // max*2,\n        max + 1,\n        // value,\n        max,\n        max - 1,\n        // average,\n        // this.groundLevel + 1,\n        // this.groundLevel + 2,\n      ]\n    });\n  };\n\n  erode = () => {\n    this.apply((value, ns, average) => {\n      if (value < average) { return [value] }\n      return [\n        value,\n        // value-1,\n        // Math.round((value + average) / 2),\n        average,\n        // Math.round((value + Math.min(...ns)) / 2),\n        \n        // value-1,\n        // Math.min(...ns),\n        // value-2,\n        // average+1,\n      ]\n    })\n  };\n\n  // recede = () => {\n  //   this.apply((value, ns, average) => {\n  //     if (value > this.groundLevel+1) { return [value]; }\n  //     // let max = Math.max(...ns)\n  //     return [\n  //       value,\n  //       // value+1,\n  //       // max,\n  //       average,\n  //       Math.floor((value + average) / 2),\n  //     ]\n  //   });\n  // };\n\n  extrude = (positions: [number, number][]) => {\n    // let pos = sample(positions);\n    positions.forEach(pos => {\n    let h = parseInt(this.map.at(...pos) || '0', 10)\n    let val = clamp(h+randomInteger(1,9),0,9);\n    if (pos) { this.map.write(String(val), ...pos); }\n    })\n  };\n\n  intrude = (positions: [number, number][], depth: number = 1) => {\n    positions.forEach(pos => {\n      let h = parseInt(this.map.at(...pos) || '9', 10)\n      let val = clamp(h-randomInteger(1,9),0,9);\n      if (pos) { this.map.write(String(val), ...pos); }\n    })\n  };\n\n  bombard = (intensity: number = 1) => {\n    let radius = randomInteger(1,4+randomInteger(0,intensity));\n    let impactSite: [number, number] = [ randomInteger(1, this.width-1), randomInteger(1, this.height-1) ]\n    const distanceToImpact = (pos: [number, number]) => distance(pos, impactSite)\n    let craterPositions: [number, number][] = []\n    let craterEdge: [number, number][] = []\n    for (let x=0; x < this.width; x++) {\n      for(let y = 0; y < this.height; y++) {\n        let d = Math.round(distanceToImpact([x,y]))\n        if (Math.abs(d - radius) < 1) {\n          craterEdge.push([x,y])\n        } else if (d < radius) {\n          craterPositions.push([x,y])\n        }\n      }\n    }\n    this.intrude(craterPositions);\n    this.extrude(craterEdge);\n  }\n\n  orogeny = (mountains: [number, number][]) => {\n    // this.flow()\n\n    const d100 = randomInteger(0,100)\n    if (d100 < 12) this.extrude(mountains)\n    // times(3, () => this.extrude(mountains))\n    times(2, this.flow)\n    // times(2, () => {\n    //   times(8, () => this.extrude(mountains))\n    //   times(4, this.flow)\n    // })\n  }\n\n  geoform = (hades: boolean, mountains: [number, number][]) => {\n    const d100 = randomInteger(0,100)\n    if (hades) {\n      this.orogeny(mountains)\n      this.erode()\n      // if (d100 < 60) this.erode()\n      if (d100 < 31) { this.bombard(23); }\n    } else {\n      // this.flow()\n      // if (d100 < 12) {\n        this.smooth()\n      // }\n      if (d100 < 15) times(2, () => this.bombard(8) )\n\n    }\n  };\n\n  binaryImage(threshold: number = this.groundLevel): Board {\n    let binary = new Board(this.width, this.height)\n    this.map.each((x, y, val) => {\n      let value = '0';\n      if (parseInt(val, 10) >= threshold) { value = '1'; } \n      binary.write(value, x, y)\n    })\n    return binary\n  }\n\n  regionNames = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L' ]\n  regionCount = new Sequence()\n  generateRegionName = () => {\n    let n =this.regionCount.next\n    return this.regionNames[n % this.regionNames.length]\n         + (replicate([\"'\"], n).join(''))\n  }\n\n  regions(): { [region: string]: [number, number][] } {\n    let regionMap: { [region: string]: [number, number][] } = {}\n    this.map.each((x, y, val) => {\n      if (parseInt(val, 10) >= this.groundLevel) {\n        // do we belong to an existing region? (adjacency)\n        let existingRegionNames = Object.keys(regionMap).filter((regionName) => {\n          // are any of the points in r adjacent to this one?\n          let adjacent = any(regionMap[regionName], ([x1,y1]) => {\n            // return Math.abs(x1 - x) <= 1 && Math.abs(y1 - y) <= 1\n            return distance([x,y], [x1,y1]) <= 2\n          }) //val === r\n          // if (adjacent) { existingRegion = regionName }\n          return adjacent\n        })\n        if (existingRegionNames.length > 0) {\n          let firstAdjacentRegionName = existingRegionNames[0]\n          if (existingRegionNames.length === 1) {\n            regionMap[firstAdjacentRegionName].push([x,y])\n          } else {\n            // merge all regions...\n            existingRegionNames.forEach((regionName) => {\n              // delete that region + add to first region\n              if (regionName !== firstAdjacentRegionName) {\n                regionMap[firstAdjacentRegionName] = [\n                  ...regionMap[firstAdjacentRegionName],\n                  ...regionMap[regionName],\n                ] //.push([x,])\n\n                delete regionMap[regionName]\n              }\n            })\n          }\n        } else {\n          console.log(\"Found a new region\", { x, y })\n          // invent a new region\n          // let regionCount = Object.keys(regionMap).length\n          let newRegion = this.generateRegionName() //[regionCount]\n          regionMap[newRegion] = [[x,y]]\n        }\n      }\n    })\n\n    console.log(\"Found regions!!\", { regionMap })\n    return regionMap\n  }\n\n  // looks for a particular pattern in the binary image (fixed orientations...)\n  // transform(structure: Structure = edges, threshold: number = this.groundLevel): Board {\n  //   let image = this.binaryImage(threshold)\n  //   const matches = (values: number[]) => {\n  //     return any(structure, (morpheme: Morpheme) => {\n  //       const matchesAll = all(morpheme, (element, index) => {\n  //         const morphology = element \n  //         if (morphology === -1) { return true }\n  //         const value = values[index]\n  //         return morphology === value\n  //       })\n  //       return matchesAll\n  //     })\n  //   }\n  //   image.step((_val: string, neighbors: string[]) => {\n  //     let region = neighbors.map(n => parseInt(n, 10))\n  //     return matches(region) ? '1' : '0'\n  //   }, '-1')\n  //   return image\n  // }\n\n  // get components() { return this.binaryImage.regions(); }\n}\n","// Array.prototype.choice = function() {\n//   var i = floor(random(this.length));\n//   return this[i];\n// }\n\nimport { sample } from \"./sample\";\n\n// A MarkovGenerate object\nexport class MarkovGenerator {\n  constructor(private n: number, private max: number) {}\n  // Order (or length) of each ngram\n  // this.n = n;\n  // // What is the maximum amount we will generate?\n  // this.max = max;\n  // An object as dictionary\n  // each ngram is the key, a list of possible next elements are the values\n  ngrams: { [key: string]: string[] } = {};\n  // A separate array of possible beginnings to generated text\n  beginnings: string[] = [];\n\n  // A function to feed in text to the markov chain\n  feed(text: string) {\n\n    // Discard this line if it's too short\n    if (text.length < this.n) {\n      return false;\n    }\n\n    // Store the first ngram of this line\n    let beginning = text.substring(0, this.n);\n    this.beginnings.push(beginning);\n\n    // Now let's go through everything and create the dictionary\n    for (var i = 0; i < text.length - this.n; i++) {\n      let gram = text.substring(i, i + this.n);\n      let next = text.charAt(i + this.n);\n      // Is this a new one?\n      if (!this.ngrams.hasOwnProperty(gram)) {\n        this.ngrams[gram] = [];\n      }\n      // Add to the list\n      this.ngrams[gram].push(next);\n    }\n  }\n\n  // Generate a text from the information ngrams\n  generate() {\n\n    // Get a random  beginning\n    let current = sample(this.beginnings) //.choice();\n    let output = current;\n\n    // Generate a new token max number of times\n    for (var i = 0; i < this.max; i++) {\n      // If this is a valid ngram\n      if (this.ngrams.hasOwnProperty(current)) {\n        // What are all the possible next tokens\n        let possible_next = this.ngrams[current];\n        // Pick one randomly\n        let next = sample(possible_next) //.choice();\n        // Add to the output\n        output += next;\n        // Get the last N entries of the output; we'll use this to look up\n        // an ngram in the next iteration of the loop\n        current = output.substring(output.length - this.n, output.length);\n      } else {\n        break;\n      }\n    }\n    // Here's what we got!\n    return output;\n  }\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { EvolvingStocks } from \"../ecosphere/types\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { construct } from \"../ecosphere/utils/replicate\";\nimport { sample } from \"../ecosphere/utils/sample\";\nimport { Heightmap } from \"../ecosphere/Heightmap\";\nimport { MarkovGenerator } from \"../ecosphere/utils/markov\";\n\nclass Cartographer {\n  continentNamer = new MarkovGenerator(2, 16)\n  constructor(private world: WorldMap) {\n    let names = \"Africa Asia America Australia Antartica\"\n              + \"China India Indonesia Brazil Nigeria Bangladesh Argentina\"\n              + \"Russia Japan Mexico Ethiopia Phillipines Egypt Vietnam Spain\"\n              + \"Congo Germany Turkey Iran Thailand Tanzania France Italy Canada\"\n              + \"Morocco Peru Taiwan Romania Mali Chile Guatemala Zambia Ecuador\"\n    names.split(' ').forEach(name => this.continentNamer.feed(name))\n  }\n\n  // cache heightmap regions..\n  regions: { [region: string]: [number, number][] } = {}\n  placeNames: { [region: string]: string } = {}\n\n\n  // in li square..\n  //regionSizes = {\n  //  1: 'Point',\n  //  10: 'Island',\n  //  10000: 'Continent',\n  //  100000: 'Supercontinent',\n  //}\n\n  identifyRegion(x: number, y: number): string {\n    if (this.world.aeon === 'Hadean' || this.world.aeon === 'Archean') {\n      return '(Region identification requires a calmer era...)'\n    }\n\n    if (Object.keys(this.regions).length === 0) {\n      this.regions = this.world.elevation.regions()\n    }\n\n    const regionName = Object.keys(this.regions).find(regionName =>\n      this.regions[regionName].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (regionName) {\n      if (this.placeNames[regionName] === undefined) {\n        this.placeNames[regionName] = this.continentNamer.generate().split(' ')[0]\n      }\n      return this.placeNames[regionName]\n    }\n\n    return 'Unknown Region'\n  }\n}\n\ntype Aeon = 'Hadean' | 'Archean' | 'Proterozoic'\nclass WorldMap extends Model {\n  notes = { aeon: () => this.aeon }\n\n  get aeon(): Aeon {\n    let eon: Aeon = 'Hadean';\n    if (this.ticks >= this.mapgenTicks / 2) { eon = 'Archean' }\n    if (this.ticks >= this.mapgenTicks) { eon = 'Proterozoic' }\n    return eon;\n  }\n  // aeons = ['Hadean', 'Archean', 'Proterozoic', 'Pharezoic']\n\n  // todo highlight/indicate..\n  // pushpins = { mountains: { 'Everwhite (Peak of Tears)': [10, 10] } }\n\n  width = 100 //20\n  height = 50 //35\n\n  private mapgenTicks = 100\n  elevation: Heightmap = new Heightmap(this.width, this.height)\n  private terrain: Board = new Board(this.width, this.height)\n  // private vegetation: Board = new Board(this.width, this.height)\n\n  private mountainSpots: [number, number][] = []\n  private areaPercent = Math.floor(this.area / 100);\n\n  get tiles() { return this.elevation.map.view({ overlays: [\n    // this.vegetation,\n    // this.terrain,\n    // this.elevation.binaryImage(),\n    // this.elevation.transform(),\n  ] }) }\n\n  @boundMethod\n  tileInspect(x: number, y: number) {\n    const elevation = this.elevation.at(x,y) || 0\n    const li = Math.round(3600 * ( elevation - 4 ) / 5280)\n    const elevationMessage = li === 0 ? 'At sea level' : `${Math.abs(li)} li ${li >= 0 ? 'above' : 'below'} sea level`\n    const regionName = this.cartographer.identifyRegion(x,y) //'Unknown Region';\n    return `${regionName} (${elevationMessage})`\n  }\n\n  protected cartographer = new Cartographer(this)\n\n  tileColors = {\n    // terrain\n    // land\n    '.':  'lightgreen',\n\n    // sea\n    '~': 'midnightblue',\n    ',': 'navy',\n\n    // vegetation...\n    '\\'': 'darkgreen',\n\n    // elevation map\n    '0': 'black',\n    // '1': 'white',\n\n    // heightmap\n    '1': 'black',\n    '2': 'navy',\n    '3': 'midnightblue',\n    '4': 'deepskyblue',\n    '5': 'moccasin',\n    '6': 'forestgreen',\n    '7': 'darkgreen',\n    '8': 'darkslategray',\n    '9': 'gray',\n  }\n\n  // todo profiles? islands/continents/ocean/grasslands/mountains\n\n  constructor() {\n    super(\"Overworld\")\n    this.evolve(this.evolution)\n    this.actions.create({ name: 'Geoform', act: () => {\n      this.ticks = 0\n      this.cartographer.regions = {}\n    }});\n    // this.reboot()\n  }\n\n  @boundMethod\n  randomPosition(): [number, number] {\n    let x = randomInteger(0, this.width)\n    let y = randomInteger(0, this.height)\n    return [x, y]\n  }\n\n  // randomPositionAlongCircumference(center: [number,number], radius: number): [number, number] {\n    // x^2 + y^2 == radius\n    // y^2 = radius - x^2\n    // y = sqrt(radius - x^2)\n  //   return [0,0]\n  // }\n\n  @boundMethod\n  randomPositionAlongLine(a: [number,number], b: [number,number]): [number, number] {\n    // console.log(\"Random position along line from\", { a, b })\n    let [ax,ay] = a;\n    let [bx,by] = b;\n    let [dx,dy] = [ Math.abs(ax-bx), Math.abs(ay-by) ]\n    if (dx === 0) {\n      // it's vertical so... any points on this column\n      let y = randomInteger(0, this.height)\n      let x = ax //randomInteger(0, this.width)\n      return [x, y]\n    } else if (dy === 0) {\n      let x = randomInteger(0, this.width)\n      let y = ay //randomInteger(0, this.width)\n      return [x, y]\n    } else {\n      let slope = dy / dx; // rise over run\n      // so eg ay = slope * ax + b\n      //       -b = (slope * ax) - ay\n      //       b = -((slope * ax) - ay)\n      let y0 = (-((slope * ax) - ay))\n      // let x0 = Math.floor(y0 / slope)\n\n    // console.log({ slope, y0, x0 })\n      // .     ay - b = slope * ax\n      // .     (ay - b)/slope = ax\n      // let x0 = ((ay - y0)/slope)\n      // let y0 = -((slope * ax) - ay)\n      // if (Math.random() < 0.5) {\n      let x = Math.floor(randomInteger(0, this.width))\n      let y = Math.floor((slope * x) + y0)\n\n\n      return [x + randomInteger(-1,1),y + randomInteger(-1,1)]\n      // if y = mx + y0\n      // then y - y0 = mx, (y - y0)/m = x ..\n      // setting y to 0 is x = y0/m \n      // todo\n      // } else {\n      // let y = Math.floor(randomInteger(0, this.height))\n      // let x = Math.floor(((1/slope) * y) + x0)\n      // return [x,y]\n      // }\n    }\n\n    // let x = randomInteger(0, this.width)\n    // let y = randomInteger(0, this.height)\n    // return [x, y]\n  }\n\n  genHeightmap(t: number) {\n    if (this.mountainSpots.length === 0) {\n      let targetSpotCount = Math.floor(10 * this.areaPercent)\n      // let mountainLineEndpoints: [[number,number], [number,number]] = [ this.randomPosition(), this.randomPosition() ]\n      let [a,b] = [ this.randomPosition(), this.randomPosition() ]\n      // console.log(\"Line\", [ a, b ])\n      let spots = construct(() => this.randomPositionAlongLine(a,b), targetSpotCount, false)\n      this.mountainSpots = spots\n    }\n\n    // this.elevation.map.drawBox('0', 2, 2, this.width-4, this.height-4, false) // ..\n    // let hadean = t < this.mapgenTicks / 2;\n    this.elevation.geoform(this.aeon === 'Hadean', this.mountainSpots)\n    if (t > 0 && t % this.mapgenTicks === 0) {\n      console.log(\"[worldgen] hadean + archean aeons complete\")\n      // compute regions...\n      // this.elevation.regions()\n      // this.buildTerrain()\n    }\n    this.elevation.map.drawBox('0', 0, 0, this.width, this.height, false)\n    this.elevation.map.drawBox('0', 1, 1, this.width-2, this.height-2, false)\n  }\n\n  buildTerrain() {\n    this.terrain.each((x,y,_value) => {\n      let height = parseInt(this.elevation.map.at(x,y) || '0')\n      if (height >= 9) {\n        this.terrain.write(\"^\", x, y)\n      } else if (height <= 4) {\n        this.terrain.write(sample([\"~\", ',']), x, y)\n      } else {\n        this.terrain.write('.',x,y)\n      }\n    })\n  }\n\n  // growVegetation() {\n  //   this.vegetation.step((val, _neighbors) => {\n  //     if (val === \"'\") {\n  //       if (_neighbors.length >= 2) { //} || _neighbors.length <= 6) {\n  //         return \"'\"\n  //       }\n  //     } else {\n  //       if (_neighbors.length === 3) {\n  //         return \"'\"\n  //       }\n  //     }\n  //     return ''\n  //   })\n  //   this.vegetation.each((x,y,value) => {\n  //     let h = parseInt(this.elevation.map.at(x,y) || '0')\n  //     // autogenesis\n  //     if (h <= 4 || h >= 8) { this.vegetation.erase(x, y) }\n  //     else if (value === '' && randomInteger(0,100) > 98) {\n  //       if (h >= 4 && h < 8) {\n  //         this.vegetation.write(\"'\", x, y)\n  //       }\n  //     }\n\n\n  //   })\n\n  // }\n\n  get area() { return this.width * this.height }\n\n  @boundMethod\n  evolution({ resources }: EvolvingStocks, t: number) {\n    if (t > 0) {\n      if (t % 100 === 0) { console.log(\"The world is \" + (t / 100) + \" million years old\") }\n      if (t <= this.mapgenTicks) { this.genHeightmap(t) }\n    }\n  }\n}\nconst worldMapMaker = new WorldMap()\nexport default worldMapMaker;\n\n","import { Avernus } from \"./Avernus\"\nimport arena from \"./Arena\"\n// import { Society } from \"./Society\"\nimport zep from \"./zep\"\nimport Citizen from \"./Citizen\"\nimport Building from \"./Building\"\nimport worldMapMaker from \"./WorldMap\"\n\nconst models = [\n  worldMapMaker,\n  Building,\n  arena,\n  zep,\n  Avernus,\n  Citizen,\n  // Society,\n]\n\nexport default models\n\n","\nimport './App.css';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelSelector } from './ModelSelector';\nimport models from './examples';\n\ntype ApplicationProps = {\n  model: IModel\n}\n\nfunction App({ model: initialModel }: ApplicationProps) {\n\n  return <div className=\"App\">\n    {/* @ts-ignore */}\n    <ModelSelector models={models} initialModel={initialModel} />\n  </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport models from './examples';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App model={models[0]} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}