{"version":3,"sources":["ecosphere/utils/where.ts","ecosphere/utils/isString.ts","collections/Map.ts","collections/List.ts","collections/Sequence.ts","ecosphere/Stocks.ts","ecosphere/Registry.ts","ecosphere/Delta.ts","ecosphere/Model/Simulation.ts","ecosphere/Collection.ts","ecosphere/utils/randomInteger.ts","ecosphere/utils/sample.ts","ecosphere/types/index.ts","ecosphere/Population.ts","ecosphere/Community.ts","ecosphere/Model/Model.ts","ecosphere/Model/presentItem.tsx","ecosphere/View/Tile.tsx","ecosphere/View/presentCommunity.tsx","ecosphere/View/presentIndividual.tsx","ecosphere/View/ModelView.tsx","ecosphere/Model/index.ts","ModelPresenter.tsx","useModel.tsx","ModelSelector.tsx","examples/Avernus.ts","examples/Arena/MonsterManual.ts","examples/Arena/PlayerHandbook.ts","examples/Arena/index.ts","examples/Factory.ts","ecosphere/utils/unique.ts","examples/zep.tsx","examples/Citizen.ts","ecosphere/Board.ts","examples/Building.tsx","ecosphere/utils/replicate.ts","ecosphere/utils/times.ts","examples/index.ts","examples/WorldMap.ts","App.tsx","index.tsx"],"names":["where","key","value","it","isString","String","Map","idFor","nameFor","lookup","_data","k","v","this","namesAndValues","Object","entries","map","Number","fromEntries","List","items","count","length","push","filter","item","cb","forEach","fn","Error","Sequence","StockManager","stocks","stockId","amount","add","name","remove","list","lookupById","Stocks","elements","ids","storage","attrs","attributes","has","manage","id","next","theEntity","setAmount","element","find","matching","create","flatMap","manageAll","boundMethod","Registry","popCtor","populations","species","values","x","hasOwnProperty","theSpecies","population","populationList","pop","Delta","model","getStocks","changes","baseline","_store","Simulation","ticks","tracking","dynamics","e","flux","target","report","source","theDelta","manager","_delta","theFlows","flow","table","entry","t","flows","each","dynamism","apply","changed","flowsReport","delta","updated","deltaAmount","Collection","randomInteger","min","max","Math","floor","random","sample","ts","animalIds","createAnimal","kind","age","health","spirit","cunning","agility","strength","moietyIds","createMoiety","wealth","sophistication","power","knowledge","personId","human","size","createPerson","moiety","inventory","traits","body","mind","insight","depth","education","disposition","soul","wit","empathy","integrity","beauty","currency","things","meters","memory","SetHelper","set","populationIds","Population","individuals","Set","theList","individual","first","theIndividual","newborn","doomed","destroy","newborns","i","birth","doneFor","death","build","delete","Community","moieties","obscured","recipes","jobs","worker","inventories","person","get","personAttrs","resources","recipe","produce","mayProduce","consumes","resource","produces","Model","people","machines","animals","metrics","notes","actions","policies","currentPolicy","clear","actionName","args","action","act","policyName","policy","presentItem","deltas","title","className","data-testid","Tile","children","presentCommunity","community","aria-label","work","itemNames","thing","meterName","measure","htmlFor","style","paddingRight","width","height","low","high","optimum","sort","a","b","display","trait","Board","tiles","tileColors","fontFamily","row","y","cell","color","ModelView","modelName","communities","lastChanges","board","folks","keys","view","ModelPresenter","send","choose","step","onClick","type","checked","onChange","useModel","initialModel","useState","setModel","setLastChanges","delay","setDelay","shouldStep","shouldSend","doSend","shouldManage","doManage","command","setCommand","setPolicy","useEffect","isModel","callback","savedCallback","useRef","current","tick","setInterval","clearInterval","useInterval","performSend","performChoose","maybeModel","AssemblyPresenter","assembly","models","theModel","ModelSelector","options","placeholder","give","recipient","supplier","n","world","miner","minter","smelter","fisherman","mineGold","smeltGold","mintCoin","evolve","MonsterManual","basicCreatures","Fragment","hp","evasion","Light","Fog","reflect","Aura","speed","Shadow","Wisp","Filament","counter","Voice","absorb","defense","Nothing","regen","challengingCreatures","Fiendling","Gremlin","Goblin","Kobold","Orc","uncommonCreatures","Rat","Bat","Snake","Blob","Bear","Ghost","Rogue","Troll","Giant","bosses","Priest","heal","Vampire","Drake","Lich","extraplanar","Demon","Angel","Archdemon","Dracolith","Archangel","dragons","rareCreatures","Leviathan","bestiary","basicSubtypes","Hostile","Intimidating","Nimble","Quick","Timid","Spry","Dancing","Vigilant","Relentless","Armored","Hardened","Benevolent","Protective","Snarling","Emboldened","Floating","Crystalline","Glinting","Mobile","Coldsnap","Blinding","Noxious","rareSubtypes","Voracious","Vicious","Vexatious","Arrogant","Querulous","Adventurous","Questing","Silvered","Mirrored","Aggressive","Dominating","Swift","Accelerated","Elusive","Reluctant","Hidden","Invisible","Imperceptible","Regrowing","Hydra","Fortified","Angelic","Prismatic","Pugnacious","Augmented","Skillful","Skeletal","Undead","Zombie","Favored","Fiendish","Fierce","Opalescent","Cruel","Vortex","evade","Luminous","Defiant","Devious","Draconic","subtypes","Common","Evasive","Retaliatory","Inspired","Infused","Radiant","Resplendent","Heavy","Titanic","Unholy","Blessed","Adept","perks","Piercing","Enchanted","Clockwork","Phantasmal","Cosmic","Imperious","monsterIds","difficulty","creature","base","join","cr","generateBasicMonster","adjustedCr","crFactor","perk","PlayerHandbook","level","pow","hero","characterClass","template","characterClasses","attr","baseStartingHp","levelUp","pc","attributeBoosts","common","uncommon","rare","epic","legendary","rarity","levelAttr","perkLevels","console","log","includes","Fighter","perkBenefits","Brutality","Counterweight","Efferverscence","Efficacious","Opalescence","Ethereal","Faith","Finesse","Fitness","Fluidity","Dexterity","Precision","Swiftness","Rapidity","Medic","Vitality","Whirlwind","Focus","Iridescence","Concentration","Salvation","DungeonMasterGuide","durations","round","day","arena","events","eventIds","challengeRating","heroIds","metricGrain","manual","spawnHero","spawnEnemyParty","enemyName","at","party","generate","totalLevels","adv","reduce","recentEvents","totalInjuryAmount","recent","injury","enemy","enemies","defender","aggressor","reflected","damage","enemyInjured","effective","absorption","injure","strike","attribute","multiplier","benefits","ranks","benefit","holyDefense","holyDamage","magicDefense","magicDamage","physicalDamage","criticalStrike","baseDamage","bonus","critChance","overallDamage","aggressors","defenders","aggSpeed","damageAll","hit","chainChance","maxChain","chain","healee","maxHeal","unit","adventurer","xp","gil","per","levelCost","stock","encounterChance","turnStarted","attack","mortalityCheck","Factory","bills","deliveryRate","fulfillmentEvents","canProduce","workers","required","requirement","producingRequirement","missingRequirements","missing","evolution","orderIds","event","message","description","deliverTo","order","receive","reset","firstUnfulfilled","unfulfilled","produceUnfulfilled","allBillsRequested","arr","u","l","unique","bill","nextUnfulfilled","undefined","orderItemNames","itemName","account","price","emit","warn","factory","reboot","product","managers","generatePerson","gender","firstName","lastName","subject","date","describeMemory","time","seconds","second","minute","hour","dayOfWeek","padStart","write","character","x0","y0","drawBox","char","x1","y1","viewTiles","eachCell","ignored","newTiles","currentValue","neighbors","Boolean","newCell","buildingMaker","building","replicate","array","times","arrays","Array","concat","terrain","'","alphabet","Building","zep","Avernus","Citizen","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d716899.chunk.js","sourcesContent":["export function where(key: string, value: any) {\n  return (it: any) => it[key] === value;\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n","import { IMap } from \"./types\";\nexport class Map<K, V> implements IMap<K, V> {\n  _data: { [id: number]: V; } = {};\n  constructor(\n    private idFor: (k: K) => number,\n    private nameFor: (k: K) => string,\n    private lookup: (id: number) => K,\n  ) { }\n  set(k: K, v: V) { this._data[this.idFor(k)] = v; }\n  get(k: K): V { return this._data[this.idFor(k)]; }\n  get report(): { [name: string]: V } {\n    const namesAndValues = Object.entries(this._data)\n      .map(([k, v]) => [this.nameFor(this.lookup(Number(k))), v]);\n    return Object.fromEntries(namesAndValues);\n  }\n}\n","//\n\nimport { IList } from \"./types\";\n\nexport class List<T> implements IList<T> {\n  items: T[] = [];\n  protected get it() { return this.items; }\n  get first(): T { return this.items[0]; }\n  get last(): T { return this.items[this.count - 1]; }\n  get count(): number { return this.items.length; }\n  add(it: T) { this.items.push(it); }\n  remove(it: T) { this.items = this.items.filter(item => item !== it); }\n  each(cb: (it: T) => any) { this.items.forEach(cb); }\n  clear() { this.items = []; }\n  map<U>(fn: (it: T) => any): U[] { return this.items.map(fn) }\n\n  get sample(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n","import { ISequence } from \"./types\";\n\nexport class Sequence implements ISequence<number> {\n  count = 0;\n  get next(): number { return this.count++; }\n}\n","import { BasicEntity } from \"./types/BasicEntity\";\nimport { boundMethod } from 'autobind-decorator'\nimport { where } from \"./utils/where\";\nimport { isString } from \"./utils/isString\";\nimport { ManageStock, ManageStocks } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass StockManager<T extends BasicEntity> implements ManageStock<T> {\n  constructor(private stocks: Stocks<T>, private stockId: number) {}\n  add(amount: number): void { return this.stocks.add(amount, this.name) }\n  remove(amount: number): void { return this.stocks.remove(amount, this.name) }\n  get list(): T[] { return this.stocks.list() }\n  get count(): number { return this.stocks.count(this.name) }\n  get name() { return this.item.name }\n  get item(): T { return this.stocks.lookupById(this.stockId) }\n}\n\nexport class Stocks<T extends BasicEntity> {\n  private ids: Sequence = new Sequence()\n  private storage: { [key: number]: number; } = {}\n\n  constructor(\n    public name: string,\n    private elements: T[] = []\n  ) { }\n\n  @boundMethod\n  list() { return this.elements }\n\n  get _store() { return this.storage }\n\n  public clear() { this.elements = []; this.storage = {} }\n\n  public create(name: string): ManageStock<T>\n  public create(attributes: { name: string } & Omit<T, 'id' | 'name'>): ManageStock<T>\n  /** Create a new type of element to store */\n  @boundMethod\n  public create(attrs: any) {\n    let name: string | null = null;\n    let attributes: Partial<T> = {}\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    if (isString(name) && this.has(name)) {\n      return this.manage(name);\n    }\n    if (!isString(name)) { throw new Error(\"Name must be a string\") }\n    // const elementIds: number[] = this.list().map(({ id }) => id);\n    const id = this.ids.next; //Math.max(0, ...elementIds) + 1;\n    const theEntity: T = { id, name, ...attributes } as T\n    this.list().push(theEntity);\n    const manage: ManageStock<T> = this.manage(name as string)\n    return manage\n  }\n\n  @boundMethod\n  add(amount: number, name: string) {\n    this.setAmount(name, this.count(name) + amount);\n  }\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.setAmount(name, this.count(name) - amount);\n  }\n\n  @boundMethod\n  zero(name: string): void {\n    this.setAmount(name, 0);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    const element: T = this.lookup(name);\n    const amount = this.storage[element.id] || 0;\n    return amount;\n  }\n\n  has(name: string): boolean {\n    const matching = this.elements.find(where('name', name))\n    return !!matching;\n  }\n\n  @boundMethod\n  lookupById(id: number): T {\n    const matching = this.elements.find(where('id', id))\n    if (matching) {\n      return matching as T;\n    }\n    throw new Error(`No such ${this.name} with id ${id}`);\n  }\n\n  lookup(name: string): T {\n    const matching = this.elements.find(where('name', name))\n    if (matching) {\n      return matching as T;\n    } else {\n      return this.create(name).item\n    }\n  }\n\n  get report(): (T & { amount: number })[] {\n    const items: T[] = this.list()\n    const table = items.flatMap((item: T) => {\n      const id = Number(item.id)\n      const amount = this.storage[id] || 0\n      return { ...item, amount }\n    })\n    return table\n  }\n\n  manage(name: string): ManageStock<T> {\n    return new StockManager<T>(this, this.lookup(name).id)\n  }\n\n  manageAll(): ManageStocks {\n    const { add, remove, count } = this\n    return { add, remove, count, list: () => this.elements }\n  }\n\n  get manager() { return this.manageAll() }\n\n  private setAmount(name: string, amount: number): void {\n    const element: T = this.lookup(name);\n    this.storage[element.id] = amount;\n  }\n}\n","import { Population } from \"./Population\";\nimport { BasicEntity } from \"./types/BasicEntity\";\nimport { Entity, ManageStocks } from \"./types\";\nimport { boundMethod } from \"autobind-decorator\";\n\n// eg map animal (species) names to populations of individual animals...\n\nexport class Registry<U extends BasicEntity, T extends Entity<U>, Pop extends Population<U,T>> {\n  populations: { [species: string]: Pop } = {};\n  species: { [species: string]: U } = {}\n  constructor(\n    public name: string,\n    public popCtor: new (name: string, specie: U) => Pop\n  ) {}\n\n  clear() {\n    this.populations = {}\n  }\n\n  @boundMethod\n  lookup(name: string): Pop {\n    if (this.has(name)) {\n      return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${name}'`);\n    }\n  }\n\n  @boundMethod\n  lookupById(id: number): U { //Population<U,T> {\n    const matching = Object.values(this.species).find(x => x.id === id)\n    if (matching) { //this.has(name)) {\n      return matching\n      // return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${id}'`);\n    }\n  }\n\n  has(name: string): boolean {\n    return this.populations.hasOwnProperty(name);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    return this.lookup(name).count;\n  }\n\n  @boundMethod\n  list(): U[] {\n    return Object.values(this.species)\n  }\n\n  listByName(name: string): T[] {\n    return this.lookup(name).list();\n  }\n\n  @boundMethod\n  create(name: string, species?: Omit<U, 'name' | 'id'>): Pop { //Population<U,T> {\n    if (this.has(name)) {\n      return this.lookup(name);\n    }\n    let theSpecies: U = { ...species, name, id: this.list().length+1 } as unknown as U; // species.kind points back to name...\n    let population: Pop = new this.popCtor(name, theSpecies);\n    this.populations[name] = population;\n    this.species[name] = theSpecies;\n    return population;\n  }\n\n  get populationList(): Population<U,T>[] { return Object.values(this.populations)}\n\n  get report() {\n    const pops = this.populationList.flatMap((population: Population<U,T>) => {\n      const pop = population\n      if (pop.count > 0) {\n        return { name: pop.name, amount: pop.count}\n      } else {\n        return []\n      }\n    })\n    return pops\n  };\n\n  @boundMethod\n  add(amount: number, name: string): void {\n    this.lookup(name).add(amount)\n  };\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.lookup(name).remove(amount)\n  };\n\n  manageAll(): ManageStocks {\n    const { add, remove, count, list } = this\n    return { add, remove, count, list }\n  }\n  get manager() { return this.manageAll() }\n}\n","import { Model } from \"./Model\";\nimport { Registry } from \"./Registry\";\nimport { Stocks } from \"./Stocks\";\nexport type DeltaSource = Stocks<any> | Registry<any, any, any> \n//<U extends BasicEntity, T extends Entity<U>> = Stocks<T> | Registry<U,T>\nexport type DeltaSourceManager = { add: Function, remove: Function, count: Function, list: Function }\nexport class Delta {\n  public changes: Stocks<any>;\n  constructor(public model: any, public getStocks: (model: Model) => DeltaSource) {\n    let baseline = this.getStocks(model)\n    this.changes = new Stocks(`${baseline.name} (delta)`, baseline.list());\n  }\n  get storage() { return this.changes._store }\n  // evolve(t: number): Delta {\n  //   let stocks = this.getStocks(this.model)\n  //   const flow = { [stocks.name]: stocks.manageAll() }\n  //   this.model.dynamics.each(dynamism => dynamism(flow, t));\n  //   return this;\n  // }\n}\n","import { List } from \"../../collections\";\nimport { Delta, DeltaSource } from \"../Delta\";\nimport { Entity, EvolvingStocks, TimeEvolution } from \"../types\";\nimport { ISimulation } from \"./ISimulation\";\n\nexport abstract class Simulation implements ISimulation {\n  protected ticks: number = 0;\n  protected tracking: string[] = []\n  public dynamics = new List<TimeEvolution>()\n  constructor(public name: string) { }\n  public evolve(e: TimeEvolution) { this.dynamics.add(e) }\n  public step() { return this.flux(this.ticks++) }\n\n  public get report() {\n    return Object.fromEntries(this.tracking.map(target =>\n      [target, (this as any)[target].report]\n    ))\n  }\n\n  private flow(target: string) {\n    const source = (this as any)[target]\n    const theDelta = new Delta(this, (model) => (model as any)[target])\n    const { add, remove } = theDelta.changes.manager\n    const { list, count, lookupById } = source\n    return { lookupById, _delta: theDelta, add, remove, list, count }\n  }\n  \n  private flows(): { [key: string]: { _delta: Delta, lookupById: Function, add: Function } } {\n    const theFlows: {[key: string]: any} = {}\n    this.tracking.forEach(target => theFlows[target] = this.flow(target))\n    return theFlows\n  }\n\n  private flowsReport(flow: { [s: string]: any }) {\n    const table: { [key: string]: any } = {}\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = flow._delta\n      table[name] = Object.fromEntries(\n        Object\n          .entries(theDelta.storage)\n          .map(entry => {\n            const [id, amount] = entry\n            const name = flow.lookupById(Number(id)).name\n            return [ name, amount ]\n          })\n      )\n    })\n    return table\n  }\n\n  private flux(t: number) {\n    const flow: EvolvingStocks = this.flows() as any as EvolvingStocks\n    this.dynamics.each(dynamism => dynamism(flow, t));\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = (flow as any)._delta\n      this.apply(theDelta, name)\n    })\n    return { changed: this.flowsReport(flow) }\n  }\n\n  private apply(delta: Delta, target: string) {\n    const source: DeltaSource = (this as any)[target] as DeltaSource\n    const manager = source.manager\n    const list = manager.list()\n    const { storage: updated } = delta;\n    const changed: { [elementName: string]: number; } = {};\n    list.forEach((item: Entity<any>) => {\n      if (updated[item.id]) {\n        const deltaAmount = updated[item.id];\n        manager.add(deltaAmount, item.name);\n        changed[item.name] = deltaAmount;\n      }\n    });\n    return { changed };\n  }\n}\n","import { List, Sequence } from \"../collections\";\nimport { IList } from \"../collections/types\";\nimport { BasicEntity } from \"./types/BasicEntity\";\n\nclass Collection<T extends BasicEntity> extends List<T> implements IList<T> {\n  list() { return this.items }\n  private ids = new Sequence()\n  get names(): string[] {\n    // throw new Error('Method not implemented.');\n    return this.items.map(item => item.name)\n  }\n  // private get ids() { return this.it.map(({ id }) => id) }\n  create(attributes: Partial<T>): T {\n    const id = this.ids.next;\n    const theEntity: T = { id, ...attributes } as unknown as T;\n    this.items.push(theEntity);\n    return theEntity\n  }\n\n  lookup(name: string) {\n    return this.items.find(it => it.name === name)\n  }\n}\n\nexport { Collection }\n","export function randomInteger(min: number, max: number) {\n  // return min + Math.floor(Math.random() * (max - min));\n  let result = Math.floor(Math.random() * (max - min + 1) + min)\n  // console.log(\"Random integer between \" + min + \" and \" + max + \": \" + result)\n  return result\n}\n","import { randomInteger } from \"./randomInteger\";\n\nexport function sample<T>(ts: T[]): T {\n  let i = randomInteger(0,ts.length-1)\n  return ts[i]; //randomInteger(0,ts.length-1)]\n\n}\n","import { Sequence } from \"../../collections\"\nimport { Collection } from \"../Collection\"\nimport { Stocks } from \"../Stocks\"\nimport { sample } from \"../utils/sample\"\nimport { BasicEntity } from \"./BasicEntity\"\n\nexport type Substance = BasicEntity\nexport type Entity<T> = BasicEntity & { kind: T }\n\nexport type Quality = 'terrible' | 'poor' | 'adequate' | 'good' | 'excellent'\ntype Size = 'fine' | 'small' | 'medium' | 'large' | 'huge'\nexport type Species = BasicEntity & {\n  name: string\n  size?: Size\n  fitness?: Quality\n}\n\nexport type Individual<T> = Entity<T> & {\n  age: number // maybe simpler to do bornAt?\n}\n\nexport type Creature<T> = Individual<T> & {\n  health: 'dying' | 'unwell' | 'flourishing' | 'triumphant'\n}\n\nexport type Animal = Creature<Species> & {\n  spirit: 'languorous' | 'vigorous' | 'impetuous' | 'ferocious'\n  strength: 'weak' | 'robust' | 'mighty' | 'indomitable'\n  cunning:  'dim' | 'attentive' | 'creative' | 'ingenious'\n  agility:  'clumsy' | 'nimble' | 'spry' | 'balletic'\n}\n\nconst animalIds = new Sequence()\nexport const createAnimal = (name: string, species: Species): Animal => {\n  return {\n    id: animalIds.next,\n    name,\n    kind: species,\n    age: 0,\n    health: sample(['dying', 'unwell', 'flourishing', 'triumphant']),\n    spirit: sample(['languorous', 'vigorous', 'impetuous', 'ferocious']),\n    cunning: sample(['dim', 'attentive', 'creative', 'ingenious']),\n    agility: sample(['clumsy', 'nimble', 'spry', 'balletic']),\n    strength: sample(['weak', 'robust', 'mighty', 'indomitable']),\n  }\n}\n\n// major demographic groupings -- moieties (maybe *this* should be called a Community??)\ntype Wealth = 'impoverished' | 'well-off' | 'luxuriant' | 'decadent'\ntype Sophistication = 'unpretentious' | 'savvy' | 'urbane' | 'sleek'\ntype Power = 'inconsequential' | 'marginal' | 'influential' | 'sovereign'\ntype Knowledge = 'clueless' | 'well-informed' | 'wise' | 'prescient'\n\nexport type Moiety = BasicEntity & {\n  wealth: Wealth\n  sophistication: Sophistication\n  power: Power\n  knowledge: Knowledge\n}\n\nconst moietyIds = new Sequence()\nexport const createMoiety = (name: string): Moiety => {\n  const wealth: Wealth = sample([ 'impoverished', 'well-off', 'luxuriant', 'decadent' ])\n  const sophistication: Sophistication = sample([ 'unpretentious', 'savvy', 'urbane', 'sleek' ])\n  const power: Power = sample([ 'inconsequential', 'marginal', 'influential', 'sovereign' ])\n  const knowledge: Knowledge = sample([ 'clueless', 'well-informed', 'wise', 'prescient' ])\n  return { id: moietyIds.next, name, wealth, sophistication, power, knowledge }\n}\n\ntype Body = Animal\n\ntype Insight = 'dense' | 'intuitive' | 'incisive' | 'brilliant'\ntype Depth = 'superficial' | 'substantial' | 'profound' | 'inscrutable'\ntype Education = 'unlettered' | 'literate' | 'tutored' | 'well-read'\ntype Disposition = 'dismal' | 'hopeful' | 'propitious' | 'roseate'\ntype Mind = {\n  insight: Insight\n  depth: Depth\n  education: Education\n  disposition: Disposition\n}\n\nexport const createMind = (): Mind => {\n  const insight: Insight = sample([ 'dense', 'intuitive', 'incisive', 'brilliant' ])\n  const depth: Depth = sample([ 'superficial', 'substantial', 'profound', 'inscrutable' ])\n  const education: Education = sample([ 'unlettered', 'literate', 'tutored', 'well-read' ])\n  const disposition: Disposition = sample([ 'dismal', 'hopeful', 'propitious', 'roseate' ])\n  return { insight, depth, education, disposition }\n}\n\ntype Wit = 'slow' | 'clever' | 'biting' | 'savage'\ntype Empathy = 'sadistic' | 'generous' | 'benevolent' | 'selfless'\ntype Integrity = 'uncertain' | 'sound' | 'solid' | 'incorruptible'\ntype Beauty = 'ugly' | 'fair' | 'radiant' | 'resplendent'\ntype Soul = {\n  wit: Wit\n  empathy: Empathy\n  integrity: Integrity\n  beauty: Beauty\n}\n\nexport const createSoul = (): Soul => {\n  const wit: Wit = sample([ 'slow', 'clever', 'biting', 'savage' ])\n  const empathy: Empathy = sample([ 'sadistic', 'generous', 'benevolent', 'selfless' ])\n  const integrity: Integrity = sample([ 'uncertain', 'sound', 'solid', 'incorruptible' ])\n  const beauty: Beauty = sample([ 'ugly', 'fair', 'radiant', 'resplendent' ])\n  return { wit, empathy, integrity, beauty }\n}\n\n// type Category = BasicEntity\n// type Item = Entity<Category> & {}\n// type Event = BasicEntity\n// type Incident = Entity<Incident>\n\n// export type Trait = { id: number, name: string, rank: 0 | 1 | 2 | 3 | 4 | 5 }\nexport type Memory = { id: number, name: string, description: string }\n\nexport type Person = Individual<Moiety> & {\n  body: Body\n  mind: Mind\n  soul: Soul\n\n\n  // ie within my moiety, I am (thought of as)...\n  // rank: 'commoner' | 'wellborn'\n  // title?: string\n  // reputation: 'unknown' | 'worthy' | 'adored' | 'revered'\n\n  // individually...\n  things: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n  // stats: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n\n  currency: number\n  traits: ManageStocks // IList<Trait>\n\n  // things to draw meters for..\n  meters: { [meterName: string]: Function }\n  memory: Collection<Memory>\n  // philosophy?: Ideology\n  // destiny: 'doomed' | 'commonplace' | 'exceptional' | 'free'\n}\n\nconst personId = new Sequence()\nconst human: Species = { id: -1, name: 'Human Being', size: 'medium' }\nexport const createPerson = (name: string, moiety: Moiety): Person => {\n\n  const inventory = new Stocks<any>(`${name}'s Things`)\n  const traits = new Stocks<any>(`${name}'s Traits`)\n  // const state = new Stocks<any>(`${name}'s State`)\n    // personAttrs.things = inventory.manageAll()\n  return {\n    id: personId.next,\n    kind: moiety,\n    // kind: createMoiety()\n    name,\n    age: 0,\n    body: createAnimal(name, human),\n    mind: createMind(),\n    soul: createSoul(),\n    // rank: 'commoner',\n    // reputation: 'unknown',\n    currency: 0,\n    things: inventory.manageAll(),\n    traits: traits.manageAll(),\n    // stats: state.manageAll()\n    // things: new M\n    meters: {},\n    memory: new Collection<Memory>(),\n  }\n\n}\n\n// const person = (): Person => {\n//   const newPerson: Person = {\n//     id: personId.next()\n//   }\n//   return newPerson\n// }\n\nexport type Recipe = BasicEntity & {\n  produces: { [resourceName: string]: number }\n  consumes?: { [resourceName: string]: number }\n  requiresMachine?: string\n}\n\nexport type Machine = BasicEntity\n\n// export type Task = BasicEntity & {\n//   machine?: string\n//   recipe: string\n// }\n\n// type ManageList = {}\n\nexport type ManageStocks = {\n  add: (amount: number, name: string) => void,\n  remove: (amount: number, name: string) => void,\n  count: (name: string) => number,\n  list: () => any[]\n}\n\nexport type ManageStock<T> = {\n  add: (amount: number) => void,\n  remove: (amount: number) => void,\n  count: number,\n  item: T\n}\n\nexport type ManagePopulation<T> = {\n  count: number\n  birth: (name: string) => T\n  death: (name: string) => T\n  add: (amount: number) => T[]\n  remove: (amount: number) => T[]\n}\n\nexport type ManagePopulationRegistry<T> = {\n  lookup: (name: string) => ManagePopulation<T>\n}\n\n// todo rename\nexport interface EvolvingStocks {\n  [key: string]: ManageStocks\n}\nexport type TimeEvolution = (evolution: EvolvingStocks, ticks: number) => void\n\nexport type StepResult = {\n  changed: { \n    [groupName: string]: { [elementName: string]: number }\n  }\n}\n\n// todo move these model/sim things somewhere else???\nexport type Action = { id: number, name: string, act: Function }\nexport type Policy = { id: number, name: string, manage: Function }\n","import { isString } from \"./utils/isString\";\nimport { boundMethod } from \"autobind-decorator\";\nimport { Entity } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass SetHelper {\n  static first<T>(set: Set<T>): T { return set.values().next().value }\n}\n\n// a collection of named individuals...\nconst populationIds: Sequence = new Sequence()\nexport class Population<Specie, Dividual extends Entity<Specie>> {\n  public id = populationIds.next\n  private ids: Sequence = new Sequence()\n  constructor(\n    public name: string,\n    public species?: Specie,\n    protected individuals: Set<Dividual> = new Set(),\n  ) {}\n\n  list() { \n    const theList: Dividual[] = []\n    this.individuals.forEach(individual => theList.push(individual))\n    return theList;\n  }\n  get count() { return this.individuals.size }\n  get first() { \n    return SetHelper.first(this.individuals)\n   }\n  public lookup(name: string): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.name === name) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with name '${name}' in the population of ${this.name}`)\n  }\n\n  @boundMethod\n  public lookupById(id: number): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.id === id) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with id ${id} in the population of ${this.name}`)\n  };\n\n  public birth(name: string = `${this.name} ${this.count}`): Dividual {\n    const newborn = this.create(name)\n    return newborn\n  }\n\n  @boundMethod\n  public death(name?: string): Dividual {\n    if (name) {\n      const doomed = this.destroy(name)\n      if (doomed) {\n        return doomed\n      }\n    } else {\n      const doomed = this.first\n      if (doomed) {\n        this.destroy(doomed.name)\n        return doomed\n      }\n    }\n    throw new Error(\"Population already empty!\")\n  }\n\n  public add(amount: number) {\n    const newborns = []\n    for (let i = 0; i < amount; i++) {\n      newborns.push(this.birth())\n    }\n    return newborns\n  }\n\n  public remove(amount: number) {\n    const doneFor = []\n    for (let i = 0; i < Math.min(this.count, amount); i++) {\n      doneFor.push(this.death(this.first.name))\n    }\n    return doneFor\n  }\n\n  protected build(attrs: any) {\n    let name = null;\n    let attributes: Partial<Dividual> = {};\n    // console.log(attrs)\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    \n    const id = this.ids.next; //Math.max(0, ...this.ids) + 1;\n    const theIndividual: Dividual = { id, name, ...attributes } as unknown as Dividual;\n    return theIndividual;\n  }\n\n\n  public create(name: string): Dividual;\n  public create(attrs: Partial<Dividual>): Dividual;\n  @boundMethod\n  public create(attrs: any) {\n    const theIndividual: Dividual = this.build(attrs)\n    this.individuals.add(theIndividual);\n    return theIndividual;\n  }\n\n  public destroy(name: string): Dividual;\n  @boundMethod\n  public destroy(name: string) {\n    const theIndividual: Dividual = this.lookup(name)\n    this.individuals.delete(theIndividual);\n    return theIndividual;\n  }\n\n  get report() {\n    return Object.fromEntries(this.list().map(individual => {\n      return [individual.id, individual.name];\n    }))\n  }\n}\n","import { List, Map } from '../collections';\nimport { Recipe, Moiety, Person, ManageStocks, createPerson, createMoiety } from \"./types\";\nimport { Population } from \"./Population\";\nimport { Collection } from \"./Collection\";\nimport { boundMethod } from 'autobind-decorator';\n\nexport class Community extends Population<Moiety, Person> {\n  moieties: List<Moiety> = new List<Moiety>();\n  obscured: boolean = false // don't display details\n   \n  public recipes = new Collection<Recipe>();\n  public jobs = new Map<Person, Recipe>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  );\n\n  public inventories = new Map<Person, ManageStocks>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  )\n\n  get report(): { [personName: string]: string; } {\n    const entries = this.list()\n      .map(person => [person.id, (this.jobs.get(person) || {name: '?'}).name]);\n    return Object.fromEntries(entries);\n  }\n\n  // okay if we need to override create + build inventories let's do it ??\n  public create(name: string): Person;\n  public create(attrs: Partial<Person>): Person;\n  @boundMethod\n  public create(attrs: any) {\n    const personAttrs = super.build(attrs);\n    const { name, age } = personAttrs;\n    const person: Person = createPerson(name, createMoiety(`${name}'s Gens`)) //, this.species)\n    person.age = age\n    this.individuals.add(person)\n    return person\n  }\n\n  // people have inventories...\n  // and maybe they've declared what they want\n\n  // measureTime(time: number): HumanCalendar {}\n\n  // trade({ resources })\n\n  work({ resources }: { resources: { add: Function; remove: Function; count: Function; }; }): void {\n    const { report } = this.jobs;\n    Object.entries(report).forEach(([_workerName, recipe]: [string, Recipe]) => {\n      this.produce(recipe, resources);\n    });\n  }\n  \n  private produce(recipe: Recipe, resources: { add: Function; remove: Function; count: Function; }) {\n    if (this.mayProduce(recipe, resources)) {\n      if (recipe.consumes) {\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          resources.remove(amount, resource);\n        });\n      }\n      Object.entries(recipe.produces).forEach(([resource, amount]) => {\n        resources.add(amount, resource);\n      });\n    }\n  }\n\n  private mayProduce(recipe: Recipe, resources: { count: Function; }) {\n    let mayProduce = true;\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (resources.count(resource) < amount) {\n          mayProduce = false;\n        }\n      });\n    }\n    return mayProduce;\n  }\n\n}\n","import { Substance, Machine, Animal, Species, Action, Policy, Moiety, Person } from \"../types\"\nimport { Stocks } from \"../Stocks\"\nimport { Registry } from \"../Registry\"\nimport { Simulation } from \"./Simulation\"\nimport { IModel } from \"./IModel\"\nimport { Collection } from \"../Collection\"\nimport { Community } from \"../Community\"\nimport { Population } from \"../Population\"\nimport { Tiles } from \"../Board\"\n\ntype Fauna = Population<Species, Animal>\nexport class Model extends Simulation implements IModel  {\n  tracking = [ 'animals', 'resources' ]\n  get tiles(): Tiles { return [] }\n\n  public people = new Registry<Moiety, Person, Community>('people', Community)\n  public resources = new Stocks<Substance>('resources')\n  public machines  = new Stocks<Machine>('machines')\n  public animals   = new Registry<Species, Animal, Fauna>('wildlife', Population)\n\n  reset() {\n    this.resources.clear()\n    this.machines.clear()\n    this.animals.clear()\n    this.people.clear()\n    this.dynamics.clear()\n  }\n\n  // measurements\n  public metrics: { [name: string]: () => number } = {}\n  public notes: { [name: string]: () => string } = {}\n\n  // interactive elements\n  public actions: Collection<Action> = new Collection<Action>()\n  public policies: Collection<Policy> = new Collection<Policy>()\n\n  send(actionName: string, args: any): void {\n    const action = this.actions.lookup(actionName)\n\n    if (action) {\n      action.act(args)\n    } else {\n      throw new Error(`No such action ${actionName}`)\n    }\n  }\n\n  currentPolicy: Policy | undefined\n  choose(policyName: string): void {\n    // console.log(\"[Model.choose]\", policyName)\n    const policy = this.policies.lookup(policyName)\n    if (policy) {\n      this.currentPolicy = policy\n    } else {\n      throw new Error(`No such policy ${policyName}`)\n    }\n  }\n\n  public step() {\n    if (this.currentPolicy) {\n      // console.log(\"MANAGING\", { policy: this.currentPolicy })\n      this.currentPolicy.manage()\n    }\n    return super.step()\n  }\n}\n\nexport default Model;\n","import { prettyAmount } from \"../utils/prettyAmount\";\n\nexport function presentItem(deltas?: { [elementName: string]: number; }) {\n  return ({ name, amount }: { name: string; amount: number; }) => {\n    const delta = deltas && deltas[name];\n    return <li key={name} title={name} className='Item'>\n      <span className='Title' data-testid='Name'>{name}</span>\n      <span data-testid='Count'>\n        {prettyAmount(amount)}\n      </span>\n      <span data-testid='Delta'>\n        {delta}\n      </span>\n    </li>;\n  };\n}\n","export function Tile({ children, title }: { children?: React.ReactNode; title: string; }) {\n  return <div className='Tile' title={title}>\n    <h5 className='Title'>{title}</h5>\n    {children}\n  </div>;\n}\n","import { Tile } from \"./Tile\";\nimport { Community } from \"../Community\";\nimport { presentIndividual } from \"./presentIndividual\";\n\n\nexport function presentCommunity(community: Community) {\n  return <Tile title={community.name} key={community.id}>\n    <ul aria-label='People'>\n      {community.obscured ? community.list().map(individual => <li key={individual.id}>{individual.name}</li>)\n                          : community.list().map(presentIndividual(community.report))}\n    </ul>\n  </Tile>;\n}\n","import { ManageStocks } from \"../types\";\n\n\nexport function presentIndividual(work: { [key: number]: string; }) {\n  return ({ id, name, things, traits, meters }: {\n    id: number;\n    name: string;\n    things: ManageStocks;\n    traits: ManageStocks;\n    meters: { [key: string]: Function }\n  }) => {\n    const itemNames = things.list().map(thing => thing.name);\n    return <li key={id} title={name} className='Item'>\n      <div className='Title' data-testid='Name'>{name}</div>\n      {Object.entries(meters).map(([meterName, measure]) => {\n        const { value, max } = measure()\n        return <div className='Meter' data-testid={meterName}>\n          <label htmlFor={meterName} style={{paddingRight: 10}}>{meterName}:</label>\n          <meter id={meterName}\n                 style={{ width: 130, height: 14 }}\n                 min=\"0\" max={max}\n                 low={max * 0.33} high={max * 0.66} optimum={max * 0.8}\n                 value={value}>\n              at {value}/{max}\n          </meter>\n        </div>\n      })}\n      {work[id] && work[id] !== '?' && <span data-testid='Status'>{work[id]}</span>}\n      {itemNames.length > 0 && <div className='Subitems' data-testid='Inventory'>\n        <ul>\n          {itemNames.sort((a,b) => a > b ? 1 : -1).map(it => <li key={it} style={{\n              ...(things.count(it) === 0 ? { display: 'none' } : {})\n            }}>\n            {it} <span data-testid={it}  className='Count'>{things.count(it)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      {traits.list().length > 0 && <div className='Traits' data-testid='Trait Ranks'>\n        <ul>\n          {traits.list().map(trait => <li key={trait.id} style={{\n              ...(traits.count(trait.name) === 0 ? { display: 'none' } : {})\n            }}>\n            {trait.name} <span data-testid={trait.name}>{traits.count(trait.name)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      \n    </li>;\n  };\n}\n","import { Machine, Moiety, Person } from \"../types\";\nimport { LastDelta } from \"../../ModelPresenter\";\nimport { presentItem } from \"../Model/presentItem\";\nimport './View.css';\nimport { Tile } from \"./Tile\";\nimport { presentCommunity } from \"./presentCommunity\";\nimport { Population } from \"../Population\";\nimport { Community } from \"../Community\";\n\nexport type ModelViewProps = {\n  modelName: string;\n  items: { name: string; amount: number; }[];\n  animals: { name: string; amount: number }[];\n  communities: Population<Moiety, Person>[];\n  machines: Machine[];\n  lastChanges: LastDelta;\n  metrics: { [name: string]: number }; //[ { name: string, value: number} ];\n  notes: { [name: string]: string }; //[ { name: string, value: number} ];\n  board: IBoard\n}\n\ninterface IBoard { tiles: string[][], tileColors: { [tile: string]: string } }\n\nconst Board = ({ tiles, tileColors }: IBoard) => <>\n  <table style={{ fontFamily: \"monospace\" }}>\n    <tbody>\n      {tiles.map((row: string[], y: number) =>\n        <tr key={`row-${y}`}>\n          {row.map((cell: string, x: number) =>\n            <td style={{ color: tileColors[cell] }} key={`cell-${x}-${y}}`}>{cell}</td>\n          )}\n        </tr>\n      )}\n    </tbody>\n  </table>\n</>\n\nexport function ModelView({\n  modelName,\n  items,\n  // individuals,\n  communities,\n  machines,\n  animals,\n  lastChanges,\n  metrics,\n  notes,\n  board,\n  // work\n}: ModelViewProps) {\n  const folks = (communities as Community[]).map(presentCommunity)\n  // console.log({ community: communities[0].list() })\n  return <div className='Model'>\n    <h4 aria-label='Model Title' style={{display: 'none'}}>{modelName}</h4>\n    {board.tiles.length > 0 && <Board tiles={board.tiles} tileColors={board.tileColors} />}\n    {items.length > 0 && (<Tile title='Items'>\n      <ul aria-label='Resources'>\n        {items.map(presentItem(lastChanges.resources))}\n      </ul>\n    </Tile>)}\n    {animals.length > 0 && (\n      <Tile title='Animals'>\n        <ul aria-label='Animals'>\n          {animals.map(presentItem(lastChanges.animals))}\n        </ul>\n      </Tile>)}\n      {communities.length > 0 && <div title='Individuals' style={{display: 'flex'}}>{folks}</div>}\n    {machines.length > 0 && <Tile title='Machines'>\n      <ul>\n        {machines.map(({ name }) => <li key={name}>{name}</li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(metrics).length > 0 && <Tile title='Metrics'>\n      <ul>\n        {Object.entries(metrics).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Count'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(notes).length > 0 && <Tile title='Notes'>\n      <ul>\n        {Object.entries(notes).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Description'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n  </div>;\n}\n","import { Model } from './Model';\nimport { IModel } from './IModel';\nimport { ModelView } from '../View/ModelView';\nexport { Model, ModelView }\nexport type { IModel }\nexport default Model\n","// import { IAssembly } from './ecosphere/Assembly';\nimport { ModelView } from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\n\nexport type LastDelta = { [group: string]: { [element: string]: number }}\n\ntype ModelPresenterProps = {\n  model: IModel\n  step: Function \n  send: Function\n  choose: Function\n  lastChanges: LastDelta\n}\n\nconst view = (model: IModel, lastChanges: LastDelta) => {\n  const { actions, resources, people, machines, animals, metrics, notes, tiles, tileColors } = model;\n\n  const props = {\n    modelName: model.name,\n    items: resources.report,\n    communities: people.populationList, //.populations,\n    // individuals: people.list(),\n    // work: people.report,\n    machines: machines.list(),\n    animals: animals.report,\n    actions: actions.list(),\n    metrics: Object.fromEntries(\n      Object.entries(metrics).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    notes: Object.fromEntries(\n      Object.entries(notes).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    lastChanges,\n    board: { tiles: tiles || [], tileColors: tileColors || {} }\n  }\n\n  return props\n}\n\nexport function ModelPresenter({ model, send, choose, step, lastChanges }: ModelPresenterProps) {\n  return <>\n    <div aria-label='View'>\n      <ModelView {...view(model, lastChanges)} />\n    </div>\n\n    <div aria-label='Controls'>\n      <span title='Run' style={{display: 'none'}}>\n        <button onClick={() => step(true)}>Step</button>\n      </span>\n\n      <span title='Actions'>\n        {model.actions.list().map(({ name }) => <button title={name} key={name} onClick={() => send(name)}>\n          {name}\n        </button>)}\n      </span>\n\n      {model.policies.count > 0 && <div className='Policy' title='Policies'>\n        {/* <h5>Policies</h5> */}\n        {model.policies.list().map(({ name }) => <label key={name}><input\n          type='radio'\n          checked={model.currentPolicy?.name === name}\n          title={name}\n          key={name}\n          onChange={() => choose(name)}\n        />\n        {name}\n        </label>)}\n      </div>}\n    </div>\n  </>;\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { LastDelta } from './ModelPresenter';\nimport { isModel } from './ModelSelector';\n\nexport type ModelAPI = {\n  model: IModel | IAssembly\n  setModel(model: IModel | IAssembly): void\n  step: Function,\n  lastChanges: LastDelta,\n  send: (actionName: string, args: any) => void,\n  choose: (policyName: string, args: any) => void,\n  setDelay: (milliseconds: number) => void\n}\n\n// ticks per sec\n// const ticksPerSecond = (n: number) => n > 0 ? Math.floor(1000 / n) : 1\n// const speeds = {slow: 10, fast: 25, faster: 50, fastest: 80};\nexport function useModel(initialModel: IModel | IAssembly): ModelAPI { //model: IModel = new Model('Hello World')): ModelAPI {\n  const [model, setModel] = useState(initialModel) //new Model('Hello World'))\n\n  const [lastChanges, setLastChanges] = useState({} as LastDelta)\n  const isTest = process.env.NODE_ENV === 'test'\n  const [delay, setDelay] = useState(isTest ? 5000 : 2) //ticksPerSecond(speeds.slow));\n\n  const [shouldStep, step] = useState(false);\n  const [shouldSend, doSend] = useState(false);\n  const [shouldManage, doManage] = useState(false)\n\n  const performStep = () => { step(true); };\n  const [command, setCommand] = useState('')\n  const [policy, setPolicy] = useState('')\n\n  useEffect(() => {\n    if (shouldSend) {\n      if (command && isModel(model)) { model.send(command, {}) }\n      doSend(false)\n    }\n  }, [command, model, shouldSend]);\n\n  useEffect(() => {\n    if (shouldManage) {\n      if (policy && isModel(model)) { model.choose(policy, {}) }\n      doManage(false)\n    }\n  }, [policy, model, shouldManage]);\n\n  const performSend = (actionName: string, args: any) => {\n    setCommand(actionName)\n    doSend(true)\n  }\n\n  const performChoose = (policyName: string, args: any) => {\n    // console.log(\"CHOOSE\", policyName)\n    setPolicy(policyName)\n    doManage(true)\n  }\n\n  useEffect(() => {\n    if (shouldStep && isModel(model)) {\n      let { changed } = model.step();\n      step(false);\n      setLastChanges(changed);\n    }\n  }, [shouldStep, model]);\n\n  useInterval(() => step(true), delay); \n\n  return {\n    model,\n    step: performStep,\n    lastChanges: lastChanges as LastDelta,\n    send: (actionName: string, args: any) => performSend(actionName, args), \n    choose: (policyName: string, args: any) => performChoose(policyName, args),\n    setDelay,\n    setModel,\n  };\n}\n\nfunction useInterval(callback: any, delay: number) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      // @ts-ignore\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport Model from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelPresenter } from './ModelPresenter';\nimport { useModel } from './useModel';\n\nexport const isModel = (maybeModel: IModel | IAssembly): maybeModel is IModel => {\n  return maybeModel instanceof Model;\n}\n\nconst AssemblyPresenter: React.FC<{ assembly: IAssembly }> = ({ assembly }) => {\n  return <>{assembly.models.items.map((theModel: IModel) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { step, send, choose, lastChanges, model } = useModel(theModel);\n    return <>\n    <h4>{theModel.name}</h4>\n    <ModelPresenter\n             key={model.name}\n             step={step}\n             send={send}\n             model={model as IModel}\n             choose={choose}\n             lastChanges={lastChanges}\n           />\n           </>\n  })}</>\n}\n\nexport function ModelSelector({ initialModel, models }: {\n  initialModel: IModel;\n  models: (IModel | IAssembly)[];\n}) {\n  const { step, send, choose, lastChanges, model, setModel } = useModel(initialModel);\n  return <>\n    <Dropdown\n      options={models.map(model => model.name)}\n      onChange={({ value }) => {\n        const theModel = models.find((model: IModel | IAssembly) => model.name === value);\n        if (theModel) { setModel(theModel); }\n      }}\n      value={model.name}\n      placeholder=\"Select a model\" />\n    {isModel(model) ? <ModelPresenter\n                       step={step}\n                       send={send}\n                       model={model}\n                       choose={choose}\n                       lastChanges={lastChanges} />\n                    : <AssemblyPresenter assembly={model} />}\n  </>;\n}\n","// import Model from \"../ecosphere/Model\"\n\nimport Model from \"../ecosphere/Model\"\nimport { Person } from \"../ecosphere/types\"\n\nconst give = (recipient: Person, supplier: Person, n: number, item: string) => {\n  supplier.things.remove(n, item)\n  recipient.things.add(n, item)\n}\n\nconst world = new Model('Avernus')\nconst { resources, animals, people } = world\nconst folks = people.create('Townspeople')\nconst { recipes, jobs } = folks\n\nanimals.create('Fish')\n// resources.create('Fish')\n\n\n// const king = people.create('Maurice')\nconst miner = folks.create('Goldstrom')\nconst minter = folks.create('Octavius')\nconst smelter = folks.create('Smeltmore')\n// //const sheriff = people.create('Donald')\n// const claydigger = people.create('Bartlett')\n// const artist = people.create('Joseph')\nconst fisherman = folks.create('Harold')\n// const chef = people.create('Jethro')\n// const merchant = people.create('Reginald')\n\n// //set inventory\n// merchant.things.add(50, 'Gold Coin')\n\n\n// //create global resources\n// animals.create('Swimming Fish')\n// animals.add(500, 'Swimming Fish')\nresources.create('Gold Ore')\nresources.create('Gold Deposit')\nresources.create('Gold Bar')\nresources.create('Gold Coin')\n\nresources.add(100000000, 'Gold Deposit')\n// resources.create('Clay Deposit')\n// resources.add(10000, 'Clay Deposit')\n\n//create produced goods\n\n\n\n//jobs\n\n// const kingGold = recipes.create({\n//   name: 'Taking Gold',\n//   produces: { 'King Gold': 1 },\n//   consumes: { 'Gold Coin': 1 },\n// })\n\nconst mineGold = recipes.create({\n  name: 'Mining Gold',\n  produces: { 'Gold Ore': 1 },\n  consumes: { 'Gold Deposit': 10 },\n})\n\nconst smeltGold = recipes.create({\n  name: 'Smelt Gold',\n  produces: { 'Gold Bar': 1 },\n  consumes: { 'Gold Ore': 10 }\n})\n\nconst mintCoin = recipes.create({\n  name: 'Minting Gold Coins',\n  produces: { 'Gold Coin': 10 },\n  consumes: { 'Gold Bar': 1 },\n})\n\n// const digClay = recipes.create({\n//   name: 'Digging Clay',\n//   produces: { 'Clay Brick': 1 },\n//   consumes: { 'Clay Deposit': 1 },\n// })\n\n// const castPot = recipes.create({\n//   name: 'Casting Pottery',\n//   produces: { 'Fine Pottery': 1 },\n//   consumes: { 'Clay Brick': 1 },\n// })\n\n// const catchFish = recipes.create({\n//   name: 'Catching Fish',\n//   produces: { 'Caught Fish': 1 },\n//   consumes: { 'Swimming Fish': 1 },\n// })\n\n// const cookFish = recipes.create({\n//     name: 'Cooking Fish',\n//     produces: { 'Cooked Fish': 1 },\n//     consumes: { 'Caught Fish': 1 },\n// })\n\n//Set Jobs\njobs.set(miner, mineGold)\njobs.set(minter, mintCoin)\njobs.set(smelter, smeltGold)\n// jobs.set(claydigger, digClay)\n// jobs.set(artist, castPot)\n// jobs.set(fisherman, cookFish)\n// jobs.set(chef, cookFish)\n\nworld.evolve(({ resources, animals }, t) => {\n  // animals.add(1, 'Swimming Fish')\n\n  folks.work({ resources })\n\n  // employment\n  if (t % 10 === 0) {\n    const thePeople = [miner, minter, smelter]\n    thePeople.forEach(person => {\n      person.things.add(1, 'Gold Coin')\n      resources.remove(1, 'Gold Coin')\n    })\n  }\n\n  // taxation\n  // if (t % 1000 === 0) {\n  //   resources.remove()\n  // }\n\n  // wildlife hunting + fishing\n  if (t % 10 === 0) { // \n    // huntWildlife('Fish')\n    fisherman.things.add(1, 'Fish')\n    animals.remove(1, 'Fish')\n  }\n\n  // trade\n  const thePeople = [miner, minter, smelter]\n  // const theGoods = ['Fish', ]\n  thePeople.forEach(person => {\n    if (fisherman.things.count('Fish') > 3 && person.things.count('Gold Coin') > 5) {\n      give(fisherman, person, 5, 'Gold Coin')\n      give(person, fisherman, 1, 'Fish')\n    }\n  })\n})\n\n\nexport {world as Avernus}\n","import { Sequence } from \"../../collections\";\nimport { Person } from \"../../ecosphere/types\";\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\";\nimport { sample } from \"../../ecosphere/utils/sample\";\n\nexport class MonsterManual {\n  basicCreatures = {\n    Fragment: { hp: 1, evasion: 95 },\n    Light: { hp: 24, evasion: 1 },\n    Fog: { hp: 26, evasion: 1, reflect: 10 },\n    Aura: { hp: 28, evasion: 1, speed: 1 },\n    Shadow: { hp: 38, evasion: 1, speed: 2 },\n    Wisp: { hp: 40, strength: 1, speed: 1, evasion: 1 },\n    Filament: { hp: 43, evasion: 1, speed: 1, counter: 1 },\n    Voice: { hp: 53, evasion: 1, speed: 1, counter: 1, absorb: 1, defense: 1 },\n    Nothing: { hp: 63, regen: 1, speed: 1, defense: 1, reflect: 1 },\n  };\n\n  challengingCreatures = {\n    // 'Gray Mote': { hp: 8, 'magic damage': 3 },\n    Fiendling: { hp: 12, 'holy damage': 1 }, //, speed: 1, counter: 1, evasion: 1 },\n    Gremlin: { hp: 22, speed: 1, counter: 1 }, // evasion: 1 },\n    Goblin: { hp: 30 },  //, 'magic damage': 1 },\n    Kobold: { hp: 40, strength: 1 }, // speed: 2 },\n    Orc: { hp: 48, strength: 1, speed: 1 }, //, counter: 1 },\n  }\n\n  uncommonCreatures = {\n    Rat: { hp: 14, strength: 1, speed: 3, evasion: 1 },\n    Bat: { hp: 18, strength: 2, speed: 2, evasion: 1, },\n    Snake: { hp: 15, strength: 3, speed: 2, evasion: 2, },\n    Blob: { hp: 24, strength: 2, speed: 1, evasion: 1 },\n    Bear: { hp: 30, strength: 3, speed: 2, evasion: 1 },\n    Ghost: { hp: 70, 'magic damage': 1, evasion: 1, counter: 1, speed: 1, absorb: 1, defense: 1 },\n    Rogue: { hp: 74, strength: 2, speed: 1, 'bonus damage': 2, evasion: 2, counter: 2 },\n    Troll: { hp: 83, strength: 2, speed: 2, regen: 1, counter: 1 },\n    Giant: { hp: 95, strength: 2, speed: 2, defense: 1, absorb: 1 },\n  };\n\n  bosses = {\n    Priest: { hp: 57, heal: 4, 'holy damage': 6, defense: 6, 'holy defense': 3, evasion: 2 },\n    Vampire: { hp: 84, strength: 2, speed: 3, 'magic damage': 1, absorb: 2, evasion: 2 },\n    Drake: { hp: 100, strength: 3, speed: 2, regen: 2, 'magic damage': 2, evasion: 2 },\n    Lich: { hp: 140, strength: 4, speed: 6, defense: 6, 'magic damage': 6, evasion: 6 },\n  };\n\n  extraplanar = {\n    Demon: { hp: 166, strength: 3, speed: 6, counter: 6, evasion: 6 },\n    Angel: { hp: 199, evasion: 2, absorb: 2, regen: 2, counter: 9, defense: 9, 'magic defense': 2, 'holy damage': 9 },\n    Archdemon: { hp: 366, absorb: 6, strength: 6, speed: 6, defense: 6, evasion: 6, 'magic damage': 6, 'holy damage': 16 },\n    Dracolith: { hp: 247, strength: 7, 'magic damage': 7, speed: 7, defense: 7, evasion: 7, counter: 7 },\n    Archangel: { hp: 299, absorb: 9, strength: 9, speed: 9, defense: 9, evasion: 9, 'magic defense': 9, 'holy defense': 9, 'holy damage': 99 },\n\n    'Brutal Light': { hp: 123, speed: 2, strength: 6, 'bonus damage': 5, evasion: 4 },\n    'Floating Sigil': { hp: 234, speed: 10, defense: 10, counter: 10 },\n    'Astral Filament': { hp: 1234, strength: 15, absorb: 10, evasion: 5, counter: 1, regen: 1 },\n    'Essence Sphere': { hp: 12345, 'magic damage': 12, 'holy damage': 12, 'bonus damage': 12 },\n  };\n\n  dragons = {\n    // ...and dragons :)\n    'Green Dragon': { hp: 900, strength: 5, speed: 8, defense: 4, 'magic damage': 16, evasion: 24 },\n    'Red Dragon': { hp: 1100, strength: 7, speed: 9, defense: 14, 'magic damage': 26, evasion: 34 },\n    'Blue Dragon': { hp: 2100, strength: 9, speed: 11, defense: 24, 'magic damage': 36, evasion: 44 },\n    'Golden Dragon': { hp: 2400, strength: 11, speed: 15, defense: 34, 'magic damage': 66, evasion: 55 },\n    'Black Dragon': { hp: 2900, strength: 11, speed: 15, defense: 34, 'magic damage': 66, evasion: 55 },\n    'Primordial Dragon': { hp: 3919, strength: 30, speed: 30, defense: 30, 'magic damage': 30, evasion: 30 },\n  };\n\n  rareCreatures = {\n    'Eldritch Lich': { hp: 2500, strength: 8, speed: 6, defense: 4, 'magic damage': 13, evasion: 5 },\n    'Primordial Vampire': { hp: 3800, strength: 3, speed: 10, defense: 10, 'holy defense': 10, 'magic defense': 10, 'magic damage': 3, evasion: 3, absorb: 4 },\n    Leviathan: { hp: 9999, strength: 10, speed: 10, defense: 25, evasion: 25, counter: 25 },\n    ...this.extraplanar,\n    ...this.dragons\n  };\n\n\n  bestiary: { [monster: string]: { [attr: string]: number; }; } = {\n    ...this.basicCreatures,\n    ...this.uncommonCreatures,\n    ...this.challengingCreatures,\n    ...this.rareCreatures,\n    ...this.bosses,\n  };\n\n  basicSubtypes = {\n    Hostile: { strength: 1 }, Intimidating: { strength: 2 },\n    Nimble: { speed: 1 }, Quick: { speed: 2 },\n    Timid: { evasion: 1 }, Spry: { evasion: 2 }, Dancing: { evasion: 3 },\n    Vigilant: { regen: 1 }, Relentless: { regen: 2 },\n    Armored: { defense: 1 }, Hardened: { defense: 2 },\n    Benevolent: { heal: 1 }, Protective: { heal: 2 },\n    Snarling: { counter: 1 },\n\n    Emboldened: { 'bonus damage': 1 },\n    Floating: { evasion: 1, speed: 1 },\n    Crystalline: { reflect: 1 },\n    Glinting: { reflect: 2 },\n    Mobile: { speed: 1 },\n    Coldsnap: { speed: 1, regen: 1 },\n    Blinding: { reflect: 1, absorb: 1 },\n    Noxious: { defense: 1, counter: 1, absorb: 1 },\n  };\n\n  rareSubtypes: { [type: string]: { [attr: string]: number; }; } = {\n    Voracious: { hp: 5, strength: 1, speed: 1 },\n    Vicious: { hp: 10, strength: 1, defense: 1 },\n    Vexatious: { hp: 15, counter: 1, evasion: 1 },\n    Arrogant: { hp: -5, evasion: 1, counter: 1, speed: 1 },\n    Querulous: { hp: -10, strength: 1, speed: 1, regen: 1, absorb: 1, defense: 1 },\n\n    Adventurous: { hp: 5, 'bonus damage': 2 },\n    Questing: { hp: 10, 'bonus damage': 3 },\n\n    Silvered: { reflect: 2 }, Mirrored: { reflect: 3 },\n    Aggressive: { strength: 3 }, Dominating: { strength: 4 },\n    Swift: { speed: 3 }, Accelerated: { speed: 4 },\n    Elusive: { evasion: 4 }, Reluctant: { evasion: 5 }, Hidden: { evasion: 6 }, Invisible: { evasion: 8 }, Imperceptible: { evasion: 15 },\n    Regrowing: { regen: 3 }, Hydra: { regen: 4 },\n    Fortified: { defense: 3 },\n    Angelic: { heal: 3, 'holy damage': 2 },\n    Prismatic: { reflect: 3, absorb: 2, evasion: 1 },\n    // Hardened: { defense: 3, strength: 1, evasion: 1 },\n    Pugnacious: { 'bonus damage': 1, evasion: 1, counter: 1 },\n\n    // Elusive: { evasion: 1, defense: 1, regen: 1 },\n    Augmented: { strength: 1, 'magic damage': 1, 'bonus damage': 1 },\n    Skillful: { defense: 1, strength: 1, speed: 1, evasion: 1, counter: 1 },\n    Skeletal: { hp: -1, evasion: 2, absorb: 1, regen: 1 },\n    Undead: { hp: -1, strength: 1, regen: 1, absorb: 1, speed: 1, evasion: 1 },\n    Zombie: { hp: -2, evasion: 1, regen: 2, strength: 1 },\n    Favored: { hp: 1, strength: 2, speed: 2, 'magic damage': 1, regen: 1, evasion: 1 },\n    Fiendish: { hp: 2, strength: 3, speed: 3, defense: 1, regen: 1, evasion: 2 },\n    Fierce: { hp: 2, strength: 4, speed: 4, defense: 2, absorb: 2, evasion: 3, },\n    Opalescent: { hp: 2, reflect: 4, absorb: 2, evasion: 2, counter: 2, heal: 2 },\n    Cruel: { hp: 3, strength: 5, speed: 5, 'magic damage': 3, 'bonus damage': 2, absorb: 3, regen: 1, evasion: 4 },\n\n    Vortex: { hp: 1, reflect: 10, absorb: 10, evade: 50, counter: 50 },\n    Shadow: { hp: 2, 'magic damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Luminous: { hp: 3, 'holy damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Defiant: { hp: 1, 'bonus damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Devious: { hp: 2, evasion: 2, counter: 20, absorb: 20 },\n    Draconic: { hp: 3, 'magic damage': 1, counter: 20, absorb: 20 },\n  };\n\n  subtypes: { [type: string]: { [attr: string]: number; }; } = {\n    Common: {},\n    Evasive: { evasion: 3, counter: 2 },\n    Retaliatory: { defense: 1, counter: 2 },\n    Inspired: { 'bonus damage': 1 },\n    Infused: { 'bonus damage': 2, 'magic damage': 1 },\n    Radiant: { 'holy damage': 1 },\n    Resplendent: { 'holy damage': 2, strength: 1, speed: 1 },\n    Heavy: { strength: 2, defense: 2 },\n    Titanic: { strength: 4, defense: 2 },\n    Unholy: { 'magic damage': 1, 'holy defense': 1 },\n    Blessed: { 'holy damage': 1, absorb: 1 },\n    Adept: { evasion: 1, counter: 1, defense: 1, strength: 1 },\n    ...this.basicSubtypes,\n    ...this.rareSubtypes,\n  };\n\n\n  perks: { [type: string]: { [attr: string]: number; }; } = {\n    Piercing: { hp: 15, strength: 1, defense: 1, evasion: 1, 'bonus damage': 1, },\n    Blessed: { hp: 15, absorb: 1, defense: 1, regen: 1, 'holy damage': 1, },\n    Enchanted: { hp: 15, defense: 1, evasion: 1 },\n    Clockwork: { hp: 15, defense: 1, speed: 2, evasion: 1 },\n    Phantasmal: { hp: 25, defense: 1, evasion: 4 },\n    Cosmic: { hp: 30, defense: 3, evasion: 3, strength: 3 },\n    Imperious: { hp: 40, defense: 4, 'magic damage': 3, speed: 3 },\n    // Obsidian: { hp: 15, defense: 1, speed: 2, evasion: 1 },\n    // Provocative: { hp: 50, defense: 5, evasion: 3, 'bonus damage': 4, 'magic damage': 3, speed: 3 },\n    // Challenging: { hp: 150, defense: 20, strength: 2, regen: 1, speed: 1, 'bonus damage': 5, evasion: 1 }\n  };\n  monsterIds = new Sequence();\n\n  difficulty = 1; // global multiplier on monster stats\n\n  generateBasicMonster(creature: Person) {\n    let base = sample(Object.keys(this.basicCreatures))\n    let type = randomInteger(0, 20) > 16 ? sample(Object.keys(this.basicSubtypes)) : 'Common';\n    // let type = 'Common'\n    // creature.name = `${type} ${base} (${this.monsterIds.next})`;\n    const name = type === 'Common' ? base : [type, base].join(' ');\n    creature.name = name\n    // creature.things.add(5 + Math.floor(0.05 * cr * cr), 'hp')\n    const crFactor = 1\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.subtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n  }\n\n  generate(creature: Person, cr: number = 1) {\n    if (cr <= 6) { this.generateBasicMonster(creature); return }\n    // console.log(\"generate monster with cr \" + cr);\n    // const simpleCreatures = ['Snake', 'Blob', 'Bat', 'Wisp']\n    let base = sample(Object.keys(this.challengingCreatures)) //cr <= 10 ? sample(Object.keys(this.basicCreatures)) : sample(Object.keys(this.challengingCreatures));\n\n\n    let type = randomInteger(0, 20) > 16 ? sample(Object.keys(this.basicSubtypes)) : 'Common';\n\n    // all subtypes..\n    if (cr >= 20 && randomInteger(0, 20) > 19) { type = sample(Object.keys(this.subtypes)); }\n\n    // all bases\n    if (cr >= 25 && randomInteger(0, 20) > 19) { base = sample(Object.keys(this.bestiary)); }\n\n    const name = type === 'Common' ? base : [type, base].join(' ');\n    creature.name = `${name} (${this.monsterIds.next})`;\n    const adjustedCr = 0.0015 * cr * cr;\n    // creature.things.add(1 + cr + Math.floor(100 * adjustedCr), 'hp')\n\n    const crFactor = this.difficulty + adjustedCr * 2;\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.subtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    creature.things.add(creature.things.count('hp'), 'max hp');\n    if (cr >= 15) {\n      creature.things.add(randomInteger(1, cr/2), 'defense');\n      creature.things.add(randomInteger(1, cr/2), 'strength');\n    }\n    if (cr >= 25) {\n      creature.things.add(randomInteger(1, cr/2), 'evasion');\n      creature.things.add(randomInteger(1, cr/2), 'counter');\n    }\n    if (cr >= 35) {\n      creature.things.add(randomInteger(1, cr/2), 'magic damage');\n      creature.things.add(randomInteger(1, cr/2), 'chain chance');\n    }\n    if (cr >= 45) {\n      creature.things.add(randomInteger(1, cr/2), 'holy damage');\n      creature.things.add(randomInteger(1, cr/2), 'reflect');\n    }\n  }\n\n  generateBoss(creature: Person, cr: number = 1) {\n    const base = sample(Object.keys(this.bosses));\n    const type = sample(Object.keys(this.rareSubtypes));\n    const perk = sample(Object.keys(this.perks));\n    const name = [perk, type, base].join(' ');\n    creature.name = name; // `${name} (${this.monsterIds.next})`\n    const crFactor = this.difficulty + 0.01 * cr;\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.rareSubtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.perks[perk]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    creature.things.add(creature.things.count('hp'), 'max hp');\n  }\n}\n","import { Person } from \"../../ecosphere/types\";\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\";\nimport { sample } from \"../../ecosphere/utils/sample\";\n\nexport class PlayerHandbook {\n  static levelCost(level: number) {\n    // throw new Error(\"Method not implemented.\");\n    return Math.floor(Math.pow(2, 5+level))\n  }\n  // okay, i guess give them the class as a perk... then each level up we can check + bump one of the class\n  // nice to have: sick multi-classing\n  static characterClasses: { [name: string]: { attributes: { [attr: string]: number; }; traits: string[]; }; } = {\n    Fighter: {\n      attributes: {\n        hp: 12,\n        strength: 1,\n        defense: 1,\n        speed: 0,\n        'bonus damage': 0,\n        'chain chance': 0,\n        'max chain': 0,\n      },\n      traits: ['Fitness', 'Combat Veteran']\n    },\n    // Knight: { attributes: { hp: 15, strength: 2, defense: 2, counter: 0, 'max chain': 0, 'chain chance': 0 }, traits: ['Medic'] },\n    // Mage: { attributes: { 'magic damage': 2, 'magic defense': 1, 'holy defense': 0 }, traits: ['Focus'] },\n    // Cleric: { attributes: { heal: 1, 'holy damage': 0, 'holy defense': 0 }, traits: ['Holy Symbol'] },\n    // Monk: { attributes: { hp: 5, 'reflect': 0, defense: 1, 'magic defense': 0, 'hp per step': 0 }, traits: ['Faith'] },\n    // Thief: { attributes: { hp: 10, speed: 1, evasion: 1, counter: 1, 'gold per kill': 0 }, traits: ['Swiftness'] },\n  };\n\n  static attributes: { [attrGroup: string]: string[]; } = {\n    // basic: [\n    // ],\n    common: [\n      'max hp',\n\n      // 'hp per victory',\n      // 'hp per day',\n      // 'hp per step',\n      // 'xp per kill',\n      // 'xp per li',\n      // 'xp per victory',\n      // 'xp per day', //'gold per li'\n      // 'gold per victory',\n      // 'xp per step',\n      // 'gold per day'\n      // 'gold per day',\n      // 'hp per day', // 'gold per day'\n      // 'max hp', 'xp per victory', 'hp per day', 'gold per day', 'xp per li', \n    ],\n    uncommon: [\n      // 'xp per victory',\n      // 'gold per victory',\n      'hp per victory'\n    ],\n    rare: [\n      'hp per day',\n      // 'evasion',\n      // 'crit damage',\n      // 'xp per step',\n      // 'max chain', //'hp per step'\n    ],\n    epic: [\n      'hp per step',\n      // 'xp per day', 'gold per step',\n      // 'xp per day', //'gold per li'\n      // 'counter',\n      // 'crit chance',\n    ],\n    legendary: [\n      'hp per kill',\n      // 'xp per kill',\n      // 'xp per li',\n      // 'xp per victory',\n      // 'counter',\n      // 'evasion',\n      // 'defense',\n      // 'strength',\n      // 'magic damage',\n      // 'holy damage',\n      // 'bonus damage',\n      // 'reflect',\n      // 'heal',\n      // 'damage to all',\n      // 'chain chance',\n    ],\n  };\n\n  // some perks benefits the effective value of a stat by adding % bonus per rank\n  static perkBenefits: { [perk: string]: { [attr: string]: number; }; } = {\n    'Cloaking Robe of Elvenkind': { 'magic damage': 0.05, 'magic defense': 0.5, evasion: 0.25, 'holy defense': 0.05 },\n    'Combat Veteran': { strength: 0.05, defense: 0.05, counter: 0.05, evasion: 0.05, 'crit damage': 0.05, 'bonus damage': 0.05, },\n    'Fine Raiment': { 'magic damage': 0.1, 'magic defense': 0.2, defense: 0.15, evasion: 0.1 },\n    'Holy Symbol': { 'holy damage': 0.5, 'holy defense': 0.15, heal: 0.1, regen: 0.1 },\n    'Royal Armorer': { defense: 0.5, 'holy defense': 0.25, 'magic defense': 0.25, evasion: 0.25 },\n    // Barbarian: { 'bonus damage': 0.5, 'crit damage': 0.05, strength: 0.15, 'chain chance': 0.1, 'max chain': 0.1 },\n    Brutality: { strength: 0.5, speed: 0.25, 'bonus damage': 0.25, 'max chain': 0.1 },\n    Counterweight: { counter: 0.5, evasion: 0.1, 'crit damage': 0.05, 'max chain': 0.1 },\n    Efferverscence: { regen: 0.25, counter: 0.25, 'crit damage': 0.25, 'holy defense': 0.25, 'max chain': 0.25 },\n    Efficacious: { counter: 0.1, evasion: 0.1, 'bonus damage': 0.1, strength: 0.1, defense: 0.1, 'magic defense': 0.1, heal: 0.1 },\n    Opalescence: { reflect: 0.2, absorb: 0.2, evasion: 0.2, defense: 0.2, regen: 0.2, heal: 0.2 },\n    Ethereal: { 'magic damage': 0.25, 'magic defense': 0.25, evasion: 0.5, defense: 0.25 },\n    Faith: { 'holy damage': 0.25, 'holy defense': 0.5, heal: 0.25, regen: 0.1 },\n    Finesse: { 'crit chance': 0.25, 'crit damage': 0.15, 'max chain': 0.05, 'chain chance': 0.1 },\n    Fitness: { strength: 0.1, defense: 0.1, speed: 0.1, evasion: 0.1, counter: 0.1, regen: 0.1 },\n    Fluidity: { 'crit chance': 0.1, 'crit damage': 0.1, evasion: 0.1, counter: 0.1, speed: 0.1 },\n    Dexterity: { defense: 0.25, 'magic defense': 0.1, speed: 0.1, evasion: 0.1, 'chain chance': 0.1 },\n    Precision: { speed: 0.1, 'crit damage': 0.25, evasion: 0.05, 'max chain': 0.1 },\n    Swiftness: { speed: 0.2, counter: 0.15, 'crit chance': 0.15, defense: 0.1 },\n    Rapidity: { speed: 0.5, counter: 0.1, 'crit damage': 0.25, evasion: 0.1 },\n    Medic: { heal: 0.5, regen: 0.1, absorb: 0.1, defense: 0.1 },\n    Vitality: { strength: 0.1, speed: 0.25, regen: 0.5, heal: 0.1 },\n    Whirlwind: { 'chain chance': 0.5, 'max chain': 0.5, 'damage to all': 0.5, 'bonus damage': 0.1 },\n    Focus: { 'magic damage': 0.5, 'magic defense': 0.25, 'holy damage': 0.1, 'holy defense': 0.5 },\n    Iridescence: { 'magic damage': 0.5, 'holy damage': 0.5, 'bonus damage': 0.5, 'damage to all': 0.5 },\n    Concentration: { 'magic defense': 0.25, 'holy defense': 0.5, defense: 0.1, evasion: 0.1, counter: 0.1 },\n    Salvation: { 'holy damage': 0.5, 'holy defense': 0.2, defense: 0.1, reflect: 0.1, absorb: 0.1 },\n  };\n\n  static perks: { [perkGroup: string]: string[]; } = {\n    common: [\n      'Fitness',\n      'Finesse',\n      'Rapidity',\n      'Precision',\n      'Medic',\n      'Focus', // +10% to magic dmg per rank\n    ],\n    uncommon: [\n      'Concentration',\n      'Swiftness',\n      'Fluidity',\n      'Faith',\n      'Combat Veteran',\n      'Efficacious', // small bonuses to many skills\n    ],\n    rare: [\n      'Dexterity',\n      // 'Barbarian',\n      'Brutality',\n      'Ethereal',\n      'Perspicuous',\n      'Vitality', // boost to regen\n    ],\n    epic: [\n      'Iridescence',\n      'Fine Raiment',\n      'Royal Armorer',\n      'Whirlwind', // bonus % to chain chance + damage to all\n    ],\n    legendary: [\n      'Salvation',\n      'Eternal Victory',\n      'Perfectionist',\n      'Effervescence', // decent bonuses to many skills\n      'Opalescence',\n    ]\n  };\n\n  static generate(hero: Person, characterClass: string) {\n    const baseStartingHp = 10;\n    hero.traits.add(1, characterClass)\n    hero.things.add(baseStartingHp, 'hp')\n    hero.things.add(1, 'strength')\n    hero.things.add(1, 'speed')\n    // hero.things.add(randomInteger(1,4), 'evasion')\n    // hero.things.add(randomInteger(1,4), 'counter')\n    const template = this.characterClasses[characterClass];\n    Object.keys(template.attributes).forEach(attr => {\n      const amount = template.attributes[attr]\n      hero.things.add(amount, attr)\n    });\n    (template.traits).forEach(trait => hero.traits.add(1, trait))\n    // hero.things.add(2000, 'xp per li')\n    hero.things.add(15, 'xp per victory')\n    // hero.things.add(1, 'gold per day')\n    // hero.things.add(Math.floor(baseStartingHp * 0.75), 'hp per victory')\n    hero.things.add(Math.floor(baseStartingHp * 1.2), 'max hp')\n    hero.traits.add(4, 'Potion of Life')\n    hero.things.add(1, 'level')\n    for (let i=0; i<4; i++) {\n      this.levelUp(hero)\n    }\n\n    hero.meters = {\n      'health': () => { return { value: hero.things.count('hp'), max: hero.things.count('max hp')}},\n      // 'next level': () =>  {\n      //   return { value: hero.things.count('xp'), max: this.levelCost(hero.things.count('level')) }\n      // }\n    }\n  }\n\n  static levelUp(pc: Person) {\n    const attributeBoosts: { [key: string]: number; } = {\n      // basic: 13,\n      common: 8, // randomInteger(3, 5),\n      uncommon: 5, //randomInteger(2, 3),\n      rare: 3, //randomInteger(1, 2),\n      epic: 2, //randomInteger(0, 1),\n      legendary: 1 //randomInteger(0, 1),\n    };\n\n    Object.keys(this.attributes).forEach(rarity => {\n      for (let i = 0; i < attributeBoosts[rarity]; i++) {\n        const levelAttr = sample(this.attributes[rarity]);\n        if (levelAttr) {\n        const amount = 1; //randomInteger(1,2)\n          pc.things.add(amount, levelAttr);\n          // console.log(`${levelAttr} improves by ${amount}`);\n        }\n      }\n    });\n\n    const perkLevels: { [key: string]: number; } = {\n      common: 5,\n      uncommon: 7,\n      rare: 9,\n      epic: 11,\n      legendary: 13,\n    };\n\n    Object.keys(this.perks).forEach(rarity => {\n      if (pc.things.count('level') % perkLevels[rarity] === 0) {\n        const perk = sample(this.perks[rarity]);\n        if (perk) {\n          console.log(`Gain a rank in ${perk} (${rarity})`);\n          pc.traits.add(1, perk);\n        }\n      }\n    });\n\n    // const classBonuses = PlayerHandbook.characterClasses\n    if (pc.things.count('level') % 3 === 0) {\n      // const classes=[]\n      pc.traits.list().forEach((trait) => {\n        // console.log(trait)\n        if (Object.keys(this.characterClasses).includes(trait.name)) {\n        //   // it's a pc class\n          Object.entries(this.characterClasses[trait.name].attributes).forEach(([attr, value]) => {\n            if (value >= 0 && randomInteger(0,12) > 8) {\n            // if (value === 0) { if (randomInteger(0,12) < 2) return }\n              const amount = value > 0 ? randomInteger(1, Math.max(1,value)) : 1\n              console.log(`${attr} improves by ${amount} (${trait.name})`);\n              pc.things.add(amount, attr)\n            }\n          })\n        }\n      })\n      // trait\n    }\n  }\n}\n","import { boundMethod } from \"autobind-decorator\"\nimport { List, Sequence } from \"../../collections\"\nimport { Community } from \"../../ecosphere/Community\"\nimport Model from \"../../ecosphere/Model\"\nimport { EvolvingStocks, ManageStocks, Person } from \"../../ecosphere/types\"\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\"\nimport { sample } from \"../../ecosphere/utils/sample\"\nimport { where } from \"../../ecosphere/utils/where\"\nimport { MonsterManual } from \"./MonsterManual\"\nimport { PlayerHandbook } from \"./PlayerHandbook\"\n\n// try to keep magic numbers here?\nclass DungeonMasterGuide {\n  static durations = { round: 104, day: 7000 }\n}\n\n// type SimpleEvent = { at: number }\ntype EventCommon = { id: number, at: number }\ntype EnemyInjured = EventCommon & { kind: 'enemy-injured', enemyName: string, amount: number }\ntype TurnStarted = EventCommon & { kind: 'turn-started' }\ntype Event = EnemyInjured | TurnStarted\nclass Arena extends Model {\n  events = new List<Event>()\n  // emit(event: Event, title?: string, message?: string) {\n    // if (title) { console.log(title) } //\"EVENT\", event)\n  eventIds = new Sequence()\n  enemyInjured(name: string, amount: number) {\n    this.events.add({\n      id: this.eventIds.next,\n      kind: 'enemy-injured',\n      enemyName: name,\n      amount,\n      at: this.ticks\n    })\n      // : `${name} took ${amount} damage`, description: message, kind: event.kind, at: this.ticks })\n  }\n\n  turnStarted() {\n    this.events.add({ id: this.eventIds.next, kind: 'turn-started', at: this.ticks })\n  }\n\n  constructor() {\n    super('The Arena')\n    const globals = [ 'day', 'step', 'li', 'gil', 'kill', 'victory', 'death', 'tpk' ]\n    globals.forEach(resource => this.resources.create(resource))\n    this.people.create('Adventurers')\n    this.spawnHero('Fighter')\n    // this.spawnHero('Cleric')\n    // this.spawnHero(sample(['Monk', 'Mage'])) \n    // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses)))\n    Object.keys(PlayerHandbook.characterClasses).forEach(characterClass => {\n      this.actions.create({ name: `Hire ${characterClass}`, act: () => this.spawnHero(characterClass) })\n    })\n    this.actions.create({ name: `Hire Party`, act: () => {\n      for (let i=0; i<3; i++) {\n        this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n      }\n      // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n      // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n    }})\n    this.people.create('Enemies')\n    // enemies.obscured = true // only show names? really want hp -- more granular/whitelist?\n    this.spawnEnemyParty()\n    this.evolve(this.tick)\n  }\n\n  metrics = {\n    'challenge rating': () => this.challengeRating,\n    // 'damage per tick': () => this.damagePerTick,\n    // turns: () => this.recent('turn-started').length,\n  }\n\n  heroIds = new Sequence()\n  @boundMethod\n  spawnHero(characterClass: string) {\n    const name = `${characterClass} (${this.heroIds.next})`;\n    const hero = this.party.create(name)\n    PlayerHandbook.generate(hero, characterClass)\n  }\n\n  get challengeRating() {\n    if (this.party.count === 0) return -1;\n    const totalLevels = this.party.list().map(adv => adv.things.count('level')).reduce((a, b) => a + b)\n    const cr = 1 \n      + (this.resources.count('step')/1250)\n      + (this.resources.count('day')/14)\n      + (this.party.count) \n      + (totalLevels / this.party.count);\n    return Math.floor(cr);\n  }\n\n  private recent(kind: string): Event[] { return this.recentEvents.filter(where('kind', kind)) }\n\n  metricGrain = 150 //DungeonMasterGuide.durations.round\n  get damagePerTick() {\n    const enemyInjuries: EnemyInjured[] = this.recent('enemy-injured') as EnemyInjured[]\n    // const turns = 1 + this.recent('turn-started').length //this.recentEvents.filter(where('kind', 'turn-started')).length\n    const totalInjuryAmount = enemyInjuries.map((injury: EnemyInjured) => injury.amount).reduce((a, b) => a + b, 0)\n    return (Math.floor(\n      totalInjuryAmount / this.metricGrain //Math.floor(totalInjuryAmount / this.metricGrain)\n    ))\n  }\n\n  get recentEvents() {\n    return this.events.items.filter(e => e.at > this.ticks-this.metricGrain)\n  }\n\n  manual = new MonsterManual()\n\n  @boundMethod\n  spawnEnemyParty() {\n    if (this.party.count === 0) return;\n\n    for (let i = 0; i < randomInteger(1,2+this.party.count); i++) {\n      const enemy = this.enemies.create('new enemy')\n      this.manual.generate(enemy, this.challengeRating)\n    }\n\n    // if (randomInteger(0,12) > 11) {\n    //   const enemy = this.enemies.create('new big enemy')\n    //   this.manual.generateBoss(enemy, this.challengeRating)\n    // }\n  }\n\n  get party() { return this.people.lookup('Adventurers') }\n  get enemies() { return this.people.lookup('Enemies') }\n\n  private injure(defender: Person, amount: number, aggressor: Person, reflected: boolean = false) {\n    const damage = Math.floor( Math.min(defender.things.count('hp'), amount) )\n    if (damage <= 0) return;\n\n    defender.things.remove(damage, 'hp')\n    if (this.enemies.list().includes(defender)) {\n      this.enemyInjured(defender.name, damage)\n    }\n\n    console.log(`${aggressor.name} hit ${defender.name} for ${damage}!`)\n    const absorb = Math.min(this.effective(aggressor, 'absorb'), damage)\n    if (absorb > 0) {\n      const absorption = randomInteger(0,absorb) \n      console.log(`${aggressor.name} absorbed ${absorption} hp!`)\n      this.heal(aggressor, absorption)\n    }\n    if (defender.things.count('hp') > 0) {\n      const reflect = Math.min(this.effective(defender, 'reflect'), damage)\n      if (reflect > 0 && !reflected) {\n        console.log(`${defender.name} reflected ${reflect} damage!`)\n        this.injure(aggressor, reflect, defender, true)\n      }\n      const counter = this.effective(defender, 'counter')\n      if (randomInteger(0,100) < counter) {\n        console.log(`${defender.name} counter-attacked against ${aggressor.name}!`)\n        this.strike(defender, aggressor)\n      }\n    }\n  }\n\n  private effective(person: Person, attribute: string) {\n    const base = person.things.count(attribute)\n    if (base === 0) return 0;\n    let multiplier = 1;\n    Object.keys(PlayerHandbook.perkBenefits).forEach(perk => {\n      const benefits = PlayerHandbook.perkBenefits[perk]\n      const benefitAttrs = Object.keys(benefits)\n      if (benefitAttrs.includes(attribute)) {\n        const ranks = person.traits.count(perk)\n        if (ranks > 0) {\n          const benefit = benefits[attribute] * ranks\n          multiplier += benefit\n        }\n      }\n    })\n    const value = Math.floor(base * multiplier);\n    return value\n  }\n\n  private strike(aggressor: Person, defender: Person) {\n    const holyDefense = this.effective(defender, 'holy defense')\n    const holyDamage = Math.max(0, this.effective(aggressor, 'holy damage') - holyDefense)\n    const magicDefense = this.effective(defender, 'magic defense')\n    const magicDamage = Math.max(0, this.effective(aggressor, 'magic damage') - magicDefense)\n    let physicalDamage = 0;\n    let criticalStrike = false;\n    const evade = 1 + this.effective(defender, 'evasion')\n    const hitRoll = randomInteger(0,100)\n    const hit = hitRoll > Math.min(95, evade * 2)\n    if (hit) {\n      const defense = this.effective(defender, 'defense')\n      const baseDamage = Math.max(1,this.effective(aggressor, 'strength') - defense)\n      const bonus = this.effective(aggressor, 'bonus damage')\n      const critChance = 1 + this.effective(aggressor, 'crit chance')\n      criticalStrike = randomInteger(0,100) < Math.max(50, critChance * 2)\n      if (criticalStrike) {\n        console.log(`${aggressor.name} landed a critical strike on ${defender.name}!`)\n      }\n      physicalDamage = criticalStrike \n        ? baseDamage + bonus + randomInteger(1, this.effective(aggressor, 'crit damage'))\n        : randomInteger(1, baseDamage) + bonus\n    }\n    const overallDamage = magicDamage + physicalDamage + holyDamage\n    if (overallDamage > 0) {\n      this.injure(defender, overallDamage, aggressor)\n    } else {\n      console.log(`${aggressor.name} swung for ${defender.name} but missed!`)\n    }\n  }\n\n  attack(aggressors: Community, defenders: Community) {\n    aggressors.list().forEach(aggressor => {\n      const baseSpeed = 12;\n      const aggSpeed = Math.min(baseSpeed, aggressor.things.count('speed'))\n      const speed = 1+Math.floor(Math.max(baseSpeed - aggSpeed, 0))\n      if (this.ticks % speed === 0) {\n        const damageAll = this.effective(aggressor, 'damage to all')\n        if (damageAll > 0) {\n          defenders.list().forEach(defender => {\n            const damage = randomInteger(1, damageAll)\n            this.injure(defender, damage, aggressor)\n          })\n        }\n\n        // normal attack\n        const defender = sample(defenders.list()) // todo attack-weakest policy..\n        if (defender) {\n          let done = false;\n          const hit = () => this.strike(aggressor, defender)\n\n          hit()\n          const chainChance = this.effective(aggressor, 'chain chance')\n          const maxChain = 1 + this.effective(aggressor, 'max chain')\n          let chain = 0\n          while (!done && chain++ < maxChain) {\n            let chainRoll = randomInteger(0,100)\n            if (chainRoll < chainChance) {\n              console.log(`...and swung again (${chain} times)!`)\n              hit()\n            }\n          }\n        }\n      }\n    })\n  }\n\n  heal(healee: Person, amount: number) {\n    const hp = healee.things.count('hp')\n    const maxHp = healee.things.count('max hp')\n    const maxHeal = maxHp - hp\n    const heal = Math.min(maxHeal, amount)\n    healee.things.add(Math.floor(heal), 'hp')\n  }\n\n  per(unit: string) {\n    this.party.list().forEach(adventurer => {\n      const xp = this.effective(adventurer, `xp per ${unit}`)\n                * (1 + 0.1 * adventurer.traits.count('Perspicuous'))\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n      adventurer.things.add(Math.floor(xp), 'xp')\n\n      const gil = this.effective(adventurer, `gold per ${unit}`)\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n      this.resources.add(Math.floor(gil), 'gil')\n\n      if (adventurer.things.count('hp') < adventurer.things.count('max hp')) {\n        const hp = this.effective(adventurer, `hp per ${unit}`)\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n        this.heal(adventurer, hp)\n      }\n    })\n  }\n\n  private round() {\n    this.per('round')\n    this.party.list().forEach(adventurer => {\n      const regen = this.effective(adventurer, 'regen')\n      this.heal(adventurer, regen)\n      if (adventurer.things.count('heal')) {\n        this.party.list().forEach(healee => {\n            const health = this.effective(adventurer, 'heal')\n            this.heal(healee, randomInteger(1,health))\n        })\n      }\n\n      if (adventurer.traits.count('Potion of Life') > 0 &&\n          adventurer.things.count('hp') < 0.35 * adventurer.things.count('max hp')) {\n        console.log(`${adventurer.name} drank a potion of life!`)\n        adventurer.traits.remove(1, 'Potion of Life')\n        const health = 30 + randomInteger(1, 12) + this.effective(adventurer, 'heal')\n        this.heal(adventurer, health)\n      }\n    })\n\n    this.enemies.list().forEach(enemy => {\n      this.heal(enemy, this.effective(enemy, 'regen'))\n    })\n  }\n\n  @boundMethod\n  tick({ resources }: EvolvingStocks, t: number) {\n    this.party.list().forEach(adventurer => {\n      const level = adventurer.things.count('level')\n      const levelCost = PlayerHandbook.levelCost(level) \n      if (adventurer.things.count('xp') > levelCost) {\n        adventurer.things.remove(levelCost, 'xp')\n        adventurer.things.add(1, 'level')\n        console.log(`${adventurer.name} level up!`)\n        PlayerHandbook.levelUp(adventurer)\n      }\n    })\n\n    if (t % DungeonMasterGuide.durations.round === 0) {\n      this.round()\n    }\n\n    if (t % DungeonMasterGuide.durations.day === 0) {\n      resources.add(1, 'day')\n      this.per('day')\n    }\n\n    if (this.enemies.count === 0 && this.party.count > 0) {\n      if (t % 5 === 0) {\n        this.resources.add(1, 'step')\n        this.per('step')\n        if (this.resources.count('step') % 500 === 0) {\n          resources.add(1, 'li')\n          this.per('li')\n          // store..\n          const items = [\n            'Potion of Life', // heals ~25 at 50% hp\n            'Healing Salve',\n          ]\n          const rareItems = [\n            'Shell Matrix', // functionally -- resurrect charges (w/ limitations)\n            'Cloaking Robe of Elvenkind', // large % bonus to evade\n            'Counterweight' // large % bonus to counter chance\n          ]\n          const stock = randomInteger(0,20) > 19 ? rareItems : items\n          while (this.resources.count('gil') > 1000) {\n            // give items to leader\n            let recipient = sample(this.party.list()) //[0]\n            recipient.traits.add(1, sample(stock))\n            this.resources.remove(1000, 'gil')\n          }\n        }\n\n        const encounterChance = 60 + this.resources.count('li') + this.party.count\n        const randomEncounter = randomInteger(0,100) > encounterChance\n        if (randomEncounter) { //randomInteger(0,100) > 86) {\n          this.spawnEnemyParty()\n          this.per('encounter')\n        }\n      }\n\n       \n    } else {\n      this.turnStarted()\n      this.per('turn')\n      this.attack(this.party, this.enemies)\n      this.attack(this.enemies, this.party)\n      this.mortalityCheck(resources)\n    }\n  }\n\n  private mortalityCheck(resources: ManageStocks) {\n    this.party.list().forEach(adventurer => {\n      if (adventurer.things.count('hp') <= 0) {\n        if (adventurer.traits.count('Eternal Victory') > 0) {\n          this.heal(adventurer, 200)\n          adventurer.traits.remove(1, 'Eternal Victory')\n        } else if (adventurer.traits.count('Healing Salve') > 0) {\n          this.heal(adventurer, 100)\n          adventurer.traits.remove(1, 'Healing Salve')\n        } else if (adventurer.traits.count('Shell Matrix') > 0) {\n          this.heal(adventurer, 50)\n          adventurer.things.add(150, 'magic hp')\n          adventurer.traits.remove(1, 'Shell Matrix')\n        } else {\n          this.per('death')\n          this.party.destroy(adventurer.name)\n          resources.add(1, 'death')\n          console.log(`${adventurer.name} was slain!`)\n          if (this.party.count === 0) {\n            this.per('tpk')\n            resources.add(1, 'tpk')\n            console.log(\"The party has fallen... The quest is lost.\")\n          }\n        }\n      }\n    })\n\n    this.enemies.list().forEach(enemy => {\n      if (enemy.things.count('hp') <= 0) {\n        this.per('kill')\n        this.enemies.destroy(enemy.name)\n        resources.add(1, 'kill')\n        console.log(`${enemy.name} was slain!`)\n        if (this.enemies.count === 0) {\n          this.per(\"victory\")\n          resources.add(1, 'victory')\n          console.log(\"The party was victorious! The quest continues...\")\n          return\n        }\n      }\n    })\n  }\n}\n\nconst arena = new Arena()\nexport default arena\n","import { boundMethod } from 'autobind-decorator'\nimport { List, Sequence } from '../collections'\nimport { Collection } from '../ecosphere/Collection';\nimport Model from '../ecosphere/Model'\nimport { ManageStocks, Person, Recipe, TimeEvolution } from '../ecosphere/types'\nimport { randomInteger } from '../ecosphere/utils/randomInteger';\nimport { unique } from '../ecosphere/utils/unique';\nimport { where } from '../ecosphere/utils/where';\n\ntype Currency = number\ntype Order = { [itemName: string]: number }\ntype Bill = { id: number, order: Order, price: Currency, account: Receivable }\ninterface Receivable {\n  receive(items: any[], bill: Bill): Currency\n}\n\ntype EventKind = 'order:fulfilled'\ntype Event = { id: number, name: string, description: string, at: number, kind: EventKind }\nexport class Factory extends Model {\n  events = new Collection<Event>()\n  emit(event: EventKind, title?: string, message?: string) {\n    // if (title) { console.log(title) } //\"EVENT\", event)\n    this.events.create({ name: title, description: message, kind: event, at: this.ticks })\n  }\n  private bills = new List<Bill>()\n\n  metrics = {\n    'Production Speed': () => this.deliveryRate,\n    'Total Fulfillments': () => this.fulfillmentEvents.length,\n    'Orders In Queue': () => this.bills.count\n  }\n\n  metricGrain = 100\n  get deliveryRate() {\n    return this.recentEvents.filter(where('kind', 'order:fulfilled')).length / this.metricGrain\n  }\n\n  get recentEvents() {\n    return this.events.list().filter(e => e.at > this.ticks-this.metricGrain)\n  }\n\n  get fulfillmentEvents() {\n    return this.events.list().filter(where('kind', 'order:fulfilled'))\n  }\n\n  constructor(\n    name: string,\n  ) {\n    super(`${name} Factory`)\n  }\n\n  product(name: string, consumes: { [resourceName: string]: number }) {\n    this.actions.create({ name: `Order ${name}`, act: ({ count, deliverTo }: { count: number, deliverTo: Receivable }) => {\n      this.order(count || 20, name, deliverTo || { receive: () => {\n        return 1;\n      }})\n    }})\n\n    this.resources.create(name)\n    this.workers.recipes.create({ name, produces: { [name]: 1 }, consumes });\n  }\n\n  @boundMethod\n  reboot() {\n    this.reset()\n    this.people.create('Workers')\n    this.bills.clear()\n    this.evolve(this.evolution)\n    this.policies.create({ name: 'FIFO', manage: () => {\n        const firstUnfulfilled = this.unfulfilled(this.bills.first)[0]\n        const produceUnfulfilled = this.workers.recipes.lookup(firstUnfulfilled)\n        if (produceUnfulfilled) {\n          this.workers.list().forEach(worker => this.produce(worker, produceUnfulfilled))\n        }\n    }})\n    this.policies.create({ name: 'Round Robin', manage: () => {\n        const allBillsRequested = unique(this.bills.items.flatMap(bill => {\n          return this.unfulfilled(bill)\n        }))\n        this.workers.list().forEach((worker, i) => {\n          const nextUnfulfilled = allBillsRequested[(i % (allBillsRequested.length))]\n          const produceUnfulfilled = this.workers.recipes.lookup(nextUnfulfilled)\n          if (produceUnfulfilled) {\n            this.produce(worker, produceUnfulfilled)\n          }\n        })\n    }})\n\n    this.choose('FIFO')\n  }\n\n  unfulfilled(bill?: Bill) {\n    if (bill === undefined) { return [] }\n    let orderItemNames = Object.keys(bill.order)\n    let unfulfilled: string[] = []\n    orderItemNames.forEach(item => {\n      let order = bill.order[item]\n      let amount = this.resources.count(item)\n      if (amount < order) {\n        unfulfilled.push(item)\n      }\n    })\n    // console.log(\"Unfulfilled from bill: \" + inspect(bill.order))\n    return unfulfilled\n  }\n\n  produce = (worker: Person, recipe: Recipe) => {\n    if (this.canProduce(recipe)) {\n      this.workers.jobs.set(worker, recipe)\n    } else {\n      if (recipe.consumes) {\n        const required: string[] = []\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          // do we have enough of the resource?\n          if (this.resources.count(resource) < amount) {\n            required.push(resource)\n          }\n        })\n\n        let requirement = required[randomInteger(0,required.length)]; // could sample here..\n        // need to find a recipe that produces requirement\n        let producingRequirement: Recipe | null =  null\n        this.workers.recipes.each(recipe => {\n          if (recipe.produces[requirement]) {\n            producingRequirement = recipe\n          }\n        })\n        if (producingRequirement) {\n        //  this.workers.jobs.set(worker, producingRequirement)\n          this.produce(worker, producingRequirement)\n        }\n      }\n    }\n  }\n\n  missingRequirements = (recipe: Recipe) => {\n    const missing: string[] = []\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (this.resources.count(resource) < amount) {\n          missing.push(resource)\n        }\n      })\n    }\n    return missing\n  }\n\n  canProduce = (recipe: Recipe) => {\n    let mayProduce = true\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (this.resources.count(resource) < amount) {\n          mayProduce = false\n        }\n      })\n    }\n    return mayProduce\n  }\n\n  evolution: TimeEvolution = ({ resources }) => {\n    this.manage(resources) \n    if (this.bills.count > 0) {\n      this.workers.work({ resources })\n    }\n  }\n\n  orderIds = new Sequence()\n  order(count: number, itemName: string, account: Receivable): Bill {\n    const bill: Bill = {\n      id: this.orderIds.next,\n      order: { [itemName]: count },\n      account,\n      price: count\n    }\n    this.bills.add(bill)\n    return bill\n  }\n\n  get workers() { return this.people.lookup('Workers') }\n  private manage(resources: ManageStocks) {\n    if (this.bills.count === 0) return;\n\n    // const bill = this.bills.first;\n    this.bills.each(bill => {\n      const orderItemNames = Object.keys(bill.order)\n      const unfilled = this.unfulfilled(bill)\n      const allFulfilled = unfilled.length === 0\n\n      if (allFulfilled) {\n        bill.account.receive([], bill)\n        orderItemNames.forEach(item => {\n          this.resources.remove(bill.order[item], item)\n        })\n        this.bills.remove(bill)\n        this.emit('order:fulfilled', `An order for ${orderItemNames.join(',')} has been fulfilled`)\n      }\n    })\n\n    if (this.currentPolicy) {\n      this.currentPolicy.manage()\n    } else {\n      console.warn(\"No labor policy selected!\")\n    }\n  }\n}\n","export function unique(arr: any[]) {\n  var u = {}, a = [];\n  for (var i = 0, l = arr.length; i < l; ++i) {\n    if (!u.hasOwnProperty(arr[i])) {\n      a.push(arr[i]);\n      // @ts-ignore\n      u[arr[i]] = 1;\n    }\n  }\n  return a;\n}\n","import { Sequence } from '../collections';\nimport { Factory } from './Factory';\n\nconst ids = new Sequence()\n  const factory = new Factory('Zep');\n  factory.reboot();\n  factory.product('Soles', {});\n  factory.product('Laces', {});\n  factory.product('Socks', {});\n  factory.product('Shoes', { 'Soles': 2, 'Laces': 2 });\n  factory.product('Hat', {});\n  factory.product('Belt', {});\n  factory.product('Underwear', {});\n  factory.product('Pants', {});\n  factory.product('Outfit', { 'Pants': 1, 'Belt': 1, 'Hat': 1, 'Socks': 1, 'Shoes': 1 });\n  const managers = factory.people.create('Management')\n  managers.create('Operations Chief');\n  managers.create('Plant Manager');\n  // factory.workers.create('Engineer')\n  factory.machines.create('Robot')\n\n  factory.actions.create({ name: 'Spawn Worker', act: () => { factory.workers.create(`Employee #${ids.next}`); } });\n  export default factory;\n","import { boundMethod } from \"autobind-decorator\";\nimport Model from \"../ecosphere/Model\";\nimport { createMoiety, createPerson, Memory, Person } from \"../ecosphere/types\";\nimport { sample } from \"../ecosphere/utils/sample\";\n\nconst generatePerson = () => {\n  const moiety = createMoiety('A Social Group')\n  const gender = sample(['male', 'female'])\n  const firstName = sample(gender === 'male' ? [ 'Sam', 'Eric', 'Ted', 'Jones' ] : ['Sarah', 'Edna', 'Terri', 'Rosa'])\n  const lastName = sample(['Smith', 'Lever', 'Token', 'Switch', 'Agent', 'Op'])\n  const person = createPerson(firstName + ' ' + lastName, moiety)\n  return person\n}\nclass Citizen extends Model {\n  subject: Person = generatePerson()\n\n  constructor() {\n    super('Citizen');\n\n    // this.people.create('Friends')\n    // this.people.create('Rivals')\n    // this.people.create('Peers')\n    // this.people.create('Family')\n\n    this.resources.create('Happiness')\n    this.resources.create('Money')\n    // this.resources.create('Money')\n\n    this.actions.create({ name: 'New', act: () => {\n      this.subject = generatePerson() \n    }})\n\n    this.evolve(this.evolution)\n  }\n\n  @boundMethod\n  evolution() {}\n\n  metrics = { age: () => this.subject.age, }\n  notes = {\n    'current date': () => this.date.description,\n    'name': () => this.subject.name,\n    'agility': () => this.subject.body.agility,\n    'beauty': () => this.subject.soul.beauty,\n    'cunning': () => this.subject.body.cunning,\n    'depth': () => this.subject.mind.depth,\n    'education': () => this.subject.mind.education,\n    'empathy': () => this.subject.soul.empathy,\n    'insight': () => this.subject.mind.insight,\n    'integrity': () => this.subject.soul.integrity,\n    'spirit': () => this.subject.body.spirit,\n    'strength': () => this.subject.body.strength,\n    'wit': () => this.subject.soul.wit,\n    'knowledge': () => this.subject.kind.knowledge,\n    'power': () => this.subject.kind.power,\n    'sophistication': () => this.subject.kind.sophistication,\n    'wealth': () => this.subject.kind.wealth,\n    'bio': () => this.subject.memory.list().map(this.describeMemory).join('... '),\n  }\n\n  describeMemory(memory: Memory) {\n    return `I remember ${memory.description}`\n  }\n\n  // @boundMethod\n  get date() {\n    let time = this.ticks || 0\n    let secondInterval = 0.1;\n    let seconds = Math.floor(time / secondInterval);\n\n    let second = seconds%60\n    let minute = Math.floor(seconds/60)%60\n    let hour = Math.floor(seconds/(60*60))%24\n    let day = Math.floor(seconds / (60 * 60 * 24));\n    // let week = Math.floor(seconds / (60 * 60 * 24 * 7));\n    // let month = Math.floor(seconds / (60 * 60 * 24 * 7 * 4));\n    // let year = Math.floor(seconds / (60 * 60 * 24 * 365));\n\n    let dayOfWeek = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'][day % 7];\n\n    return {\n      dayOfWeek,\n      description: `${dayOfWeek} ${String(hour).padStart(2,'0')}:${String(minute).padStart(2,'0')}:${String(second).padStart(2,'0')}`\n    }\n  }\n}\n\nexport default new Citizen();\n","export type Tiles = string[][]\n\nexport class Board {\n  private tiles: Tiles = []\n\n  view(): Tiles {\n    let viewTiles: Tiles = []\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        viewTiles[y] = viewTiles[y] || []\n        viewTiles[y][x] = this.at(x,y) || '' // first(overlay, o => o.at(x,y))\n      }\n    }\n    return viewTiles;\n  }\n\n  constructor(public width: number, public height: number) {}\n\n  // clear = (x0: string, y0: number, width: number, height: number) => {}\n\n  write = (character: string, x0: number, y0: number) => {\n    let x = x0;\n    let y = y0;\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = character;\n  }\n  \n  drawBox = (char: string, x0: number, y0: number, width: number, height: number) => {\n    let x1 = x0 + width; let y1 = y0 + height;\n    for (let x = x0; x <= x1; x++) {\n      for (let y = y0; y <= y1; y++) {\n        if (x === x0 || y === y0 || x === x1 || y === y1) {\n          this.write(char, x, y)\n        } else {\n          this.write('', x, y)\n        }\n      }\n    }\n  }\n\n  // get width() { return this.tiles && this.tiles[0] && this.tiles[0].length }\n  // get height() { return this.tiles.length }\n\n  at(x: number, y: number) {\n    if (x >= 0 && x <= this.width && y >= 0 && y <= this.height) {\n      if (this.tiles[y]) {\n        return this.tiles[y][x]\n      }\n    } \n    // return ''\n  }\n\n  step(eachCell: (val: string, neighbors: string[]) => string) {\n    const ignored = ['*']\n    // console.log(\"Board.step -- start\")\n    let newTiles: Tiles = []\n    this.tiles = this.tiles || []\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        let currentValue = this.at(x,y) // || '' //tiles[y][x]\n        if (currentValue !== undefined) {\n          if (ignored.includes(currentValue)) { continue } // === '*') { continue }\n          let neighbors: string[] = [\n            this.at(x-1,y-1), this.at(x,y-1), this.at(x,y-1),\n            this.at(x-1,y), this.at(x,y), this.at(x,y),\n            this.at(x-1,y+1), this.at(x,y+1), this.at(x,y+1),\n          ].filter(Boolean) as string[] //.filter(v => v !== '' && v !== ' ' && v !== '*')\n          if (neighbors.length > 0) {\n            // console.log(\"Current value: (\" + currentValue + \")\")\n            // console.log(\"Neighbors: \" + neighbors.join(\" | \"))\n            const newCell = eachCell(currentValue, neighbors)\n            // console.log(\"New Cell value: (\" + newCell + \")\")\n            newTiles[y] = newTiles[y] || []\n            newTiles[y][x] = newCell //eachCell(currentValue, neighbors)\n          }\n        }\n      }\n    }\n    // console.log(\"Board.step -- complete\")\n    this.tiles = newTiles\n    // throw new Error(\"Method not implemented.\");\n  }\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\n\nclass Building extends Model {\n  width = 80\n  height = 36\n  board: Board = new Board(this.width, this.height)\n  get tiles() { return this.board.view() }\n\n  constructor() {\n    super(\"Perfect Blue Buildings\")\n    this.evolve(this.evolution)\n    // this.board.drawBox('*', 0, 0, 5, 5) //this.width-2, this.height-2)\n\n  }\n\n  building() {\n    let width = randomInteger(2,8)\n    let height = randomInteger(2,3)\n    this.board.drawBox('#', randomInteger(1, this.width - width - 1),\n                            randomInteger(1, this.height - height - 1),\n                            width, height)\n  }\n\n  @boundMethod\n  evolution() {\n    this.building()\n    \n    // this.board.write(sample(['a','b','c']), randomInteger(), 2)\n  }\n}\nconst buildingMaker = new Building()\nexport default buildingMaker;\n","export function replicate(array: Array<any>, times: number) {\n  // Create an array of size \"n\" with undefined values\n  var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  arrays = arrays.map(() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  return [].concat.apply([], arrays);\n}\n","\nexport function times(n: number, fn: Function) { for (let i = 0; i < n; i++) { fn() } }\n","import { Avernus } from \"./Avernus\"\nimport arena from \"./Arena\"\n// import { Society } from \"./Society\"\nimport zep from \"./zep\"\nimport Citizen from \"./Citizen\"\nimport Building from \"./Building\"\nimport worldMapMaker from \"./WorldMap\"\n\nconst models = [\n  worldMapMaker,\n  Building,\n  arena,\n  zep,\n  Avernus,\n  Citizen,\n  // Society,\n]\n\nexport default models\n\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { EvolvingStocks } from \"../ecosphere/types\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { replicate } from \"../ecosphere/utils/replicate\";\nimport { sample } from \"../ecosphere/utils/sample\";\nimport { times } from \"../ecosphere/utils/times\";\n\nclass WorldMap extends Model {\n  width = 90\n  height = 40\n\n  board: Board = new Board(this.width, this.height)\n\n  terrain: Board = new Board(this.width, this.height)\n  // vegetation: Board = new Board(this.width, this.height)\n  // animals: Board = new Board(this.width, this.height)\n  // machines: Board = new Board(this.width, this.height)\n  // habitats: Board = new Board(this.width, this.height)\n\n  // magnetosphere: Board = new Board(this.width, this.height)\n  // temperature: Board = new Board(this.width, this.height)\n  // pressure: Board = new Board(this.width, this.height)\n  // clouds: Board = new Board(this.width, this.height)\n\n  get tiles() { return this.board.view() } //{ overlay: [ terrain ]}) }\n  tileColors = {\n    // grassland\n    '\"':  'darkolivegreen',\n    '\\'': 'darkgreen',\n    '.':  'lightgreen',\n    ',':  'darkseagreen',\n    ':':  'darkslategray',\n    ';':  'forestgreen',\n    // '^',\n\n    // ice\n  }\n  // }\n\n  constructor() {\n    super(\"Overworld Map\")\n    // this.step()\n    // this.board.drawBox('*', 0, 0, this.width, this.height)\n    this.evolve(this.evolution)\n    times(100, () => this.step())\n  }\n\n  alphabet = [\n    // '.', ':', '^', '#',\n    // \"'\", \"\\\"\", \"^\", '.', ';', ':'\n    // ...replicate([' '], 200),\n    // ...replicate(['\\''], 150),\n    ...replicate(['\"'], 50),\n    ...replicate(['\\''], 20),\n    ...replicate(['.'], 10),\n    ...replicate([','], 5),\n    ...replicate([':'], 3),\n    ...replicate([';'], 3),\n    '#', '^',\n    // ...replicate([','], 30),\n    // ...replicate(['^'], 20),\n    // ...replicate([':'], 10),\n    // ...replicate([';'], 5),\n    // '#', '%', '!', '$', '{' '?', 'o'\n  ]\n\n  @boundMethod\n  evolution({ resources }: EvolvingStocks, t: number) {\n    times(2, () => {\n      let char = sample(this.alphabet)\n      times(2, ()=>{\n        let x = randomInteger(0, this.width) //-2)\n        let y = randomInteger(0, this.height) //-2)\n        this.board.write(char, x, y)\n      })\n    })\n  // }\n    if (t % 100 === 0) {\n      // console.log(\"evolve step..\")\n      // this.board.step((val: string, neighbors: string[]) => {\n      //   // const alive = this.alphabet.includes(val)\n      //   // if (neighbors.length === 2 || neighbors.length === 3) {\n      //   //   return alive ? val : sample(['\"', \"'\"])\n      //   // } else { return '' }\n      // })\n    }\n  }\n}\nconst worldMapMaker = new WorldMap()\nexport default worldMapMaker;\n\n","\nimport './App.css';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelSelector } from './ModelSelector';\nimport models from './examples';\n\ntype ApplicationProps = {\n  model: IModel\n}\n\nfunction App({ model: initialModel }: ApplicationProps) {\n\n  return <div className=\"App\">\n    {/* @ts-ignore */}\n    <ModelSelector models={models} initialModel={initialModel} />\n  </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport models from './examples';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App model={models[0]} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}