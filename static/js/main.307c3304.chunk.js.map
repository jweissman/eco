{"version":3,"sources":["ecosphere/utils/where.ts","ecosphere/utils/isString.ts","collections/Map.ts","collections/List.ts","collections/Sequence.ts","ecosphere/Stocks.ts","ecosphere/Registry.ts","ecosphere/Delta.ts","ecosphere/Model/Simulation.ts","ecosphere/Collection.ts","ecosphere/utils/randomInteger.ts","ecosphere/utils/sample.ts","ecosphere/types/index.ts","ecosphere/Population.ts","ecosphere/Community.ts","ecosphere/Model/Model.ts","ecosphere/Model/presentItem.tsx","ecosphere/View/Tile.tsx","ecosphere/View/presentCommunity.tsx","ecosphere/View/presentIndividual.tsx","ecosphere/View/View.tsx","ecosphere/Model/index.ts","ModelPresenter.tsx","useModel.tsx","ModelSelector.tsx","examples/Avernus.ts","examples/Arena/MonsterManual.ts","examples/Arena/PlayerHandbook.ts","examples/Arena/index.ts","examples/Society.ts","examples/SpaceStation.tsx","examples/Village.ts","ecosphere/Assembly.ts","examples/Factory.ts","ecosphere/utils/unique.ts","examples/zep.tsx","examples/index.ts","App.tsx","examples/World.ts","index.tsx"],"names":["where","key","value","it","isString","String","Map","idFor","nameFor","lookup","_data","k","v","this","namesAndValues","Object","entries","map","Number","fromEntries","List","items","count","length","push","filter","item","cb","forEach","fn","Error","Sequence","StockManager","stocks","stockId","amount","add","name","remove","list","lookupById","Stocks","elements","ids","storage","attrs","attributes","has","manage","id","next","theEntity","setAmount","element","find","matching","create","flatMap","manageAll","boundMethod","Registry","popCtor","populations","species","values","x","hasOwnProperty","theSpecies","population","populationList","pop","Delta","model","getStocks","changes","baseline","_store","Simulation","ticks","tracking","dynamics","e","flux","target","report","source","theDelta","manager","_delta","theFlows","flow","table","entry","t","flows","each","dynamism","apply","changed","flowsReport","delta","updated","deltaAmount","Collection","randomInteger","min","max","Math","floor","random","sample","ts","animalIds","createAnimal","kind","age","health","spirit","cunning","agility","strength","moietyIds","personId","human","size","SetHelper","set","populationIds","Population","individuals","Set","theList","individual","first","theIndividual","newborn","doomed","destroy","newborns","i","birth","doneFor","death","build","delete","Community","moieties","obscured","recipes","jobs","worker","inventories","person","get","personAttrs","moiety","inventory","traits","body","mind","insight","depth","education","disposition","soul","wit","empathy","integrity","beauty","currency","things","createPerson","wealth","sophistication","power","knowledge","createMoiety","resources","recipe","produce","mayProduce","consumes","resource","produces","Model","people","machines","animals","metrics","actions","policies","currentPolicy","clear","actionName","args","action","act","policyName","policy","presentItem","deltas","title","className","data-testid","Tile","children","presentCommunity","community","aria-label","work","itemNames","thing","sort","a","b","style","display","trait","View","modelName","communities","lastChanges","folks","keys","view","ModelPresenter","send","choose","step","onClick","type","checked","onChange","useModel","initialModel","useState","setModel","setLastChanges","delay","setDelay","shouldStep","shouldSend","doSend","shouldManage","doManage","command","setCommand","setPolicy","useEffect","isModel","callback","savedCallback","useRef","current","tick","setInterval","clearInterval","useInterval","performSend","performChoose","maybeModel","AssemblyPresenter","assembly","models","theModel","ModelSelector","options","placeholder","give","recipient","supplier","n","world","miner","minter","smelter","fisherman","mineGold","smeltGold","mintCoin","evolve","MonsterManual","basicCreatures","hp","evasion","reflect","speed","challengingCreatures","Gremlin","counter","Goblin","Kobold","Orc","Ghost","absorb","defense","Rogue","Troll","regen","Giant","bosses","Priest","heal","Vampire","Drake","Lich","extraplanar","Demon","Angel","Archdemon","Dracolith","Archangel","dragons","rareCreatures","Leviathan","bestiary","basicSubtypes","Hostile","Intimidating","Nimble","Quick","Timid","Spry","Elusive","Vigilant","Relentless","Armored","Hardened","Benevolent","Protective","Snarling","Voracious","Vicious","Vexatious","Arrogant","Emboldened","Adventurous","rareSubtypes","Questing","Silvered","Mirrored","Aggressive","Dominating","Swift","Accelerated","Reluctant","Hidden","Invisible","Resurrecting","Regenerating","Fortified","Angelic","Prismatic","Pugnacious","Augmented","Skillful","Skeletal","Undead","Zombie","Favored","Fiendish","Fierce","Opalescent","Cruel","Vortex","evade","Shadow","Luminous","Defiant","Devious","Draconic","subtypes","Common","Evasive","Retaliatory","Inspired","Infused","Radiant","Resplendent","Heavy","Titanic","Unholy","Blessed","Adept","perks","Piercing","Enchanted","Clockwork","Phantasmal","Cosmic","Imperious","monsterIds","difficulty","creature","base","cr","generateBasicMonster","join","adjustedCr","crFactor","perk","PlayerHandbook","hero","characterClass","template","characterClasses","attr","baseStartingHp","levelUp","pc","attributeBoosts","common","uncommon","rare","epic","legendary","rarity","levelAttr","console","log","perkLevels","includes","Fighter","perkBenefits","Brutality","Counterweight","Efferverscence","Efficacious","Opalescence","Ethereal","Faith","Finesse","Fitness","Fluidity","Dexterity","Precision","Swiftness","Rapidity","Medic","Vitality","Whirlwind","Focus","Iridescence","Concentration","Salvation","DungeonMasterGuide","durations","round","day","arena","events","eventIds","challengeRating","damagePerTick","turns","recent","heroIds","metricGrain","manual","spawnHero","spawnEnemyParty","enemyName","at","party","generate","totalLevels","adv","reduce","recentEvents","totalInjuryAmount","injury","enemy","enemies","defender","aggressor","reflected","damage","enemyInjured","effective","absorption","injure","strike","attribute","multiplier","benefits","ranks","benefit","holyDefense","holyDamage","magicDefense","magicDamage","physicalDamage","criticalStrike","baseDamage","bonus","critChance","overallDamage","aggressors","defenders","aggSpeed","damageAll","hit","chainChance","maxChain","chain","healee","maxHeal","unit","adventurer","xp","gil","per","level","levelCost","pow","encounterChance","turnStarted","attack","mortalityCheck","Society","resourceNames","animalNames","treeNames","fruitTreeNames","plantNames","strataNames","meatNames","setup","strata","socialClass","animal","tree","fruitTree","plant","evolution","animalName","randomTree","farmer","randomAnimal","randomPlant","SpaceStation","controls","laboratory","engineering","hab","all","habitat","o2","h20","core","cpu","thrust","xen","town","countryside","region","Factory","bills","deliveryRate","fulfillmentEvents","canProduce","workers","required","requirement","producingRequirement","missingRequirements","missing","orderIds","event","message","description","deliverTo","order","receive","reset","firstUnfulfilled","unfulfilled","produceUnfulfilled","allBillsRequested","arr","u","l","unique","bill","nextUnfulfilled","undefined","orderItemNames","itemName","account","price","emit","warn","factory","reboot","product","managers","zep","village","Avernus","App","commonElements","Wheat","Bread","Fish","Fox","Rabbit","Zed","Cash","Raz","townsfolk","zed","bread","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.307c3304.chunk.js","sourcesContent":["export function where(key: string, value: any) {\n  return (it: any) => it[key] === value;\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n","import { IMap } from \"./types\";\nexport class Map<K, V> implements IMap<K, V> {\n  _data: { [id: number]: V; } = {};\n  constructor(\n    private idFor: (k: K) => number,\n    private nameFor: (k: K) => string,\n    private lookup: (id: number) => K,\n  ) { }\n  set(k: K, v: V) { this._data[this.idFor(k)] = v; }\n  get(k: K): V { return this._data[this.idFor(k)]; }\n  get report(): { [name: string]: V } {\n    const namesAndValues = Object.entries(this._data)\n      .map(([k, v]) => [this.nameFor(this.lookup(Number(k))), v]);\n    return Object.fromEntries(namesAndValues);\n  }\n}\n","//\n\nimport { IList } from \"./types\";\n\nexport class List<T> implements IList<T> {\n  items: T[] = [];\n  protected get it() { return this.items; }\n  get first(): T { return this.items[0]; }\n  get last(): T { return this.items[this.count - 1]; }\n  get count(): number { return this.items.length; }\n  add(it: T) { this.items.push(it); }\n  remove(it: T) { this.items = this.items.filter(item => item !== it); }\n  each(cb: (it: T) => any) { this.items.forEach(cb); }\n  clear() { this.items = []; }\n  map<U>(fn: (it: T) => any): U[] { return this.items.map(fn) }\n\n  get sample(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n","import { ISequence } from \"./types\";\n\nexport class Sequence implements ISequence<number> {\n  count = 0;\n  get next(): number { return this.count++; }\n}\n","import { BasicEntity } from \"./types/BasicEntity\";\nimport { boundMethod } from 'autobind-decorator'\nimport { where } from \"./utils/where\";\nimport { isString } from \"./utils/isString\";\nimport { ManageStock, ManageStocks } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass StockManager<T extends BasicEntity> implements ManageStock<T> {\n  constructor(private stocks: Stocks<T>, private stockId: number) {}\n  add(amount: number): void { return this.stocks.add(amount, this.name) }\n  remove(amount: number): void { return this.stocks.remove(amount, this.name) }\n  get list(): T[] { return this.stocks.list() }\n  get count(): number { return this.stocks.count(this.name) }\n  get name() { return this.item.name }\n  get item(): T { return this.stocks.lookupById(this.stockId) }\n}\n\nexport class Stocks<T extends BasicEntity> {\n  private ids: Sequence = new Sequence()\n  private storage: { [key: number]: number; } = {}\n\n  constructor(\n    public name: string,\n    private elements: T[] = []\n  ) { }\n\n  @boundMethod\n  list() { return this.elements }\n\n  get _store() { return this.storage }\n\n  public clear() { this.elements = []; this.storage = {} }\n\n  public create(name: string): ManageStock<T>\n  public create(attributes: { name: string } & Omit<T, 'id' | 'name'>): ManageStock<T>\n  /** Create a new type of element to store */\n  @boundMethod\n  public create(attrs: any) {\n    let name: string | null = null;\n    let attributes: Partial<T> = {}\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    if (isString(name) && this.has(name)) {\n      return this.manage(name);\n    }\n    if (!isString(name)) { throw new Error(\"Name must be a string\") }\n    // const elementIds: number[] = this.list().map(({ id }) => id);\n    const id = this.ids.next; //Math.max(0, ...elementIds) + 1;\n    const theEntity: T = { id, name, ...attributes } as T\n    this.list().push(theEntity);\n    const manage: ManageStock<T> = this.manage(name as string)\n    return manage\n  }\n\n  @boundMethod\n  add(amount: number, name: string) {\n    this.setAmount(name, this.count(name) + amount);\n  }\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.setAmount(name, this.count(name) - amount);\n  }\n\n  @boundMethod\n  zero(name: string): void {\n    this.setAmount(name, 0);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    const element: T = this.lookup(name);\n    const amount = this.storage[element.id] || 0;\n    return amount;\n  }\n\n  has(name: string): boolean {\n    const matching = this.elements.find(where('name', name))\n    return !!matching;\n  }\n\n  @boundMethod\n  lookupById(id: number): T {\n    const matching = this.elements.find(where('id', id))\n    if (matching) {\n      return matching as T;\n    }\n    throw new Error(`No such ${this.name} with id ${id}`);\n  }\n\n  lookup(name: string): T {\n    const matching = this.elements.find(where('name', name))\n    if (matching) {\n      return matching as T;\n    } else {\n      return this.create(name).item\n    }\n  }\n\n  get report(): (T & { amount: number })[] {\n    const items: T[] = this.list()\n    const table = items.flatMap((item: T) => {\n      const id = Number(item.id)\n      const amount = this.storage[id] || 0\n      return { ...item, amount }\n    })\n    return table\n  }\n\n  manage(name: string): ManageStock<T> {\n    return new StockManager<T>(this, this.lookup(name).id)\n  }\n\n  manageAll(): ManageStocks {\n    const { add, remove, count } = this\n    return { add, remove, count, list: () => this.elements }\n  }\n\n  get manager() { return this.manageAll() }\n\n  private setAmount(name: string, amount: number): void {\n    const element: T = this.lookup(name);\n    this.storage[element.id] = amount;\n  }\n}\n","import { Population } from \"./Population\";\nimport { BasicEntity } from \"./types/BasicEntity\";\nimport { Entity, ManageStocks } from \"./types\";\nimport { boundMethod } from \"autobind-decorator\";\n\n// eg map animal (species) names to populations of individual animals...\n\nexport class Registry<U extends BasicEntity, T extends Entity<U>, Pop extends Population<U,T>> {\n  populations: { [species: string]: Pop } = {};\n  species: { [species: string]: U } = {}\n  constructor(\n    public name: string,\n    public popCtor: new (name: string, specie: U) => Pop\n  ) {}\n\n  clear() {\n    this.populations = {}\n  }\n\n  @boundMethod\n  lookup(name: string): Pop {\n    if (this.has(name)) {\n      return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${name}'`);\n    }\n  }\n\n  @boundMethod\n  lookupById(id: number): U { //Population<U,T> {\n    const matching = Object.values(this.species).find(x => x.id === id)\n    if (matching) { //this.has(name)) {\n      return matching\n      // return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${id}'`);\n    }\n  }\n\n  has(name: string): boolean {\n    return this.populations.hasOwnProperty(name);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    return this.lookup(name).count;\n  }\n\n  @boundMethod\n  list(): U[] {\n    return Object.values(this.species)\n  }\n\n  listByName(name: string): T[] {\n    return this.lookup(name).list();\n  }\n\n  @boundMethod\n  create(name: string, species?: Omit<U, 'name' | 'id'>): Pop { //Population<U,T> {\n    if (this.has(name)) {\n      return this.lookup(name);\n    }\n    let theSpecies: U = { ...species, name, id: this.list().length+1 } as unknown as U; // species.kind points back to name...\n    let population: Pop = new this.popCtor(name, theSpecies);\n    this.populations[name] = population;\n    this.species[name] = theSpecies;\n    return population;\n  }\n\n  get populationList(): Population<U,T>[] { return Object.values(this.populations)}\n\n  get report() {\n    const pops = this.populationList.flatMap((population: Population<U,T>) => {\n      const pop = population\n      if (pop.count > 0) {\n        return { name: pop.name, amount: pop.count}\n      } else {\n        return []\n      }\n    })\n    return pops\n  };\n\n  @boundMethod\n  add(amount: number, name: string): void {\n    this.lookup(name).add(amount)\n  };\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.lookup(name).remove(amount)\n  };\n\n  manageAll(): ManageStocks {\n    const { add, remove, count, list } = this\n    return { add, remove, count, list }\n  }\n  get manager() { return this.manageAll() }\n}\n","import { Model } from \"./Model\";\nimport { Registry } from \"./Registry\";\nimport { Stocks } from \"./Stocks\";\nexport type DeltaSource = Stocks<any> | Registry<any, any, any> \n//<U extends BasicEntity, T extends Entity<U>> = Stocks<T> | Registry<U,T>\nexport type DeltaSourceManager = { add: Function, remove: Function, count: Function, list: Function }\nexport class Delta {\n  public changes: Stocks<any>;\n  constructor(public model: any, public getStocks: (model: Model) => DeltaSource) {\n    let baseline = this.getStocks(model)\n    this.changes = new Stocks(`${baseline.name} (delta)`, baseline.list());\n  }\n  get storage() { return this.changes._store }\n  // evolve(t: number): Delta {\n  //   let stocks = this.getStocks(this.model)\n  //   const flow = { [stocks.name]: stocks.manageAll() }\n  //   this.model.dynamics.each(dynamism => dynamism(flow, t));\n  //   return this;\n  // }\n}\n","import { List } from \"../../collections\";\nimport { Delta, DeltaSource } from \"../Delta\";\nimport { Entity, EvolvingStocks, TimeEvolution } from \"../types\";\nimport { ISimulation } from \"./ISimulation\";\n\nexport abstract class Simulation implements ISimulation {\n  protected ticks: number = 0;\n  protected tracking: string[] = []\n  public dynamics = new List<TimeEvolution>()\n  constructor(public name: string) { }\n  public evolve(e: TimeEvolution) { this.dynamics.add(e) }\n  public step() { return this.flux(this.ticks++) }\n\n  public get report() {\n    return Object.fromEntries(this.tracking.map(target =>\n      [target, (this as any)[target].report]\n    ))\n  }\n\n  private flow(target: string) {\n    const source = (this as any)[target]\n    const theDelta = new Delta(this, (model) => (model as any)[target])\n    const { add, remove } = theDelta.changes.manager\n    const { list, count, lookupById } = source\n    return { lookupById, _delta: theDelta, add, remove, list, count }\n  }\n  \n  private flows(): { [key: string]: { _delta: Delta, lookupById: Function, add: Function } } {\n    const theFlows: {[key: string]: any} = {}\n    this.tracking.forEach(target => theFlows[target] = this.flow(target))\n    return theFlows\n  }\n\n  private flowsReport(flow: { [s: string]: any }) {\n    const table: { [key: string]: any } = {}\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = flow._delta\n      table[name] = Object.fromEntries(\n        Object\n          .entries(theDelta.storage)\n          .map(entry => {\n            const [id, amount] = entry\n            const name = flow.lookupById(Number(id)).name\n            return [ name, amount ]\n          })\n      )\n    })\n    return table\n  }\n\n  private flux(t: number) {\n    const flow: EvolvingStocks = this.flows() as any as EvolvingStocks\n    this.dynamics.each(dynamism => dynamism(flow, t));\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = (flow as any)._delta\n      this.apply(theDelta, name)\n    })\n    return { changed: this.flowsReport(flow) }\n  }\n\n  private apply(delta: Delta, target: string) {\n    const source: DeltaSource = (this as any)[target] as DeltaSource\n    const manager = source.manager\n    const list = manager.list()\n    const { storage: updated } = delta;\n    const changed: { [elementName: string]: number; } = {};\n    list.forEach((item: Entity<any>) => {\n      if (updated[item.id]) {\n        const deltaAmount = updated[item.id];\n        manager.add(deltaAmount, item.name);\n        changed[item.name] = deltaAmount;\n      }\n    });\n    return { changed };\n  }\n}\n","import { List, Sequence } from \"../collections\";\nimport { IList } from \"../collections/types\";\nimport { BasicEntity } from \"./types/BasicEntity\";\n\nclass Collection<T extends BasicEntity> extends List<T> implements IList<T> {\n  list() { return this.items }\n  private ids = new Sequence()\n  get names(): string[] {\n    // throw new Error('Method not implemented.');\n    return this.items.map(item => item.name)\n  }\n  // private get ids() { return this.it.map(({ id }) => id) }\n  create(attributes: Partial<T>): T {\n    const id = this.ids.next;\n    const theEntity: T = { id, ...attributes } as unknown as T;\n    this.items.push(theEntity);\n    return theEntity\n  }\n\n  lookup(name: string) {\n    return this.items.find(it => it.name === name)\n  }\n}\n\nexport { Collection }\n","export function randomInteger(min: number, max: number) {\n  // return min + Math.floor(Math.random() * (max - min));\n  let result = Math.floor(Math.random() * (max - min + 1) + min)\n  // console.log(\"Random integer between \" + min + \" and \" + max + \": \" + result)\n  return result\n}\n","import { randomInteger } from \"./randomInteger\";\n\nexport function sample<T>(ts: T[]): T {\n  let i = randomInteger(0,ts.length-1)\n  return ts[i]; //randomInteger(0,ts.length-1)]\n\n}\n","import { Sequence } from \"../../collections\"\nimport { Stocks } from \"../Stocks\"\nimport { sample } from \"../utils/sample\"\nimport { BasicEntity } from \"./BasicEntity\"\n\nexport type Substance = BasicEntity\nexport type Entity<T> = BasicEntity & { kind: T }\n\nexport type Quality = 'terrible' | 'poor' | 'adequate' | 'good' | 'excellent'\ntype Size = 'fine' | 'small' | 'medium' | 'large' | 'huge'\nexport type Species = BasicEntity & {\n  name: string\n  size?: Size\n  fitness?: Quality\n}\n\nexport type Individual<T> = Entity<T> & {\n  age: number // maybe simpler to do bornAt?\n}\n\nexport type Creature<T> = Individual<T> & {\n  health: 'dying' | 'unwell' | 'flourishing' | 'triumphant'\n}\n\nexport type Animal = Creature<Species> & {\n  spirit: 'languorous' | 'vigorous' | 'impetuous' | 'ferocious'\n  strength: 'weak' | 'robust' | 'mighty' | 'indomitable'\n  cunning:  'dim' | 'attentive' | 'creative' | 'ingenious'\n  agility:  'clumsy' | 'nimble' | 'spry' | 'balletic'\n}\n\nconst animalIds = new Sequence()\nexport const createAnimal = (name: string, species: Species): Animal => {\n  return {\n    id: animalIds.next,\n    name,\n    kind: species,\n    age: 0,\n    health: sample(['dying', 'unwell', 'flourishing', 'triumphant']),\n    spirit: sample(['languorous', 'vigorous', 'impetuous', 'ferocious']),\n    cunning: sample(['dim', 'attentive', 'creative', 'ingenious']),\n    agility: sample(['clumsy', 'nimble', 'spry', 'balletic']),\n    strength: sample(['weak', 'robust', 'mighty', 'indomitable']),\n  }\n}\n\n// major demographic groupings -- moieties (maybe *this* should be called a Community??)\ntype Wealth = 'impoverished' | 'well-off' | 'luxuriant' | 'decadent'\ntype Sophistication = 'unpretentious' | 'savvy' | 'urbane' | 'sleek'\ntype Power = 'inconsequential' | 'marginal' | 'influential' | 'sovereign'\ntype Knowledge = 'clueless' | 'well-informed' | 'wise' | 'prescient'\n\nexport type Moiety = BasicEntity & {\n  wealth: Wealth\n  sophistication: Sophistication\n  power: Power\n  knowledge: Knowledge\n}\n\nconst moietyIds = new Sequence()\nexport const createMoiety = (name: string): Moiety => {\n  const wealth: Wealth = sample([ 'impoverished', 'well-off', 'luxuriant', 'decadent' ])\n  const sophistication: Sophistication = sample([ 'unpretentious', 'savvy', 'urbane', 'sleek' ])\n  const power: Power = sample([ 'inconsequential', 'marginal', 'influential', 'sovereign' ])\n  const knowledge: Knowledge = sample([ 'clueless', 'well-informed', 'wise', 'prescient' ])\n  return { id: moietyIds.next, name, wealth, sophistication, power, knowledge }\n}\n\ntype Body = Animal\n\ntype Insight = 'dense' | 'intuitive' | 'incisive' | 'brilliant'\ntype Depth = 'superficial' | 'substantial' | 'profound' | 'inscrutable'\ntype Education = 'unlettered' | 'literate' | 'tutored' | 'well-read'\ntype Disposition = 'dismal' | 'hopeful' | 'propitious' | 'roseate'\ntype Mind = {\n  insight: Insight\n  depth: Depth\n  education: Education\n  disposition: Disposition\n}\n\nexport const createMind = (): Mind => {\n  const insight: Insight = sample([ 'dense', 'intuitive', 'incisive', 'brilliant' ])\n  const depth: Depth = sample([ 'superficial', 'substantial', 'profound', 'inscrutable' ])\n  const education: Education = sample([ 'unlettered', 'literate', 'tutored', 'well-read' ])\n  const disposition: Disposition = sample([ 'dismal', 'hopeful', 'propitious', 'roseate' ])\n  return { insight, depth, education, disposition }\n}\n\ntype Wit = 'slow' | 'clever' | 'biting' | 'savage'\ntype Empathy = 'sadistic' | 'generous' | 'benevolent' | 'selfless'\ntype Integrity = 'uncertain' | 'sound' | 'solid' | 'incorruptible'\ntype Beauty = 'ugly' | 'fair' | 'radiant' | 'resplendent'\ntype Soul = {\n  wit: Wit\n  empathy: Empathy\n  integrity: Integrity\n  beauty: Beauty\n}\n\nexport const createSoul = (): Soul => {\n  const wit: Wit = sample([ 'slow', 'clever', 'biting', 'savage' ])\n  const empathy: Empathy = sample([ 'sadistic', 'generous', 'benevolent', 'selfless' ])\n  const integrity: Integrity = sample([ 'uncertain', 'sound', 'solid', 'incorruptible' ])\n  const beauty: Beauty = sample([ 'ugly', 'fair', 'radiant', 'resplendent' ])\n  return { wit, empathy, integrity, beauty }\n}\n\n// type Category = BasicEntity\n// type Item = Entity<Category> & {}\n// type Event = BasicEntity\n// type Incident = Entity<Incident>\n\n// export type Trait = { id: number, name: string, rank: 0 | 1 | 2 | 3 | 4 | 5 }\n\nexport type Person = Individual<Moiety> & {\n  body: Body\n  mind: Mind\n  soul: Soul\n\n\n  // ie within my moiety, I am (thought of as)...\n  // rank: 'commoner' | 'wellborn'\n  // title?: string\n  // reputation: 'unknown' | 'worthy' | 'adored' | 'revered'\n\n  // individually...\n  things: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n  // stats: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n\n  currency: number\n  traits: ManageStocks // IList<Trait>\n  // memory: List<Event>\n  // philosophy?: Ideology\n  // destiny: 'doomed' | 'commonplace' | 'exceptional' | 'free'\n}\n\nconst personId = new Sequence()\nconst human: Species = { id: -1, name: 'Human Being', size: 'medium' }\nexport const createPerson = (name: string, moiety: Moiety): Person => {\n\n  const inventory = new Stocks<any>(`${name}'s Things`)\n  const traits = new Stocks<any>(`${name}'s Traits`)\n  // const state = new Stocks<any>(`${name}'s State`)\n    // personAttrs.things = inventory.manageAll()\n  return {\n    id: personId.next,\n    kind: moiety,\n    // kind: createMoiety()\n    name,\n    age: 0,\n    body: createAnimal(name, human),\n    mind: createMind(),\n    soul: createSoul(),\n    // rank: 'commoner',\n    // reputation: 'unknown',\n    currency: 0,\n    things: inventory.manageAll(),\n    traits: traits.manageAll()\n    // stats: state.manageAll()\n    // things: new M\n  }\n\n}\n\n// const person = (): Person => {\n//   const newPerson: Person = {\n//     id: personId.next()\n//   }\n//   return newPerson\n// }\n\nexport type Recipe = BasicEntity & {\n  produces: { [resourceName: string]: number }\n  consumes?: { [resourceName: string]: number }\n  requiresMachine?: string\n}\n\nexport type Machine = BasicEntity\n\n// export type Task = BasicEntity & {\n//   machine?: string\n//   recipe: string\n// }\n\n// type ManageList = {}\n\nexport type ManageStocks = {\n  add: (amount: number, name: string) => void,\n  remove: (amount: number, name: string) => void,\n  count: (name: string) => number,\n  list: () => any[]\n}\n\nexport type ManageStock<T> = {\n  add: (amount: number) => void,\n  remove: (amount: number) => void,\n  count: number,\n  item: T\n}\n\nexport type ManagePopulation<T> = {\n  count: number\n  birth: (name: string) => T\n  death: (name: string) => T\n  add: (amount: number) => T[]\n  remove: (amount: number) => T[]\n}\n\nexport type ManagePopulationRegistry<T> = {\n  lookup: (name: string) => ManagePopulation<T>\n}\n\n// todo rename\nexport interface EvolvingStocks {\n  [key: string]: ManageStocks\n}\nexport type TimeEvolution = (evolution: EvolvingStocks, ticks: number) => void\n\nexport type StepResult = {\n  changed: { \n    [groupName: string]: { [elementName: string]: number }\n  }\n}\n\n// todo move these model/sim things somewhere else???\nexport type Action = { id: number, name: string, act: Function }\nexport type Policy = { id: number, name: string, manage: Function }\n","import { isString } from \"./utils/isString\";\nimport { boundMethod } from \"autobind-decorator\";\nimport { Entity } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass SetHelper {\n  static first<T>(set: Set<T>): T { return set.values().next().value }\n}\n\n// a collection of named individuals...\nconst populationIds: Sequence = new Sequence()\nexport class Population<Specie, Dividual extends Entity<Specie>> {\n  public id = populationIds.next\n  private ids: Sequence = new Sequence()\n  constructor(\n    public name: string,\n    public species?: Specie,\n    protected individuals: Set<Dividual> = new Set(),\n  ) {}\n\n  list() { \n    const theList: Dividual[] = []\n    this.individuals.forEach(individual => theList.push(individual))\n    return theList;\n  }\n  get count() { return this.individuals.size }\n  get first() { \n    return SetHelper.first(this.individuals)\n   }\n  public lookup(name: string): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.name === name) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with name '${name}' in the population of ${this.name}`)\n  }\n\n  @boundMethod\n  public lookupById(id: number): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.id === id) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with id ${id} in the population of ${this.name}`)\n  };\n\n  public birth(name: string = `${this.name} ${this.count}`): Dividual {\n    const newborn = this.create(name)\n    return newborn\n  }\n\n  @boundMethod\n  public death(name?: string): Dividual {\n    if (name) {\n      const doomed = this.destroy(name)\n      if (doomed) {\n        return doomed\n      }\n    } else {\n      const doomed = this.first\n      if (doomed) {\n        this.destroy(doomed.name)\n        return doomed\n      }\n    }\n    throw new Error(\"Population already empty!\")\n  }\n\n  public add(amount: number) {\n    const newborns = []\n    for (let i = 0; i < amount; i++) {\n      newborns.push(this.birth())\n    }\n    return newborns\n  }\n\n  public remove(amount: number) {\n    const doneFor = []\n    for (let i = 0; i < Math.min(this.count, amount); i++) {\n      doneFor.push(this.death(this.first.name))\n    }\n    return doneFor\n  }\n\n  protected build(attrs: any) {\n    let name = null;\n    let attributes: Partial<Dividual> = {};\n    // console.log(attrs)\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    \n    const id = this.ids.next; //Math.max(0, ...this.ids) + 1;\n    const theIndividual: Dividual = { id, name, ...attributes } as unknown as Dividual;\n    return theIndividual;\n  }\n\n\n  public create(name: string): Dividual;\n  public create(attrs: Partial<Dividual>): Dividual;\n  @boundMethod\n  public create(attrs: any) {\n    const theIndividual: Dividual = this.build(attrs)\n    this.individuals.add(theIndividual);\n    return theIndividual;\n  }\n\n  public destroy(name: string): Dividual;\n  @boundMethod\n  public destroy(name: string) {\n    const theIndividual: Dividual = this.lookup(name)\n    this.individuals.delete(theIndividual);\n    return theIndividual;\n  }\n\n  get report() {\n    return Object.fromEntries(this.list().map(individual => {\n      return [individual.id, individual.name];\n    }))\n  }\n}\n","import { List, Map } from '../collections';\nimport { Recipe, Moiety, Person, ManageStocks, createPerson, createMoiety } from \"./types\";\nimport { Population } from \"./Population\";\nimport { Collection } from \"./Collection\";\nimport { boundMethod } from 'autobind-decorator';\n\nexport class Community extends Population<Moiety, Person> {\n  moieties: List<Moiety> = new List<Moiety>();\n  obscured: boolean = false // don't display details\n   \n  public recipes = new Collection<Recipe>();\n  public jobs = new Map<Person, Recipe>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  );\n\n  public inventories = new Map<Person, ManageStocks>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  )\n\n  get report(): { [personName: string]: string; } {\n    const entries = this.list()\n      .map(person => [person.id, (this.jobs.get(person) || {name: '?'}).name]);\n    return Object.fromEntries(entries);\n  }\n\n  // okay if we need to override create + build inventories let's do it ??\n  public create(name: string): Person;\n  public create(attrs: Partial<Person>): Person;\n  @boundMethod\n  public create(attrs: any) {\n    const personAttrs = super.build(attrs);\n    const { name, age } = personAttrs;\n    const person: Person = createPerson(name, createMoiety(`${name}'s Gens`)) //, this.species)\n    person.age = age\n    this.individuals.add(person)\n    return person\n  }\n\n  // people have inventories...\n  // and maybe they've declared what they want\n\n  // measureTime(time: number): HumanCalendar {}\n\n  // trade({ resources })\n\n  work({ resources }: { resources: { add: Function; remove: Function; count: Function; }; }): void {\n    const { report } = this.jobs;\n    Object.entries(report).forEach(([_workerName, recipe]: [string, Recipe]) => {\n      this.produce(recipe, resources);\n    });\n  }\n  \n  private produce(recipe: Recipe, resources: { add: Function; remove: Function; count: Function; }) {\n    if (this.mayProduce(recipe, resources)) {\n      if (recipe.consumes) {\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          resources.remove(amount, resource);\n        });\n      }\n      Object.entries(recipe.produces).forEach(([resource, amount]) => {\n        resources.add(amount, resource);\n      });\n    }\n  }\n\n  private mayProduce(recipe: Recipe, resources: { count: Function; }) {\n    let mayProduce = true;\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (resources.count(resource) < amount) {\n          mayProduce = false;\n        }\n      });\n    }\n    return mayProduce;\n  }\n\n}\n","import { Substance, Machine, Animal, Species, Action, Policy, Moiety, Person } from \"../types\"\nimport { Stocks } from \"../Stocks\"\nimport { Registry } from \"../Registry\"\nimport { Simulation } from \"./Simulation\"\nimport { IModel } from \"./IModel\"\nimport { Collection } from \"../Collection\"\nimport { Community } from \"../Community\"\nimport { Population } from \"../Population\"\n\ntype Fauna = Population<Species, Animal>\nexport class Model extends Simulation implements IModel  {\n  tracking = [ 'animals', 'resources' ]\n\n  public people = new Registry<Moiety, Person, Community>('people', Community)\n  public resources = new Stocks<Substance>('resources')\n  public machines  = new Stocks<Machine>('machines')\n  public animals   = new Registry<Species, Animal, Fauna>('wildlife', Population)\n\n  reset() {\n    this.resources.clear()\n    this.machines.clear()\n    this.animals.clear()\n    this.people.clear()\n    this.dynamics.clear()\n  }\n\n  // measurements\n  public metrics: { [name: string]: () => number } = {}\n\n  // interactive elements\n  public actions: Collection<Action> = new Collection<Action>()\n  public policies: Collection<Policy> = new Collection<Policy>()\n\n  send(actionName: string, args: any): void {\n    const action = this.actions.lookup(actionName)\n\n    if (action) {\n      action.act(args)\n    } else {\n      throw new Error(`No such action ${actionName}`)\n    }\n  }\n\n  currentPolicy: Policy | undefined\n  choose(policyName: string): void {\n    // console.log(\"[Model.choose]\", policyName)\n    const policy = this.policies.lookup(policyName)\n    if (policy) {\n      this.currentPolicy = policy\n    } else {\n      throw new Error(`No such policy ${policyName}`)\n    }\n  }\n\n  public step() {\n    if (this.currentPolicy) {\n      // console.log(\"MANAGING\", { policy: this.currentPolicy })\n      this.currentPolicy.manage()\n    }\n    return super.step()\n  }\n}\n\nexport default Model;\n","import { prettyAmount } from \"../utils/prettyAmount\";\n\nexport function presentItem(deltas?: { [elementName: string]: number; }) {\n  return ({ name, amount }: { name: string; amount: number; }) => {\n    const delta = deltas && deltas[name];\n    return <li key={name} title={name} className='Item'>\n      <span className='Title' data-testid='Name'>{name}</span>\n      <span data-testid='Count'>\n        {prettyAmount(amount)}\n      </span>\n      <span data-testid='Delta'>\n        {delta}\n      </span>\n    </li>;\n  };\n}\n","export function Tile({ children, title }: { children?: React.ReactNode; title: string; }) {\n  return <div className='Tile' title={title}>\n    <h5 className='Title'>{title}</h5>\n    {children}\n  </div>;\n}\n","import { Tile } from \"./Tile\";\nimport { Community } from \"../Community\";\nimport { presentIndividual } from \"./presentIndividual\";\n\n\nexport function presentCommunity(community: Community) {\n  return <Tile title={community.name} key={community.id}>\n    <ul aria-label='People'>\n      {community.obscured ? community.list().map(individual => <li key={individual.id}>{individual.name}</li>)\n                          : community.list().map(presentIndividual(community.report))}\n    </ul>\n  </Tile>;\n}\n","import { ManageStocks } from \"../types\";\n\n\nexport function presentIndividual(work: { [key: number]: string; }) {\n  return ({ id, name, things, traits }: {\n    id: number;\n    name: string;\n    things: ManageStocks;\n    traits: ManageStocks;\n  }) => {\n    const itemNames = things.list().map(thing => thing.name);\n    return <li key={id} title={name} className='Item'>\n      <div className='Title' data-testid='Name'>{name}</div>\n      {work[id] && work[id] !== '?' && <span data-testid='Status'>{work[id]}</span>}\n      {itemNames.length > 0 && <div className='Subitems' data-testid='Inventory'>\n        <ul>\n          {itemNames.sort((a,b) => a > b ? 1 : -1).map(it => <li key={it} style={{\n              ...(things.count(it) === 0 ? { display: 'none' } : {})\n            }}>\n            {it} <span data-testid={it}  className='Count'>{things.count(it)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      {traits.list().length > 0 && <div className='Traits' data-testid='Trait Ranks'>\n        <ul>\n          {traits.list().map(trait => <li key={trait.id} style={{\n              ...(traits.count(trait.name) === 0 ? { display: 'none' } : {})\n            }}>\n            {trait.name} <span data-testid={trait.name}>{traits.count(trait.name)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n    </li>;\n  };\n}\n","import { Machine, Moiety, Person } from \"../types\";\nimport { LastDelta } from \"../../ModelPresenter\";\nimport { presentItem } from \"../Model/presentItem\";\nimport './View.css';\nimport { Tile } from \"./Tile\";\nimport { presentCommunity } from \"./presentCommunity\";\nimport { Population } from \"../Population\";\nimport { Community } from \"../Community\";\n\nexport type ModelViewProps = {\n  modelName: string;\n  items: { name: string; amount: number; }[];\n  animals: { name: string; amount: number }[];\n  communities: Population<Moiety, Person>[];\n  machines: Machine[];\n  lastChanges: LastDelta;\n  metrics: { [name: string]: number }; //[ { name: string, value: number} ];\n}\n\nexport function View({\n  modelName,\n  items,\n  // individuals,\n  communities,\n  machines,\n  animals,\n  lastChanges,\n  metrics,\n  // work\n}: ModelViewProps) {\n  const folks = (communities as Community[]).map(presentCommunity)\n  // console.log({ community: communities[0].list() })\n  return <div className='Model'>\n    <h4 aria-label='Model Title' style={{display: 'none'}}>{modelName}</h4>\n    {items.length > 0 && (<Tile title='Items'>\n      <ul aria-label='Resources'>\n        {items.map(presentItem(lastChanges.resources))}\n      </ul>\n    </Tile>)}\n    {animals.length > 0 && (\n      <Tile title='Animals'>\n        <ul aria-label='Animals'>\n          {animals.map(presentItem(lastChanges.animals))}\n        </ul>\n      </Tile>)}\n      {communities.length > 0 && <div title='Individuals' style={{display: 'flex'}}>{folks}</div>}\n    {machines.length > 0 && <Tile title='Machines'>\n      <ul>\n        {machines.map(({ name }) => <li key={name}>{name}</li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(metrics).length > 0 && <Tile title='Metrics'>\n      <ul>\n        {Object.entries(metrics).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Count'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n  </div>;\n}\n","import { Model } from './Model';\nimport { IModel } from './IModel';\nimport { View } from '../View/View';\nexport { Model, View as ModelView }\nexport type { IModel }\nexport default Model\n","// import { IAssembly } from './ecosphere/Assembly';\nimport { ModelView } from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\n\nexport type LastDelta = { [group: string]: { [element: string]: number }}\n\ntype ModelPresenterProps = {\n  model: IModel\n  step: Function \n  send: Function\n  choose: Function\n  lastChanges: LastDelta\n}\n\nconst view = (model: IModel, lastChanges: LastDelta) => {\n  const { actions, resources, people, machines, animals, metrics } = model;\n\n  const props = {\n    modelName: model.name,\n    items: resources.report,\n    communities: people.populationList, //.populations,\n    // individuals: people.list(),\n    // work: people.report,\n    machines: machines.list(),\n    animals: animals.report,\n    actions: actions.list(),\n    metrics: Object.fromEntries(\n      Object.entries(metrics).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    lastChanges,\n  }\n\n  return props\n}\n\nexport function ModelPresenter({ model, send, choose, step, lastChanges }: ModelPresenterProps) {\n  return <>\n    <div aria-label='View'>\n      <ModelView {...view(model, lastChanges)} />\n    </div>\n\n    <div aria-label='Controls'>\n      <span title='Run' style={{display: 'none'}}>\n        <button onClick={() => step(true)}>Step</button>\n      </span>\n\n      <span title='Actions'>\n        {model.actions.list().map(({ name }) => <button title={name} key={name} onClick={() => send(name)}>\n          {name}\n        </button>)}\n      </span>\n\n      {model.policies.count > 0 && <div className='Policy' title='Policies'>\n        {/* <h5>Policies</h5> */}\n        {model.policies.list().map(({ name }) => <label key={name}><input\n          type='radio'\n          checked={model.currentPolicy?.name === name}\n          title={name}\n          key={name}\n          onChange={() => choose(name)}\n        />\n        {name}\n        </label>)}\n      </div>}\n    </div>\n  </>;\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { IAssembly } from './ecosphere/Assembly';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { LastDelta } from './ModelPresenter';\nimport { isModel } from './ModelSelector';\n\nexport type ModelAPI = {\n  model: IModel | IAssembly\n  setModel(model: IModel | IAssembly): void\n  step: Function,\n  lastChanges: LastDelta,\n  send: (actionName: string, args: any) => void,\n  choose: (policyName: string, args: any) => void,\n  setDelay: (milliseconds: number) => void\n}\n\n// ticks per sec\n// const ticksPerSecond = (n: number) => n > 0 ? Math.floor(1000 / n) : 1\n// const speeds = {slow: 10, fast: 25, faster: 50, fastest: 80};\nexport function useModel(initialModel: IModel | IAssembly): ModelAPI { //model: IModel = new Model('Hello World')): ModelAPI {\n  const [model, setModel] = useState(initialModel) //new Model('Hello World'))\n\n  const [lastChanges, setLastChanges] = useState({} as LastDelta)\n  const isTest = process.env.NODE_ENV === 'test'\n  const [delay, setDelay] = useState(isTest ? 5000 : 2) //ticksPerSecond(speeds.slow));\n\n  const [shouldStep, step] = useState(false);\n  const [shouldSend, doSend] = useState(false);\n  const [shouldManage, doManage] = useState(false)\n\n  const performStep = () => { step(true); };\n  const [command, setCommand] = useState('')\n  const [policy, setPolicy] = useState('')\n\n  useEffect(() => {\n    if (shouldSend) {\n      if (command && isModel(model)) { model.send(command, {}) }\n      doSend(false)\n    }\n  }, [command, model, shouldSend]);\n\n  useEffect(() => {\n    if (shouldManage) {\n      if (policy && isModel(model)) { model.choose(policy, {}) }\n      doManage(false)\n    }\n  }, [policy, model, shouldManage]);\n\n  const performSend = (actionName: string, args: any) => {\n    setCommand(actionName)\n    doSend(true)\n  }\n\n  const performChoose = (policyName: string, args: any) => {\n    // console.log(\"CHOOSE\", policyName)\n    setPolicy(policyName)\n    doManage(true)\n  }\n\n  useEffect(() => {\n    if (shouldStep && isModel(model)) {\n      let { changed } = model.step();\n      step(false);\n      setLastChanges(changed);\n    }\n  }, [shouldStep, model]);\n\n  useInterval(() => step(true), delay); \n\n  return {\n    model,\n    step: performStep,\n    lastChanges: lastChanges as LastDelta,\n    send: (actionName: string, args: any) => performSend(actionName, args), \n    choose: (policyName: string, args: any) => performChoose(policyName, args),\n    setDelay,\n    setModel,\n  };\n}\n\nfunction useInterval(callback: any, delay: number) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      // @ts-ignore\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { IAssembly } from './ecosphere/Assembly';\nimport Model from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelPresenter } from './ModelPresenter';\nimport { useModel } from './useModel';\n\nexport const isModel = (maybeModel: IModel | IAssembly): maybeModel is IModel => {\n  return maybeModel instanceof Model;\n}\n\nconst AssemblyPresenter: React.FC<{ assembly: IAssembly }> = ({ assembly }) => {\n  return <>{assembly.models.items.map((theModel: IModel) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { step, send, choose, lastChanges, model } = useModel(theModel);\n    return <>\n    <h4>{theModel.name}</h4>\n    <ModelPresenter\n             key={model.name}\n             step={step}\n             send={send}\n             model={model as IModel}\n             choose={choose}\n             lastChanges={lastChanges}\n           />\n           </>\n  })}</>\n}\n\nexport function ModelSelector({ initialModel, models }: {\n  initialModel: IModel;\n  models: (IModel | IAssembly)[];\n}) {\n  const { step, send, choose, lastChanges, model, setModel } = useModel(initialModel);\n  return <>\n    <Dropdown\n      options={models.map(model => model.name)}\n      onChange={({ value }) => {\n        const theModel = models.find((model: IModel | IAssembly) => model.name === value);\n        if (theModel) { setModel(theModel); }\n      }}\n      value={model.name}\n      placeholder=\"Select a model\" />\n    {isModel(model) ? <ModelPresenter\n                       step={step}\n                       send={send}\n                       model={model}\n                       choose={choose}\n                       lastChanges={lastChanges} />\n                    : <AssemblyPresenter assembly={model} />}\n  </>;\n}\n","// import Model from \"../ecosphere/Model\"\n\nimport Model from \"../ecosphere/Model\"\nimport { Person } from \"../ecosphere/types\"\n\nconst give = (recipient: Person, supplier: Person, n: number, item: string) => {\n  supplier.things.remove(n, item)\n  recipient.things.add(n, item)\n}\n\nconst world = new Model('Avernus')\nconst { resources, animals, people } = world\nconst folks = people.create('Townspeople')\nconst { recipes, jobs } = folks\n\nanimals.create('Fish')\n// resources.create('Fish')\n\n\n// const king = people.create('Maurice')\nconst miner = folks.create('Goldstrom')\nconst minter = folks.create('Octavius')\nconst smelter = folks.create('Smeltmore')\n// //const sheriff = people.create('Donald')\n// const claydigger = people.create('Bartlett')\n// const artist = people.create('Joseph')\nconst fisherman = folks.create('Harold')\n// const chef = people.create('Jethro')\n// const merchant = people.create('Reginald')\n\n// //set inventory\n// merchant.things.add(50, 'Gold Coin')\n\n\n// //create global resources\n// animals.create('Swimming Fish')\n// animals.add(500, 'Swimming Fish')\nresources.create('Gold Ore')\nresources.create('Gold Deposit')\nresources.create('Gold Bar')\nresources.create('Gold Coin')\n\nresources.add(100000000, 'Gold Deposit')\n// resources.create('Clay Deposit')\n// resources.add(10000, 'Clay Deposit')\n\n//create produced goods\n\n\n\n//jobs\n\n// const kingGold = recipes.create({\n//   name: 'Taking Gold',\n//   produces: { 'King Gold': 1 },\n//   consumes: { 'Gold Coin': 1 },\n// })\n\nconst mineGold = recipes.create({\n  name: 'Mining Gold',\n  produces: { 'Gold Ore': 1 },\n  consumes: { 'Gold Deposit': 10 },\n})\n\nconst smeltGold = recipes.create({\n  name: 'Smelt Gold',\n  produces: { 'Gold Bar': 1 },\n  consumes: { 'Gold Ore': 10 }\n})\n\nconst mintCoin = recipes.create({\n  name: 'Minting Gold Coins',\n  produces: { 'Gold Coin': 10 },\n  consumes: { 'Gold Bar': 1 },\n})\n\n// const digClay = recipes.create({\n//   name: 'Digging Clay',\n//   produces: { 'Clay Brick': 1 },\n//   consumes: { 'Clay Deposit': 1 },\n// })\n\n// const castPot = recipes.create({\n//   name: 'Casting Pottery',\n//   produces: { 'Fine Pottery': 1 },\n//   consumes: { 'Clay Brick': 1 },\n// })\n\n// const catchFish = recipes.create({\n//   name: 'Catching Fish',\n//   produces: { 'Caught Fish': 1 },\n//   consumes: { 'Swimming Fish': 1 },\n// })\n\n// const cookFish = recipes.create({\n//     name: 'Cooking Fish',\n//     produces: { 'Cooked Fish': 1 },\n//     consumes: { 'Caught Fish': 1 },\n// })\n\n//Set Jobs\njobs.set(miner, mineGold)\njobs.set(minter, mintCoin)\njobs.set(smelter, smeltGold)\n// jobs.set(claydigger, digClay)\n// jobs.set(artist, castPot)\n// jobs.set(fisherman, cookFish)\n// jobs.set(chef, cookFish)\n\nworld.evolve(({ resources, animals }, t) => {\n  // animals.add(1, 'Swimming Fish')\n\n  folks.work({ resources })\n\n  // employment\n  if (t % 10 === 0) {\n    const thePeople = [miner, minter, smelter]\n    thePeople.forEach(person => {\n      person.things.add(1, 'Gold Coin')\n      resources.remove(1, 'Gold Coin')\n    })\n  }\n\n  // taxation\n  // if (t % 1000 === 0) {\n  //   resources.remove()\n  // }\n\n  // wildlife hunting + fishing\n  if (t % 10 === 0) { // \n    // huntWildlife('Fish')\n    fisherman.things.add(1, 'Fish')\n    animals.remove(1, 'Fish')\n  }\n\n  // trade\n  const thePeople = [miner, minter, smelter]\n  // const theGoods = ['Fish', ]\n  thePeople.forEach(person => {\n    if (fisherman.things.count('Fish') > 3 && person.things.count('Gold Coin') > 5) {\n      give(fisherman, person, 5, 'Gold Coin')\n      give(person, fisherman, 1, 'Fish')\n    }\n  })\n})\n\n\nexport {world as Avernus}\n","import { Sequence } from \"../../collections\";\nimport { Person } from \"../../ecosphere/types\";\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\";\nimport { sample } from \"../../ecosphere/utils/sample\";\n\nexport class MonsterManual {\n  basicCreatures = {\n    'Null Index': { hp: 1, evasion: 95 },\n    'Dancing Light': { hp: 4, evasion: 1 },\n    'Crystalline Fog': { hp: 6, evasion: 1, reflect: 10 },\n    'Floating Light': { hp: 8, evasion: 1, speed: 1 },\n\n    'Mobile Wisp': { hp: 10, strength: 1, speed: 1, evasion: 1 },\n\n    // Rat: { hp: 14, strength: 1, speed: 3, evasion: 1 },\n    // Bat: { hp: 18, strength: 2, speed: 2, evasion: 1, },\n    // Snake: { hp: 15, strength: 3, speed: 2, evasion: 2, },\n    // Blob: { hp: 24, strength: 2, speed: 1, evasion: 1 },\n    // Bear: { hp: 30, strength: 3, speed: 2, evasion: 1 },\n  };\n\n  challengingCreatures = {\n    Gremlin: { hp: 32, speed: 1, counter: 1, evasion: 1 },\n    Goblin: { hp: 40 },\n    Kobold: { hp: 50, strength: 1, speed: 2 },\n    Orc: { hp: 64, strength: 2, speed: 1, counter: 1 },\n    Ghost: { hp: 70, 'magic damage': 1, evasion: 1, counter: 1, speed: 1, absorb: 1, defense: 1 },\n    Rogue: { hp: 74, strength: 2, speed: 1, 'bonus damage': 2, evasion: 2, counter: 2 },\n    Troll: { hp: 83, strength: 2, speed: 2, regen: 1, counter: 1 },\n    Giant: { hp: 95, strength: 2, speed: 2, defense: 1, absorb: 1 },\n  };\n\n  bosses = {\n    Priest: { hp: 140, heal: 4, 'holy damage': 6, defense: 6, 'holy defense': 3, evasion: 2 },\n    Vampire: { hp: 280, strength: 2, speed: 3, 'magic damage': 1, absorb: 2, evasion: 2 },\n    Drake: { hp: 400, strength: 3, speed: 2, regen: 2, 'magic damage': 2, evasion: 2 },\n    Lich: { hp: 540, strength: 4, speed: 6, defense: 6, 'magic damage': 6, evasion: 6 },\n  };\n\n  extraplanar = {\n    Demon: { hp: 366, strength: 3, speed: 6, counter: 6, evasion: 6 },\n    Angel: { hp: 299, evasion: 2, absorb: 2, regen: 2, counter: 9, defense: 9, 'magic defense': 2, 'holy damage': 9 },\n    Archdemon: { hp: 666, absorb: 6, strength: 6, speed: 6, defense: 6, evasion: 6, 'magic damage': 6, 'holy damage': 16 },\n    Dracolith: { hp: 747, strength: 7, 'magic damage': 7, speed: 7, defense: 7, evasion: 7, counter: 7 },\n    Archangel: { hp: 999, absorb: 9, strength: 9, speed: 9, defense: 9, evasion: 9, 'magic defense': 9, 'holy defense': 9, 'holy damage': 99 },\n\n    'Floating Sigil': { hp: 1234, speed: 10, defense: 10, counter: 10 },\n    'Astral Filament': { hp: 12345, strength: 15, absorb: 10, evasion: 5, counter: 1, regen: 1 },\n    'Essence Sphere': { hp: 123456, 'magic damage': 12, 'holy damage': 12, 'bonus damage': 12 },\n  };\n\n  dragons = {\n    // ...and dragons :)\n    'Green Dragon': { hp: 900, strength: 5, speed: 8, defense: 4, 'magic damage': 16, evasion: 24 },\n    'Red Dragon': { hp: 1900, strength: 7, speed: 9, defense: 14, 'magic damage': 26, evasion: 34 },\n    'Blue Dragon': { hp: 2900, strength: 9, speed: 11, defense: 24, 'magic damage': 36, evasion: 44 },\n    'Golden Dragon': { hp: 3900, strength: 11, speed: 15, defense: 34, 'magic damage': 66, evasion: 55 },\n    'Black Dragon': { hp: 5900, strength: 11, speed: 15, defense: 34, 'magic damage': 66, evasion: 55 },\n    'Primordial Dragon': { hp: 395919, strength: 30, speed: 30, defense: 30, 'magic damage': 30, evasion: 30 },\n  };\n\n  rareCreatures = {\n    'Eldritch Lich': { hp: 2500, strength: 8, speed: 6, defense: 4, 'magic damage': 13, evasion: 5 },\n    'Primordial Vampire': { hp: 3800, strength: 3, speed: 10, defense: 10, 'holy defense': 10, 'magic defense': 10, 'magic damage': 3, evasion: 3, absorb: 4 },\n    Leviathan: { hp: 9999, strength: 10, speed: 10, defense: 25, evasion: 25, counter: 25 },\n    ...this.extraplanar,\n    ...this.dragons\n  };\n\n\n  bestiary: { [monster: string]: { [attr: string]: number; }; } = {\n    ...this.basicCreatures,\n    ...this.challengingCreatures,\n    ...this.rareCreatures,\n    ...this.bosses,\n  };\n\n  basicSubtypes = {\n    Hostile: { strength: 1 }, Intimidating: { strength: 2 },\n    Nimble: { speed: 1 }, Quick: { speed: 2 },\n    Timid: { evasion: 1 }, Spry: { evasion: 2 }, Elusive: { evasion: 3 },\n    Vigilant: { regen: 1 }, Relentless: { regen: 2 },\n    Armored: { defense: 1 }, Hardened: { defense: 2 },\n    Benevolent: { heal: 1 }, Protective: { heal: 2 },\n    Snarling: { counter: 1 },\n\n    Voracious: { hp: 5, strength: 1, speed: 1 },\n    Vicious: { hp: 10, strength: 1, defense: 1 },\n    Vexatious: { hp: 15, counter: 1, evasion: 1 },\n\n    Arrogant: { hp: -5, evasion: 1, counter: 1, speed: 1 },\n\n    Emboldened: { 'bonus damage': 1 },\n    Adventurous: { hp: 10, 'bonus damage': 2 },\n  };\n\n  rareSubtypes: { [type: string]: { [attr: string]: number; }; } = {\n    Questing: { hp: 20, 'bonus damage': 3 },\n\n    Silvered: { reflect: 1 }, Mirrored: { reflect: 2 },\n    Aggressive: { strength: 3 }, Dominating: { strength: 4 },\n    Swift: { speed: 3 }, Accelerated: { speed: 4 },\n    Reluctant: { evasion: 5 }, Hidden: { evasion: 10 }, Invisible: { evasion: 15 },\n    Resurrecting: { regen: 3 }, Regenerating: { regen: 4 },\n    Fortified: { defense: 3 },\n    Angelic: { heal: 3 },\n    Prismatic: { reflect: 3 },\n    // Hardened: { defense: 3, strength: 1, evasion: 1 },\n    Pugnacious: { 'bonus damage': 1, evasion: 1, counter: 1 },\n\n    // Elusive: { evasion: 1, defense: 1, regen: 1 },\n    Augmented: { strength: 1, 'magic damage': 1, 'bonus damage': 1 },\n    Skillful: { defense: 1, strength: 1, speed: 1, evasion: 1, counter: 1 },\n    Skeletal: { hp: -1, evasion: 2, absorb: 1, regen: 1 },\n    Undead: { hp: -1, strength: 1, regen: 1, absorb: 1, speed: 1, evasion: 1 },\n    Zombie: { hp: -2, evasion: 1, regen: 2, strength: 1 },\n    Favored: { hp: 1, strength: 2, speed: 2, 'magic damage': 1, regen: 1, evasion: 1 },\n    Fiendish: { hp: 2, strength: 3, speed: 3, defense: 1, regen: 1, evasion: 2 },\n    Fierce: { hp: 2, strength: 4, speed: 4, defense: 2, absorb: 2, evasion: 3, },\n    Opalescent: { hp: 2, reflect: 4, absorb: 2, evasion: 2, counter: 2, heal: 2 },\n    Cruel: { hp: 3, strength: 5, speed: 5, 'magic damage': 3, 'bonus damage': 2, absorb: 3, regen: 1, evasion: 4 },\n\n    Vortex: { hp: 1, reflect: 10, absorb: 10, evade: 50, counter: 50 },\n    Shadow: { hp: 2, 'magic damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Luminous: { hp: 3, 'holy damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Defiant: { hp: 1, 'bonus damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Devious: { hp: 2, evasion: 2, counter: 20, absorb: 20 },\n    Draconic: { hp: 3, 'magic damage': 1, counter: 20, absorb: 20 },\n  };\n\n  subtypes: { [type: string]: { [attr: string]: number; }; } = {\n    Common: {},\n    Evasive: { evasion: 3, counter: 2 },\n    Retaliatory: { defense: 1, counter: 2 },\n    Inspired: { 'bonus damage': 1 },\n    Infused: { 'bonus damage': 2, 'magic damage': 1 },\n    Radiant: { 'holy damage': 1 },\n    Resplendent: { 'holy damage': 2, strength: 1, speed: 1 },\n    Heavy: { strength: 2, defense: 2 },\n    Titanic: { strength: 4, defense: 2 },\n    Unholy: { 'magic damage': 1, 'holy defense': 1 },\n    Blessed: { 'holy damage': 1, absorb: 1 },\n    Adept: { evasion: 1, counter: 1, defense: 1, strength: 1 },\n    ...this.basicSubtypes,\n    ...this.rareSubtypes,\n  };\n\n\n  perks: { [type: string]: { [attr: string]: number; }; } = {\n    Piercing: { hp: 15, strength: 1, defense: 1, evasion: 1, 'bonus damage': 1, },\n    Blessed: { hp: 15, absorb: 1, defense: 1, regen: 1, 'holy damage': 1, },\n    Enchanted: { hp: 15, defense: 1, evasion: 1 },\n    Clockwork: { hp: 15, defense: 1, speed: 2, evasion: 1 },\n    Phantasmal: { hp: 25, defense: 1, evasion: 4 },\n    Cosmic: { hp: 30, defense: 3, evasion: 3, strength: 3 },\n    Imperious: { hp: 40, defense: 4, 'magic damage': 3, speed: 3 },\n    // Obsidian: { hp: 15, defense: 1, speed: 2, evasion: 1 },\n    // Provocative: { hp: 50, defense: 5, evasion: 3, 'bonus damage': 4, 'magic damage': 3, speed: 3 },\n    // Challenging: { hp: 150, defense: 20, strength: 2, regen: 1, speed: 1, 'bonus damage': 5, evasion: 1 }\n  };\n  monsterIds = new Sequence();\n\n  difficulty = 1; // global multiplier on monster stats\n\n  generateBasicMonster(creature: Person) {\n    let base = sample(Object.keys(this.basicCreatures))\n    let type = 'Common'\n    creature.name = `${base} (${this.monsterIds.next})`;\n    // creature.things.add(5 + Math.floor(0.05 * cr * cr), 'hp')\n    const crFactor = 2\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.subtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n  }\n\n  generate(creature: Person, cr: number = 1) {\n    if (cr <= 3) { this.generateBasicMonster(creature); return }\n    // console.log(\"generate monster with cr \" + cr);\n    // const simpleCreatures = ['Snake', 'Blob', 'Bat', 'Wisp']\n    let base = sample(Object.keys(this.challengingCreatures)) //cr <= 10 ? sample(Object.keys(this.basicCreatures)) : sample(Object.keys(this.challengingCreatures));\n\n\n    let type = randomInteger(0, 20) > 12 ? sample(Object.keys(this.basicSubtypes)) : 'Common';\n\n    // all subtypes..\n    if (cr >= 20 && randomInteger(0, 20) > 19) { type = sample(Object.keys(this.subtypes)); }\n\n    // all bases\n    if (cr >= 25 && randomInteger(0, 20) > 19) { base = sample(Object.keys(this.bestiary)); }\n\n    const name = type === 'Common' ? base : [type, base].join(' ');\n    creature.name = `${name} (${this.monsterIds.next})`;\n    const adjustedCr = 0.005 * cr * cr;\n    creature.things.add(1 + cr + Math.floor(100 * adjustedCr), 'hp')\n\n    const crFactor = this.difficulty + adjustedCr * 2;\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.subtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    creature.things.add(creature.things.count('hp'), 'max hp');\n    if (cr >= 15) {\n      creature.things.add(randomInteger(1, cr/2), 'defense');\n      creature.things.add(randomInteger(1, cr/2), 'strength');\n    }\n    if (cr >= 25) {\n      creature.things.add(randomInteger(1, cr/2), 'evasion');\n      creature.things.add(randomInteger(1, cr/2), 'counter');\n    }\n    if (cr >= 35) {\n      creature.things.add(randomInteger(1, cr/2), 'magic damage');\n      creature.things.add(randomInteger(1, cr/2), 'chain chance');\n    }\n    if (cr >= 45) {\n      creature.things.add(randomInteger(1, cr/2), 'holy damage');\n      creature.things.add(randomInteger(1, cr/2), 'reflect');\n    }\n  }\n\n  generateBoss(creature: Person, cr: number = 1) {\n    const base = sample(Object.keys(this.bosses));\n    const type = sample(Object.keys(this.rareSubtypes));\n    const perk = sample(Object.keys(this.perks));\n    const name = [perk, type, base].join(' ');\n    creature.name = name; // `${name} (${this.monsterIds.next})`\n    const crFactor = this.difficulty + 0.01 * cr;\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.rareSubtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.perks[perk]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    creature.things.add(creature.things.count('hp'), 'max hp');\n  }\n}\n","import { Person } from \"../../ecosphere/types\";\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\";\nimport { sample } from \"../../ecosphere/utils/sample\";\n\nexport class PlayerHandbook {\n  // okay, i guess give them the class as a perk... then each level up we can check + bump one of the class\n  // nice to have: sick multi-classing\n  static characterClasses: { [name: string]: { attributes: { [attr: string]: number; }; traits: string[]; }; } = {\n    Fighter: {\n      attributes: {\n        hp: 24,\n        strength: 2,\n        defense: 1,\n        speed: 0,\n        'bonus damage': 0,\n        'chain chance': 0,\n        'gold per kill': 0,\n      },\n      traits: ['Fitness', 'Combat Veteran']\n    },\n    // Knight: { attributes: { hp: 15, strength: 2, defense: 2, counter: 0, 'max chain': 0, 'chain chance': 0 }, traits: ['Medic'] },\n    // Mage: { attributes: { 'magic damage': 2, 'magic defense': 1, 'holy defense': 0 }, traits: ['Focus'] },\n    // Cleric: { attributes: { heal: 1, 'holy damage': 0, 'holy defense': 0 }, traits: ['Holy Symbol'] },\n    // Monk: { attributes: { hp: 5, 'reflect': 0, defense: 1, 'magic defense': 0, 'hp per step': 0 }, traits: ['Faith'] },\n    // Thief: { attributes: { hp: 10, speed: 1, evasion: 1, counter: 1, 'gold per kill': 0 }, traits: ['Swiftness'] },\n  };\n\n  static attributes: { [attrGroup: string]: string[]; } = {\n    // basic: [\n    // ],\n    common: [\n      'max hp',\n      'xp per kill',\n      // 'gold per day'\n      'hp per victory',\n      // 'gold per day',\n      // 'hp per day', // 'gold per day'\n      // 'max hp', 'xp per victory', 'hp per day', 'gold per day', 'xp per li', \n    ],\n    uncommon: [\n      // 'xp per victory',\n      'hp per day',\n      'xp per day', //'gold per li'\n    ],\n    rare: [\n      'evasion',\n      'crit damage',\n      'xp per li',\n      'max chain', //'hp per step'\n    ],\n    epic: [\n      // 'xp per day', 'gold per step',\n      'counter',\n      'crit chance',\n      'xp per victory',\n    ],\n    legendary: [\n      'defense',\n      'strength',\n      // 'magic damage',\n      // 'holy damage',\n      // 'bonus damage',\n      // 'reflect',\n      // 'heal',\n      'damage to all',\n      'chain chance',\n    ],\n  };\n\n  // some perks benefits the effective value of a stat by adding % bonus per rank\n  static perkBenefits: { [perk: string]: { [attr: string]: number; }; } = {\n    'Cloaking Robe of Elvenkind': { 'magic damage': 0.05, 'magic defense': 0.5, evasion: 0.25, 'holy defense': 0.05 },\n    'Combat Veteran': { strength: 0.05, defense: 0.05, counter: 0.05, evasion: 0.05, 'crit damage': 0.05, 'bonus damage': 0.05, },\n    'Fine Raiment': { 'magic damage': 0.1, 'magic defense': 0.2, defense: 0.15, evasion: 0.1 },\n    'Holy Symbol': { 'holy damage': 0.5, 'holy defense': 0.15, heal: 0.1, regen: 0.1 },\n    'Royal Armorer': { defense: 0.5, 'holy defense': 0.25, 'magic defense': 0.25, evasion: 0.25 },\n    // Barbarian: { 'bonus damage': 0.5, 'crit damage': 0.05, strength: 0.15, 'chain chance': 0.1, 'max chain': 0.1 },\n    Brutality: { strength: 0.5, speed: 0.25, 'bonus damage': 0.25, 'max chain': 0.1 },\n    Counterweight: { counter: 0.5, evasion: 0.1, 'crit damage': 0.05, 'max chain': 0.1 },\n    Efferverscence: { regen: 0.25, counter: 0.25, 'crit damage': 0.25, 'holy defense': 0.25, 'max chain': 0.25 },\n    Efficacious: { counter: 0.1, evasion: 0.1, 'bonus damage': 0.1, strength: 0.1, defense: 0.1, 'magic defense': 0.1, heal: 0.1 },\n    Opalescence: { reflect: 0.2, absorb: 0.2, evasion: 0.2, defense: 0.2, regen: 0.2, heal: 0.2 },\n    Ethereal: { 'magic damage': 0.25, 'magic defense': 0.25, evasion: 0.5, defense: 0.25 },\n    Faith: { 'holy damage': 0.25, 'holy defense': 0.5, heal: 0.25, regen: 0.1 },\n    Finesse: { 'crit chance': 0.25, 'crit damage': 0.15, 'max chain': 0.05, 'chain chance': 0.1 },\n    Fitness: { strength: 0.1, defense: 0.1, speed: 0.1, evasion: 0.1, counter: 0.1, regen: 0.1 },\n    Fluidity: { 'crit chance': 0.1, 'crit damage': 0.1, evasion: 0.1, counter: 0.1, speed: 0.1 },\n    Dexterity: { defense: 0.25, 'magic defense': 0.1, speed: 0.1, evasion: 0.1, 'chain chance': 0.1 },\n    Precision: { speed: 0.1, 'crit damage': 0.25, evasion: 0.05, 'max chain': 0.1 },\n    Swiftness: { speed: 0.2, counter: 0.15, 'crit chance': 0.15, defense: 0.1 },\n    Rapidity: { speed: 0.5, counter: 0.1, 'crit damage': 0.25, evasion: 0.1 },\n    Medic: { heal: 0.5, regen: 0.1, absorb: 0.1, defense: 0.1 },\n    Vitality: { strength: 0.1, speed: 0.25, regen: 0.5, heal: 0.1 },\n    Whirlwind: { 'chain chance': 0.5, 'max chain': 0.5, 'damage to all': 0.5, 'bonus damage': 0.1 },\n    Focus: { 'magic damage': 0.5, 'magic defense': 0.25, 'holy damage': 0.1, 'holy defense': 0.5 },\n    Iridescence: { 'magic damage': 0.5, 'holy damage': 0.5, 'bonus damage': 0.5, 'damage to all': 0.5 },\n    Concentration: { 'magic defense': 0.25, 'holy defense': 0.5, defense: 0.1, evasion: 0.1, counter: 0.1 },\n    Salvation: { 'holy damage': 0.5, 'holy defense': 0.2, defense: 0.1, reflect: 0.1, absorb: 0.1 },\n  };\n\n  static perks: { [perkGroup: string]: string[]; } = {\n    common: [\n      'Fitness',\n      'Finesse',\n      'Rapidity',\n      'Precision',\n      'Medic',\n      'Focus', // +10% to magic dmg per rank\n    ],\n    uncommon: [\n      'Concentration',\n      'Swiftness',\n      'Fluidity',\n      'Faith',\n      'Combat Veteran',\n      'Efficacious', // small bonuses to many skills\n    ],\n    rare: [\n      'Dexterity',\n      // 'Barbarian',\n      'Brutality',\n      'Ethereal',\n      'Perspicuous',\n      'Vitality', // boost to regen\n    ],\n    epic: [\n      'Iridescence',\n      'Fine Raiment',\n      'Royal Armorer',\n      'Whirlwind', // bonus % to chain chance + damage to all\n    ],\n    legendary: [\n      'Salvation',\n      'Eternal Victory',\n      'Perfectionist',\n      'Effervescence', // decent bonuses to many skills\n      'Opalescence',\n    ]\n  };\n\n  static generate(hero: Person, characterClass: string) {\n    const baseStartingHp = 42;\n    hero.traits.add(1, characterClass)\n    hero.things.add(baseStartingHp, 'hp')\n    hero.things.add(randomInteger(1,4), 'strength')\n    hero.things.add(randomInteger(1,4), 'speed')\n    hero.things.add(randomInteger(1,4), 'evasion')\n    hero.things.add(randomInteger(1,4), 'counter')\n    const template = this.characterClasses[characterClass];\n    Object.keys(template.attributes).forEach(attr => {\n      const amount = template.attributes[attr]\n      hero.things.add(amount, attr)\n    });\n    (template.traits).forEach(trait => {\n      hero.traits.add(1, trait)\n    })\n    hero.things.add(2000, 'xp per li')\n    // hero.things.add(5, 'xp per kill')\n    // hero.things.add(1, 'gold per day')\n    hero.things.add(Math.floor(baseStartingHp * 0.75), 'hp per victory')\n    hero.things.add(Math.floor(baseStartingHp * 1.2), 'max hp')\n    hero.traits.add(3, 'Potion of Life')\n    hero.things.add(1, 'level')\n    for (let i=0; i<10; i++) {\n      this.levelUp(hero)\n    }\n  }\n\n  static levelUp(pc: Person) {\n    const attributeBoosts: { [key: string]: number; } = {\n      // basic: 13,\n      common: 5, // randomInteger(3, 5),\n      uncommon: 3, //randomInteger(2, 3),\n      rare: 2, //randomInteger(1, 2),\n      epic: 1, //randomInteger(0, 1),\n      legendary: randomInteger(0, 1),\n    };\n\n    Object.keys(this.attributes).forEach(rarity => {\n      for (let i = 0; i < attributeBoosts[rarity]; i++) {\n        const levelAttr = sample(this.attributes[rarity]);\n        const amount = 1; //randomInteger(1,2)\n        pc.things.add(amount, levelAttr);\n        console.log(`${levelAttr} improves by ${amount}`);\n      }\n    });\n\n    const perkLevels: { [key: string]: number; } = {\n      common: 3,\n      uncommon: 5,\n      rare: 8,\n      epic: 13,\n      legendary: 21,\n    };\n\n    Object.keys(this.perks).forEach(rarity => {\n      if (pc.things.count('level') % perkLevels[rarity] === 0) {\n        const perk = sample(this.perks[rarity]);\n        console.log(`Gain a rank in ${perk} (${rarity})`);\n        pc.traits.add(1, perk);\n      }\n    });\n\n    // const classBonuses = PlayerHandbook.characterClasses\n    // okay, for each triat\n    if (pc.things.count('level') % 3 === 0) {\n      pc.traits.list().forEach((trait) => {\n        // console.log(trait)\n        if (Object.keys(this.characterClasses).includes(trait.name)) {\n        //   // it's a pc class\n          Object.entries(this.characterClasses[trait.name].attributes).forEach(([attr, value]) => {\n            // if (value === 0) { if (randomInteger(0,12) < 2) return }\n            const amount = value > 0 ? randomInteger(1, Math.max(1,value)) : 1\n            console.log(`${attr} improves by ${amount} (${trait.name})`);\n            pc.things.add(amount, attr)\n          })\n        }\n      })\n      // trait\n    }\n  }\n}\n","import { boundMethod } from \"autobind-decorator\"\nimport { List, Sequence } from \"../../collections\"\nimport { Collection } from \"../../ecosphere/Collection\"\nimport { Community } from \"../../ecosphere/Community\"\nimport Model from \"../../ecosphere/Model\"\nimport { EvolvingStocks, ManageStocks, Person } from \"../../ecosphere/types\"\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\"\nimport { sample } from \"../../ecosphere/utils/sample\"\nimport { where } from \"../../ecosphere/utils/where\"\nimport { MonsterManual } from \"./MonsterManual\"\nimport { PlayerHandbook } from \"./PlayerHandbook\"\n\n// try to keep magic numbers here?\nclass DungeonMasterGuide {\n  static durations = { round: 74, day: 6800 }\n}\n\n// type SimpleEvent = { at: number }\ntype EventCommon = { id: number, at: number }\ntype EnemyInjured = EventCommon & { kind: 'enemy-injured', enemyName: string, amount: number }\ntype TurnStarted = EventCommon & { kind: 'turn-started' }\ntype Event = EnemyInjured | TurnStarted\nclass Arena extends Model {\n  events = new List<Event>()\n  // emit(event: Event, title?: string, message?: string) {\n    // if (title) { console.log(title) } //\"EVENT\", event)\n  eventIds = new Sequence()\n  enemyInjured(name: string, amount: number) {\n    this.events.add({\n      id: this.eventIds.next,\n      kind: 'enemy-injured',\n      enemyName: name,\n      amount,\n      at: this.ticks\n    })\n      // : `${name} took ${amount} damage`, description: message, kind: event.kind, at: this.ticks })\n  }\n\n  turnStarted() {\n    this.events.add({ id: this.eventIds.next, kind: 'turn-started', at: this.ticks })\n  }\n\n  constructor() {\n    super('The Arena')\n    const globals = [ 'day', 'step', 'li', 'gil', 'kill', 'victory', 'death', 'tpk' ]\n    globals.forEach(resource => this.resources.create(resource))\n    this.people.create('Adventurers')\n    this.spawnHero('Fighter')\n    // this.spawnHero('Cleric')\n    // this.spawnHero(sample(['Monk', 'Mage'])) \n    // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses)))\n    Object.keys(PlayerHandbook.characterClasses).forEach(characterClass => {\n      this.actions.create({ name: `Hire ${characterClass}`, act: () => this.spawnHero(characterClass) })\n    })\n    this.actions.create({ name: `Hire Party`, act: () => {\n      for (let i=0; i<3; i++) {\n        this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n      }\n      // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n      // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n    }})\n    this.people.create('Enemies')\n    // enemies.obscured = true // only show names? really want hp -- more granular/whitelist?\n    this.spawnEnemyParty()\n    this.evolve(this.tick)\n  }\n\n  metrics = {\n    'challenge rating': () => this.challengeRating,\n    'damage per tick': () => this.damagePerTick,\n    turns: () => this.recent('turn-started').length,\n  }\n\n  heroIds = new Sequence()\n  @boundMethod\n  spawnHero(characterClass: string) {\n    const name = `${characterClass} (${this.heroIds.next})`;\n    const hero = this.party.create(name)\n    PlayerHandbook.generate(hero, characterClass)\n  }\n\n  get challengeRating() {\n    if (this.party.count === 0) return -1;\n    const totalLevels = this.party.list().map(adv => adv.things.count('level')).reduce((a, b) => a + b)\n    const cr = 1 \n      + (this.resources.count('step')/1250)\n      + (this.resources.count('day')/14)\n      + (this.party.count) \n      + (totalLevels / this.party.count);\n    return Math.floor(cr);\n  }\n\n  private recent(kind: string): Event[] { return this.recentEvents.filter(where('kind', kind)) }\n\n  metricGrain = 150 //DungeonMasterGuide.durations.round\n  get damagePerTick() {\n    const enemyInjuries: EnemyInjured[] = this.recent('enemy-injured') as EnemyInjured[]\n    // const turns = 1 + this.recent('turn-started').length //this.recentEvents.filter(where('kind', 'turn-started')).length\n    const totalInjuryAmount = enemyInjuries.map((injury: EnemyInjured) => injury.amount).reduce((a, b) => a + b, 0)\n    return (Math.floor(\n      totalInjuryAmount / this.metricGrain //Math.floor(totalInjuryAmount / this.metricGrain)\n    ))\n  }\n\n  get recentEvents() {\n    return this.events.items.filter(e => e.at > this.ticks-this.metricGrain)\n  }\n\n  manual = new MonsterManual()\n\n  @boundMethod\n  spawnEnemyParty() {\n    if (this.party.count === 0) return;\n\n    for (let i = 0; i < randomInteger(1,2+this.party.count); i++) {\n      const enemy = this.enemies.create('new enemy')\n      this.manual.generate(enemy, this.challengeRating)\n    }\n\n    // if (randomInteger(0,12) > 11) {\n    //   const enemy = this.enemies.create('new big enemy')\n    //   this.manual.generateBoss(enemy, this.challengeRating)\n    // }\n  }\n\n  get party() { return this.people.lookup('Adventurers') }\n  get enemies() { return this.people.lookup('Enemies') }\n\n  private injure(defender: Person, amount: number, aggressor: Person, reflected: boolean = false) {\n    const damage = Math.floor( Math.min(defender.things.count('hp'), amount) )\n    if (damage <= 0) return;\n\n    defender.things.remove(damage, 'hp')\n    if (this.enemies.list().includes(defender)) {\n      this.enemyInjured(defender.name, damage)\n    }\n\n    console.log(`${aggressor.name} hit ${defender.name} for ${damage}!`)\n    const absorb = Math.min(this.effective(aggressor, 'absorb'), damage)\n    if (absorb > 0) {\n      const absorption = randomInteger(0,absorb) \n      console.log(`${aggressor.name} absorbed ${absorption} hp!`)\n      this.heal(aggressor, absorption)\n    }\n    if (defender.things.count('hp') > 0) {\n      const reflect = Math.min(this.effective(defender, 'reflect'), damage)\n      if (reflect > 0 && !reflected) {\n        console.log(`${defender.name} reflected ${reflect} damage!`)\n        this.injure(aggressor, reflect, defender, true)\n      }\n      const counter = this.effective(defender, 'counter')\n      if (randomInteger(0,100) < counter) {\n        console.log(`${defender.name} counter-attacked against ${aggressor.name}!`)\n        this.strike(defender, aggressor)\n      }\n    }\n  }\n\n  private effective(person: Person, attribute: string) {\n    const base = person.things.count(attribute)\n    if (base === 0) return 0;\n    let multiplier = 1;\n    Object.keys(PlayerHandbook.perkBenefits).forEach(perk => {\n      const benefits = PlayerHandbook.perkBenefits[perk]\n      const benefitAttrs = Object.keys(benefits)\n      if (benefitAttrs.includes(attribute)) {\n        const ranks = person.traits.count(perk)\n        if (ranks > 0) {\n          const benefit = benefits[attribute] * ranks\n          multiplier += benefit\n        }\n      }\n    })\n    const value = Math.floor(base * multiplier);\n    return value\n  }\n\n  private strike(aggressor: Person, defender: Person) {\n    const holyDefense = this.effective(defender, 'holy defense')\n    const holyDamage = Math.max(0, this.effective(aggressor, 'holy damage') - holyDefense)\n    const magicDefense = this.effective(defender, 'magic defense')\n    const magicDamage = Math.max(0, this.effective(aggressor, 'magic damage') - magicDefense)\n    let physicalDamage = 0;\n    let criticalStrike = false;\n    const evade = 1 + this.effective(defender, 'evasion')\n    const hitRoll = randomInteger(0,100)\n    const hit = hitRoll > Math.min(95, evade * 2)\n    if (hit) {\n      const defense = this.effective(defender, 'defense')\n      const baseDamage = Math.max(1,this.effective(aggressor, 'strength') - defense)\n      const bonus = this.effective(aggressor, 'bonus damage')\n      const critChance = 1 + this.effective(aggressor, 'crit chance')\n      criticalStrike = randomInteger(0,100) < Math.max(50, critChance * 2)\n      if (criticalStrike) {\n        console.log(`${aggressor.name} landed a critical strike on ${defender.name}!`)\n      }\n      physicalDamage = criticalStrike \n        ? baseDamage + bonus + randomInteger(1, this.effective(aggressor, 'crit damage'))\n        : randomInteger(1, baseDamage) + bonus\n    }\n    const overallDamage = magicDamage + physicalDamage + holyDamage\n    if (overallDamage > 0) {\n      this.injure(defender, overallDamage, aggressor)\n    } else {\n      console.log(`${aggressor.name} swung for ${defender.name} but missed!`)\n    }\n  }\n\n  attack(aggressors: Community, defenders: Community) {\n    aggressors.list().forEach(aggressor => {\n      const baseSpeed = 12;\n      const aggSpeed = Math.min(baseSpeed, aggressor.things.count('speed'))\n      const speed = 1+Math.floor(Math.max(baseSpeed - aggSpeed, 0))\n      if (this.ticks % speed === 0) {\n        const damageAll = this.effective(aggressor, 'damage to all')\n        if (damageAll > 0) {\n          defenders.list().forEach(defender => {\n            const damage = randomInteger(1, damageAll)\n            this.injure(defender, damage, aggressor)\n          })\n        }\n\n        // normal attack\n        const defender = sample(defenders.list()) // todo attack-weakest policy..\n        if (defender) {\n          let done = false;\n          const hit = () => this.strike(aggressor, defender)\n\n          hit()\n          const chainChance = this.effective(aggressor, 'chain chance')\n          const maxChain = 1 + this.effective(aggressor, 'max chain')\n          let chain = 0\n          while (!done && chain++ < maxChain) {\n            let chainRoll = randomInteger(0,100)\n            if (chainRoll < chainChance) {\n              console.log(`...and swung again (${chain} times)!`)\n              hit()\n            }\n          }\n        }\n      }\n    })\n  }\n\n  heal(healee: Person, amount: number) {\n    const hp = healee.things.count('hp')\n    const maxHp = healee.things.count('max hp')\n    const maxHeal = maxHp - hp\n    const heal = Math.min(maxHeal, amount)\n    healee.things.add(Math.floor(heal), 'hp')\n  }\n\n  per(unit: string) {\n    this.party.list().forEach(adventurer => {\n      const xp = this.effective(adventurer, `xp per ${unit}`)\n                * (1 + 0.1 * adventurer.traits.count('Perspicuous'))\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n      adventurer.things.add(Math.floor(xp), 'xp')\n\n      const gil = this.effective(adventurer, `gold per ${unit}`)\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n      this.resources.add(Math.floor(gil), 'gil')\n\n      if (adventurer.things.count('hp') < adventurer.things.count('max hp')) {\n        const hp = this.effective(adventurer, `hp per ${unit}`)\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n        this.heal(adventurer, hp)\n      }\n    })\n  }\n\n  private round() {\n    this.per('round')\n    this.party.list().forEach(adventurer => {\n      const regen = this.effective(adventurer, 'regen')\n      this.heal(adventurer, regen)\n      if (adventurer.things.count('heal')) {\n        this.party.list().forEach(healee => {\n            const health = this.effective(adventurer, 'heal')\n            this.heal(healee, randomInteger(1,health))\n        })\n      }\n\n      if (adventurer.traits.count('Potion of Life') > 0 &&\n          adventurer.things.count('hp') < 0.5 * adventurer.things.count('max hp')) {\n        console.log(`${adventurer.name} drank a potion of life!`)\n        adventurer.traits.remove(1, 'Potion of Life')\n        const health = 20 + randomInteger(0, 10) + this.effective(adventurer, 'heal')\n        this.heal(adventurer, health)\n      }\n    })\n\n    this.enemies.list().forEach(enemy => {\n      this.heal(enemy, this.effective(enemy, 'regen'))\n    })\n  }\n\n  @boundMethod\n  tick({ resources }: EvolvingStocks, t: number) {\n    this.party.list().forEach(adventurer => {\n      const level = adventurer.things.count('level')\n      const levelCost = Math.floor(Math.pow(2, 5+level))\n      if (adventurer.things.count('xp') > levelCost) {\n        adventurer.things.remove(levelCost, 'xp')\n        adventurer.things.add(1, 'level')\n        console.log(`${adventurer.name} level up!`)\n        PlayerHandbook.levelUp(adventurer)\n      }\n    })\n\n    if (t % DungeonMasterGuide.durations.round === 0) {\n      this.round()\n    }\n\n    if (t % DungeonMasterGuide.durations.day === 0) {\n      resources.add(1, 'day')\n      this.per('day')\n    }\n\n    if (this.enemies.count === 0 && this.party.count > 0) {\n      if (t % 5 === 0) {\n        this.resources.add(1, 'step')\n        this.per('step')\n        if (this.resources.count('step') % 500 === 0) {\n          resources.add(1, 'li')\n          this.per('li')\n          // store..\n          // if (resources.count('gil') > 1000) {\n          //   // give items to leader\n          //   let leader = this.party.list()[0]\n          //   const items = [\n          //     'Healing Salve', 'Shell Matrix', // functionally -- resurrect charges (w/ limitations)\n          //     'Cloaking Robe of Elvenkind', // large % bonus to evade\n          //     'Counterweight' // large % bonus to counter chance\n          //   ]\n          //   leader.traits.add(1, sample(items))\n          //   resources.remove(1000, 'gil')\n          // }\n        }\n\n        const encounterChance = 60 + this.resources.count('li') + this.party.count\n        const randomEncounter = randomInteger(0,100) > encounterChance\n        if (randomEncounter) { //randomInteger(0,100) > 86) {\n          this.spawnEnemyParty()\n          this.per('encounter')\n        }\n      }\n\n       \n    } else {\n      this.turnStarted()\n      this.per('turn')\n      this.attack(this.party, this.enemies)\n      this.attack(this.enemies, this.party)\n      this.mortalityCheck(resources)\n    }\n  }\n\n  private mortalityCheck(resources: ManageStocks) {\n    this.party.list().forEach(adventurer => {\n      if (adventurer.things.count('hp') <= 0) {\n        if (adventurer.traits.count('Eternal Victory') > 0) {\n          this.heal(adventurer, 200)\n          adventurer.traits.remove(1, 'Eternal Victory')\n        } else if (adventurer.traits.count('Healing Salve') > 0) {\n          this.heal(adventurer, 100)\n          adventurer.traits.remove(1, 'Healing Salve')\n        } else if (adventurer.traits.count('Shell Matrix') > 0) {\n          this.heal(adventurer, 50)\n          adventurer.things.add(150, 'magic hp')\n          adventurer.traits.remove(1, 'Shell Matrix')\n        } else {\n          this.per('death')\n          this.party.destroy(adventurer.name)\n          resources.add(1, 'death')\n          console.log(`${adventurer.name} was slain!`)\n          if (this.party.count === 0) {\n            this.per('tpk')\n            resources.add(1, 'tpk')\n            console.log(\"The party has fallen... The quest is lost.\")\n          }\n        }\n      }\n    })\n\n    this.enemies.list().forEach(enemy => {\n      if (enemy.things.count('hp') <= 0) {\n        this.per('kill')\n        this.enemies.destroy(enemy.name)\n        resources.add(1, 'kill')\n        console.log(`${enemy.name} was slain!`)\n        if (this.enemies.count === 0) {\n          this.per(\"victory\")\n          resources.add(1, 'victory')\n          console.log(\"The party was victorious! The quest continues...\")\n          return\n        }\n      }\n    })\n  }\n}\n\nconst arena = new Arena()\nexport default arena\n","// todo: gen a new society with moieties; gen new individuals; work!\n\nimport { boundMethod } from \"autobind-decorator\";\nimport Model from \"../ecosphere/Model\"\nimport { EvolvingStocks } from \"../ecosphere/types\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { sample } from \"../ecosphere/utils/sample\";\n\n// long-term: assemble a bunch of different societies + see how different policies/designs work\nexport class Society extends Model {\n  resourceNames: string[] = [ 'Wheat', 'Bread', 'Wine', 'Water', 'Clay', 'Coal' ]\n  animalNames: string[] = [ 'Sheep', 'Cow' ] //, 'Pig', 'Chicken' ] // Elk', 'Sheep', 'Wolf', 'Rabbit', 'Deer', 'Heron', 'Ibis', 'Lion', 'Moose', 'Raccoon', 'Hawk', 'Bluebird', 'Owl', 'Mouse', 'Fox', 'Robin', 'Dove', 'Elephant' ]\n  treeNames: string[] = [ 'Pine', 'Spruce' ] //, 'Juniper', 'Elm' ] //, 'Alder', 'Elm', 'Aspen', 'Oak', 'Beech', 'Pear', 'Cherry' ]\n  fruitTreeNames: string[] = [ 'Pear', 'Cherry' ] //, 'Apple', 'Peach' ] //, 'Alder', 'Elm', 'Aspen', 'Oak', 'Beech', 'Pear', 'Cherry' ]\n  plantNames: string[] = [ 'Grape', 'Blueberry' ] //, 'Strawberry', 'Goji' ]\n  strataNames: string[] = [ 'Nobility', 'Merchants', 'Workers', 'Farmers' ]\n\n  meatNames: { [name: string]: string } = { 'Cow': 'Beef', 'Chicken': 'Poultry', 'Pig': 'Pork', 'Sheep': 'Mutton'  }\n\n  constructor() { super('A Society'); this.setup() }\n  setup() {\n    this.strataNames.forEach(strata => {\n      const socialClass = this.people.create(strata)\n      socialClass.birth()\n      socialClass.birth()\n      socialClass.birth()\n    })\n    this.resourceNames.forEach(resource => this.resources.create(resource))\n    this.animalNames.forEach(animal => {\n      const creature = this.animals.create(animal)\n      creature.birth()\n      this.resources.create(this.meatNames[animal])\n    })\n    this.treeNames.forEach(tree => {\n      this.resources.create(`${tree} Wood`)\n      this.resources.create(`${tree} Tree`)\n      this.resources.create(`${tree} Seed`)\n    })\n    this.fruitTreeNames.forEach(fruitTree => {\n      this.resources.create(`${fruitTree} Wood`)\n      this.resources.create(`${fruitTree} Tree`)\n      this.resources.create(`${fruitTree} Seed`)\n      this.resources.create(`${fruitTree}`) // fruit\n    })\n    this.plantNames.forEach(plant => {\n      this.resources.create(`${plant} Plant`)\n      this.resources.create(`${plant} Seed`)\n      this.resources.create(`${plant}`)\n    })\n    this.evolve(this.evolution)\n  }\n\n  @boundMethod\n  evolution({ resources, animals }: EvolvingStocks, t: number) {\n    this.animalNames.forEach(animalName => {\n      if (randomInteger(0,20) > 18) {\n        animals.add(1, animalName)\n        // animals.lookup(animal).birth()\n      }\n    })\n\n    // ..\n    this.people.lookup('Workers').list().forEach(worker => {\n      \n\n      // if (randomInteger(0,12) > 10) {\n      const randomTree = (sample(this.treeNames))\n      if (resources.count(`${randomTree} Tree`) > 0) {\n        resources.add(randomInteger(2, 3), `${randomTree} Wood`)\n        resources.add(randomInteger(0, 1), `${randomTree} Seed`)\n        resources.remove(1, `${randomTree} Tree`)\n      }\n      // }\n      // pay to keep wildlife in line??\n      // person.currency += 1\n\n      // todo expose a status..?\n      // person.name = 'Hunt ' + randomAnimal.name\n    })\n\n    this.people.lookup('Farmers').list().forEach(farmer => {\n      // if (randomInteger(0,12) > 10) {\n        const randomAnimal = (sample(this.animalNames))\n        animals.remove(1, randomAnimal)\n        resources.add(1, this.meatNames[randomAnimal])\n      // }\n\n      const randomPlant = sample(this.plantNames)\n      if (resources.count(`${randomPlant} Plant`) > 0) {\n        resources.remove(1, `${randomPlant} Plant`)\n        resources.add(1, randomPlant)\n      } else {\n        resources.add(1, `${randomPlant} Plant`)\n        resources.remove(1, `${randomPlant} Seed`)\n      }\n    })\n  }\n}\n","import Model from '../ecosphere/Model';\n\n// would be interesting to have parts as separate models\n// ie a model for the drive engine, the power system... :D\n\nexport class SpaceStation extends Model {\n  protected controls = {\n    laboratory: this.machines.create('Science Lab Controls'),\n    engineering: this.machines.create('Engineering Controls'),\n    hab: this.machines.create('Habitat Controls'),\n    all: this.machines.create('Global Systems Controls'),\n  }\n  protected habitat = {\n    o2: this.resources.create('Air'),\n    h20: this.resources.create('Water'),\n  }\n  private core = {\n    power: this.resources.create('Power'),\n    cpu: this.resources.create('Compute'),\n    thrust: this.resources.create('Thrust'),\n    xen: this.resources.create('Xenocite'),\n  }\n\n  get crew() { return this.people.lookup('Crew') }\n\n  constructor(name: string) {\n    super(name);\n    this.people.create('Crew')\n\n    this.core.power.add(100);\n    this.core.thrust.add(0);\n    this.core.cpu.add(100);\n    this.core.xen.add(100);\n\n    this.habitat.o2.add(100);\n    this.habitat.h20.add(100);\n  }\n\n  // static orbital(name: string) {\n  //   let station = new SpaceStation(name + \" Orbital\");\n  //   station.core.power.add(1000)\n  // }\n}\n","// import Model from \"../ecosphere/Model\"\n\nimport Model from \"../ecosphere/Model\"\nimport { Assembly } from \"../ecosphere/Assembly\"\n\n\nconst town = new Model('Town')\ntown.people.create('Mayor')\n\n// const townAnimals = ['Sheep', 'Cow', 'Dog', 'Cat']\ntown.animals.create('Sheep')\ntown.animals.create('Cow')\ntown.animals.create('Dog')\ntown.animals.create('Cat')\n\ntown.animals.add(1, 'Dog')\n\ntown.evolve(({ animals }) => {\n  console.log(\"town step!\")\n  // townAnimals.forEach(name => animals.add(animals.count(name), name))\n})\n\nconst countryside = new Model('Country')\n// const countryAnimals = ['Fox', 'Bear', 'Wolf']\ncountryside.people.create('Old Buddy')\ncountryside.animals.create('Fox')\ncountryside.animals.create('Bear')\ncountryside.animals.create('Wolf')\n\ncountryside.animals.add(1, 'Wolf')\n\ncountryside.evolve(({ animals }) => {\n  console.log(\"country step!\")\n  // town.animals.add(1, 'Dog')\n  // countryside.animals.remove(1)\n  // countryAnimals.forEach(name => animals.add(animals.count(name), name))\n})\n\nconst region = new Assembly('Region')\n\nregion.models.add(town)\nregion.models.add(countryside)\n\nexport { region as village };\n\n","import { List } from \"../collections\";\nimport Model from \"./Model\";\n\nexport interface IAssembly {\n  name: string\n  models: List<Model>\n}\n\nexport class Assembly implements IAssembly {\n  models = new List<Model>();\n  constructor(public name: string) {}\n}\n","import { boundMethod } from 'autobind-decorator'\nimport { List, Sequence } from '../collections'\nimport { Collection } from '../ecosphere/Collection';\nimport Model from '../ecosphere/Model'\nimport { ManageStocks, Person, Recipe, TimeEvolution } from '../ecosphere/types'\nimport { randomInteger } from '../ecosphere/utils/randomInteger';\nimport { unique } from '../ecosphere/utils/unique';\nimport { where } from '../ecosphere/utils/where';\n\ntype Currency = number\ntype Order = { [itemName: string]: number }\ntype Bill = { id: number, order: Order, price: Currency, account: Receivable }\ninterface Receivable {\n  receive(items: any[], bill: Bill): Currency\n}\n\ntype EventKind = 'order:fulfilled'\ntype Event = { id: number, name: string, description: string, at: number, kind: EventKind }\nexport class Factory extends Model {\n  events = new Collection<Event>()\n  emit(event: EventKind, title?: string, message?: string) {\n    // if (title) { console.log(title) } //\"EVENT\", event)\n    this.events.create({ name: title, description: message, kind: event, at: this.ticks })\n  }\n  private bills = new List<Bill>()\n\n  metrics = {\n    'Production Speed': () => this.deliveryRate,\n    'Total Fulfillments': () => this.fulfillmentEvents.length,\n    'Orders In Queue': () => this.bills.count\n  }\n\n  metricGrain = 100\n  get deliveryRate() {\n    return this.recentEvents.filter(where('kind', 'order:fulfilled')).length / this.metricGrain\n  }\n\n  get recentEvents() {\n    return this.events.list().filter(e => e.at > this.ticks-this.metricGrain)\n  }\n\n  get fulfillmentEvents() {\n    return this.events.list().filter(where('kind', 'order:fulfilled'))\n  }\n\n  constructor(\n    name: string,\n  ) {\n    super(`${name} Factory`)\n  }\n\n  product(name: string, consumes: { [resourceName: string]: number }) {\n    this.actions.create({ name: `Order ${name}`, act: ({ count, deliverTo }: { count: number, deliverTo: Receivable }) => {\n      this.order(count || 20, name, deliverTo || { receive: () => {\n        return 1;\n      }})\n    }})\n\n    this.resources.create(name)\n    this.workers.recipes.create({ name, produces: { [name]: 1 }, consumes });\n  }\n\n  @boundMethod\n  reboot() {\n    this.reset()\n    this.people.create('Workers')\n    this.bills.clear()\n    this.evolve(this.evolution)\n    this.policies.create({ name: 'FIFO', manage: () => {\n        const firstUnfulfilled = this.unfulfilled(this.bills.first)[0]\n        const produceUnfulfilled = this.workers.recipes.lookup(firstUnfulfilled)\n        if (produceUnfulfilled) {\n          this.workers.list().forEach(worker => this.produce(worker, produceUnfulfilled))\n        }\n    }})\n    this.policies.create({ name: 'Round Robin', manage: () => {\n        const allBillsRequested = unique(this.bills.items.flatMap(bill => {\n          return this.unfulfilled(bill)\n        }))\n        this.workers.list().forEach((worker, i) => {\n          const nextUnfulfilled = allBillsRequested[(i % (allBillsRequested.length))]\n          const produceUnfulfilled = this.workers.recipes.lookup(nextUnfulfilled)\n          if (produceUnfulfilled) {\n            this.produce(worker, produceUnfulfilled)\n          }\n        })\n    }})\n\n    this.choose('FIFO')\n  }\n\n  unfulfilled(bill?: Bill) {\n    if (bill === undefined) { return [] }\n    let orderItemNames = Object.keys(bill.order)\n    let unfulfilled: string[] = []\n    orderItemNames.forEach(item => {\n      let order = bill.order[item]\n      let amount = this.resources.count(item)\n      if (amount < order) {\n        unfulfilled.push(item)\n      }\n    })\n    // console.log(\"Unfulfilled from bill: \" + inspect(bill.order))\n    return unfulfilled\n  }\n\n  produce = (worker: Person, recipe: Recipe) => {\n    if (this.canProduce(recipe)) {\n      this.workers.jobs.set(worker, recipe)\n    } else {\n      if (recipe.consumes) {\n        const required: string[] = []\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          // do we have enough of the resource?\n          if (this.resources.count(resource) < amount) {\n            required.push(resource)\n          }\n        })\n\n        let requirement = required[randomInteger(0,required.length)]; // could sample here..\n        // need to find a recipe that produces requirement\n        let producingRequirement: Recipe | null =  null\n        this.workers.recipes.each(recipe => {\n          if (recipe.produces[requirement]) {\n            producingRequirement = recipe\n          }\n        })\n        if (producingRequirement) {\n        //  this.workers.jobs.set(worker, producingRequirement)\n          this.produce(worker, producingRequirement)\n        }\n      }\n    }\n  }\n\n  missingRequirements = (recipe: Recipe) => {\n    const missing: string[] = []\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (this.resources.count(resource) < amount) {\n          missing.push(resource)\n        }\n      })\n    }\n    return missing\n  }\n\n  canProduce = (recipe: Recipe) => {\n    let mayProduce = true\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (this.resources.count(resource) < amount) {\n          mayProduce = false\n        }\n      })\n    }\n    return mayProduce\n  }\n\n  evolution: TimeEvolution = ({ resources }) => {\n    this.manage(resources) \n    if (this.bills.count > 0) {\n      this.workers.work({ resources })\n    }\n  }\n\n  orderIds = new Sequence()\n  order(count: number, itemName: string, account: Receivable): Bill {\n    const bill: Bill = {\n      id: this.orderIds.next,\n      order: { [itemName]: count },\n      account,\n      price: count\n    }\n    this.bills.add(bill)\n    return bill\n  }\n\n  get workers() { return this.people.lookup('Workers') }\n  private manage(resources: ManageStocks) {\n    if (this.bills.count === 0) return;\n\n    // const bill = this.bills.first;\n    this.bills.each(bill => {\n      const orderItemNames = Object.keys(bill.order)\n      const unfilled = this.unfulfilled(bill)\n      const allFulfilled = unfilled.length === 0\n\n      if (allFulfilled) {\n        bill.account.receive([], bill)\n        orderItemNames.forEach(item => {\n          this.resources.remove(bill.order[item], item)\n        })\n        this.bills.remove(bill)\n        this.emit('order:fulfilled', `An order for ${orderItemNames.join(',')} has been fulfilled`)\n      }\n    })\n\n    if (this.currentPolicy) {\n      this.currentPolicy.manage()\n    } else {\n      console.warn(\"No labor policy selected!\")\n    }\n  }\n}\n","export function unique(arr: any[]) {\n  var u = {}, a = [];\n  for (var i = 0, l = arr.length; i < l; ++i) {\n    if (!u.hasOwnProperty(arr[i])) {\n      a.push(arr[i]);\n      // @ts-ignore\n      u[arr[i]] = 1;\n    }\n  }\n  return a;\n}\n","import { Sequence } from '../collections';\nimport { Factory } from './Factory';\n\nconst ids = new Sequence()\n  const factory = new Factory('Zep');\n  factory.reboot();\n  factory.product('Soles', {});\n  factory.product('Laces', {});\n  factory.product('Socks', {});\n  factory.product('Shoes', { 'Soles': 2, 'Laces': 2 });\n  factory.product('Hat', {});\n  factory.product('Belt', {});\n  factory.product('Underwear', {});\n  factory.product('Pants', {});\n  factory.product('Outfit', { 'Pants': 1, 'Belt': 1, 'Hat': 1, 'Socks': 1, 'Shoes': 1 });\n  const managers = factory.people.create('Management')\n  managers.create('Operations Chief');\n  managers.create('Plant Manager');\n  // factory.workers.create('Engineer')\n  factory.machines.create('Robot')\n\n  factory.actions.create({ name: 'Spawn Worker', act: () => { factory.workers.create(`Employee #${ids.next}`); } });\n  export default factory;\n","import { Avernus } from \"./Avernus\"\nimport arena from \"./Arena\"\nimport { Society } from \"./Society\"\nimport { SpaceStation } from \"./SpaceStation\"\n// import town from \"./Town\"\nimport { village } from \"./Village\"\n// import { world } from \"./World\"\nimport zep from \"./zep\"\n\nconst station = new SpaceStation('My Very Own Space Station')\nconst models = [\n  // world,\n  arena,\n  station,\n  zep,\n  // town,\n  village,\n  new Society(),\n  Avernus\n]\n\nexport default models\n\n","\nimport './App.css';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelSelector } from './ModelSelector';\nimport models from './examples';\n\ntype ApplicationProps = {\n  model: IModel\n}\n\nfunction App({ model: initialModel }: ApplicationProps) {\n\n  return <div className=\"App\">\n    <ModelSelector models={models} initialModel={initialModel} />\n  </div>;\n}\n\nexport default App;\n","import Model from \"../ecosphere/Model\"\n\nconst domesticCrops = { Wheat: 'wheat' }\nconst food = { Bread: 'bread' }\nconst wildAnimals = {\n  Fish: 'fishes',\n  Fox: 'fox',\n  Rabbit: 'rabbit',\n}\nconst commonElements = {\n  ...domesticCrops,\n  ...food,\n  ...wildAnimals,\n}\n\nconst { Bread, Wheat, Fish, Fox, Rabbit } = commonElements;\nconst People = {\n  Zed: 'Zedediah',\n  Cash: 'Cassius',\n  Raz: 'Erasmus',\n}\nconst { Zed, Cash, Raz } = People;\nconst Windmill = 'Windmill';\n\nconst world = new Model('Township of Writ-upon-Water')\nconst { resources, animals, people, machines } = world\nconst townsfolk = people.create('Rippenwaterans')\nconst { recipes, jobs } = townsfolk\n\nresources.create(Fish)\nresources.create(Wheat)\nresources.create(Bread)\n\nanimals.create(Fox)\nanimals.create(Rabbit)\n\nconst zed = townsfolk.create(Zed)\ntownsfolk.create(Cash)\ntownsfolk.create(Raz)\n\n// zed.things.create('Gold')\nzed.things.add(10, 'Gold')\nzed.things.add(10, 'Apples')\n\nmachines.create(Windmill);\n\nconst bread = recipes.create({\n  name: 'Bread',\n  produces: { [Bread]: 1 },\n  consumes: { [Wheat]: 5 }\n})\njobs.set(zed, bread)\n\n// how could we model a simple merchant??\n// const bread = recipes.create({\n//   name: 'Bread',\n//   produces: { [Bread]: 1 },\n//   consumes: { [Wheat]: 5 }\n// })\n\nworld.evolve(({ resources, animals }) => {\n  animals.add(1, Fox)\n  resources.add(1, Wheat)\n  townsfolk.work({ resources })\n  zed.things.remove(1, 'Gold')\n})\n\nexport { world }\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n// import Model from './ecosphere/Model';\nimport { world } from './examples/World';\n\nconst model = world; //new Model('hi')\n\nReactDOM.render(\n  <React.StrictMode>\n    <App model={model} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n"],"sourceRoot":""}