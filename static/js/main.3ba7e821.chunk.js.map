{"version":3,"sources":["ecosphere/utils/where.ts","ecosphere/utils/isString.ts","collections/Map.ts","collections/List.ts","ecosphere/utils/randomInteger.ts","ecosphere/utils/sample.ts","ecosphere/utils/MarkovGenerator.ts","ecosphere/utils/replicate.ts","collections/Sequence.ts","ecosphere/Stocks.ts","ecosphere/Registry.ts","ecosphere/Delta.ts","ecosphere/Model/Simulation.ts","ecosphere/Collection.ts","ecosphere/types/index.ts","ecosphere/Population.ts","ecosphere/Community.ts","ecosphere/Model/Model.ts","ecosphere/Model/presentItem.tsx","ecosphere/View/Tile.tsx","ecosphere/View/presentCommunity.tsx","ecosphere/View/presentIndividual.tsx","ecosphere/View/ModelView.tsx","ecosphere/Model/index.ts","ModelPresenter.tsx","useModel.tsx","ModelSelector.tsx","examples/Avernus.ts","examples/Arena/MonsterManual.ts","examples/Arena/PlayerHandbook.ts","examples/Arena/index.ts","examples/Factory.ts","ecosphere/utils/unique.ts","examples/zep.tsx","examples/Citizen.ts","ecosphere/Board.ts","examples/Building.tsx","ecosphere/utils/clamp.ts","ecosphere/utils/distance.ts","ecosphere/utils/times.ts","ecosphere/Heightmap.ts","ecosphere/utils/any.ts","examples/WorldMap.ts","examples/data/city-names.txt","examples/data/sea-names.txt","examples/Language.ts","examples/index.ts","App.tsx","index.tsx"],"names":["where","key","value","it","isString","String","KeyMap","idFor","nameFor","lookup","_data","k","v","this","namesAndValues","Object","entries","map","Number","fromEntries","List","items","count","length","push","filter","item","cb","forEach","fn","Error","randomInteger","min","max","Math","floor","random","sample","ts","MarkovGenerator","n","ngrams","beginnings","text","beginning","substring","i","gram","next","charAt","hasOwnProperty","current","output","construct","times","flatten","arrays","Array","apply","concat","Sequence","NameSequence","nameRoots","nameCount","array","replicate","join","MarkovSequence","order","generator","baseItems","generatedItems","feed","generate","result","attempts","includes","boundMethod","StockManager","stocks","stockId","amount","add","name","remove","list","lookupById","Stocks","elements","ids","storage","attrs","attributes","has","manage","id","theEntity","setAmount","element","find","matching","create","flatMap","manageAll","Registry","popCtor","populations","species","values","x","theSpecies","population","populationList","pop","Delta","model","getStocks","changes","baseline","_store","Simulation","ticks","tracking","dynamics","e","flux","target","report","source","theDelta","manager","_delta","theFlows","flow","table","entry","t","flows","each","dynamism","changed","flowsReport","delta","updated","deltaAmount","Collection","animalIds","createAnimal","kind","age","health","spirit","cunning","agility","strength","moietyIds","createMoiety","wealth","sophistication","power","knowledge","personId","human","size","createPerson","moiety","inventory","traits","body","mind","insight","depth","education","disposition","soul","wit","empathy","integrity","beauty","currency","things","meters","memory","SetHelper","set","populationIds","Population","individuals","Set","theList","individual","first","theIndividual","newborn","doomed","destroy","newborns","birth","doneFor","death","build","delete","Community","moieties","obscured","recipes","jobs","Map","worker","inventories","person","get","personAttrs","resources","recipe","produce","mayProduce","consumes","resource","produces","Model","people","machines","animals","metrics","notes","actions","policies","currentPolicy","clear","actionName","args","action","act","policyName","policy","presentItem","deltas","title","className","Tile","children","presentCommunity","community","work","itemNames","thing","meterName","measure","htmlFor","style","paddingRight","width","height","low","high","optimum","sort","a","b","display","trait","BoardTable","tiles","tileColors","tileInspect","useState","inspecting","setInspecting","message","flexDirection","fontFamily","fontSize","cursor","row","y","cell","color","backgroundColor","onMouseEnter","onMouseLeave","ModelView","modelName","communities","lastChanges","board","folks","keys","view","ModelPresenter","send","choose","step","onClick","type","checked","onChange","useModel","initialModel","setModel","setLastChanges","delay","setDelay","shouldStep","shouldSend","doSend","shouldManage","doManage","command","setCommand","setPolicy","useEffect","isModel","callback","savedCallback","useRef","tick","setInterval","clearInterval","useInterval","performSend","performChoose","maybeModel","AssemblyPresenter","assembly","models","theModel","ModelSelector","options","placeholder","give","recipient","supplier","world","miner","minter","smelter","fisherman","mineGold","smeltGold","mintCoin","evolve","MonsterManual","basicCreatures","Fragment","hp","evasion","Light","Fog","reflect","Aura","speed","Shadow","Wisp","Filament","counter","Voice","absorb","defense","Nothing","regen","challengingCreatures","Fiendling","Gremlin","Goblin","Kobold","Orc","uncommonCreatures","Rat","Bat","Snake","Blob","Bear","Ghost","Rogue","Troll","Giant","bosses","Priest","heal","Vampire","Drake","Lich","extraplanar","Demon","Angel","Archdemon","Dracolith","Archangel","dragons","rareCreatures","Leviathan","bestiary","basicSubtypes","Hostile","Intimidating","Nimble","Quick","Timid","Spry","Dancing","Vigilant","Relentless","Armored","Hardened","Benevolent","Protective","Snarling","Emboldened","Floating","Crystalline","Glinting","Mobile","Coldsnap","Blinding","Noxious","rareSubtypes","Voracious","Vicious","Vexatious","Arrogant","Querulous","Adventurous","Questing","Silvered","Mirrored","Aggressive","Dominating","Swift","Accelerated","Elusive","Reluctant","Hidden","Invisible","Imperceptible","Regrowing","Hydra","Fortified","Angelic","Prismatic","Pugnacious","Augmented","Skillful","Skeletal","Undead","Zombie","Favored","Fiendish","Fierce","Opalescent","Cruel","Vortex","evade","Luminous","Defiant","Devious","Draconic","subtypes","Common","Evasive","Retaliatory","Inspired","Infused","Radiant","Resplendent","Heavy","Titanic","Unholy","Blessed","Adept","perks","Piercing","Enchanted","Clockwork","Phantasmal","Cosmic","Imperious","monsterIds","difficulty","creature","base","cr","generateBasicMonster","adjustedCr","crFactor","perk","PlayerHandbook","level","pow","hero","characterClass","template","characterClasses","attr","baseStartingHp","levelUp","pc","attributeBoosts","common","uncommon","rare","epic","legendary","rarity","levelAttr","perkLevels","console","log","Fighter","perkBenefits","Brutality","Counterweight","Efferverscence","Efficacious","Opalescence","Ethereal","Faith","Finesse","Fitness","Fluidity","Dexterity","Precision","Swiftness","Rapidity","Medic","Vitality","Whirlwind","Focus","Iridescence","Concentration","Salvation","DungeonMasterGuide","durations","round","day","arena","events","eventIds","challengeRating","heroIds","metricGrain","manual","spawnHero","spawnEnemyParty","enemyName","at","party","totalLevels","adv","reduce","recentEvents","totalInjuryAmount","recent","injury","enemy","enemies","defender","aggressor","reflected","damage","enemyInjured","effective","absorption","injure","strike","attribute","multiplier","benefits","ranks","benefit","holyDefense","holyDamage","magicDefense","magicDamage","physicalDamage","criticalStrike","baseDamage","bonus","critChance","overallDamage","aggressors","defenders","aggSpeed","damageAll","hit","chainChance","maxChain","chain","healee","maxHeal","unit","adventurer","xp","gil","per","levelCost","stock","encounterChance","turnStarted","attack","mortalityCheck","Factory","bills","deliveryRate","fulfillmentEvents","canProduce","workers","required","requirement","producingRequirement","missingRequirements","missing","evolution","orderIds","event","description","deliverTo","receive","reset","firstUnfulfilled","unfulfilled","produceUnfulfilled","allBillsRequested","arr","u","l","unique","bill","nextUnfulfilled","undefined","orderItemNames","itemName","account","price","emit","warn","factory","reboot","product","managers","generatePerson","gender","firstName","lastName","subject","date","describeMemory","time","seconds","second","minute","hour","dayOfWeek","padStart","pred","Board","write","character","x0","y0","drawBox","char","filled","x1","y1","overlays","viewTiles","overlay","o","eachCell","defaultValue","newTiles","currentValue","neighbors","newCell","buildingMaker","building","clamp","distance","dx","abs","dy","sqrt","results","Heightmap","groundLevel","smooth","ns","average","above","immediate","erode","rate","extrude","positions","pos","h","parseInt","val","intrude","bombard","intensity","radius","impactSite","distanceToImpact","craterPositions","craterEdge","d","orogeny","mountains","geoform","hades","d100","componentNames","regions","components","waterways","position","neighborValues","neighbor","neighborSum","localAverage","newVal","consider","componentMap","existingComponentNames","component","any","firstAdjacentComponentName","Cartographer","regionNamegiver","split","waterwayNamegiver","_regions","regionNames","_waterways","waterwayNames","elevation","aeon","regionName","region","waterwayName","waterway","identifyRegion","identifyWaterway","worldMapMaker","mapgenTicks","terrain","mountainSpots","areaPercent","area","cartographer","eon","li","elevationMessage","identifyRegionOrWaterway","jitter","ax","ay","bx","by","slope","j","targetSpotCount","randomPosition","spots","randomPositionAlongLine","_value","genHeightmap","kernels","verb","vowels","conjugate","root","inflect","acc","kernel","infinitive","singular","plural","third","Building","zep","Avernus","Citizen","verbs","read","vocabulary","writing","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ba7e821.chunk.js","sourcesContent":["export function where(key: string, value: any) {\n  return (it: any) => it[key] === value;\n}\n","export function isString(value: any): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n","import { IMap } from \"./types\";\nexport class KeyMap<K, V> implements IMap<K, V> {\n  _data: { [id: number]: V; } = {};\n  constructor(\n    private idFor: (k: K) => number,\n    private nameFor: (k: K) => string,\n    private lookup: (id: number) => K,\n  ) { }\n  set(k: K, v: V) { this._data[this.idFor(k)] = v; }\n  get(k: K): V { return this._data[this.idFor(k)]; }\n  get report(): { [name: string]: V } {\n    const namesAndValues = Object.entries(this._data)\n      .map(([k, v]) => [this.nameFor(this.lookup(Number(k))), v]);\n    return Object.fromEntries(namesAndValues);\n  }\n}\n","//\n\nimport { IList } from \"./types\";\n\nexport class List<T> implements IList<T> {\n  items: T[] = [];\n  protected get it() { return this.items; }\n  get first(): T { return this.items[0]; }\n  get last(): T { return this.items[this.count - 1]; }\n  get count(): number { return this.items.length; }\n  add(it: T) { this.items.push(it); }\n  remove(it: T) { this.items = this.items.filter(item => item !== it); }\n  each(cb: (it: T) => any) { this.items.forEach(cb); }\n  clear() { this.items = []; }\n  map<U>(fn: (it: T) => any): U[] { return this.items.map(fn) }\n\n  get sample(): T {\n    throw new Error('Method not implemented.');\n  }\n}\n","export function randomInteger(min: number, max: number) {\n  // return min + Math.floor(Math.random() * (max - min));\n  let result = Math.floor(Math.random() * (max - min + 1) + min)\n  // console.log(\"Random integer between \" + min + \" and \" + max + \": \" + result)\n  return result\n}\n","import { randomInteger } from \"./randomInteger\";\n\nexport function sample<T>(ts: T[]): T {\n  let i = randomInteger(0,ts.length-1)\n  return ts[i]; //randomInteger(0,ts.length-1)]\n\n}\n","import { sample } from \"./sample\";\n\n// A MarkovGenerate object\nexport class MarkovGenerator {\n  // n - Order (or length) of each ngram\n  // max - What is the maximum amount we will generate?\n  constructor(private n: number, private max: number) {}\n\n  // An object as dictionary\n  // each ngram is the key, a list of possible next elements are the values\n  private ngrams: { [key: string]: string[] } = {};\n  // A separate array of possible beginnings to generated text\n  private beginnings: string[] = [];\n\n  // A function to feed in text to the markov chain\n  feed(text: string) {\n\n    // Discard this line if it's too short\n    if (text.length < this.n) {\n      return false;\n    }\n\n    // Store the first ngram of this line\n    let beginning = text.substring(0, this.n);\n    this.beginnings.push(beginning);\n\n    // Now let's go through everything and create the dictionary\n    for (var i = 0; i < text.length - this.n; i++) {\n      let gram = text.substring(i, i + this.n);\n      let next = text.charAt(i + this.n);\n      // Is this a new one?\n      if (!this.ngrams.hasOwnProperty(gram)) {\n        this.ngrams[gram] = [];\n      }\n      // Add to the list\n      this.ngrams[gram].push(next);\n    }\n  }\n\n  // Generate a text from the information ngrams\n  generate() {\n\n    // Get a random  beginning\n    let current = sample(this.beginnings) //.choice();\n    let output = current;\n\n    // Generate a new token max number of times\n    for (var i = 0; i < this.max; i++) {\n      // If this is a valid ngram\n      if (this.ngrams.hasOwnProperty(current)) {\n        // What are all the possible next tokens\n        let possible_next = this.ngrams[current];\n        // Pick one randomly\n        let next = sample(possible_next) //.choice();\n        // Add to the output\n        output += next;\n        // Get the last N entries of the output; we'll use this to look up\n        // an ngram in the next iteration of the loop\n        current = output.substring(output.length - this.n, output.length);\n      } else {\n        break;\n      }\n    }\n    // Here's what we got!\n    return output;\n  }\n}\n","export function construct(fn: () => any, times: number, flatten?: boolean) {\n  // Create an array of size \"n\" with undefined values\n  var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  arrays = arrays.map(fn) //() => fn()) //() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  if (flatten) {\n  return [].concat.apply([], arrays);\n  } else {\n    return arrays;\n  }\n\n}\n\nexport function replicate(array: Array<any>, times: number) {\n  return construct(() => array, times)\n  // Create an array of size \"n\" with undefined values\n  // var arrays: Array<any> = Array.apply(null, new Array(times)); \n\n  // // Replace each \"undefined\" with our array, resulting in an array of n copies of our array\n  // arrays = arrays.map(() => array) //function() { return array });\n\n  // Flatten our array of arrays\n  // return [].concat.apply([], arrays);\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { MarkovGenerator } from \"../ecosphere/utils/MarkovGenerator\";\nimport { replicate } from \"../ecosphere/utils/replicate\";\nimport { ISequence } from \"./types\";\n\nexport class Sequence implements ISequence<number> {\n  count = 0;\n  get next(): number { return this.count++; }\n}\n\n// give a infinite list of distinct string names from\n// the alphabet with trailing single-quotes ('prime')\n// giving A, B, C,..., Y, Z then A', B', C', ... A'', B'', C'' ....\nexport class NameSequence implements ISequence<String> {\n  // next: string;\n  private nameRoots = [\n    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\n    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n    'Y', 'Z',\n    //'a', 'b', 'c', 'd', 'e'\n  ]\n  private nameCount = new Sequence()\n  get next() {\n    let n = this.nameCount.next\n    return this.nameRoots[n % this.nameRoots.length]\n         + (replicate([\"'\"], n).join(''))\n  }\n}\n\nexport class MarkovSequence implements ISequence<string> {\n  generator: MarkovGenerator\n  baseItems: string[] = []\n  generatedItems: string[] = []\n  constructor(private items: string[], order = 2, max = 10) {\n    this.generator = new MarkovGenerator(order, max)\n    this.items.forEach(this.feed)\n  }\n\n  @boundMethod\n  feed(it: string) {\n    this.baseItems.push(it);\n    this.generator.feed(it);\n  }\n\n  generate(): string { return this.generator.generate(); }\n\n  get next(): string {\n    let result = this.generate()\n    let attempts = 0\n\n    while (\n      (\n        this.baseItems.includes(result)\n        || this.generatedItems.includes(result)\n      )\n      && attempts++ < 100\n    ) {\n      result = this.generate()\n    }\n    this.generatedItems.push(result)\n    return result\n  }\n}\n","import { BasicEntity } from \"./types/BasicEntity\";\nimport { boundMethod } from 'autobind-decorator'\nimport { where } from \"./utils/where\";\nimport { isString } from \"./utils/isString\";\nimport { ManageStock, ManageStocks } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass StockManager<T extends BasicEntity> implements ManageStock<T> {\n  constructor(private stocks: Stocks<T>, private stockId: number) {}\n  add(amount: number): void { return this.stocks.add(amount, this.name) }\n  remove(amount: number): void { return this.stocks.remove(amount, this.name) }\n  get list(): T[] { return this.stocks.list() }\n  get count(): number { return this.stocks.count(this.name) }\n  get name() { return this.item.name }\n  get item(): T { return this.stocks.lookupById(this.stockId) }\n}\n\nexport class Stocks<T extends BasicEntity> {\n  private ids: Sequence = new Sequence()\n  private storage: { [key: number]: number; } = {}\n\n  constructor(\n    public name: string,\n    private elements: T[] = []\n  ) { }\n\n  @boundMethod\n  list() { return this.elements }\n\n  get _store() { return this.storage }\n\n  public clear() { this.elements = []; this.storage = {} }\n\n  public create(name: string): ManageStock<T>\n  public create(attributes: { name: string } & Omit<T, 'id' | 'name'>): ManageStock<T>\n  /** Create a new type of element to store */\n  @boundMethod\n  public create(attrs: any) {\n    let name: string | null = null;\n    let attributes: Partial<T> = {}\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    if (isString(name) && this.has(name)) {\n      return this.manage(name);\n    }\n    if (!isString(name)) { throw new Error(\"Name must be a string\") }\n    // const elementIds: number[] = this.list().map(({ id }) => id);\n    const id = this.ids.next; //Math.max(0, ...elementIds) + 1;\n    const theEntity: T = { id, name, ...attributes } as T\n    this.list().push(theEntity);\n    const manage: ManageStock<T> = this.manage(name as string)\n    return manage\n  }\n\n  @boundMethod\n  add(amount: number, name: string) {\n    this.setAmount(name, this.count(name) + amount);\n  }\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.setAmount(name, this.count(name) - amount);\n  }\n\n  @boundMethod\n  zero(name: string): void {\n    this.setAmount(name, 0);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    const element: T = this.lookup(name);\n    const amount = this.storage[element.id] || 0;\n    return amount;\n  }\n\n  has(name: string): boolean {\n    const matching = this.elements.find(where('name', name))\n    return !!matching;\n  }\n\n  @boundMethod\n  lookupById(id: number): T {\n    const matching = this.elements.find(where('id', id))\n    if (matching) {\n      return matching as T;\n    }\n    throw new Error(`No such ${this.name} with id ${id}`);\n  }\n\n  lookup(name: string): T {\n    const matching = this.elements.find(where('name', name))\n    if (matching) {\n      return matching as T;\n    } else {\n      return this.create(name).item\n    }\n  }\n\n  get report(): (T & { amount: number })[] {\n    const items: T[] = this.list()\n    const table = items.flatMap((item: T) => {\n      const id = Number(item.id)\n      const amount = this.storage[id] || 0\n      return { ...item, amount }\n    })\n    return table\n  }\n\n  manage(name: string): ManageStock<T> {\n    return new StockManager<T>(this, this.lookup(name).id)\n  }\n\n  manageAll(): ManageStocks {\n    const { add, remove, count } = this\n    return { add, remove, count, list: () => this.elements }\n  }\n\n  get manager() { return this.manageAll() }\n\n  private setAmount(name: string, amount: number): void {\n    const element: T = this.lookup(name);\n    this.storage[element.id] = amount;\n  }\n}\n","import { Population } from \"./Population\";\nimport { BasicEntity } from \"./types/BasicEntity\";\nimport { Entity, ManageStocks } from \"./types\";\nimport { boundMethod } from \"autobind-decorator\";\n\n// eg map animal (species) names to populations of individual animals...\n\nexport class Registry<U extends BasicEntity, T extends Entity<U>, Pop extends Population<U,T>> {\n  populations: { [species: string]: Pop } = {};\n  species: { [species: string]: U } = {}\n  constructor(\n    public name: string,\n    public popCtor: new (name: string, specie: U) => Pop\n  ) {}\n\n  clear() {\n    this.populations = {}\n  }\n\n  @boundMethod\n  lookup(name: string): Pop {\n    if (this.has(name)) {\n      return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${name}'`);\n    }\n  }\n\n  @boundMethod\n  lookupById(id: number): U { //Population<U,T> {\n    const matching = Object.values(this.species).find(x => x.id === id)\n    if (matching) { //this.has(name)) {\n      return matching\n      // return this.populations[name];\n    } else {\n      throw new Error(`No such ${this.name} '${id}'`);\n    }\n  }\n\n  has(name: string): boolean {\n    return this.populations.hasOwnProperty(name);\n  }\n\n  @boundMethod\n  count(name: string): number {\n    return this.lookup(name).count;\n  }\n\n  @boundMethod\n  list(): U[] {\n    return Object.values(this.species)\n  }\n\n  listByName(name: string): T[] {\n    return this.lookup(name).list();\n  }\n\n  @boundMethod\n  create(name: string, species?: Omit<U, 'name' | 'id'>): Pop { //Population<U,T> {\n    if (this.has(name)) {\n      return this.lookup(name);\n    }\n    let theSpecies: U = { ...species, name, id: this.list().length+1 } as unknown as U; // species.kind points back to name...\n    let population: Pop = new this.popCtor(name, theSpecies);\n    this.populations[name] = population;\n    this.species[name] = theSpecies;\n    return population;\n  }\n\n  get populationList(): Population<U,T>[] { return Object.values(this.populations)}\n\n  get report() {\n    const pops = this.populationList.flatMap((population: Population<U,T>) => {\n      const pop = population\n      if (pop.count > 0) {\n        return { name: pop.name, amount: pop.count}\n      } else {\n        return []\n      }\n    })\n    return pops\n  };\n\n  @boundMethod\n  add(amount: number, name: string): void {\n    this.lookup(name).add(amount)\n  };\n\n  @boundMethod\n  remove(amount: number, name: string): void {\n    this.lookup(name).remove(amount)\n  };\n\n  manageAll(): ManageStocks {\n    const { add, remove, count, list } = this\n    return { add, remove, count, list }\n  }\n  get manager() { return this.manageAll() }\n}\n","import { Model } from \"./Model\";\nimport { Registry } from \"./Registry\";\nimport { Stocks } from \"./Stocks\";\nexport type DeltaSource = Stocks<any> | Registry<any, any, any> \n//<U extends BasicEntity, T extends Entity<U>> = Stocks<T> | Registry<U,T>\nexport type DeltaSourceManager = { add: Function, remove: Function, count: Function, list: Function }\nexport class Delta {\n  public changes: Stocks<any>;\n  constructor(public model: any, public getStocks: (model: Model) => DeltaSource) {\n    let baseline = this.getStocks(model)\n    this.changes = new Stocks(`${baseline.name} (delta)`, baseline.list());\n  }\n  get storage() { return this.changes._store }\n  // evolve(t: number): Delta {\n  //   let stocks = this.getStocks(this.model)\n  //   const flow = { [stocks.name]: stocks.manageAll() }\n  //   this.model.dynamics.each(dynamism => dynamism(flow, t));\n  //   return this;\n  // }\n}\n","import { List } from \"../../collections\";\nimport { Delta, DeltaSource } from \"../Delta\";\nimport { Entity, EvolvingStocks, TimeEvolution } from \"../types\";\nimport { ISimulation } from \"./ISimulation\";\n\nexport abstract class Simulation implements ISimulation {\n  protected ticks: number = 0;\n  protected tracking: string[] = []\n  public dynamics = new List<TimeEvolution>()\n  constructor(public name: string) { }\n  public evolve(e: TimeEvolution) { this.dynamics.add(e) }\n  public step() { return this.flux(this.ticks++) }\n\n  public get report() {\n    return Object.fromEntries(this.tracking.map(target =>\n      [target, (this as any)[target].report]\n    ))\n  }\n\n  private flow(target: string) {\n    const source = (this as any)[target]\n    const theDelta = new Delta(this, (model) => (model as any)[target])\n    const { add, remove } = theDelta.changes.manager\n    const { list, count, lookupById } = source\n    return { lookupById, _delta: theDelta, add, remove, list, count }\n  }\n  \n  private flows(): { [key: string]: { _delta: Delta, lookupById: Function, add: Function } } {\n    const theFlows: {[key: string]: any} = {}\n    this.tracking.forEach(target => theFlows[target] = this.flow(target))\n    return theFlows\n  }\n\n  private flowsReport(flow: { [s: string]: any }) {\n    const table: { [key: string]: any } = {}\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = flow._delta\n      table[name] = Object.fromEntries(\n        Object\n          .entries(theDelta.storage)\n          .map(entry => {\n            const [id, amount] = entry\n            const name = flow.lookupById(Number(id)).name\n            return [ name, amount ]\n          })\n      )\n    })\n    return table\n  }\n\n  private flux(t: number) {\n    const flow: EvolvingStocks = this.flows() as any as EvolvingStocks\n    this.dynamics.each(dynamism => dynamism(flow, t));\n    Object.entries(flow).forEach(([name, flow]) => { \n      const theDelta = (flow as any)._delta\n      this.apply(theDelta, name)\n    })\n    return { changed: this.flowsReport(flow) }\n  }\n\n  private apply(delta: Delta, target: string) {\n    const source: DeltaSource = (this as any)[target] as DeltaSource\n    const manager = source.manager\n    const list = manager.list()\n    const { storage: updated } = delta;\n    const changed: { [elementName: string]: number; } = {};\n    list.forEach((item: Entity<any>) => {\n      if (updated[item.id]) {\n        const deltaAmount = updated[item.id];\n        manager.add(deltaAmount, item.name);\n        changed[item.name] = deltaAmount;\n      }\n    });\n    return { changed };\n  }\n}\n","import { List, Sequence } from \"../collections\";\nimport { IList } from \"../collections/types\";\nimport { BasicEntity } from \"./types/BasicEntity\";\n\nclass Collection<T extends BasicEntity> extends List<T> implements IList<T> {\n  list() { return this.items }\n  private ids = new Sequence()\n  get names(): string[] {\n    // throw new Error('Method not implemented.');\n    return this.items.map(item => item.name)\n  }\n  // private get ids() { return this.it.map(({ id }) => id) }\n  create(attributes: Partial<T>): T {\n    const id = this.ids.next;\n    const theEntity: T = { id, ...attributes } as unknown as T;\n    this.items.push(theEntity);\n    return theEntity\n  }\n\n  lookup(name: string) {\n    return this.items.find(it => it.name === name)\n  }\n}\n\nexport { Collection }\n","import { Sequence } from \"../../collections\"\nimport { Collection } from \"../Collection\"\nimport { Stocks } from \"../Stocks\"\nimport { sample } from \"../utils/sample\"\nimport { BasicEntity } from \"./BasicEntity\"\n\nexport type Substance = BasicEntity\nexport type Entity<T> = BasicEntity & { kind: T }\n\nexport type Quality = 'terrible' | 'poor' | 'adequate' | 'good' | 'excellent'\ntype Size = 'fine' | 'small' | 'medium' | 'large' | 'huge'\nexport type Species = BasicEntity & {\n  name: string\n  size?: Size\n  fitness?: Quality\n}\n\nexport type Individual<T> = Entity<T> & {\n  age: number // maybe simpler to do bornAt?\n}\n\nexport type Creature<T> = Individual<T> & {\n  health: 'dying' | 'unwell' | 'flourishing' | 'triumphant'\n}\n\nexport type Animal = Creature<Species> & {\n  spirit: 'languorous' | 'vigorous' | 'impetuous' | 'ferocious'\n  strength: 'weak' | 'robust' | 'mighty' | 'indomitable'\n  cunning:  'dim' | 'attentive' | 'creative' | 'ingenious'\n  agility:  'clumsy' | 'nimble' | 'spry' | 'balletic'\n}\n\nconst animalIds = new Sequence()\nexport const createAnimal = (name: string, species: Species): Animal => {\n  return {\n    id: animalIds.next,\n    name,\n    kind: species,\n    age: 0,\n    health: sample(['dying', 'unwell', 'flourishing', 'triumphant']),\n    spirit: sample(['languorous', 'vigorous', 'impetuous', 'ferocious']),\n    cunning: sample(['dim', 'attentive', 'creative', 'ingenious']),\n    agility: sample(['clumsy', 'nimble', 'spry', 'balletic']),\n    strength: sample(['weak', 'robust', 'mighty', 'indomitable']),\n  }\n}\n\n// major demographic groupings -- moieties (maybe *this* should be called a Community??)\ntype Wealth = 'impoverished' | 'well-off' | 'luxuriant' | 'decadent'\ntype Sophistication = 'unpretentious' | 'savvy' | 'urbane' | 'sleek'\ntype Power = 'inconsequential' | 'marginal' | 'influential' | 'sovereign'\ntype Knowledge = 'clueless' | 'well-informed' | 'wise' | 'prescient'\n\nexport type Moiety = BasicEntity & {\n  wealth: Wealth\n  sophistication: Sophistication\n  power: Power\n  knowledge: Knowledge\n}\n\nconst moietyIds = new Sequence()\nexport const createMoiety = (name: string): Moiety => {\n  const wealth: Wealth = sample([ 'impoverished', 'well-off', 'luxuriant', 'decadent' ])\n  const sophistication: Sophistication = sample([ 'unpretentious', 'savvy', 'urbane', 'sleek' ])\n  const power: Power = sample([ 'inconsequential', 'marginal', 'influential', 'sovereign' ])\n  const knowledge: Knowledge = sample([ 'clueless', 'well-informed', 'wise', 'prescient' ])\n  return { id: moietyIds.next, name, wealth, sophistication, power, knowledge }\n}\n\ntype Body = Animal\n\ntype Insight = 'dense' | 'intuitive' | 'incisive' | 'brilliant'\ntype Depth = 'superficial' | 'substantial' | 'profound' | 'inscrutable'\ntype Education = 'unlettered' | 'literate' | 'tutored' | 'well-read'\ntype Disposition = 'dismal' | 'hopeful' | 'propitious' | 'roseate'\ntype Mind = {\n  insight: Insight\n  depth: Depth\n  education: Education\n  disposition: Disposition\n}\n\nexport const createMind = (): Mind => {\n  const insight: Insight = sample([ 'dense', 'intuitive', 'incisive', 'brilliant' ])\n  const depth: Depth = sample([ 'superficial', 'substantial', 'profound', 'inscrutable' ])\n  const education: Education = sample([ 'unlettered', 'literate', 'tutored', 'well-read' ])\n  const disposition: Disposition = sample([ 'dismal', 'hopeful', 'propitious', 'roseate' ])\n  return { insight, depth, education, disposition }\n}\n\ntype Wit = 'slow' | 'clever' | 'biting' | 'savage'\ntype Empathy = 'sadistic' | 'generous' | 'benevolent' | 'selfless'\ntype Integrity = 'uncertain' | 'sound' | 'solid' | 'incorruptible'\ntype Beauty = 'ugly' | 'fair' | 'radiant' | 'resplendent'\ntype Soul = {\n  wit: Wit\n  empathy: Empathy\n  integrity: Integrity\n  beauty: Beauty\n}\n\nexport const createSoul = (): Soul => {\n  const wit: Wit = sample([ 'slow', 'clever', 'biting', 'savage' ])\n  const empathy: Empathy = sample([ 'sadistic', 'generous', 'benevolent', 'selfless' ])\n  const integrity: Integrity = sample([ 'uncertain', 'sound', 'solid', 'incorruptible' ])\n  const beauty: Beauty = sample([ 'ugly', 'fair', 'radiant', 'resplendent' ])\n  return { wit, empathy, integrity, beauty }\n}\n\n// type Category = BasicEntity\n// type Item = Entity<Category> & {}\n// type Event = BasicEntity\n// type Incident = Entity<Incident>\n\n// export type Trait = { id: number, name: string, rank: 0 | 1 | 2 | 3 | 4 | 5 }\nexport type Memory = { id: number, name: string, description: string }\n\nexport type Person = Individual<Moiety> & {\n  body: Body\n  mind: Mind\n  soul: Soul\n\n\n  // ie within my moiety, I am (thought of as)...\n  // rank: 'commoner' | 'wellborn'\n  // title?: string\n  // reputation: 'unknown' | 'worthy' | 'adored' | 'revered'\n\n  // individually...\n  things: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n  // stats: ManageStocks //Stocks<Item> // hmmm, maybe we really want a map at a higher-level anyway\n\n  currency: number\n  traits: ManageStocks // IList<Trait>\n\n  // things to draw meters for..\n  meters: { [meterName: string]: Function }\n  memory: Collection<Memory>\n  // philosophy?: Ideology\n  // destiny: 'doomed' | 'commonplace' | 'exceptional' | 'free'\n}\n\nconst personId = new Sequence()\nconst human: Species = { id: -1, name: 'Human Being', size: 'medium' }\nexport const createPerson = (name: string, moiety: Moiety): Person => {\n\n  const inventory = new Stocks<any>(`${name}'s Things`)\n  const traits = new Stocks<any>(`${name}'s Traits`)\n  // const state = new Stocks<any>(`${name}'s State`)\n    // personAttrs.things = inventory.manageAll()\n  return {\n    id: personId.next,\n    kind: moiety,\n    // kind: createMoiety()\n    name,\n    age: 0,\n    body: createAnimal(name, human),\n    mind: createMind(),\n    soul: createSoul(),\n    // rank: 'commoner',\n    // reputation: 'unknown',\n    currency: 0,\n    things: inventory.manageAll(),\n    traits: traits.manageAll(),\n    // stats: state.manageAll()\n    // things: new M\n    meters: {},\n    memory: new Collection<Memory>(),\n  }\n\n}\n\n// const person = (): Person => {\n//   const newPerson: Person = {\n//     id: personId.next()\n//   }\n//   return newPerson\n// }\n\nexport type Recipe = BasicEntity & {\n  produces: { [resourceName: string]: number }\n  consumes?: { [resourceName: string]: number }\n  requiresMachine?: string\n}\n\nexport type Machine = BasicEntity\n\n// export type Task = BasicEntity & {\n//   machine?: string\n//   recipe: string\n// }\n\n// type ManageList = {}\n\nexport type ManageStocks = {\n  add: (amount: number, name: string) => void,\n  remove: (amount: number, name: string) => void,\n  count: (name: string) => number,\n  list: () => any[]\n}\n\nexport type ManageStock<T> = {\n  add: (amount: number) => void,\n  remove: (amount: number) => void,\n  count: number,\n  item: T\n}\n\nexport type ManagePopulation<T> = {\n  count: number\n  birth: (name: string) => T\n  death: (name: string) => T\n  add: (amount: number) => T[]\n  remove: (amount: number) => T[]\n}\n\nexport type ManagePopulationRegistry<T> = {\n  lookup: (name: string) => ManagePopulation<T>\n}\n\n// todo rename\nexport interface EvolvingStocks {\n  [key: string]: ManageStocks\n}\nexport type TimeEvolution = (evolution: EvolvingStocks, ticks: number) => void\n\nexport type StepResult = {\n  changed: { \n    [groupName: string]: { [elementName: string]: number }\n  }\n}\n\n// todo move these model/sim things somewhere else???\nexport type Action = { id: number, name: string, act: Function }\nexport type Policy = { id: number, name: string, manage: Function }\n","import { isString } from \"./utils/isString\";\nimport { boundMethod } from \"autobind-decorator\";\nimport { Entity } from \"./types\";\nimport { Sequence } from \"../collections\";\n\nclass SetHelper {\n  static first<T>(set: Set<T>): T { return set.values().next().value }\n}\n\n// a collection of named individuals...\nconst populationIds: Sequence = new Sequence()\nexport class Population<Specie, Dividual extends Entity<Specie>> {\n  public id = populationIds.next\n  private ids: Sequence = new Sequence()\n  constructor(\n    public name: string,\n    public species?: Specie,\n    protected individuals: Set<Dividual> = new Set(),\n  ) {}\n\n  list() { \n    const theList: Dividual[] = []\n    this.individuals.forEach(individual => theList.push(individual))\n    return theList;\n  }\n  get count() { return this.individuals.size }\n  get first() { \n    return SetHelper.first(this.individuals)\n   }\n  public lookup(name: string): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.name === name) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with name '${name}' in the population of ${this.name}`)\n  }\n\n  @boundMethod\n  public lookupById(id: number): Dividual {\n    let theIndividual = null;\n    this.individuals.forEach(individual => {\n      if (individual.id === id) {\n        theIndividual = individual;\n      }\n    });\n    if (theIndividual) { return theIndividual }\n    throw new Error(`Could not find individual with id ${id} in the population of ${this.name}`)\n  };\n\n  public birth(name: string = `${this.name} ${this.count}`): Dividual {\n    const newborn = this.create(name)\n    return newborn\n  }\n\n  @boundMethod\n  public death(name?: string): Dividual {\n    if (name) {\n      const doomed = this.destroy(name)\n      if (doomed) {\n        return doomed\n      }\n    } else {\n      const doomed = this.first\n      if (doomed) {\n        this.destroy(doomed.name)\n        return doomed\n      }\n    }\n    throw new Error(\"Population already empty!\")\n  }\n\n  public add(amount: number) {\n    const newborns = []\n    for (let i = 0; i < amount; i++) {\n      newborns.push(this.birth())\n    }\n    return newborns\n  }\n\n  public remove(amount: number) {\n    const doneFor = []\n    for (let i = 0; i < Math.min(this.count, amount); i++) {\n      doneFor.push(this.death(this.first.name))\n    }\n    return doneFor\n  }\n\n  protected build(attrs: any) {\n    let name = null;\n    let attributes: Partial<Dividual> = {};\n    // console.log(attrs)\n    if (isString(attrs)) {\n      name = attrs;\n      attributes.name = name;\n    } else {\n      ({ name, ...attributes } = attrs);\n    }\n    \n    const id = this.ids.next; //Math.max(0, ...this.ids) + 1;\n    const theIndividual: Dividual = { id, name, ...attributes } as unknown as Dividual;\n    return theIndividual;\n  }\n\n\n  public create(name: string): Dividual;\n  public create(attrs: Partial<Dividual>): Dividual;\n  @boundMethod\n  public create(attrs: any) {\n    const theIndividual: Dividual = this.build(attrs)\n    this.individuals.add(theIndividual);\n    return theIndividual;\n  }\n\n  public destroy(name: string): Dividual;\n  @boundMethod\n  public destroy(name: string) {\n    const theIndividual: Dividual = this.lookup(name)\n    this.individuals.delete(theIndividual);\n    return theIndividual;\n  }\n\n  get report() {\n    return Object.fromEntries(this.list().map(individual => {\n      return [individual.id, individual.name];\n    }))\n  }\n}\n","import { List, Map } from '../collections';\nimport { Recipe, Moiety, Person, ManageStocks, createPerson, createMoiety } from \"./types\";\nimport { Population } from \"./Population\";\nimport { Collection } from \"./Collection\";\nimport { boundMethod } from 'autobind-decorator';\n\nexport class Community extends Population<Moiety, Person> {\n  moieties: List<Moiety> = new List<Moiety>();\n  obscured: boolean = false // don't display details\n   \n  public recipes = new Collection<Recipe>();\n  public jobs = new Map<Person, Recipe>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  );\n\n  public inventories = new Map<Person, ManageStocks>(\n    worker => worker.id,\n    worker => worker.name,\n    this.lookupById\n  )\n\n  get report(): { [personName: string]: string; } {\n    const entries = this.list()\n      .map(person => [person.id, (this.jobs.get(person) || {name: '?'}).name]);\n    return Object.fromEntries(entries);\n  }\n\n  // okay if we need to override create + build inventories let's do it ??\n  public create(name: string): Person;\n  public create(attrs: Partial<Person>): Person;\n  @boundMethod\n  public create(attrs: any) {\n    const personAttrs = super.build(attrs);\n    const { name, age } = personAttrs;\n    const person: Person = createPerson(name, createMoiety(`${name}'s Gens`)) //, this.species)\n    person.age = age\n    this.individuals.add(person)\n    return person\n  }\n\n  // people have inventories...\n  // and maybe they've declared what they want\n\n  // measureTime(time: number): HumanCalendar {}\n\n  // trade({ resources })\n\n  work({ resources }: { resources: { add: Function; remove: Function; count: Function; }; }): void {\n    const { report } = this.jobs;\n    Object.entries(report).forEach(([_workerName, recipe]: [string, Recipe]) => {\n      this.produce(recipe, resources);\n    });\n  }\n  \n  private produce(recipe: Recipe, resources: { add: Function; remove: Function; count: Function; }) {\n    if (this.mayProduce(recipe, resources)) {\n      if (recipe.consumes) {\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          resources.remove(amount, resource);\n        });\n      }\n      Object.entries(recipe.produces).forEach(([resource, amount]) => {\n        resources.add(amount, resource);\n      });\n    }\n  }\n\n  private mayProduce(recipe: Recipe, resources: { count: Function; }) {\n    let mayProduce = true;\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (resources.count(resource) < amount) {\n          mayProduce = false;\n        }\n      });\n    }\n    return mayProduce;\n  }\n\n}\n","import { Substance, Machine, Animal, Species, Action, Policy, Moiety, Person } from \"../types\"\nimport { Stocks } from \"../Stocks\"\nimport { Registry } from \"../Registry\"\nimport { Simulation } from \"./Simulation\"\nimport { IModel } from \"./IModel\"\nimport { Collection } from \"../Collection\"\nimport { Community } from \"../Community\"\nimport { Population } from \"../Population\"\nimport { Tiles } from \"../Board\"\n\ntype Fauna = Population<Species, Animal>\nexport class Model extends Simulation implements IModel  {\n  tracking = [ 'animals', 'resources' ]\n  get tiles(): Tiles { return [] }\n\n  public people = new Registry<Moiety, Person, Community>('people', Community)\n  public resources = new Stocks<Substance>('resources')\n  public machines  = new Stocks<Machine>('machines')\n  public animals   = new Registry<Species, Animal, Fauna>('wildlife', Population)\n\n  reset() {\n    this.resources.clear()\n    this.machines.clear()\n    this.animals.clear()\n    this.people.clear()\n    this.dynamics.clear()\n  }\n\n  // measurements\n  public metrics: { [name: string]: () => number } = {}\n  public notes: { [name: string]: () => string } = {}\n\n  // interactive elements\n  public actions: Collection<Action> = new Collection<Action>()\n  public policies: Collection<Policy> = new Collection<Policy>()\n\n  send(actionName: string, args: any): void {\n    const action = this.actions.lookup(actionName)\n\n    if (action) {\n      action.act(args)\n    } else {\n      throw new Error(`No such action ${actionName}`)\n    }\n  }\n\n  currentPolicy: Policy | undefined\n  choose(policyName: string): void {\n    // console.log(\"[Model.choose]\", policyName)\n    const policy = this.policies.lookup(policyName)\n    if (policy) {\n      this.currentPolicy = policy\n    } else {\n      throw new Error(`No such policy ${policyName}`)\n    }\n  }\n\n  public step() {\n    if (this.currentPolicy) {\n      // console.log(\"MANAGING\", { policy: this.currentPolicy })\n      this.currentPolicy.manage()\n    }\n    return super.step()\n  }\n}\n\nexport default Model;\n","import { prettyAmount } from \"../utils/prettyAmount\";\n\nexport function presentItem(deltas?: { [elementName: string]: number; }) {\n  return ({ name, amount }: { name: string; amount: number; }) => {\n    const delta = deltas && deltas[name];\n    return <li key={name} title={name} className='Item'>\n      <span className='Title' data-testid='Name'>{name}</span>\n      <span data-testid='Count'>\n        {prettyAmount(amount)}\n      </span>\n      <span data-testid='Delta'>\n        {delta}\n      </span>\n    </li>;\n  };\n}\n","export function Tile({ children, title }: { children?: React.ReactNode; title: string; }) {\n  return <div className='Tile' title={title}>\n    <h5 className='Title'>{title}</h5>\n    {children}\n  </div>;\n}\n","import { Tile } from \"./Tile\";\nimport { Community } from \"../Community\";\nimport { presentIndividual } from \"./presentIndividual\";\n\n\nexport function presentCommunity(community: Community) {\n  return <Tile title={community.name} key={community.id}>\n    <ul aria-label='People'>\n      {community.obscured ? community.list().map(individual => <li key={individual.id}>{individual.name}</li>)\n                          : community.list().map(presentIndividual(community.report))}\n    </ul>\n  </Tile>;\n}\n","import { ManageStocks } from \"../types\";\n\n\nexport function presentIndividual(work: { [key: number]: string; }) {\n  return ({ id, name, things, traits, meters }: {\n    id: number;\n    name: string;\n    things: ManageStocks;\n    traits: ManageStocks;\n    meters: { [key: string]: Function }\n  }) => {\n    const itemNames = things.list().map(thing => thing.name);\n    return <li key={id} title={name} className='Item'>\n      <div className='Title' data-testid='Name'>{name}</div>\n      {Object.entries(meters).map(([meterName, measure]) => {\n        const { value, max } = measure()\n        return <div className='Meter' data-testid={meterName}>\n          <label htmlFor={meterName} style={{paddingRight: 10}}>{meterName}:</label>\n          <meter id={meterName}\n                 style={{ width: 130, height: 14 }}\n                 min=\"0\" max={max}\n                 low={max * 0.33} high={max * 0.66} optimum={max * 0.8}\n                 value={value}>\n              at {value}/{max}\n          </meter>\n        </div>\n      })}\n      {work[id] && work[id] !== '?' && <span data-testid='Status'>{work[id]}</span>}\n      {itemNames.length > 0 && <div className='Subitems' data-testid='Inventory'>\n        <ul>\n          {itemNames.sort((a,b) => a > b ? 1 : -1).map(it => <li key={it} style={{\n              ...(things.count(it) === 0 ? { display: 'none' } : {})\n            }}>\n            {it} <span data-testid={it}  className='Count'>{things.count(it)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      {traits.list().length > 0 && <div className='Traits' data-testid='Trait Ranks'>\n        <ul>\n          {traits.list().map(trait => <li key={trait.id} style={{\n              ...(traits.count(trait.name) === 0 ? { display: 'none' } : {})\n            }}>\n            {trait.name} <span data-testid={trait.name}>{traits.count(trait.name)}</span>\n          </li>)}\n        </ul>\n      </div>}\n\n      \n    </li>;\n  };\n}\n","import { Machine, Moiety, Person } from \"../types\";\nimport { LastDelta } from \"../../ModelPresenter\";\nimport { presentItem } from \"../Model/presentItem\";\nimport './View.css';\nimport { Tile } from \"./Tile\";\nimport { presentCommunity } from \"./presentCommunity\";\nimport { Population } from \"../Population\";\nimport { Community } from \"../Community\";\nimport { useState } from \"react\";\n\nexport type ModelViewProps = {\n  modelName: string;\n  items: { name: string; amount: number; }[];\n  animals: { name: string; amount: number }[];\n  communities: Population<Moiety, Person>[];\n  machines: Machine[];\n  lastChanges: LastDelta;\n  metrics: { [name: string]: number }; //[ { name: string, value: number} ];\n  notes: { [name: string]: string }; //[ { name: string, value: number} ];\n  board: IBoard\n}\n\ninterface IBoard { tiles: string[][], tileColors: { [tile: string]: string }, tileInspect: (x: number, y: number) => string}\n\nconst BoardTable = ({ tiles, tileColors, tileInspect }: IBoard) => {\n  // const [isInspecting, setIsInspecting] = useState(false);\n  const [inspecting, setInspecting] = useState([-1,-1]);\n  const message = inspecting[0] > 0 && inspecting[1] > 0\n    ? tileInspect(inspecting[0], inspecting[1])\n    : <>--</>\n\n  return <div style={{ flexDirection: \"column\"}}>\n    <div>{message}</div>\n    <table style={{\n      // fontFamily: 'monospace',\n      fontFamily: '\"Source Code Pro\", \"Fira Code\", \"Inconsolata\", Menlo, Monaco, \"Courier New\", monospace',\n      // fontWeight: 'bold',\n      fontSize: '8pt',\n      cursor: 'pointer'\n    }}>\n      <tbody>\n        {tiles.map((row: string[], y: number) =>\n          <tr key={`row-${y}`}>\n            {row.map((cell: string, x: number) =>\n              <td\n                style={{\n                  // highlight cell errors\n                  // color: tileInspect(x,y).match(/error/) ? 'red' : tileColors[cell],\n                  color: tileColors[cell],\n                  backgroundColor: inspecting[0] === x && inspecting[1] === y ? 'gray': 'black'\n                }}\n                key={`cell-${x}-${y}}`}\n                onMouseEnter={() => setInspecting([x,y])}\n                onMouseLeave={() => setInspecting([-1,-1])}\n              >{cell}</td>\n            )}\n          </tr>\n        )}\n      </tbody>\n    </table>\n  </div>\n}\n\nexport function ModelView({\n  modelName,\n  items,\n  // individuals,\n  communities,\n  machines,\n  animals,\n  lastChanges,\n  metrics,\n  notes,\n  board,\n  // work\n}: ModelViewProps) {\n  const folks = (communities as Community[]).map(presentCommunity)\n  // console.log({ community: communities[0].list() })\n  return <div className='Model'>\n    <h4 aria-label='Model Title' style={{display: 'none'}}>{modelName}</h4>\n    {board.tiles.length > 0 && <BoardTable {...board} />}\n    {items.length > 0 && (<Tile title='Items'>\n      <ul aria-label='Resources'>\n        {items.map(presentItem(lastChanges.resources))}\n      </ul>\n    </Tile>)}\n    {animals.length > 0 && (\n      <Tile title='Animals'>\n        <ul aria-label='Animals'>\n          {animals.map(presentItem(lastChanges.animals))}\n        </ul>\n      </Tile>)}\n      {communities.length > 0 && <div title='Individuals' style={{display: 'flex'}}>{folks}</div>}\n    {machines.length > 0 && <Tile title='Machines'>\n      <ul>\n        {machines.map(({ name }) => <li key={name}>{name}</li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(metrics).length > 0 && <Tile title='Metrics'>\n      <ul>\n        {Object.entries(metrics).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Count'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n    {Object.keys(notes).length > 0 && <Tile title='Notes'>\n      <ul>\n        {Object.entries(notes).map(([name, value]) => <li title={name} key={name}>\n          {name}\n          <span data-testid='Description'>{value}</span>\n        </li>)}\n      </ul>\n    </Tile>}\n  </div>;\n}\n","import { Model } from './Model';\nimport { IModel } from './IModel';\nimport { ModelView } from '../View/ModelView';\nexport { Model, ModelView }\nexport type { IModel }\nexport default Model\n","// import { IAssembly } from './ecosphere/Assembly';\nimport { ModelView } from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\n\nexport type LastDelta = { [group: string]: { [element: string]: number }}\n\ntype ModelPresenterProps = {\n  model: IModel\n  step: Function \n  send: Function\n  choose: Function\n  lastChanges: LastDelta\n}\n\nconst view = (model: IModel, lastChanges: LastDelta) => {\n  const { actions, resources, people, machines, animals, metrics, notes, tiles, tileColors } = model;\n\n  const props = {\n    modelName: model.name,\n    items: resources.report,\n    communities: people.populationList, //.populations,\n    // individuals: people.list(),\n    // work: people.report,\n    machines: machines.list(),\n    animals: animals.report,\n    actions: actions.list(),\n    metrics: Object.fromEntries(\n      Object.entries(metrics).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    notes: Object.fromEntries(\n      Object.entries(notes).map(\n        ([key, value]) => [key, (value as any as Function)()])\n      ),\n    lastChanges,\n    board: { tiles: tiles || [], tileColors: tileColors || {}, tileInspect: (model.tileInspect || (() => '--')) }\n  }\n\n  return props\n}\n\nexport function ModelPresenter({ model, send, choose, step, lastChanges }: ModelPresenterProps) {\n  return <>\n    <div aria-label='View'>\n      <ModelView {...view(model, lastChanges)} />\n    </div>\n\n    <div aria-label='Controls'>\n      <span title='Run' style={{display: 'none'}}>\n        <button onClick={() => step(true)}>Step</button>\n      </span>\n\n      <span title='Actions'>\n        {model.actions.list().map(({ name }) => <button title={name} key={name} onClick={() => send(name)}>\n          {name}\n        </button>)}\n      </span>\n\n      {model.policies.count > 0 && <div className='Policy' title='Policies'>\n        {/* <h5>Policies</h5> */}\n        {model.policies.list().map(({ name }) => <label key={name}><input\n          type='radio'\n          checked={model.currentPolicy?.name === name}\n          title={name}\n          key={name}\n          onChange={() => choose(name)}\n        />\n        {name}\n        </label>)}\n      </div>}\n    </div>\n  </>;\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { LastDelta } from './ModelPresenter';\nimport { isModel } from './ModelSelector';\n\nexport type ModelAPI = {\n  model: IModel | IAssembly\n  setModel(model: IModel | IAssembly): void\n  step: Function,\n  lastChanges: LastDelta,\n  send: (actionName: string, args: any) => void,\n  choose: (policyName: string, args: any) => void,\n  setDelay: (milliseconds: number) => void\n}\n\n// ticks per sec\n// const ticksPerSecond = (n: number) => n > 0 ? Math.floor(1000 / n) : 1\n// const speeds = {slow: 10, fast: 25, faster: 50, fastest: 80};\nexport function useModel(initialModel: IModel | IAssembly): ModelAPI { //model: IModel = new Model('Hello World')): ModelAPI {\n  const [model, setModel] = useState(initialModel) //new Model('Hello World'))\n\n  const [lastChanges, setLastChanges] = useState({} as LastDelta)\n  const isTest = process.env.NODE_ENV === 'test'\n  const [delay, setDelay] = useState(isTest ? 5000 : 2) //ticksPerSecond(speeds.slow));\n\n  const [shouldStep, step] = useState(false);\n  const [shouldSend, doSend] = useState(false);\n  const [shouldManage, doManage] = useState(false)\n\n  const performStep = () => { step(true); };\n  const [command, setCommand] = useState('')\n  const [policy, setPolicy] = useState('')\n\n  useEffect(() => {\n    if (shouldSend) {\n      if (command && isModel(model)) { model.send(command, {}) }\n      doSend(false)\n    }\n  }, [command, model, shouldSend]);\n\n  useEffect(() => {\n    if (shouldManage) {\n      if (policy && isModel(model)) { model.choose(policy, {}) }\n      doManage(false)\n    }\n  }, [policy, model, shouldManage]);\n\n  const performSend = (actionName: string, args: any) => {\n    setCommand(actionName)\n    doSend(true)\n  }\n\n  const performChoose = (policyName: string, args: any) => {\n    // console.log(\"CHOOSE\", policyName)\n    setPolicy(policyName)\n    doManage(true)\n  }\n\n  useEffect(() => {\n    if (shouldStep && isModel(model)) {\n      let { changed } = model.step();\n      step(false);\n      setLastChanges(changed);\n    }\n  }, [shouldStep, model]);\n\n  useInterval(() => step(true), delay); \n\n  return {\n    model,\n    step: performStep,\n    lastChanges: lastChanges as LastDelta,\n    send: (actionName: string, args: any) => performSend(actionName, args), \n    choose: (policyName: string, args: any) => performChoose(policyName, args),\n    setDelay,\n    setModel,\n  };\n}\n\nfunction useInterval(callback: any, delay: number) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      // @ts-ignore\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { IAssembly } from './ecosphere/Model/Assembly';\nimport Model from './ecosphere/Model';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelPresenter } from './ModelPresenter';\nimport { useModel } from './useModel';\n\nexport const isModel = (maybeModel: IModel | IAssembly): maybeModel is IModel => {\n  return maybeModel instanceof Model;\n}\n\nconst AssemblyPresenter: React.FC<{ assembly: IAssembly }> = ({ assembly }) => {\n  return <>{assembly.models.items.map((theModel: IModel) => {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const { step, send, choose, lastChanges, model } = useModel(theModel);\n    return <>\n    <h4>{theModel.name}</h4>\n    <ModelPresenter\n             key={model.name}\n             step={step}\n             send={send}\n             model={model as IModel}\n             choose={choose}\n             lastChanges={lastChanges}\n           />\n           </>\n  })}</>\n}\n\nexport function ModelSelector({ initialModel, models }: {\n  initialModel: IModel;\n  models: (IModel | IAssembly)[];\n}) {\n  const { step, send, choose, lastChanges, model, setModel } = useModel(initialModel);\n  return <>\n    <Dropdown\n      options={models.map(model => model.name)}\n      onChange={({ value }) => {\n        const theModel = models.find((model: IModel | IAssembly) => model.name === value);\n        if (theModel) { setModel(theModel); }\n      }}\n      value={model.name}\n      placeholder=\"Select a model\" />\n    {isModel(model) ? <ModelPresenter\n                       step={step}\n                       send={send}\n                       model={model}\n                       choose={choose}\n                       lastChanges={lastChanges} />\n                    : <AssemblyPresenter assembly={model} />}\n  </>;\n}\n","// import Model from \"../ecosphere/Model\"\n\nimport Model from \"../ecosphere/Model\"\nimport { Person } from \"../ecosphere/types\"\n\nconst give = (recipient: Person, supplier: Person, n: number, item: string) => {\n  supplier.things.remove(n, item)\n  recipient.things.add(n, item)\n}\n\nconst world = new Model('Avernus')\nconst { resources, animals, people } = world\nconst folks = people.create('Townspeople')\nconst { recipes, jobs } = folks\n\nanimals.create('Fish')\n// resources.create('Fish')\n\n\n// const king = people.create('Maurice')\nconst miner = folks.create('Goldstrom')\nconst minter = folks.create('Octavius')\nconst smelter = folks.create('Smeltmore')\n// //const sheriff = people.create('Donald')\n// const claydigger = people.create('Bartlett')\n// const artist = people.create('Joseph')\nconst fisherman = folks.create('Harold')\n// const chef = people.create('Jethro')\n// const merchant = people.create('Reginald')\n\n// //set inventory\n// merchant.things.add(50, 'Gold Coin')\n\n\n// //create global resources\n// animals.create('Swimming Fish')\n// animals.add(500, 'Swimming Fish')\nresources.create('Gold Ore')\nresources.create('Gold Deposit')\nresources.create('Gold Bar')\nresources.create('Gold Coin')\n\nresources.add(100000000, 'Gold Deposit')\n// resources.create('Clay Deposit')\n// resources.add(10000, 'Clay Deposit')\n\n//create produced goods\n\n\n\n//jobs\n\n// const kingGold = recipes.create({\n//   name: 'Taking Gold',\n//   produces: { 'King Gold': 1 },\n//   consumes: { 'Gold Coin': 1 },\n// })\n\nconst mineGold = recipes.create({\n  name: 'Mining Gold',\n  produces: { 'Gold Ore': 1 },\n  consumes: { 'Gold Deposit': 10 },\n})\n\nconst smeltGold = recipes.create({\n  name: 'Smelt Gold',\n  produces: { 'Gold Bar': 1 },\n  consumes: { 'Gold Ore': 10 }\n})\n\nconst mintCoin = recipes.create({\n  name: 'Minting Gold Coins',\n  produces: { 'Gold Coin': 10 },\n  consumes: { 'Gold Bar': 1 },\n})\n\n// const digClay = recipes.create({\n//   name: 'Digging Clay',\n//   produces: { 'Clay Brick': 1 },\n//   consumes: { 'Clay Deposit': 1 },\n// })\n\n// const castPot = recipes.create({\n//   name: 'Casting Pottery',\n//   produces: { 'Fine Pottery': 1 },\n//   consumes: { 'Clay Brick': 1 },\n// })\n\n// const catchFish = recipes.create({\n//   name: 'Catching Fish',\n//   produces: { 'Caught Fish': 1 },\n//   consumes: { 'Swimming Fish': 1 },\n// })\n\n// const cookFish = recipes.create({\n//     name: 'Cooking Fish',\n//     produces: { 'Cooked Fish': 1 },\n//     consumes: { 'Caught Fish': 1 },\n// })\n\n//Set Jobs\njobs.set(miner, mineGold)\njobs.set(minter, mintCoin)\njobs.set(smelter, smeltGold)\n// jobs.set(claydigger, digClay)\n// jobs.set(artist, castPot)\n// jobs.set(fisherman, cookFish)\n// jobs.set(chef, cookFish)\n\nworld.evolve(({ resources, animals }, t) => {\n  // animals.add(1, 'Swimming Fish')\n\n  folks.work({ resources })\n\n  // employment\n  if (t % 10 === 0) {\n    const thePeople = [miner, minter, smelter]\n    thePeople.forEach(person => {\n      person.things.add(1, 'Gold Coin')\n      resources.remove(1, 'Gold Coin')\n    })\n  }\n\n  // taxation\n  // if (t % 1000 === 0) {\n  //   resources.remove()\n  // }\n\n  // wildlife hunting + fishing\n  if (t % 10 === 0) { // \n    // huntWildlife('Fish')\n    fisherman.things.add(1, 'Fish')\n    animals.remove(1, 'Fish')\n  }\n\n  // trade\n  const thePeople = [miner, minter, smelter]\n  // const theGoods = ['Fish', ]\n  thePeople.forEach(person => {\n    if (fisherman.things.count('Fish') > 3 && person.things.count('Gold Coin') > 5) {\n      give(fisherman, person, 5, 'Gold Coin')\n      give(person, fisherman, 1, 'Fish')\n    }\n  })\n})\n\n\nexport {world as Avernus}\n","import { Sequence } from \"../../collections\";\nimport { Person } from \"../../ecosphere/types\";\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\";\nimport { sample } from \"../../ecosphere/utils/sample\";\n\nexport class MonsterManual {\n  basicCreatures = {\n    Fragment: { hp: 1, evasion: 95 },\n    Light: { hp: 24, evasion: 1 },\n    Fog: { hp: 26, evasion: 1, reflect: 10 },\n    Aura: { hp: 28, evasion: 1, speed: 1 },\n    Shadow: { hp: 38, evasion: 1, speed: 2 },\n    Wisp: { hp: 40, strength: 1, speed: 1, evasion: 1 },\n    Filament: { hp: 43, evasion: 1, speed: 1, counter: 1 },\n    Voice: { hp: 53, evasion: 1, speed: 1, counter: 1, absorb: 1, defense: 1 },\n    Nothing: { hp: 63, regen: 1, speed: 1, defense: 1, reflect: 1 },\n  };\n\n  challengingCreatures = {\n    // 'Gray Mote': { hp: 8, 'magic damage': 3 },\n    Fiendling: { hp: 12, 'holy damage': 1 }, //, speed: 1, counter: 1, evasion: 1 },\n    Gremlin: { hp: 22, speed: 1, counter: 1 }, // evasion: 1 },\n    Goblin: { hp: 30 },  //, 'magic damage': 1 },\n    Kobold: { hp: 40, strength: 1 }, // speed: 2 },\n    Orc: { hp: 48, strength: 1, speed: 1 }, //, counter: 1 },\n  }\n\n  uncommonCreatures = {\n    Rat: { hp: 14, strength: 1, speed: 3, evasion: 1 },\n    Bat: { hp: 18, strength: 2, speed: 2, evasion: 1, },\n    Snake: { hp: 15, strength: 3, speed: 2, evasion: 2, },\n    Blob: { hp: 24, strength: 2, speed: 1, evasion: 1 },\n    Bear: { hp: 30, strength: 3, speed: 2, evasion: 1 },\n    Ghost: { hp: 70, 'magic damage': 1, evasion: 1, counter: 1, speed: 1, absorb: 1, defense: 1 },\n    Rogue: { hp: 74, strength: 2, speed: 1, 'bonus damage': 2, evasion: 2, counter: 2 },\n    Troll: { hp: 83, strength: 2, speed: 2, regen: 1, counter: 1 },\n    Giant: { hp: 95, strength: 2, speed: 2, defense: 1, absorb: 1 },\n  };\n\n  bosses = {\n    Priest: { hp: 57, heal: 4, 'holy damage': 6, defense: 6, 'holy defense': 3, evasion: 2 },\n    Vampire: { hp: 84, strength: 2, speed: 3, 'magic damage': 1, absorb: 2, evasion: 2 },\n    Drake: { hp: 100, strength: 3, speed: 2, regen: 2, 'magic damage': 2, evasion: 2 },\n    Lich: { hp: 140, strength: 4, speed: 6, defense: 6, 'magic damage': 6, evasion: 6 },\n  };\n\n  extraplanar = {\n    Demon: { hp: 166, strength: 3, speed: 6, counter: 6, evasion: 6 },\n    Angel: { hp: 199, evasion: 2, absorb: 2, regen: 2, counter: 9, defense: 9, 'magic defense': 2, 'holy damage': 9 },\n    Archdemon: { hp: 366, absorb: 6, strength: 6, speed: 6, defense: 6, evasion: 6, 'magic damage': 6, 'holy damage': 16 },\n    Dracolith: { hp: 247, strength: 7, 'magic damage': 7, speed: 7, defense: 7, evasion: 7, counter: 7 },\n    Archangel: { hp: 299, absorb: 9, strength: 9, speed: 9, defense: 9, evasion: 9, 'magic defense': 9, 'holy defense': 9, 'holy damage': 99 },\n\n    'Brutal Light': { hp: 123, speed: 2, strength: 6, 'bonus damage': 5, evasion: 4 },\n    'Floating Sigil': { hp: 234, speed: 10, defense: 10, counter: 10 },\n    'Astral Filament': { hp: 1234, strength: 15, absorb: 10, evasion: 5, counter: 1, regen: 1 },\n    'Essence Sphere': { hp: 12345, 'magic damage': 12, 'holy damage': 12, 'bonus damage': 12 },\n  };\n\n  dragons = {\n    // ...and dragons :)\n    'Green Dragon': { hp: 900, strength: 5, speed: 8, defense: 4, 'magic damage': 16, evasion: 24 },\n    'Red Dragon': { hp: 1100, strength: 7, speed: 9, defense: 14, 'magic damage': 26, evasion: 34 },\n    'Blue Dragon': { hp: 2100, strength: 9, speed: 11, defense: 24, 'magic damage': 36, evasion: 44 },\n    'Golden Dragon': { hp: 2400, strength: 11, speed: 15, defense: 34, 'magic damage': 66, evasion: 55 },\n    'Black Dragon': { hp: 2900, strength: 11, speed: 15, defense: 34, 'magic damage': 66, evasion: 55 },\n    'Primordial Dragon': { hp: 3919, strength: 30, speed: 30, defense: 30, 'magic damage': 30, evasion: 30 },\n  };\n\n  rareCreatures = {\n    'Eldritch Lich': { hp: 2500, strength: 8, speed: 6, defense: 4, 'magic damage': 13, evasion: 5 },\n    'Primordial Vampire': { hp: 3800, strength: 3, speed: 10, defense: 10, 'holy defense': 10, 'magic defense': 10, 'magic damage': 3, evasion: 3, absorb: 4 },\n    Leviathan: { hp: 9999, strength: 10, speed: 10, defense: 25, evasion: 25, counter: 25 },\n    ...this.extraplanar,\n    ...this.dragons\n  };\n\n\n  bestiary: { [monster: string]: { [attr: string]: number; }; } = {\n    ...this.basicCreatures,\n    ...this.uncommonCreatures,\n    ...this.challengingCreatures,\n    ...this.rareCreatures,\n    ...this.bosses,\n  };\n\n  basicSubtypes = {\n    Hostile: { strength: 1 }, Intimidating: { strength: 2 },\n    Nimble: { speed: 1 }, Quick: { speed: 2 },\n    Timid: { evasion: 1 }, Spry: { evasion: 2 }, Dancing: { evasion: 3 },\n    Vigilant: { regen: 1 }, Relentless: { regen: 2 },\n    Armored: { defense: 1 }, Hardened: { defense: 2 },\n    Benevolent: { heal: 1 }, Protective: { heal: 2 },\n    Snarling: { counter: 1 },\n\n    Emboldened: { 'bonus damage': 1 },\n    Floating: { evasion: 1, speed: 1 },\n    Crystalline: { reflect: 1 },\n    Glinting: { reflect: 2 },\n    Mobile: { speed: 1 },\n    Coldsnap: { speed: 1, regen: 1 },\n    Blinding: { reflect: 1, absorb: 1 },\n    Noxious: { defense: 1, counter: 1, absorb: 1 },\n  };\n\n  rareSubtypes: { [type: string]: { [attr: string]: number; }; } = {\n    Voracious: { hp: 5, strength: 1, speed: 1 },\n    Vicious: { hp: 10, strength: 1, defense: 1 },\n    Vexatious: { hp: 15, counter: 1, evasion: 1 },\n    Arrogant: { hp: -5, evasion: 1, counter: 1, speed: 1 },\n    Querulous: { hp: -10, strength: 1, speed: 1, regen: 1, absorb: 1, defense: 1 },\n\n    Adventurous: { hp: 5, 'bonus damage': 2 },\n    Questing: { hp: 10, 'bonus damage': 3 },\n\n    Silvered: { reflect: 2 }, Mirrored: { reflect: 3 },\n    Aggressive: { strength: 3 }, Dominating: { strength: 4 },\n    Swift: { speed: 3 }, Accelerated: { speed: 4 },\n    Elusive: { evasion: 4 }, Reluctant: { evasion: 5 }, Hidden: { evasion: 6 }, Invisible: { evasion: 8 }, Imperceptible: { evasion: 15 },\n    Regrowing: { regen: 3 }, Hydra: { regen: 4 },\n    Fortified: { defense: 3 },\n    Angelic: { heal: 3, 'holy damage': 2 },\n    Prismatic: { reflect: 3, absorb: 2, evasion: 1 },\n    // Hardened: { defense: 3, strength: 1, evasion: 1 },\n    Pugnacious: { 'bonus damage': 1, evasion: 1, counter: 1 },\n\n    // Elusive: { evasion: 1, defense: 1, regen: 1 },\n    Augmented: { strength: 1, 'magic damage': 1, 'bonus damage': 1 },\n    Skillful: { defense: 1, strength: 1, speed: 1, evasion: 1, counter: 1 },\n    Skeletal: { hp: -1, evasion: 2, absorb: 1, regen: 1 },\n    Undead: { hp: -1, strength: 1, regen: 1, absorb: 1, speed: 1, evasion: 1 },\n    Zombie: { hp: -2, evasion: 1, regen: 2, strength: 1 },\n    Favored: { hp: 1, strength: 2, speed: 2, 'magic damage': 1, regen: 1, evasion: 1 },\n    Fiendish: { hp: 2, strength: 3, speed: 3, defense: 1, regen: 1, evasion: 2 },\n    Fierce: { hp: 2, strength: 4, speed: 4, defense: 2, absorb: 2, evasion: 3, },\n    Opalescent: { hp: 2, reflect: 4, absorb: 2, evasion: 2, counter: 2, heal: 2 },\n    Cruel: { hp: 3, strength: 5, speed: 5, 'magic damage': 3, 'bonus damage': 2, absorb: 3, regen: 1, evasion: 4 },\n\n    Vortex: { hp: 1, reflect: 10, absorb: 10, evade: 50, counter: 50 },\n    Shadow: { hp: 2, 'magic damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Luminous: { hp: 3, 'holy damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Defiant: { hp: 1, 'bonus damage': 20, absorb: 20, evade: 20, counter: 20 },\n    Devious: { hp: 2, evasion: 2, counter: 20, absorb: 20 },\n    Draconic: { hp: 3, 'magic damage': 1, counter: 20, absorb: 20 },\n  };\n\n  subtypes: { [type: string]: { [attr: string]: number; }; } = {\n    Common: {},\n    Evasive: { evasion: 3, counter: 2 },\n    Retaliatory: { defense: 1, counter: 2 },\n    Inspired: { 'bonus damage': 1 },\n    Infused: { 'bonus damage': 2, 'magic damage': 1 },\n    Radiant: { 'holy damage': 1 },\n    Resplendent: { 'holy damage': 2, strength: 1, speed: 1 },\n    Heavy: { strength: 2, defense: 2 },\n    Titanic: { strength: 4, defense: 2 },\n    Unholy: { 'magic damage': 1, 'holy defense': 1 },\n    Blessed: { 'holy damage': 1, absorb: 1 },\n    Adept: { evasion: 1, counter: 1, defense: 1, strength: 1 },\n    ...this.basicSubtypes,\n    ...this.rareSubtypes,\n  };\n\n\n  perks: { [type: string]: { [attr: string]: number; }; } = {\n    Piercing: { hp: 15, strength: 1, defense: 1, evasion: 1, 'bonus damage': 1, },\n    Blessed: { hp: 15, absorb: 1, defense: 1, regen: 1, 'holy damage': 1, },\n    Enchanted: { hp: 15, defense: 1, evasion: 1 },\n    Clockwork: { hp: 15, defense: 1, speed: 2, evasion: 1 },\n    Phantasmal: { hp: 25, defense: 1, evasion: 4 },\n    Cosmic: { hp: 30, defense: 3, evasion: 3, strength: 3 },\n    Imperious: { hp: 40, defense: 4, 'magic damage': 3, speed: 3 },\n    // Obsidian: { hp: 15, defense: 1, speed: 2, evasion: 1 },\n    // Provocative: { hp: 50, defense: 5, evasion: 3, 'bonus damage': 4, 'magic damage': 3, speed: 3 },\n    // Challenging: { hp: 150, defense: 20, strength: 2, regen: 1, speed: 1, 'bonus damage': 5, evasion: 1 }\n  };\n  monsterIds = new Sequence();\n\n  difficulty = 1; // global multiplier on monster stats\n\n  generateBasicMonster(creature: Person) {\n    let base = sample(Object.keys(this.basicCreatures))\n    let type = randomInteger(0, 20) > 16 ? sample(Object.keys(this.basicSubtypes)) : 'Common';\n    // let type = 'Common'\n    // creature.name = `${type} ${base} (${this.monsterIds.next})`;\n    const name = type === 'Common' ? base : [type, base].join(' ');\n    creature.name = name\n    // creature.things.add(5 + Math.floor(0.05 * cr * cr), 'hp')\n    const crFactor = 1\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.subtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n  }\n\n  generate(creature: Person, cr: number = 1) {\n    if (cr <= 6) { this.generateBasicMonster(creature); return }\n    // console.log(\"generate monster with cr \" + cr);\n    // const simpleCreatures = ['Snake', 'Blob', 'Bat', 'Wisp']\n    let base = sample(Object.keys(this.challengingCreatures)) //cr <= 10 ? sample(Object.keys(this.basicCreatures)) : sample(Object.keys(this.challengingCreatures));\n\n\n    let type = randomInteger(0, 20) > 16 ? sample(Object.keys(this.basicSubtypes)) : 'Common';\n\n    // all subtypes..\n    if (cr >= 20 && randomInteger(0, 20) > 19) { type = sample(Object.keys(this.subtypes)); }\n\n    // all bases\n    if (cr >= 25 && randomInteger(0, 20) > 19) { base = sample(Object.keys(this.bestiary)); }\n\n    const name = type === 'Common' ? base : [type, base].join(' ');\n    creature.name = `${name} (${this.monsterIds.next})`;\n    const adjustedCr = 0.0015 * cr * cr;\n    // creature.things.add(1 + cr + Math.floor(100 * adjustedCr), 'hp')\n\n    const crFactor = this.difficulty + adjustedCr * 2;\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.subtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    creature.things.add(creature.things.count('hp'), 'max hp');\n    if (cr >= 15) {\n      creature.things.add(randomInteger(1, cr/2), 'defense');\n      creature.things.add(randomInteger(1, cr/2), 'strength');\n    }\n    if (cr >= 25) {\n      creature.things.add(randomInteger(1, cr/2), 'evasion');\n      creature.things.add(randomInteger(1, cr/2), 'counter');\n    }\n    if (cr >= 35) {\n      creature.things.add(randomInteger(1, cr/2), 'magic damage');\n      creature.things.add(randomInteger(1, cr/2), 'chain chance');\n    }\n    if (cr >= 45) {\n      creature.things.add(randomInteger(1, cr/2), 'holy damage');\n      creature.things.add(randomInteger(1, cr/2), 'reflect');\n    }\n  }\n\n  generateBoss(creature: Person, cr: number = 1) {\n    const base = sample(Object.keys(this.bosses));\n    const type = sample(Object.keys(this.rareSubtypes));\n    const perk = sample(Object.keys(this.perks));\n    const name = [perk, type, base].join(' ');\n    creature.name = name; // `${name} (${this.monsterIds.next})`\n    const crFactor = this.difficulty + 0.01 * cr;\n    Object.entries(this.bestiary[base]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.rareSubtypes[type]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    Object.entries(this.perks[perk]).forEach(([thing, amount]) => creature.things.add(\n      Math.floor(amount * crFactor), thing));\n    creature.things.add(creature.things.count('hp'), 'max hp');\n  }\n}\n","import { Person } from \"../../ecosphere/types\";\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\";\nimport { sample } from \"../../ecosphere/utils/sample\";\n\nexport class PlayerHandbook {\n  static levelCost(level: number) {\n    // throw new Error(\"Method not implemented.\");\n    return Math.floor(Math.pow(2, 5+level))\n  }\n  // okay, i guess give them the class as a perk... then each level up we can check + bump one of the class\n  // nice to have: sick multi-classing\n  static characterClasses: { [name: string]: { attributes: { [attr: string]: number; }; traits: string[]; }; } = {\n    Fighter: {\n      attributes: {\n        hp: 12,\n        strength: 1,\n        defense: 1,\n        speed: 0,\n        'bonus damage': 0,\n        'chain chance': 0,\n        'max chain': 0,\n      },\n      traits: ['Fitness', 'Combat Veteran']\n    },\n    // Knight: { attributes: { hp: 15, strength: 2, defense: 2, counter: 0, 'max chain': 0, 'chain chance': 0 }, traits: ['Medic'] },\n    // Mage: { attributes: { 'magic damage': 2, 'magic defense': 1, 'holy defense': 0 }, traits: ['Focus'] },\n    // Cleric: { attributes: { heal: 1, 'holy damage': 0, 'holy defense': 0 }, traits: ['Holy Symbol'] },\n    // Monk: { attributes: { hp: 5, 'reflect': 0, defense: 1, 'magic defense': 0, 'hp per step': 0 }, traits: ['Faith'] },\n    // Thief: { attributes: { hp: 10, speed: 1, evasion: 1, counter: 1, 'gold per kill': 0 }, traits: ['Swiftness'] },\n  };\n\n  static attributes: { [attrGroup: string]: string[]; } = {\n    // basic: [\n    // ],\n    common: [\n      'max hp',\n\n      // 'hp per victory',\n      // 'hp per day',\n      // 'hp per step',\n      // 'xp per kill',\n      // 'xp per li',\n      // 'xp per victory',\n      // 'xp per day', //'gold per li'\n      // 'gold per victory',\n      // 'xp per step',\n      // 'gold per day'\n      // 'gold per day',\n      // 'hp per day', // 'gold per day'\n      // 'max hp', 'xp per victory', 'hp per day', 'gold per day', 'xp per li', \n    ],\n    uncommon: [\n      // 'xp per victory',\n      // 'gold per victory',\n      'hp per victory'\n    ],\n    rare: [\n      'hp per day',\n      // 'evasion',\n      // 'crit damage',\n      // 'xp per step',\n      // 'max chain', //'hp per step'\n    ],\n    epic: [\n      'hp per step',\n      // 'xp per day', 'gold per step',\n      // 'xp per day', //'gold per li'\n      // 'counter',\n      // 'crit chance',\n    ],\n    legendary: [\n      'hp per kill',\n      // 'xp per kill',\n      // 'xp per li',\n      // 'xp per victory',\n      // 'counter',\n      // 'evasion',\n      // 'defense',\n      // 'strength',\n      // 'magic damage',\n      // 'holy damage',\n      // 'bonus damage',\n      // 'reflect',\n      // 'heal',\n      // 'damage to all',\n      // 'chain chance',\n    ],\n  };\n\n  // some perks benefits the effective value of a stat by adding % bonus per rank\n  static perkBenefits: { [perk: string]: { [attr: string]: number; }; } = {\n    'Cloaking Robe of Elvenkind': { 'magic damage': 0.05, 'magic defense': 0.5, evasion: 0.25, 'holy defense': 0.05 },\n    'Combat Veteran': { strength: 0.05, defense: 0.05, counter: 0.05, evasion: 0.05, 'crit damage': 0.05, 'bonus damage': 0.05, },\n    'Fine Raiment': { 'magic damage': 0.1, 'magic defense': 0.2, defense: 0.15, evasion: 0.1 },\n    'Holy Symbol': { 'holy damage': 0.5, 'holy defense': 0.15, heal: 0.1, regen: 0.1 },\n    'Royal Armorer': { defense: 0.5, 'holy defense': 0.25, 'magic defense': 0.25, evasion: 0.25 },\n    // Barbarian: { 'bonus damage': 0.5, 'crit damage': 0.05, strength: 0.15, 'chain chance': 0.1, 'max chain': 0.1 },\n    Brutality: { strength: 0.5, speed: 0.25, 'bonus damage': 0.25, 'max chain': 0.1 },\n    Counterweight: { counter: 0.5, evasion: 0.1, 'crit damage': 0.05, 'max chain': 0.1 },\n    Efferverscence: { regen: 0.25, counter: 0.25, 'crit damage': 0.25, 'holy defense': 0.25, 'max chain': 0.25 },\n    Efficacious: { counter: 0.1, evasion: 0.1, 'bonus damage': 0.1, strength: 0.1, defense: 0.1, 'magic defense': 0.1, heal: 0.1 },\n    Opalescence: { reflect: 0.2, absorb: 0.2, evasion: 0.2, defense: 0.2, regen: 0.2, heal: 0.2 },\n    Ethereal: { 'magic damage': 0.25, 'magic defense': 0.25, evasion: 0.5, defense: 0.25 },\n    Faith: { 'holy damage': 0.25, 'holy defense': 0.5, heal: 0.25, regen: 0.1 },\n    Finesse: { 'crit chance': 0.25, 'crit damage': 0.15, 'max chain': 0.05, 'chain chance': 0.1 },\n    Fitness: { strength: 0.1, defense: 0.1, speed: 0.1, evasion: 0.1, counter: 0.1, regen: 0.1 },\n    Fluidity: { 'crit chance': 0.1, 'crit damage': 0.1, evasion: 0.1, counter: 0.1, speed: 0.1 },\n    Dexterity: { defense: 0.25, 'magic defense': 0.1, speed: 0.1, evasion: 0.1, 'chain chance': 0.1 },\n    Precision: { speed: 0.1, 'crit damage': 0.25, evasion: 0.05, 'max chain': 0.1 },\n    Swiftness: { speed: 0.2, counter: 0.15, 'crit chance': 0.15, defense: 0.1 },\n    Rapidity: { speed: 0.5, counter: 0.1, 'crit damage': 0.25, evasion: 0.1 },\n    Medic: { heal: 0.5, regen: 0.1, absorb: 0.1, defense: 0.1 },\n    Vitality: { strength: 0.1, speed: 0.25, regen: 0.5, heal: 0.1 },\n    Whirlwind: { 'chain chance': 0.5, 'max chain': 0.5, 'damage to all': 0.5, 'bonus damage': 0.1 },\n    Focus: { 'magic damage': 0.5, 'magic defense': 0.25, 'holy damage': 0.1, 'holy defense': 0.5 },\n    Iridescence: { 'magic damage': 0.5, 'holy damage': 0.5, 'bonus damage': 0.5, 'damage to all': 0.5 },\n    Concentration: { 'magic defense': 0.25, 'holy defense': 0.5, defense: 0.1, evasion: 0.1, counter: 0.1 },\n    Salvation: { 'holy damage': 0.5, 'holy defense': 0.2, defense: 0.1, reflect: 0.1, absorb: 0.1 },\n  };\n\n  static perks: { [perkGroup: string]: string[]; } = {\n    common: [\n      'Fitness',\n      'Finesse',\n      'Rapidity',\n      'Precision',\n      'Medic',\n      'Focus', // +10% to magic dmg per rank\n    ],\n    uncommon: [\n      'Concentration',\n      'Swiftness',\n      'Fluidity',\n      'Faith',\n      'Combat Veteran',\n      'Efficacious', // small bonuses to many skills\n    ],\n    rare: [\n      'Dexterity',\n      // 'Barbarian',\n      'Brutality',\n      'Ethereal',\n      'Perspicuous',\n      'Vitality', // boost to regen\n    ],\n    epic: [\n      'Iridescence',\n      'Fine Raiment',\n      'Royal Armorer',\n      'Whirlwind', // bonus % to chain chance + damage to all\n    ],\n    legendary: [\n      'Salvation',\n      'Eternal Victory',\n      'Perfectionist',\n      'Effervescence', // decent bonuses to many skills\n      'Opalescence',\n    ]\n  };\n\n  static generate(hero: Person, characterClass: string) {\n    const baseStartingHp = 10;\n    hero.traits.add(1, characterClass)\n    hero.things.add(baseStartingHp, 'hp')\n    hero.things.add(1, 'strength')\n    hero.things.add(1, 'speed')\n    // hero.things.add(randomInteger(1,4), 'evasion')\n    // hero.things.add(randomInteger(1,4), 'counter')\n    const template = this.characterClasses[characterClass];\n    Object.keys(template.attributes).forEach(attr => {\n      const amount = template.attributes[attr]\n      hero.things.add(amount, attr)\n    });\n    (template.traits).forEach(trait => hero.traits.add(1, trait))\n    // hero.things.add(2000, 'xp per li')\n    hero.things.add(15, 'xp per victory')\n    // hero.things.add(1, 'gold per day')\n    // hero.things.add(Math.floor(baseStartingHp * 0.75), 'hp per victory')\n    hero.things.add(Math.floor(baseStartingHp * 1.2), 'max hp')\n    hero.traits.add(4, 'Potion of Life')\n    hero.things.add(1, 'level')\n    for (let i=0; i<4; i++) {\n      this.levelUp(hero)\n    }\n\n    hero.meters = {\n      'health': () => { return { value: hero.things.count('hp'), max: hero.things.count('max hp')}},\n      // 'next level': () =>  {\n      //   return { value: hero.things.count('xp'), max: this.levelCost(hero.things.count('level')) }\n      // }\n    }\n  }\n\n  static levelUp(pc: Person) {\n    const attributeBoosts: { [key: string]: number; } = {\n      // basic: 13,\n      common: 8, // randomInteger(3, 5),\n      uncommon: 5, //randomInteger(2, 3),\n      rare: 3, //randomInteger(1, 2),\n      epic: 2, //randomInteger(0, 1),\n      legendary: 1 //randomInteger(0, 1),\n    };\n\n    Object.keys(this.attributes).forEach(rarity => {\n      for (let i = 0; i < attributeBoosts[rarity]; i++) {\n        const levelAttr = sample(this.attributes[rarity]);\n        if (levelAttr) {\n        const amount = 1; //randomInteger(1,2)\n          pc.things.add(amount, levelAttr);\n          // console.log(`${levelAttr} improves by ${amount}`);\n        }\n      }\n    });\n\n    const perkLevels: { [key: string]: number; } = {\n      common: 5,\n      uncommon: 7,\n      rare: 9,\n      epic: 11,\n      legendary: 13,\n    };\n\n    Object.keys(this.perks).forEach(rarity => {\n      if (pc.things.count('level') % perkLevels[rarity] === 0) {\n        const perk = sample(this.perks[rarity]);\n        if (perk) {\n          console.log(`Gain a rank in ${perk} (${rarity})`);\n          pc.traits.add(1, perk);\n        }\n      }\n    });\n\n    // const classBonuses = PlayerHandbook.characterClasses\n    if (pc.things.count('level') % 3 === 0) {\n      // const classes=[]\n      pc.traits.list().forEach((trait) => {\n        // console.log(trait)\n        if (Object.keys(this.characterClasses).includes(trait.name)) {\n        //   // it's a pc class\n          Object.entries(this.characterClasses[trait.name].attributes).forEach(([attr, value]) => {\n            if (value >= 0 && randomInteger(0,12) > 8) {\n            // if (value === 0) { if (randomInteger(0,12) < 2) return }\n              const amount = value > 0 ? randomInteger(1, Math.max(1,value)) : 1\n              console.log(`${attr} improves by ${amount} (${trait.name})`);\n              pc.things.add(amount, attr)\n            }\n          })\n        }\n      })\n      // trait\n    }\n  }\n}\n","import { boundMethod } from \"autobind-decorator\"\nimport { List, Sequence } from \"../../collections\"\nimport { Community } from \"../../ecosphere/Community\"\nimport Model from \"../../ecosphere/Model\"\nimport { EvolvingStocks, ManageStocks, Person } from \"../../ecosphere/types\"\nimport { randomInteger } from \"../../ecosphere/utils/randomInteger\"\nimport { sample } from \"../../ecosphere/utils/sample\"\nimport { where } from \"../../ecosphere/utils/where\"\nimport { MonsterManual } from \"./MonsterManual\"\nimport { PlayerHandbook } from \"./PlayerHandbook\"\n\n// try to keep magic numbers here?\nclass DungeonMasterGuide {\n  static durations = { round: 104, day: 7000 }\n}\n\n// type SimpleEvent = { at: number }\ntype EventCommon = { id: number, at: number }\ntype EnemyInjured = EventCommon & { kind: 'enemy-injured', enemyName: string, amount: number }\ntype TurnStarted = EventCommon & { kind: 'turn-started' }\ntype Event = EnemyInjured | TurnStarted\nclass Arena extends Model {\n  events = new List<Event>()\n  // emit(event: Event, title?: string, message?: string) {\n    // if (title) { console.log(title) } //\"EVENT\", event)\n  eventIds = new Sequence()\n  enemyInjured(name: string, amount: number) {\n    this.events.add({\n      id: this.eventIds.next,\n      kind: 'enemy-injured',\n      enemyName: name,\n      amount,\n      at: this.ticks\n    })\n      // : `${name} took ${amount} damage`, description: message, kind: event.kind, at: this.ticks })\n  }\n\n  turnStarted() {\n    this.events.add({ id: this.eventIds.next, kind: 'turn-started', at: this.ticks })\n  }\n\n  constructor() {\n    super('The Arena')\n    const globals = [ 'day', 'step', 'li', 'gil', 'kill', 'victory', 'death', 'tpk' ]\n    globals.forEach(resource => this.resources.create(resource))\n    this.people.create('Adventurers')\n    this.spawnHero('Fighter')\n    // this.spawnHero('Cleric')\n    // this.spawnHero(sample(['Monk', 'Mage'])) \n    // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses)))\n    Object.keys(PlayerHandbook.characterClasses).forEach(characterClass => {\n      this.actions.create({ name: `Hire ${characterClass}`, act: () => this.spawnHero(characterClass) })\n    })\n    this.actions.create({ name: `Hire Party`, act: () => {\n      for (let i=0; i<3; i++) {\n        this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n      }\n      // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n      // this.spawnHero(sample(Object.keys(PlayerHandbook.characterClasses))) \n    }})\n    this.people.create('Enemies')\n    // enemies.obscured = true // only show names? really want hp -- more granular/whitelist?\n    this.spawnEnemyParty()\n    this.evolve(this.tick)\n  }\n\n  metrics = {\n    'challenge rating': () => this.challengeRating,\n    // 'damage per tick': () => this.damagePerTick,\n    // turns: () => this.recent('turn-started').length,\n  }\n\n  heroIds = new Sequence()\n  @boundMethod\n  spawnHero(characterClass: string) {\n    const name = `${characterClass} (${this.heroIds.next})`;\n    const hero = this.party.create(name)\n    PlayerHandbook.generate(hero, characterClass)\n  }\n\n  get challengeRating() {\n    if (this.party.count === 0) return -1;\n    const totalLevels = this.party.list().map(adv => adv.things.count('level')).reduce((a, b) => a + b)\n    const cr = 1 \n      + (this.resources.count('step')/1250)\n      + (this.resources.count('day')/14)\n      + (this.party.count) \n      + (totalLevels / this.party.count);\n    return Math.floor(cr);\n  }\n\n  private recent(kind: string): Event[] { return this.recentEvents.filter(where('kind', kind)) }\n\n  metricGrain = 150 //DungeonMasterGuide.durations.round\n  get damagePerTick() {\n    const enemyInjuries: EnemyInjured[] = this.recent('enemy-injured') as EnemyInjured[]\n    // const turns = 1 + this.recent('turn-started').length //this.recentEvents.filter(where('kind', 'turn-started')).length\n    const totalInjuryAmount = enemyInjuries.map((injury: EnemyInjured) => injury.amount).reduce((a, b) => a + b, 0)\n    return (Math.floor(\n      totalInjuryAmount / this.metricGrain //Math.floor(totalInjuryAmount / this.metricGrain)\n    ))\n  }\n\n  get recentEvents() {\n    return this.events.items.filter(e => e.at > this.ticks-this.metricGrain)\n  }\n\n  manual = new MonsterManual()\n\n  @boundMethod\n  spawnEnemyParty() {\n    if (this.party.count === 0) return;\n\n    for (let i = 0; i < randomInteger(1,2+this.party.count); i++) {\n      const enemy = this.enemies.create('new enemy')\n      this.manual.generate(enemy, this.challengeRating)\n    }\n\n    // if (randomInteger(0,12) > 11) {\n    //   const enemy = this.enemies.create('new big enemy')\n    //   this.manual.generateBoss(enemy, this.challengeRating)\n    // }\n  }\n\n  get party() { return this.people.lookup('Adventurers') }\n  get enemies() { return this.people.lookup('Enemies') }\n\n  private injure(defender: Person, amount: number, aggressor: Person, reflected: boolean = false) {\n    const damage = Math.floor( Math.min(defender.things.count('hp'), amount) )\n    if (damage <= 0) return;\n\n    defender.things.remove(damage, 'hp')\n    if (this.enemies.list().includes(defender)) {\n      this.enemyInjured(defender.name, damage)\n    }\n\n    console.log(`${aggressor.name} hit ${defender.name} for ${damage}!`)\n    const absorb = Math.min(this.effective(aggressor, 'absorb'), damage)\n    if (absorb > 0) {\n      const absorption = randomInteger(0,absorb) \n      console.log(`${aggressor.name} absorbed ${absorption} hp!`)\n      this.heal(aggressor, absorption)\n    }\n    if (defender.things.count('hp') > 0) {\n      const reflect = Math.min(this.effective(defender, 'reflect'), damage)\n      if (reflect > 0 && !reflected) {\n        console.log(`${defender.name} reflected ${reflect} damage!`)\n        this.injure(aggressor, reflect, defender, true)\n      }\n      const counter = this.effective(defender, 'counter')\n      if (randomInteger(0,100) < counter) {\n        console.log(`${defender.name} counter-attacked against ${aggressor.name}!`)\n        this.strike(defender, aggressor)\n      }\n    }\n  }\n\n  private effective(person: Person, attribute: string) {\n    const base = person.things.count(attribute)\n    if (base === 0) return 0;\n    let multiplier = 1;\n    Object.keys(PlayerHandbook.perkBenefits).forEach(perk => {\n      const benefits = PlayerHandbook.perkBenefits[perk]\n      const benefitAttrs = Object.keys(benefits)\n      if (benefitAttrs.includes(attribute)) {\n        const ranks = person.traits.count(perk)\n        if (ranks > 0) {\n          const benefit = benefits[attribute] * ranks\n          multiplier += benefit\n        }\n      }\n    })\n    const value = Math.floor(base * multiplier);\n    return value\n  }\n\n  private strike(aggressor: Person, defender: Person) {\n    const holyDefense = this.effective(defender, 'holy defense')\n    const holyDamage = Math.max(0, this.effective(aggressor, 'holy damage') - holyDefense)\n    const magicDefense = this.effective(defender, 'magic defense')\n    const magicDamage = Math.max(0, this.effective(aggressor, 'magic damage') - magicDefense)\n    let physicalDamage = 0;\n    let criticalStrike = false;\n    const evade = 1 + this.effective(defender, 'evasion')\n    const hitRoll = randomInteger(0,100)\n    const hit = hitRoll > Math.min(95, evade * 2)\n    if (hit) {\n      const defense = this.effective(defender, 'defense')\n      const baseDamage = Math.max(1,this.effective(aggressor, 'strength') - defense)\n      const bonus = this.effective(aggressor, 'bonus damage')\n      const critChance = 1 + this.effective(aggressor, 'crit chance')\n      criticalStrike = randomInteger(0,100) < Math.max(50, critChance * 2)\n      if (criticalStrike) {\n        console.log(`${aggressor.name} landed a critical strike on ${defender.name}!`)\n      }\n      physicalDamage = criticalStrike \n        ? baseDamage + bonus + randomInteger(1, this.effective(aggressor, 'crit damage'))\n        : randomInteger(1, baseDamage) + bonus\n    }\n    const overallDamage = magicDamage + physicalDamage + holyDamage\n    if (overallDamage > 0) {\n      this.injure(defender, overallDamage, aggressor)\n    } else {\n      console.log(`${aggressor.name} swung for ${defender.name} but missed!`)\n    }\n  }\n\n  attack(aggressors: Community, defenders: Community) {\n    aggressors.list().forEach(aggressor => {\n      const baseSpeed = 12;\n      const aggSpeed = Math.min(baseSpeed, aggressor.things.count('speed'))\n      const speed = 1+Math.floor(Math.max(baseSpeed - aggSpeed, 0))\n      if (this.ticks % speed === 0) {\n        const damageAll = this.effective(aggressor, 'damage to all')\n        if (damageAll > 0) {\n          defenders.list().forEach(defender => {\n            const damage = randomInteger(1, damageAll)\n            this.injure(defender, damage, aggressor)\n          })\n        }\n\n        // normal attack\n        const defender = sample(defenders.list()) // todo attack-weakest policy..\n        if (defender) {\n          let done = false;\n          const hit = () => this.strike(aggressor, defender)\n\n          hit()\n          const chainChance = this.effective(aggressor, 'chain chance')\n          const maxChain = 1 + this.effective(aggressor, 'max chain')\n          let chain = 0\n          while (!done && chain++ < maxChain) {\n            let chainRoll = randomInteger(0,100)\n            if (chainRoll < chainChance) {\n              console.log(`...and swung again (${chain} times)!`)\n              hit()\n            }\n          }\n        }\n      }\n    })\n  }\n\n  heal(healee: Person, amount: number) {\n    const hp = healee.things.count('hp')\n    const maxHp = healee.things.count('max hp')\n    const maxHeal = maxHp - hp\n    const heal = Math.min(maxHeal, amount)\n    healee.things.add(Math.floor(heal), 'hp')\n  }\n\n  per(unit: string) {\n    this.party.list().forEach(adventurer => {\n      const xp = this.effective(adventurer, `xp per ${unit}`)\n                * (1 + 0.1 * adventurer.traits.count('Perspicuous'))\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n      adventurer.things.add(Math.floor(xp), 'xp')\n\n      const gil = this.effective(adventurer, `gold per ${unit}`)\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n      this.resources.add(Math.floor(gil), 'gil')\n\n      if (adventurer.things.count('hp') < adventurer.things.count('max hp')) {\n        const hp = this.effective(adventurer, `hp per ${unit}`)\n                * (1 + 0.25 * adventurer.traits.count('Perfectionist'))\n        this.heal(adventurer, hp)\n      }\n    })\n  }\n\n  private round() {\n    this.per('round')\n    this.party.list().forEach(adventurer => {\n      const regen = this.effective(adventurer, 'regen')\n      this.heal(adventurer, regen)\n      if (adventurer.things.count('heal')) {\n        this.party.list().forEach(healee => {\n            const health = this.effective(adventurer, 'heal')\n            this.heal(healee, randomInteger(1,health))\n        })\n      }\n\n      if (adventurer.traits.count('Potion of Life') > 0 &&\n          adventurer.things.count('hp') < 0.35 * adventurer.things.count('max hp')) {\n        console.log(`${adventurer.name} drank a potion of life!`)\n        adventurer.traits.remove(1, 'Potion of Life')\n        const health = 30 + randomInteger(1, 12) + this.effective(adventurer, 'heal')\n        this.heal(adventurer, health)\n      }\n    })\n\n    this.enemies.list().forEach(enemy => {\n      this.heal(enemy, this.effective(enemy, 'regen'))\n    })\n  }\n\n  @boundMethod\n  tick({ resources }: EvolvingStocks, t: number) {\n    this.party.list().forEach(adventurer => {\n      const level = adventurer.things.count('level')\n      const levelCost = PlayerHandbook.levelCost(level) \n      if (adventurer.things.count('xp') > levelCost) {\n        adventurer.things.remove(levelCost, 'xp')\n        adventurer.things.add(1, 'level')\n        console.log(`${adventurer.name} level up!`)\n        PlayerHandbook.levelUp(adventurer)\n      }\n    })\n\n    if (t % DungeonMasterGuide.durations.round === 0) {\n      this.round()\n    }\n\n    if (t % DungeonMasterGuide.durations.day === 0) {\n      resources.add(1, 'day')\n      this.per('day')\n    }\n\n    if (this.enemies.count === 0 && this.party.count > 0) {\n      if (t % 5 === 0) {\n        this.resources.add(1, 'step')\n        this.per('step')\n        if (this.resources.count('step') % 500 === 0) {\n          resources.add(1, 'li')\n          this.per('li')\n          // store..\n          const items = [\n            'Potion of Life', // heals ~25 at 50% hp\n            'Healing Salve',\n          ]\n          const rareItems = [\n            'Shell Matrix', // functionally -- resurrect charges (w/ limitations)\n            'Cloaking Robe of Elvenkind', // large % bonus to evade\n            'Counterweight' // large % bonus to counter chance\n          ]\n          const stock = randomInteger(0,20) > 19 ? rareItems : items\n          while (this.resources.count('gil') > 1000) {\n            // give items to leader\n            let recipient = sample(this.party.list()) //[0]\n            recipient.traits.add(1, sample(stock))\n            this.resources.remove(1000, 'gil')\n          }\n        }\n\n        const encounterChance = 60 + this.resources.count('li') + this.party.count\n        const randomEncounter = randomInteger(0,100) > encounterChance\n        if (randomEncounter) { //randomInteger(0,100) > 86) {\n          this.spawnEnemyParty()\n          this.per('encounter')\n        }\n      }\n\n       \n    } else {\n      this.turnStarted()\n      this.per('turn')\n      this.attack(this.party, this.enemies)\n      this.attack(this.enemies, this.party)\n      this.mortalityCheck(resources)\n    }\n  }\n\n  private mortalityCheck(resources: ManageStocks) {\n    this.party.list().forEach(adventurer => {\n      if (adventurer.things.count('hp') <= 0) {\n        if (adventurer.traits.count('Eternal Victory') > 0) {\n          this.heal(adventurer, 200)\n          adventurer.traits.remove(1, 'Eternal Victory')\n        } else if (adventurer.traits.count('Healing Salve') > 0) {\n          this.heal(adventurer, 100)\n          adventurer.traits.remove(1, 'Healing Salve')\n        } else if (adventurer.traits.count('Shell Matrix') > 0) {\n          this.heal(adventurer, 50)\n          adventurer.things.add(150, 'magic hp')\n          adventurer.traits.remove(1, 'Shell Matrix')\n        } else {\n          this.per('death')\n          this.party.destroy(adventurer.name)\n          resources.add(1, 'death')\n          console.log(`${adventurer.name} was slain!`)\n          if (this.party.count === 0) {\n            this.per('tpk')\n            resources.add(1, 'tpk')\n            console.log(\"The party has fallen... The quest is lost.\")\n          }\n        }\n      }\n    })\n\n    this.enemies.list().forEach(enemy => {\n      if (enemy.things.count('hp') <= 0) {\n        this.per('kill')\n        this.enemies.destroy(enemy.name)\n        resources.add(1, 'kill')\n        console.log(`${enemy.name} was slain!`)\n        if (this.enemies.count === 0) {\n          this.per(\"victory\")\n          resources.add(1, 'victory')\n          console.log(\"The party was victorious! The quest continues...\")\n          return\n        }\n      }\n    })\n  }\n}\n\nconst arena = new Arena()\nexport default arena\n","import { boundMethod } from 'autobind-decorator'\nimport { List, Sequence } from '../collections'\nimport { Collection } from '../ecosphere/Collection';\nimport Model from '../ecosphere/Model'\nimport { ManageStocks, Person, Recipe, TimeEvolution } from '../ecosphere/types'\nimport { randomInteger } from '../ecosphere/utils/randomInteger';\nimport { unique } from '../ecosphere/utils/unique';\nimport { where } from '../ecosphere/utils/where';\n\ntype Currency = number\ntype Order = { [itemName: string]: number }\ntype Bill = { id: number, order: Order, price: Currency, account: Receivable }\ninterface Receivable {\n  receive(items: any[], bill: Bill): Currency\n}\n\ntype EventKind = 'order:fulfilled'\ntype Event = { id: number, name: string, description: string, at: number, kind: EventKind }\nexport class Factory extends Model {\n  events = new Collection<Event>()\n  emit(event: EventKind, title?: string, message?: string) {\n    // if (title) { console.log(title) } //\"EVENT\", event)\n    this.events.create({ name: title, description: message, kind: event, at: this.ticks })\n  }\n  private bills = new List<Bill>()\n\n  metrics = {\n    'Production Speed': () => this.deliveryRate,\n    'Total Fulfillments': () => this.fulfillmentEvents.length,\n    'Orders In Queue': () => this.bills.count\n  }\n\n  metricGrain = 100\n  get deliveryRate() {\n    return this.recentEvents.filter(where('kind', 'order:fulfilled')).length / this.metricGrain\n  }\n\n  get recentEvents() {\n    return this.events.list().filter(e => e.at > this.ticks-this.metricGrain)\n  }\n\n  get fulfillmentEvents() {\n    return this.events.list().filter(where('kind', 'order:fulfilled'))\n  }\n\n  constructor(\n    name: string,\n  ) {\n    super(`${name} Factory`)\n  }\n\n  product(name: string, consumes: { [resourceName: string]: number }) {\n    this.actions.create({ name: `Order ${name}`, act: ({ count, deliverTo }: { count: number, deliverTo: Receivable }) => {\n      this.order(count || 20, name, deliverTo || { receive: () => {\n        return 1;\n      }})\n    }})\n\n    this.resources.create(name)\n    this.workers.recipes.create({ name, produces: { [name]: 1 }, consumes });\n  }\n\n  @boundMethod\n  reboot() {\n    this.reset()\n    this.people.create('Workers')\n    this.bills.clear()\n    this.evolve(this.evolution)\n    this.policies.create({ name: 'FIFO', manage: () => {\n        const firstUnfulfilled = this.unfulfilled(this.bills.first)[0]\n        const produceUnfulfilled = this.workers.recipes.lookup(firstUnfulfilled)\n        if (produceUnfulfilled) {\n          this.workers.list().forEach(worker => this.produce(worker, produceUnfulfilled))\n        }\n    }})\n    this.policies.create({ name: 'Round Robin', manage: () => {\n        const allBillsRequested = unique(this.bills.items.flatMap(bill => {\n          return this.unfulfilled(bill)\n        }))\n        this.workers.list().forEach((worker, i) => {\n          const nextUnfulfilled = allBillsRequested[(i % (allBillsRequested.length))]\n          const produceUnfulfilled = this.workers.recipes.lookup(nextUnfulfilled)\n          if (produceUnfulfilled) {\n            this.produce(worker, produceUnfulfilled)\n          }\n        })\n    }})\n\n    this.choose('FIFO')\n  }\n\n  unfulfilled(bill?: Bill) {\n    if (bill === undefined) { return [] }\n    let orderItemNames = Object.keys(bill.order)\n    let unfulfilled: string[] = []\n    orderItemNames.forEach(item => {\n      let order = bill.order[item]\n      let amount = this.resources.count(item)\n      if (amount < order) {\n        unfulfilled.push(item)\n      }\n    })\n    // console.log(\"Unfulfilled from bill: \" + inspect(bill.order))\n    return unfulfilled\n  }\n\n  produce = (worker: Person, recipe: Recipe) => {\n    if (this.canProduce(recipe)) {\n      this.workers.jobs.set(worker, recipe)\n    } else {\n      if (recipe.consumes) {\n        const required: string[] = []\n        Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n          // do we have enough of the resource?\n          if (this.resources.count(resource) < amount) {\n            required.push(resource)\n          }\n        })\n\n        let requirement = required[randomInteger(0,required.length)]; // could sample here..\n        // need to find a recipe that produces requirement\n        let producingRequirement: Recipe | null =  null\n        this.workers.recipes.each(recipe => {\n          if (recipe.produces[requirement]) {\n            producingRequirement = recipe\n          }\n        })\n        if (producingRequirement) {\n        //  this.workers.jobs.set(worker, producingRequirement)\n          this.produce(worker, producingRequirement)\n        }\n      }\n    }\n  }\n\n  missingRequirements = (recipe: Recipe) => {\n    const missing: string[] = []\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (this.resources.count(resource) < amount) {\n          missing.push(resource)\n        }\n      })\n    }\n    return missing\n  }\n\n  canProduce = (recipe: Recipe) => {\n    let mayProduce = true\n    if (recipe.consumes) {\n      Object.entries(recipe.consumes).forEach(([resource, amount]) => {\n        if (this.resources.count(resource) < amount) {\n          mayProduce = false\n        }\n      })\n    }\n    return mayProduce\n  }\n\n  evolution: TimeEvolution = ({ resources }) => {\n    this.manage(resources) \n    if (this.bills.count > 0) {\n      this.workers.work({ resources })\n    }\n  }\n\n  orderIds = new Sequence()\n  order(count: number, itemName: string, account: Receivable): Bill {\n    const bill: Bill = {\n      id: this.orderIds.next,\n      order: { [itemName]: count },\n      account,\n      price: count\n    }\n    this.bills.add(bill)\n    return bill\n  }\n\n  get workers() { return this.people.lookup('Workers') }\n  private manage(resources: ManageStocks) {\n    if (this.bills.count === 0) return;\n\n    // const bill = this.bills.first;\n    this.bills.each(bill => {\n      const orderItemNames = Object.keys(bill.order)\n      const unfilled = this.unfulfilled(bill)\n      const allFulfilled = unfilled.length === 0\n\n      if (allFulfilled) {\n        bill.account.receive([], bill)\n        orderItemNames.forEach(item => {\n          this.resources.remove(bill.order[item], item)\n        })\n        this.bills.remove(bill)\n        this.emit('order:fulfilled', `An order for ${orderItemNames.join(',')} has been fulfilled`)\n      }\n    })\n\n    if (this.currentPolicy) {\n      this.currentPolicy.manage()\n    } else {\n      console.warn(\"No labor policy selected!\")\n    }\n  }\n}\n","export function unique(arr: any[]) {\n  var u = {}, a = [];\n  for (var i = 0, l = arr.length; i < l; ++i) {\n    if (!u.hasOwnProperty(arr[i])) {\n      a.push(arr[i]);\n      // @ts-ignore\n      u[arr[i]] = 1;\n    }\n  }\n  return a;\n}\n","import { Sequence } from '../collections';\nimport { Factory } from './Factory';\n\nconst ids = new Sequence()\n  const factory = new Factory('Zep');\n  factory.reboot();\n  factory.product('Soles', {});\n  factory.product('Laces', {});\n  factory.product('Socks', {});\n  factory.product('Shoes', { 'Soles': 2, 'Laces': 2 });\n  factory.product('Hat', {});\n  factory.product('Belt', {});\n  factory.product('Underwear', {});\n  factory.product('Pants', {});\n  factory.product('Outfit', { 'Pants': 1, 'Belt': 1, 'Hat': 1, 'Socks': 1, 'Shoes': 1 });\n  const managers = factory.people.create('Management')\n  managers.create('Operations Chief');\n  managers.create('Plant Manager');\n  // factory.workers.create('Engineer')\n  factory.machines.create('Robot')\n\n  factory.actions.create({ name: 'Spawn Worker', act: () => { factory.workers.create(`Employee #${ids.next}`); } });\n  export default factory;\n","import { boundMethod } from \"autobind-decorator\";\nimport Model from \"../ecosphere/Model\";\nimport { createMoiety, createPerson, Memory, Person } from \"../ecosphere/types\";\nimport { sample } from \"../ecosphere/utils/sample\";\n\nconst generatePerson = () => {\n  const moiety = createMoiety('A Social Group')\n  const gender = sample(['male', 'female'])\n  const firstName = sample(gender === 'male' ? [ 'Sam', 'Eric', 'Ted', 'Jones' ] : ['Sarah', 'Edna', 'Terri', 'Rosa'])\n  const lastName = sample(['Smith', 'Lever', 'Token', 'Switch', 'Agent', 'Op'])\n  const person = createPerson(firstName + ' ' + lastName, moiety)\n  return person\n}\nclass Citizen extends Model {\n  subject: Person = generatePerson()\n\n  constructor() {\n    super('Citizen');\n\n    // this.people.create('Friends')\n    // this.people.create('Rivals')\n    // this.people.create('Peers')\n    // this.people.create('Family')\n\n    this.resources.create('Happiness')\n    this.resources.create('Money')\n    // this.resources.create('Money')\n\n    this.actions.create({ name: 'New', act: () => {\n      this.subject = generatePerson() \n    }})\n\n    this.evolve(this.evolution)\n  }\n\n  @boundMethod\n  evolution() {}\n\n  metrics = { age: () => this.subject.age, }\n  notes = {\n    'current date': () => this.date.description,\n    'name': () => this.subject.name,\n    'agility': () => this.subject.body.agility,\n    'beauty': () => this.subject.soul.beauty,\n    'cunning': () => this.subject.body.cunning,\n    'depth': () => this.subject.mind.depth,\n    'education': () => this.subject.mind.education,\n    'empathy': () => this.subject.soul.empathy,\n    'insight': () => this.subject.mind.insight,\n    'integrity': () => this.subject.soul.integrity,\n    'spirit': () => this.subject.body.spirit,\n    'strength': () => this.subject.body.strength,\n    'wit': () => this.subject.soul.wit,\n    'knowledge': () => this.subject.kind.knowledge,\n    'power': () => this.subject.kind.power,\n    'sophistication': () => this.subject.kind.sophistication,\n    'wealth': () => this.subject.kind.wealth,\n    'bio': () => this.subject.memory.list().map(this.describeMemory).join('... '),\n  }\n\n  describeMemory(memory: Memory) {\n    return `I remember ${memory.description}`\n  }\n\n  // @boundMethod\n  get date() {\n    let time = this.ticks || 0\n    let secondInterval = 0.1;\n    let seconds = Math.floor(time / secondInterval);\n\n    let second = seconds%60\n    let minute = Math.floor(seconds/60)%60\n    let hour = Math.floor(seconds/(60*60))%24\n    let day = Math.floor(seconds / (60 * 60 * 24));\n    // let week = Math.floor(seconds / (60 * 60 * 24 * 7));\n    // let month = Math.floor(seconds / (60 * 60 * 24 * 7 * 4));\n    // let year = Math.floor(seconds / (60 * 60 * 24 * 365));\n\n    let dayOfWeek = ['Sun', 'Moon', 'Mars', 'Mercury', 'Jupiter', 'Venus', 'Saturn'][day % 7];\n\n    return {\n      dayOfWeek,\n      description: `${dayOfWeek} ${String(hour).padStart(2,'0')}:${String(minute).padStart(2,'0')}:${String(second).padStart(2,'0')}`\n    }\n  }\n}\n\nexport default new Citizen();\n","export type Tiles = string[][]\n\nconst first = <T>(arr: T[], pred: (x: T) => boolean): T => {\n  return arr.filter(pred)[0]\n  // return arr[0]\n}\n\nexport class Board {\n  private tiles: Tiles = []\n\n  view({ overlays }: { overlays: Board[] } = { overlays: []}): Tiles {\n    let viewTiles: Tiles = []\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        viewTiles[y] = viewTiles[y] || []\n        let overlay = overlays.length > 0 && first(overlays, o => {\n          let v = o.at(x,y); return v !== '' && v !== undefined\n          // return o.at(x,y) !== undefined\n        })\n        viewTiles[y][x] = (overlay && overlay.at(x,y))\n                       || this.at(x,y)\n                       || '_'\n      }\n    }\n    return viewTiles;\n  }\n\n  constructor(public width: number, public height: number) {}\n\n  // clear = (x0: string, y0: number, width: number, height: number) => {}\n\n  write = (character: string, x0: number, y0: number) => {\n    let x = x0;\n    let y = y0;\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = character;\n  }\n\n  erase(x: number, y: number) {\n    this.tiles[y] = this.tiles[y] || [];\n    this.tiles[y][x] = ''\n    // throw new Error(\"Method not implemented.\")\n  }\n  \n  drawBox = (char: string, x0: number, y0: number, width: number, height: number, filled?: boolean) => {\n    let x1 = x0 + width; let y1 = y0 + height;\n    for (let x = x0; x <= x1; x++) {\n      for (let y = y0; y <= y1; y++) {\n        if (x === x0 || y === y0 || x === x1 || y === y1) {\n          this.write(char, x, y)\n        } else {\n          if (filled) {\n            this.write(char, x, y)\n          }\n        }\n      }\n    }\n  }\n\n  // get width() { return this.tiles && this.tiles[0] && this.tiles[0].length }\n  // get height() { return this.tiles.length }\n\n  at(x: number, y: number) { //}, defaultValue: string = '') {\n    // if (x >= 0 && x <= this.width && y >= 0 && y <= this.height) {\n      const x0 = x % this.width\n      const y0 = y % this.height\n      if (this.tiles[y0]) {\n        return this.tiles[y0][x0]\n      }\n    // } \n    // return defaultValue\n  }\n\n\n  each(fn: (x: number, y: number, value: string) => void) {\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        fn(x,y,this.at(x,y) || '')\n      }\n    }\n  }\n\n  step(eachCell: (val: string, neighbors: string[], position: [number, number]) => string, defaultValue: string = ''): Tiles {\n    // const ignored = ['*']\n    // console.log(\"Board.step -- start\")\n    let newTiles: Tiles = []\n    this.tiles = this.tiles || []\n    const at = (x: number, y: number) => this.at(x,y) || defaultValue\n    for (let x = 0; x <= this.width; x++) {\n      for (let y = 0; y <= this.height; y++) {\n        let currentValue = at(x,y)\n        if (currentValue !== undefined) {\n          // if (ignored.includes(currentValue)) { continue }\n          let neighbors: string[] = [\n            at(x-1,y-1), at(x,y-1), at(x+1,y-1),\n            at(x-1,y)  , at(x,y),   at(x+1,y),\n            at(x-1,y+1), at(x,y+1), at(x+1,y+1),\n          ]\n          const newCell = eachCell(currentValue, neighbors, [x,y])\n          newTiles[y] = newTiles[y] || []\n          newTiles[y][x] = newCell\n        }\n      }\n    }\n    this.tiles = newTiles\n    return newTiles\n  }\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\n\nclass Building extends Model {\n  width = 80\n  height = 36\n  board: Board = new Board(this.width, this.height)\n  get tiles() { return this.board.view() }\n\n  constructor() {\n    super(\"Perfect Blue Buildings\")\n    this.evolve(this.evolution)\n    // this.board.drawBox('*', 0, 0, 5, 5) //this.width-2, this.height-2)\n\n  }\n\n  building() {\n    let width = randomInteger(2,8)\n    let height = randomInteger(2,3)\n    this.board.drawBox('#', randomInteger(1, this.width - width - 1),\n                            randomInteger(1, this.height - height - 1),\n                            width, height)\n  }\n\n  @boundMethod\n  evolution() {\n    this.building()\n    \n    // this.board.write(sample(['a','b','c']), randomInteger(), 2)\n  }\n}\nconst buildingMaker = new Building()\nexport default buildingMaker;\n","export const clamp = (value: number, min: number, max: number) =>\n  Math.min(Math.max(value, min),max)\n","export const distance = (a: [number, number], b: [number, number]) => {\n  let dx = Math.abs(a[0] - b[0]);\n  let dy = Math.abs(a[1] - b[1]);\n  return Math.sqrt(dx * dx + dy * dy)\n}\n","\nexport function times(n: number, fn: Function) {\n  let results: any[] = []\n  for (let i = 0; i < n; i++) { results.push(fn()) }\n  return results\n}\n","import { NameSequence } from \"../collections/Sequence\";\nimport { Board } from \"./Board\";\nimport { any } from \"./utils/any\";\nimport { clamp } from \"./utils/clamp\";\nimport { distance } from \"./utils/distance\";\nimport { randomInteger } from \"./utils/randomInteger\";\nimport { sample } from \"./utils/sample\";\nimport { times } from \"./utils/times\";\nexport class Heightmap {\n  map: Board = new Board(this.width, this.height);\n  groundLevel = 5\n\n  constructor(public width: number, public height: number) { }\n\n  at(x: number, y: number): number { return parseInt(this.map.at(x,y) || '0', 10) }\n\n  apply(fn: (val: number, neighbors: number[], average: number, position: [number, number]) => number[], rate: number = 1000) {\n    this.map.step((val: string, neighbors: string[], position: [number, number]) => {\n      if (randomInteger(0, 1000) <= rate) {\n        let value = parseInt(val || '0', 10);\n        let neighborValues = neighbors.map(neighbor => parseInt(neighbor || '0', 10));\n        let neighborSum = neighborValues.reduce((a, b) => a + b, 0)\n        let localAverage = Math.floor(\n          (neighborSum + value) / (neighbors.length + 1)\n        );\n        let average = localAverage;\n        let values = fn(value, neighborValues, average, position);\n        let newVal = clamp(sample(values), 0, 9);\n        return String(newVal);\n      } else { return val; }\n    });\n  }\n\n  smooth = () => {\n    this.apply((value, ns, average) => {\n      // cleanup coastlines\n      let above = ns.filter(n => n >= this.groundLevel).length;\n      if (above >= 5 && value < this.groundLevel) { return [value + 1] }\n      else if (above < 4 && value >= this.groundLevel) { return [value - 1] }\n      if (value < average - 1) { return [ value, value + 1, Math.floor((value + average) / 2) ]}\n      if (value > average + 1) { return [ value, value - 1, Math.floor((value + average) / 2) ]}\n      return [ value, ]\n    })\n  };\n\n\n  flow = () => {\n    this.apply((value, ns, average) => {\n      if (value >= average) { return [value] }\n      let immediate = [ns[1], ns[3], ns[5], ns[7]]\n      let max = Math.max(...immediate)\n      let above = ns.filter(n => n >= this.groundLevel).length;\n      if (above >= 6 && value < this.groundLevel) { return [this.groundLevel, this.groundLevel + 1] }\n      if (above === 0) { return [value] }\n      return [\n        max + 1,\n        max,\n        max - 1,\n        value - 1,\n        // ...ns.filter(n => n >= this.groundLevel)\n      ]\n    });\n  };\n\n  erode = (rate = 1000) => {\n    this.apply((value, ns, average) => {\n      if (value < average) { return [value] }\n      return [ value, average, Math.min(...ns) ]\n    }, rate)\n  };\n\n  extrude = (positions: [number, number][]) => {\n    positions.forEach(pos => {\n      let h = parseInt(this.map.at(...pos) || '0', 10)\n      let val = clamp(h+randomInteger(1,9),0,9);\n      if (pos) { this.map.write(String(val), ...pos); }\n    })\n  };\n\n  intrude = (positions: [number, number][], depth: number = 1) => {\n    positions.forEach(pos => {\n      let h = parseInt(this.map.at(...pos) || '9', 10)\n      let val = clamp(h-randomInteger(1,9),0,9);\n      if (pos) { this.map.write(String(val), ...pos); }\n    })\n  };\n\n  bombard = (intensity: number = 1) => {\n    let radius = randomInteger(1,4+randomInteger(0,intensity));\n    let impactSite: [number, number] = [ randomInteger(1, this.width-1), randomInteger(1, this.height-1) ]\n    const distanceToImpact = (pos: [number, number]) => distance(pos, impactSite)\n    let craterPositions: [number, number][] = []\n    let craterEdge: [number, number][] = []\n    for (let x=0; x < this.width; x++) {\n      for(let y = 0; y < this.height; y++) {\n        let d = Math.round(distanceToImpact([x,y]))\n        if (Math.abs(d - radius) < 1) {\n          craterEdge.push([x,y])\n        } else if (d < radius) {\n          craterPositions.push([x,y])\n        }\n      }\n    }\n    this.intrude(craterPositions);\n    this.extrude(craterEdge);\n  }\n\n  orogeny = (mountains: [number, number][]) => {\n    const d100 = randomInteger(0,100)\n    if (d100 < 16) this.extrude(mountains)\n    times(3, this.flow)\n  }\n\n  geoform = (hades: boolean, mountains: [number, number][]) => {\n    const d100 = randomInteger(0,100)\n    if (hades) {\n      this.orogeny(mountains)\n      this.erode()\n      if (d100 < 32) { this.bombard(36); }\n    } else {\n      if (d100 < 14) times(2, () => this.bombard(7) )\n      this.flow()\n      this.erode(4)\n      this.smooth()\n    }\n  };\n\n  componentNames = new NameSequence()\n\n  components(consider: (value: number) => boolean): { [component: string]: [number, number][] } {\n    let componentMap: { [component: string]: [number, number][] } = {}\n    this.map.each((x, y, val) => {\n      if (!!consider(parseInt(val, 10))) {\n        // do we belong to an existing region? (adjacency)\n        let existingComponentNames = Object.keys(componentMap).filter(component => {\n          // are any of the points in r adjacent to this one?\n          let adjacent = any(componentMap[component], ([x1,y1]) => {\n            return distance([x,y], [x1,y1]) <= 1\n          })\n          return adjacent\n        })\n        if (existingComponentNames.length > 0) {\n          let firstAdjacentComponentName = existingComponentNames[0]\n          componentMap[firstAdjacentComponentName].push([x,y])\n          if (existingComponentNames.length > 1) {\n            // merge all regions...\n            existingComponentNames.forEach(component => {\n              // delete that region + add to first region\n              if (component !== firstAdjacentComponentName) {\n                componentMap[firstAdjacentComponentName] = [\n                  ...componentMap[firstAdjacentComponentName],\n                  ...componentMap[component],\n                ]\n                delete componentMap[component]\n              }\n            })\n          }\n        } else {\n          // invent a new region\n          let component = this.componentNames.next;\n          componentMap[component] = [[x,y]]\n        }\n      }\n    })\n    return componentMap\n  }\n\n  regions = () => this.components(val => val >= this.groundLevel)\n  waterways = () => this.components(val => val < this.groundLevel)\n  // todo ranges = () => this.components(val => val >= 8)\n}\n","export const any = <T>(list: Array<T>, pred: (value: T) => boolean) => {\n  for (let i = 0; i < list.length; i++) {\n    if (pred(list[i])) {\n      return true\n    }\n  }\n  return false\n}\n","import { boundMethod } from \"autobind-decorator\";\nimport { Board } from \"../ecosphere/Board\";\nimport { Model } from \"../ecosphere/Model\";\nimport { EvolvingStocks } from \"../ecosphere/types\";\nimport { randomInteger } from \"../ecosphere/utils/randomInteger\";\nimport { construct } from \"../ecosphere/utils/replicate\";\nimport { sample } from \"../ecosphere/utils/sample\";\nimport { Heightmap } from \"../ecosphere/Heightmap\";\n// import { MarkovGenerator } from \"../ecosphere/utils/MarkovGenerator\";\n\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport cityNames from '!!raw-loader!./data/city-names.txt';\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport seaNames from '!!raw-loader!./data/sea-names.txt';\n\nimport { MarkovSequence } from \"../collections/Sequence\";\nclass Cartographer {\n  private regionNamegiver = new MarkovSequence(cityNames.split(\"\\n\"))\n  private waterwayNamegiver = new MarkovSequence(seaNames.split(\"\\n\"))\n\n  // really just need the heightmap i guess??\n  constructor(private world: WorldMap) {}\n\n  // cache heightmap regions + names..\n  _regions: { [rawRegionName: string]: [number, number][] } = {}\n  private regionNames: { [rawRegionName: string]: string } = {}\n\n  get regions() {\n    if (Object.keys(this._regions).length === 0) {\n      this._regions = this.world.elevation.regions()\n    }\n    return this._regions\n  }\n\n  identifyRegion(x: number, y: number): string | undefined {\n    if (this.world.aeon === 'Hadean' || this.world.aeon === 'Archean') {\n      return '(Region ID requires calmer aeon...)'\n    }\n\n    const regionName = Object.keys(this.regions).find(region =>\n      this.regions[region].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (regionName) {\n      if (this.regionNames[regionName] === undefined) {\n        this.regionNames[regionName] = this.regionNamegiver.next\n      }\n      return this.regionNames[regionName]\n    }\n\n    // return '[Unknown Region]'\n  }\n\n  // cache waterways + names...\n  _waterways: { [rawWaterbodyName: string]: [number, number][] } = {}\n  private waterwayNames: { [rawWaterbodyName: string]: string } = {}\n\n  get waterways() {\n    if (Object.keys(this._waterways).length === 0) {\n      this._waterways = this.world.elevation.waterways()\n      console.log(\"Found waterways!\", this._waterways)\n    }\n    return this._waterways\n  }\n\n  identifyWaterway(x: number, y: number): string | undefined {\n    if (this.world.aeon === 'Hadean' || this.world.aeon === 'Archean') {\n      return '(Region ID requires calmer aeon...)'\n    }\n\n    const waterwayName = Object.keys(this.waterways).find(waterway =>\n      this.waterways[waterway].find(([x0,y0]) => x===x0 && y===y0)\n    ) || null\n\n    if (waterwayName) {\n      if (this.waterwayNames[waterwayName] === undefined) {\n        this.waterwayNames[waterwayName] = this.waterwayNamegiver.next\n      }\n      return this.waterwayNames[waterwayName] + ' Sea'\n    }\n\n    // return '[Unknown Region]'\n  }\n\n  identifyRegionOrWaterway(x: number, y: number): string | undefined {\n    if (this.world.aeon === 'Hadean' || this.world.aeon === 'Archean') {\n      return '(Region ID requires calmer aeon...)'\n    }    \n    return this.identifyRegion(x,y) || this.identifyWaterway(x,y) || '(error: unknown region or waterway!)'\n  }\n}\n\ntype Aeon = 'Hadean' | 'Archean' | 'Proterozoic'\nclass WorldMap extends Model {\n  notes = { aeon: () => this.aeon }\n\n  get aeon(): Aeon {\n    let eon: Aeon = 'Hadean';\n    if (this.ticks >= this.mapgenTicks / 2) { eon = 'Archean' }\n    if (this.ticks > this.mapgenTicks) { eon = 'Proterozoic' }\n    return eon;\n  }\n  // aeons = ['Hadean', 'Archean', 'Proterozoic', 'Pharezoic']\n\n  // todo highlight/indicate..\n  // pushpins = { mountains: { 'Everwhite (Peak of Tears)': [10, 10] } }\n\n  width = 200 //20\n  height = 54 //35\n\n  private mapgenTicks = 200\n  elevation: Heightmap = new Heightmap(this.width, this.height)\n  private terrain: Board = new Board(this.width, this.height)\n  // private vegetation: Board = new Board(this.width, this.height)\n\n  private mountainSpots: [number, number][] = []\n  private areaPercent = Math.floor(this.area / 100);\n\n  get tiles() { return this.elevation.map.view({ overlays: [\n    // this.vegetation,\n    // this.terrain,\n    // this.elevation.binaryImage(),\n    // this.elevation.transform(),\n  ] }) }\n\n  @boundMethod\n  tileInspect(x: number, y: number) {\n    const elevation = this.elevation.at(x,y) || 0\n    const li = Math.round(3600 * ( elevation - 4 ) / 5280)\n    const elevationMessage = li === 0 ? 'At sea level' : `${Math.abs(li)} li ${li >= 0 ? 'above' : 'below'} sea level`\n    const regionName = this.cartographer.identifyRegionOrWaterway(x,y)\n    return `${regionName} (${elevationMessage})`\n  }\n\n  protected cartographer = new Cartographer(this)\n\n  tileColors = {\n    // terrain\n    // land\n    '.':  'lightgreen',\n\n    // sea\n    '~': 'midnightblue',\n    ',': 'navy',\n\n    // vegetation...\n    '\\'': 'darkgreen',\n\n    // elevation map\n    '0': 'black',\n    // '1': 'white',\n\n    // heightmap\n    '1': 'black',\n    '2': 'navy',\n    '3': 'midnightblue',\n    '4': 'deepskyblue',\n    '5': 'moccasin',\n    '6': 'forestgreen',\n    '7': 'darkgreen',\n    '8': 'darkslategray',\n    '9': 'gray',\n  }\n\n  // todo profiles? islands/continents/ocean/grasslands/mountains\n\n  constructor() {\n    super(\"Overworld\")\n    this.evolve(this.evolution)\n    this.actions.create({ name: 'Geoform', act: () => {\n      this.ticks = 0\n      this.cartographer._regions = {}\n      this.cartographer._waterways = {}\n    }});\n    // this.reboot()\n  }\n\n  @boundMethod\n  randomPosition(): [number, number] {\n    let x = randomInteger(0, this.width)\n    let y = randomInteger(0, this.height)\n    return [x, y]\n  }\n\n  @boundMethod\n  randomPositionAlongLine(a: [number,number], b: [number,number], jitter: number = 3): [number, number] {\n    let [ax,ay] = a;\n    let [bx,by] = b;\n    let [dx,dy] = [ Math.abs(ax-bx), Math.abs(ay-by) ]\n    if (dx === 0) {\n      // it's vertical so... any points on this column\n      let y = randomInteger(0, this.height)\n      let x = ax\n      return [x, y]\n    } else if (dy === 0) {\n      let x = randomInteger(0, this.width)\n      let y = ay\n      return [x, y]\n    } else {\n      let slope = dy / dx; // rise over run\n      // so eg ay = slope * ax + b\n      //       -b = (slope * ax) - ay\n      //       b = -((slope * ax) - ay)\n      let y0 = (-((slope * ax) - ay))\n      let x = Math.floor(randomInteger(0, this.width))\n      let y = Math.floor((slope * x) + y0)\n      let j = jitter || 1;\n      return [x + randomInteger(-j,j),y + randomInteger(-j,j)]\n    }\n  }\n\n  genHeightmap(t: number) {\n    if (this.mountainSpots.length === 0) {\n      let targetSpotCount = Math.floor(10 * this.areaPercent)\n      let [a,b] = [ this.randomPosition(), this.randomPosition() ]\n      let spots = construct(() => this.randomPositionAlongLine(a,b), targetSpotCount, false)\n      this.mountainSpots = spots\n    }\n\n    this.elevation.geoform(this.aeon === 'Hadean', this.mountainSpots)\n\n    if (t > 0 && t % this.mapgenTicks === 0) {\n      console.log(\"[worldgen] hadean + archean aeons complete\")\n    }\n\n    this.elevation.map.drawBox('0', 0, 0, this.width, this.height)\n    this.elevation.map.drawBox('0', 1, 1, this.width-2, this.height-2)\n  }\n\n  buildTerrain() {\n    this.terrain.each((x,y,_value) => {\n      let height = parseInt(this.elevation.map.at(x,y) || '0')\n      if (height >= 9) {\n        this.terrain.write(\"^\", x, y)\n      } else if (height <= 4) {\n        this.terrain.write(sample([\"~\", ',']), x, y)\n      } else {\n        this.terrain.write('.',x,y)\n      }\n    })\n  }\n\n  // growVegetation() {\n  //   this.vegetation.step((val, _neighbors) => {\n  //     if (val === \"'\") {\n  //       if (_neighbors.length >= 2) { //} || _neighbors.length <= 6) {\n  //         return \"'\"\n  //       }\n  //     } else {\n  //       if (_neighbors.length === 3) {\n  //         return \"'\"\n  //       }\n  //     }\n  //     return ''\n  //   })\n  //   this.vegetation.each((x,y,value) => {\n  //     let h = parseInt(this.elevation.map.at(x,y) || '0')\n  //     // autogenesis\n  //     if (h <= 4 || h >= 8) { this.vegetation.erase(x, y) }\n  //     else if (value === '' && randomInteger(0,100) > 98) {\n  //       if (h >= 4 && h < 8) {\n  //         this.vegetation.write(\"'\", x, y)\n  //       }\n  //     }\n\n\n  //   })\n\n  // }\n\n  get area() { return this.width * this.height }\n\n  @boundMethod\n  evolution({ resources }: EvolvingStocks, t: number) {\n    if (t > 0) {\n      if (t % 100 === 0) { console.log(\"The world is \" + (t / 100) + \" million years old\") }\n      if (t <= this.mapgenTicks) { this.genHeightmap(t) }\n    }\n  }\n}\nconst worldMapMaker = new WorldMap()\nexport default worldMapMaker;\n\n","export default \"Aberdeen\\nAbilene\\nAkron\\nAlbany\\nAlbuquerque\\nAlexandria\\nAllen\\nAllentown\\nAmarillo\\nAmherst\\nAnaheim\\nAnchorage\\nAnn Arbor\\nAntioch\\nApple Valley\\nAppleton\\nArlington\\nArvada\\nAsheville\\nAthens\\nAtlanta\\nAtlantic City\\nAugusta\\nAurora\\nAustin\\nAvondale\\nBakersfield\\nBaltimore\\nBarnstable\\nBarnstable Town\\nBaton Rouge\\nBeaumont\\nBel Air\\nBellevue\\nBellingham\\nBend\\nBerkeley\\nBethlehem\\nBillings\\nBinghamton\\nBirmingham\\nBloomington\\nBoise\\nBoise City\\nBonita Springs\\nBoston\\nBoulder\\nBradenton\\nBrandon\\nBremerton\\nBridgeport\\nBrighton\\nBroken Arrow\\nBronx\\nBrookhaven\\nBrooklyn\\nBrownsville\\nBryan\\nBuffalo\\nBurbank\\nBurlington\\nCambridge\\nCanton\\nCape Coral\\nCarlsbad\\nCarrollton\\nCary\\nCathedral City\\nCedar Rapids\\nCentennial\\nChampaign\\nChandler\\nCharleston\\nCharlotte\\nCharlottesville\\nChattanooga\\nChesapeake\\nChicago\\nChico\\nChula Vista\\nCincinnati\\nClarke County\\nClarksville\\nClearwater\\nCleveland\\nClovis\\nCoeur d’Alene\\nCollege Station\\nColorado Springs\\nColumbia\\nColumbus\\nConcord\\nCoral Springs\\nCorona\\nCorpus Christi\\nCosta Mesa\\nDallas\\nDaly City\\nDanbury\\nDavenport\\nDavidson County\\nDavie\\nDayton\\nDaytona Beach\\nDeltona\\nDenton\\nDenver\\nDes Moines\\nDetroit\\nDover\\nDowney\\nDuluth\\nDurham\\nEast Los Angeles\\nEau Claire\\nEdison\\nEl Cajon\\nEl Centro\\nEl Monte\\nEl Paso\\nElgin\\nElizabeth\\nElk Grove\\nElkhart\\nEnterprise\\nErie\\nEscondido\\nEugene\\nEvansville\\nEverett\\nFairfield\\nFargo\\nFayetteville\\nFitchburg\\nFlint\\nFontana\\nFort Collins\\nFort Lauderdale\\nFort Smith\\nFort Walton Beach\\nFort Wayne\\nFort Worth\\nFrederick\\nFredericksburg\\nFremont\\nFresno\\nFrisco\\nFullerton\\nGainesville\\nGarden Grove\\nGarland\\nGastonia\\nGilbert\\nGilroy\\nGlendale\\nGrand Junction\\nGrand Prairie\\nGrand Rapids\\nGrayslake\\nGreeley\\nGreen Bay\\nGreenBay\\nGreensboro\\nGreenville\\nGresham\\nGulfport\\nGulfport-Biloxi\\nHagerstown\\nHampton\\nHarlingen\\nHarrisburg\\nHartford\\nHavre de Grace\\nHayward\\nHemet\\nHenderson\\nHesperia\\nHialeah\\nHickory\\nHigh Point\\nHighlands Ranch\\nHillsboro\\nHolland\\nHollywood\\nHonolulu\\nHouma\\nHouston\\nHowell\\nHuntington\\nHuntington Beach\\nHuntsville\\nIndependence\\nIndianapolis\\nIndio\\nInglewood\\nIowa City\\nIrvine\\nIrving\\nIslip\\nJackson\\nJacksonville\\nJefferson\\nJersey City\\nJohnson City\\nJoliet\\nJurupa Valley\\nKailua\\nKalamazoo\\nKaneohe\\nKansas City\\nKennewick\\nKenosha\\nKent\\nKilleen\\nKingsport\\nKissimmee\\nKnoxville\\nLa Crosse\\nLacey\\nLafayette\\nLake Charles\\nLakeland\\nLakewood\\nLancaster\\nLansing\\nLaredo\\nLas Cruces\\nLas Vegas\\nLayton\\nLeague City\\nLeesburg\\nLehigh Acres\\nLeominster\\nLewisville\\nLexington\\nLincoln\\nLittle Rock\\nLogan\\nLong Beach\\nLongview\\nLorain\\nLos Angeles\\nLouisville\\nLowell\\nLubbock\\nLynchburg\\nMacon\\nMadison\\nManchester\\nManhattan\\nMarina\\nMarysville\\nMauldin\\nMcAllen\\nMcHenry\\nMcKinney\\nMedford\\nMelbourne\\nMemphis\\nMerced\\nMesa\\nMesquite\\nMetairie\\nMiami\\nMiami Gardens\\nMidland\\nMilwaukee\\nMinneapolis\\nMiramar\\nMission Viejo\\nMobile\\nModesto\\nMonroe\\nMonterey\\nMontgomery\\nMoreno Valley\\nMurfreesboro\\nMurrieta\\nMuskegon\\nMyrtle Beach\\nNampa\\nNaperville\\nNaples\\nNashua\\nNashville\\nNew Bedford\\nNew Haven\\nNew London\\nNew Orleans\\nNew York\\nNew York City\\nNewark\\nNewburgh\\nNewport News\\nNorfolk\\nNormal\\nNorman\\nNorth Charleston\\nNorth Hempstead\\nNorth Las Vegas\\nNorth Port\\nNorwalk\\nNorwich\\nOakland\\nOcala\\nOceanside\\nOdessa\\nOgden\\nOklahoma City\\nOlathe\\nOlympia\\nOmaha\\nOntario\\nOrange\\nOrem\\nOrlando\\nOverland Park\\nOxnard\\nOyster Bay\\nPalm Bay\\nPalm Coast\\nPalm Springs\\nPalmdale\\nPanama City\\nParadise\\nPasadena\\nPaterson\\nPearland\\nPembroke Pines\\nPensacola\\nPeoria\\nPhiladelphia\\nPhoenix\\nPittsburgh\\nPlano\\nPomona\\nPompano Beach\\nPort Arthur\\nPort Orange\\nPort Saint Lucie\\nPort St. Lucie\\nPortland\\nPortsmouth\\nPottstown\\nPoughkeepsie\\nProvidence\\nProvo\\nPueblo\\nPunta Gorda\\nQueens\\nRacine\\nRaleigh\\nRamapo\\nRancho Cucamonga\\nReading\\nRedding\\nReno\\nRenton\\nRialto\\nRichardson\\nRichland\\nRichmond\\nRichmond County\\nRiverside\\nRoanoke\\nRochester\\nRock Hill\\nRockford\\nRoseville\\nRound Lake Beach\\nRound Rock\\nSacramento\\nSaginaw\\nSaint Louis\\nSaint Paul\\nSaint Petersburg\\nSalem\\nSalinas\\nSalisbury\\nSalt Lake City\\nSan Antonio\\nSan Bernardino\\nSan Buenaventura\\nSan Diego\\nSan Francisco\\nSan Jose\\nSan Mateo\\nSandy Springs\\nSanta Ana\\nSanta Barbara\\nSanta Clara\\nSanta Clarita\\nSanta Cruz\\nSanta Fe\\nSanta Maria\\nSanta Rosa\\nSarasota\\nSavannah\\nScottsdale\\nScranton\\nSeaside\\nSeattle\\nSebastian\\nShreveport\\nSimi Valley\\nSioux City\\nSioux Falls\\nSmithtown\\nSouth Bend\\nSouth Lyon\\nSparks\\nSpartanburg\\nSpokane\\nSpring Hill\\nSpring Valley\\nSpringdale\\nSpringfield\\nSt. Cloud\\nSt. George\\nSt. Louis\\nSt. Paul\\nSt. Petersburg\\nStamford\\nStaten Island\\nSterling Heights\\nStockton\\nSunnyvale\\nSunrise Manor\\nSurprise\\nSyracuse\\nTacoma\\nTallahassee\\nTampa\\nTemecula\\nTempe\\nTemple\\nTexas City\\nThe Woodlands\\nThornton\\nThousand Oaks\\nToledo\\nTopeka\\nTorrance\\nTrenton\\nTucson\\nTulsa\\nTurlock\\nTuscaloosa\\nTyler\\nUtica\\nVacaville\\nVallejo\\nVancouver\\nVero Beach\\nVictorville\\nVirginia Beach\\nVisalia\\nVista\\nWaco\\nWarner Robins\\nWarren\\nWashington\\nWaterbury\\nWaterloo\\nWest Covina\\nWest Jordan\\nWest Palm Beach\\nWest Valley City\\nWestminster\\nWichita\\nWilmington\\nWinston\\nWinston-Salem\\nWinter Haven\\nWoodbridge\\nWorcester\\nYakima\\nYonkers\\nYork\\nYoungstown\\nYuba City\\nYuma\\n\";","export default \"Adriatic \\nAegean \\nAmerican\\nAndaman\\nArabian\\nArafura\\nArgentine\\nAustralasian\\nBaffin\\nBalearic \\nBaltic \\nBanda\\nBarents\\nBeaufort \\nBellingshausen \\nBering\\nBlack \\nCaribbean\\nCaspian \\nCelebes \\nCeltic \\nChukchi\\nCooperation \\nCoral\\nCosmonauts\\nSiberian\\nFlores \\nGrau\\nGreenland\\nHudson\\nIonian \\nIrminger\\nJava \\nKara\\nLabrador\\nLaccadive\\nLaptev\\nLazarev\\nLevantine \\nLibyan \\nMawson \\nMediterranean\\nMolucca \\nNorwegian\\nOman \\nPhilippine\\nRed \\nRiiser-Larsen\\nRoss\\nSargasso\\nScotia\\nSolomon\\nSomov\\nSulu \\nTasman\\nTimor \\nTyrrhenian \\nWeddell\\nYellow \\n\";","// todo but -- instead of simple markov we should be able to generate a sensible language\n// (goals are: generate a few verb cores + basic vocab; translating significant names; assemble a few full sentences)\n\nimport { Model } from \"../ecosphere/Model\"\nimport { sample } from \"../ecosphere/utils/sample\"\nimport { times } from \"../ecosphere/utils/times\"\n\n// language families: Aelvenic -- Dwarvic -- Celestial/Infernal --\n\n// mostly just care about generating 'kernels' of words..?\ntype Kernel = string\nconst kernels = [\n  'ae', 'b', 'ch', 'd',\n  'f', 'g', 'j', 'k', 'l', 'll', 'm',\n  'n', 'p', 'r', 's', 'sh', 't', 'th',\n  'oo', 'uh', 'v', 'w', 'z', 'zh'\n]\ntype Root = Kernel[]\nconst verb = (): Root => {\n  const root: Kernel[] = times(3, () => sample(kernels))\n  return root\n}\n\n\nconst vowels = [\n  'a', 'ai', 'au', 'e', 'ei', 'i', 'o', 'ou', 'u', 'y', 'uy' ]\n\n// type Category = 'person' | 'number' | 'tense' | 'aspect'\n// type Person = 'zeroth' | 'first' | 'second' | 'third'\ntype Inflection = string \ntype NumberInflection = { singular: Inflection, plural: Inflection }\ntype Conjugations = {\n  infinitive: Inflection,\n  person: {\n    first: NumberInflection,\n    second: NumberInflection,\n    third: NumberInflection\n  } //, first: Inflection, second: Inflection, third: Inflection },\n}\n\n// type Verb = Map<Root, Conjugations>\n\nconst conjugate = (\n  root: Root,\n  // person: Person,\n  // number: 'one' | 'many',\n  // tense: 'past' | 'present' | 'future',\n  // aspect\n): Conjugations => {\n  // const reductions = { 'uh': \"'\", 'll': 'y', 'oo': 'u', 'ae': 'a' }\n  // map over reductions\n  // root.map(kernel => {\n  //   return kernel === 'uh' ? \"'\" : 'u'\n  // })\n  // root.join()\n  const inflect = () => root.reduce((acc, kernel) => {\n        return [ acc, kernel ].join(sample(vowels))\n      })\n  const conjugations: Conjugations = {\n    infinitive: inflect(),\n    person: {\n      first: { singular: inflect(), plural: inflect() },\n      second: { singular: inflect(), plural: inflect() },\n      third: { singular: inflect(), plural: inflect() }\n      // second: inflect(),\n      // third: inflect()\n    }\n  }\n  return conjugations\n}\n\n// type Verb = 'read' | 'write'\nexport class Language extends Model {\n  verbs = {\n    read: verb(),\n    write: verb(),\n  }\n  vocabulary = {\n    writing: conjugate(this.verbs.write)\n  }\n  // write = verb()\n  writing = conjugate(this.verbs.write)\n\n  notes = {\n    // '[no one] writes': () => this.writing.person.zero,\n    'To write (infinitive)': () => this.writing.infinitive,\n    'I write': () => this.writing.person.first.singular,\n    'You write': () => this.writing.person.second.singular,\n    'He/she/it writes': () => this.writing.person.third.singular,\n    'We write': () => this.writing.person.first.plural,\n    'You all write': () => this.writing.person.second.plural,\n    'They write': () => this.writing.person.third.plural,\n  }\n\n  //present = (verb: string) => {\n  //  'To write (infinitive)': () => this.writing.infinitive,\n  //  'I write': () => this.writing.person.first.singular,\n  //  'You write': () => this.writing.person.second.singular,\n  //  'He/she/it writes': () => this.writing.person.third.singular,\n  //  'We write': () => this.writing.person.first.plural,\n  //  'You all write': () => this.writing.person.second.plural,\n  //  'They write': () => this.writing.person.third.plural,\n  //}\n}\n","import { Avernus } from \"./Avernus\"\nimport arena from \"./Arena\"\n// import { Society } from \"./Society\"\nimport zep from \"./zep\"\nimport Citizen from \"./Citizen\"\nimport Building from \"./Building\"\nimport worldMapMaker from \"./WorldMap\"\nimport { Language } from \"./Language\"\n\nconst models = [\n  worldMapMaker,\n  Building,\n  arena,\n  zep,\n  Avernus,\n  Citizen,\n  new Language(\"Aelven\"),\n  // Society,\n]\n\nexport default models\n\n","\nimport './App.css';\nimport { IModel } from \"./ecosphere/Model/IModel\";\nimport { ModelSelector } from './ModelSelector';\nimport models from './examples';\n\ntype ApplicationProps = {\n  model: IModel\n}\n\nfunction App({ model: initialModel }: ApplicationProps) {\n\n  return <div className=\"App\">\n    {/* @ts-ignore */}\n    <ModelSelector models={models} initialModel={initialModel} />\n  </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport models from './examples';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App model={models[0]} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}